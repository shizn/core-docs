items:
- uid: System.Net.HttpWebRequest
  commentId: T:System.Net.HttpWebRequest
  id: HttpWebRequest
  parent: System.Net
  children:
  - System.Net.HttpWebRequest.Abort
  - System.Net.HttpWebRequest.Accept
  - System.Net.HttpWebRequest.AllowReadStreamBuffering
  - System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  - System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  - System.Net.HttpWebRequest.ContentType
  - System.Net.HttpWebRequest.ContinueTimeout
  - System.Net.HttpWebRequest.CookieContainer
  - System.Net.HttpWebRequest.Credentials
  - System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)
  - System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)
  - System.Net.HttpWebRequest.HaveResponse
  - System.Net.HttpWebRequest.Headers
  - System.Net.HttpWebRequest.Method
  - System.Net.HttpWebRequest.RequestUri
  - System.Net.HttpWebRequest.SupportsCookieContainer
  - System.Net.HttpWebRequest.UseDefaultCredentials
  langs:
  - csharp
  - vb
  name: HttpWebRequest
  fullName: System.Net.HttpWebRequest
  type: Class
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HttpWebRequest
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 10
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Provides an HTTP-specific implementation of the <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class provides support for the properties and methods defined in <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> and for additional properties and methods that enable the user to interact directly with servers using HTTP.</p>\n<p>Do not use the <xref href=\"System.Net.HttpWebRequest.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref> constructor. Use the <see cref=\"Overload:System.Net.WebRequest.Create\"></see> method to initialize new <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> objects. If the scheme for the Uniform Resource Identifier (URI) is <code>http://</code> or <code>https://</code>, <see cref=\"Overload:System.Net.WebRequest.Create\"></see> returns an <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The <xref href=\"System.Net.HttpWebRequest.GetResponse\" data-throw-if-not-resolved=\"false\"></xref> method makes a synchronous request to the resource specified in the <xref href=\"System.Net.HttpWebRequest.RequestUri\" data-throw-if-not-resolved=\"false\"></xref> property and returns an <xref href=\"System.Net.HttpWebResponse\" data-throw-if-not-resolved=\"false\"></xref> that contains the response object. The response data can be received by using the stream returned by <xref href=\"System.Net.HttpWebResponse.GetResponseStream\" data-throw-if-not-resolved=\"false\"></xref>. If the response object or the response stream is closed, remaining data will be forfeited. The remaining data will be drained and the socket will be re-used for subsequent requests when closing the response object or stream if the following conditions hold: it's a keep-alive or pipelined request, only a small amount of data needs to be received, or the remaining data is received in a small time interval. If none of the mentioned conditions hold or the drain time is exceeded, the socket will be closed. For keep-alive or pipelined connections, we strongly recommend that the application reads the streams until EOF. This ensures that the socket will be re-used for subsequent requests resulting in better performance and less resources used.</p>\n<p>When you want to send data to the resource, the <xref href=\"System.Net.HttpWebRequest.GetRequestStream\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object to use to send data. The <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> methods provide asynchronous access to the send data stream.</p>\n<p>For client authentication with <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref>, the client certificate must be installed in the My certificate store of the current user.</p>\n<p>The <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class throws a <xref href=\"System.Net.WebException\" data-throw-if-not-resolved=\"false\"></xref> when errors occur while accessing a resource. The <xref href=\"System.Net.WebException.Status\" data-throw-if-not-resolved=\"false\"></xref> property contains a <xref href=\"System.Net.WebExceptionStatus\" data-throw-if-not-resolved=\"false\"></xref> value that indicates the source of the error. When <xref href=\"System.Net.WebException.Status\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Net.WebExceptionStatus.ProtocolError\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Net.WebException.Response\" data-throw-if-not-resolved=\"false\"></xref> property contains the <xref href=\"System.Net.HttpWebResponse\" data-throw-if-not-resolved=\"false\"></xref> received from the resource.</p>\n<p>\n<xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> exposes common HTTP header values sent to the Internet resource as properties, set by methods, or set by the system; the following table contains a complete list. You can set other headers in the <xref href=\"System.Net.HttpWebRequest.Headers\" data-throw-if-not-resolved=\"false\"></xref> property as name/value pairs. Note that servers and caches may change or add headers during the request.</p>\n<p>The following table lists the HTTP headers that are set either by properties or methods or the system.</p>\n<p>Header </p>\n<p>Set by </p>\n<table><tbody><tr><td>\n<p>Accept </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.Accept\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Connection </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.Connection\" data-throw-if-not-resolved=\"false\"></xref> property, <xref href=\"System.Net.HttpWebRequest.KeepAlive\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Content-Length </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.ContentLength\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Content-Type </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.ContentType\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Expect </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.Expect\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Date </p>\n</td><td>\n<p>Set by the system to current date. </p>\n</td></tr><tr><td>\n<p>Host </p>\n</td><td>\n<p>Set by the system to current host information. </p>\n</td></tr><tr><td>\n<p>If-Modified-Since </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.IfModifiedSince\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Range </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</td></tr><tr><td>\n<p>Referer </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.Referer\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Transfer-Encoding </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.TransferEncoding\" data-throw-if-not-resolved=\"false\"></xref> property (the <xref href=\"System.Net.HttpWebRequest.SendChunked\" data-throw-if-not-resolved=\"false\"></xref> property must be <strong>true</strong>). </p>\n</td></tr><tr><td>\n<p>User-Agent </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.UserAgent\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr></tbody></table>\n<p>\n<xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> is registered automatically. You do not need to call the <xref href=\"System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)\" data-throw-if-not-resolved=\"false\"></xref> method to register <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> before using URIs beginning with <code>http://</code> or <code>https://</code>.</p>\n<p>The local computer or application config file may specify that a default proxy be used. If the <xref href=\"System.Net.HttpWebRequest.Proxy\" data-throw-if-not-resolved=\"false\"></xref> property is specified, then the proxy settings from the <xref href=\"System.Net.HttpWebRequest.Proxy\" data-throw-if-not-resolved=\"false\"></xref> property override the local computer or application config file and the <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> instance will use the proxy settings specified. If no proxy is specified in a config file and the <xref href=\"System.Net.HttpWebRequest.Proxy\" data-throw-if-not-resolved=\"false\"></xref> property is unspecified, the <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class uses the proxy settings inherited from Internet Explorer on the local computer. If there are no proxy settings in Internet Explorer, the request is sent directly to the server.</p>\n<p>The <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class parses a proxy bypass list with wildcard characters inherited from Internet Explorer differently than the bypass list is parsed directly by Internet Explorer. For example, the <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class will parse a bypass list of \"nt*\" from Internet Explorer as a regular expression of \"nt.$\". This differs from the native behavior of Internet Explorer. So a URL of \"<code>http://intxxxxx</code>\" would bypass the proxy using the <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class, but would not bypass the proxy using Internet Explorer.</p>\n<p>The Framework caches SSL sessions as they are created and attempts to reuse a cached session for a new request, if possible. When attempting to reuse an SSL session, the Framework uses the first element of <xref href=\"System.Net.HttpWebRequest.ClientCertificates\" data-throw-if-not-resolved=\"false\"></xref> (if there is one), or tries to reuse an anonymous sessions if <xref href=\"System.Net.HttpWebRequest.ClientCertificates\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n<p>For security reasons, cookies are disabled by default. If you want to use cookies, use the <xref href=\"System.Net.HttpWebRequest.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> property to enable cookies.</p>\n<p>The .NET Framework 4.6 includes a new security feature that blocks insecure cipher and hashing algorithms for connections. Applications using TLS/SSL through APIs such as HttpClient, HttpWebRequest, FTPClient, SmtpClient, SslStream, etc. and targeting .NET Framework 4.6 get the more-secure behavior by default.</p>\n<p>Developers may want to opt out of this behavior in order to maintain interoperability with their existing SSL3 services OR TLS w/ RC4 services. <see href=\"https://support.microsoft.com/kb/3069494\">This article</see> explains how to modify your code so that the new behavior is disabled.</p>\n"
  example:
  - "\n<p>The following code example creates an <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> for the URI http://www.contoso.com/.</p>Classic HttpWebRequest Example#1"
  syntax:
    content: 'public class HttpWebRequest : WebRequest'
    content.vb: >-
      Public Class HttpWebRequest
          Inherits WebRequest
  see:
  - type: System.Net.WebPermission
    commentId: T:System.Net.WebPermission
  inheritance:
  - System.Object
  - System.Net.WebRequest
  inheritedMembers:
  - System.Net.WebRequest.DefaultWebProxy
  - System.Net.WebRequest.Proxy
  - System.Net.WebRequest.Create(System.String)
  - System.Net.WebRequest.Create(System.Uri)
  - System.Net.WebRequest.CreateHttp(System.String)
  - System.Net.WebRequest.CreateHttp(System.Uri)
  - System.Net.WebRequest.GetRequestStreamAsync
  - System.Net.WebRequest.GetResponseAsync
  - System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.HttpWebRequest.Accept
  commentId: P:System.Net.HttpWebRequest.Accept
  id: Accept
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: Accept
  fullName: System.Net.HttpWebRequest.Accept
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Accept
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 13
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Gets or sets the value of the <strong>Accept</strong> HTTP header.</p>\n"
  remarks: "\n<p>To clear the <strong>Accept</strong> HTTP header, set the <xref href=\"System.Net.HttpWebRequest.Accept\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>null</strong>.</p>\n<p>The value for this property is stored in <xref href=\"System.Net.WebHeaderCollection\" data-throw-if-not-resolved=\"false\"></xref>. If WebHeaderCollection is set, the property value is lost.</p>\n"
  example:
  - "\n<p>The following code example sets the <xref href=\"System.Net.HttpWebRequest.Accept\" data-throw-if-not-resolved=\"false\"></xref> property.</p>HttpWebRequest_Accept#1"
  syntax:
    content: public string Accept { get; set; }
    content.vb: Public Property Accept As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value of the <strong>Accept</strong> HTTP header. The default value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.HttpWebRequest.AllowReadStreamBuffering
  commentId: P:System.Net.HttpWebRequest.AllowReadStreamBuffering
  id: AllowReadStreamBuffering
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: AllowReadStreamBuffering
  fullName: System.Net.HttpWebRequest.AllowReadStreamBuffering
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AllowReadStreamBuffering
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 14
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Gets or sets a value that indicates whether to buffer the received from the Internet resource.</p>\n"
  syntax:
    content: public virtual bool AllowReadStreamBuffering { get; set; }
    content.vb: Public Overridable Property AllowReadStreamBuffering As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to buffer the received from the Internet resource; otherwise, <strong>false</strong>.</p>\n<p>\n<strong>true</strong> to enable buffering of the data received from the Internet resource; <strong>false</strong> to disable buffering. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.HttpWebRequest.ContentType
  commentId: P:System.Net.HttpWebRequest.ContentType
  id: ContentType
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: ContentType
  fullName: System.Net.HttpWebRequest.ContentType
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContentType
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 15
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Gets or sets the value of the <strong>Content-type</strong> HTTP header.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.HttpWebRequest.ContentType\" data-throw-if-not-resolved=\"false\"></xref> property contains the media type of the request. Values assigned to the <xref href=\"System.Net.HttpWebRequest.ContentType\" data-throw-if-not-resolved=\"false\"></xref> property replace any existing contents when the request sends the <strong>Content-type</strong> HTTP header.</p>\n<p>To clear the <strong>Content-type</strong> HTTP header, set the <xref href=\"System.Net.HttpWebRequest.ContentType\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>null</strong>.</p>\n<p>The value for this property is stored in <xref href=\"System.Net.WebHeaderCollection\" data-throw-if-not-resolved=\"false\"></xref> . If <xref href=\"System.Net.WebHeaderCollection\" data-throw-if-not-resolved=\"false\"></xref> is set, the property value is lost.</p>\n"
  example:
  - "\n<p>The following code example sets the <xref href=\"System.Net.HttpWebRequest.ContentType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>HttpWebRequest_ContentLength#1"
  syntax:
    content: public override string ContentType { get; set; }
    content.vb: Public Overrides Property ContentType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value of the <strong>Content-type</strong> HTTP header. The default value is <strong>null</strong>.</p>\n"
  overridden: System.Net.WebRequest.ContentType
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.HttpWebRequest.ContinueTimeout
  commentId: P:System.Net.HttpWebRequest.ContinueTimeout
  id: ContinueTimeout
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: ContinueTimeout
  fullName: System.Net.HttpWebRequest.ContinueTimeout
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContinueTimeout
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 16
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Gets or sets a timeout, in milliseconds, to wait until the 100-Continue is received from the server. </p>\n"
  remarks: "\n<p>If the 100-Continue response is received before the timeout expires, the entity body can be sent.</p>\n"
  syntax:
    content: public int ContinueTimeout { get; set; }
    content.vb: Public Property ContinueTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The timeout, in milliseconds, to wait until the 100-Continue is received. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.HttpWebRequest.CookieContainer
  commentId: P:System.Net.HttpWebRequest.CookieContainer
  id: CookieContainer
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: CookieContainer
  fullName: System.Net.HttpWebRequest.CookieContainer
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CookieContainer
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 17
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Gets or sets the cookies associated with the request.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.HttpWebRequest.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> property provides an instance of the <xref href=\"System.Net.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> class that contains the cookies associated with this request.</p>\n<p>\n<xref href=\"System.Net.HttpWebRequest.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong> by default. You must assign a <xref href=\"System.Net.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> object to the property to have cookies returned in the <xref href=\"System.Net.HttpWebResponse.Cookies\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Net.HttpWebResponse\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Net.HttpWebRequest.GetResponse\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>For security reasons, cookies are disabled by default. If you want to use cookies, use the <xref href=\"System.Net.HttpWebRequest.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> property to enable cookies.</p>\n"
  example:
  - "\n<p>The following code example sends a request to a URL and displays the cookies returned in the response.</p>NCLCookies#1"
  syntax:
    content: public virtual CookieContainer CookieContainer { get; set; }
    content.vb: Public Overridable Property CookieContainer As CookieContainer
    parameters: []
    return:
      type: System.Net.CookieContainer
      description: "\n<p>A <xref href=\"System.Net.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> that contains the cookies associated with this request.</p>\n"
  seealso:
  - type: System.Net.CookieContainer
    commentId: T:System.Net.CookieContainer
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Net.HttpWebRequest.Credentials
  commentId: P:System.Net.HttpWebRequest.Credentials
  id: Credentials
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: Credentials
  fullName: System.Net.HttpWebRequest.Credentials
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Credentials
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 18
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Gets or sets authentication information for the request.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.HttpWebRequest.Credentials\" data-throw-if-not-resolved=\"false\"></xref> property contains authentication information to identify the maker of the request. The <xref href=\"System.Net.HttpWebRequest.Credentials\" data-throw-if-not-resolved=\"false\"></xref> property can be either a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref>, in which case the user, password, and domain information contained in the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> object is used to authenticate the request, or it can be a <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref>, in which case the Uniform Resource Identifier (URI) of the request is used to determine the user, password, and domain information to use to authenticate the request.</p>\n<p>In most client scenarios, you should use the <xref href=\"System.Net.CredentialCache.DefaultCredentials\" data-throw-if-not-resolved=\"false\"></xref> property, which contains the credentials of the currently logged on user. To do this, set the <xref href=\"System.Net.WebClient.UseDefaultCredentials\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>true</strong> instead of setting this property.</p>\n<p>If the <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class is being used in a middle-tier application, such as an ASP.NET application, the credentials in the <xref href=\"System.Net.CredentialCache.DefaultCredentials\" data-throw-if-not-resolved=\"false\"></xref> property belong to the account running the ASP page (the server-side credentials). Typically, you would set this property to the credentials of the client on whose behalf the request is made. </p>\n<p>The NTLM authentication scheme cannot be used to impersonate another user. Kerberos must be specially configured to support impersonation.</p>\n<p>To restrict HttpWebRequest to one or more authentication methods, use the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> class and bind your credentials to one or more authentication schemes</p>\n<p>Supported authentication schemes include Digest, Negotiate, Kerberos, NTLM, and Basic.</p>\n"
  example:
  - "\n<p>The following code example sets the credentials for a request.</p>NCLResponse1#1"
  syntax:
    content: public override ICredentials Credentials { get; set; }
    content.vb: Public Overrides Property Credentials As ICredentials
    parameters: []
    return:
      type: System.Net.ICredentials
      description: "\n<p>An <xref href=\"System.Net.ICredentials\" data-throw-if-not-resolved=\"false\"></xref> that contains the authentication credentials associated with the request. The default is <strong>null</strong>.</p>\n"
  overridden: System.Net.WebRequest.Credentials
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.HttpWebRequest.HaveResponse
  commentId: P:System.Net.HttpWebRequest.HaveResponse
  id: HaveResponse
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: HaveResponse
  fullName: System.Net.HttpWebRequest.HaveResponse
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HaveResponse
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 19
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Gets a value that indicates whether a response has been received from an Internet resource.</p>\n"
  example:
  - "\n<p>The following code example checks the <xref href=\"System.Net.HttpWebRequest.HaveResponse\" data-throw-if-not-resolved=\"false\"></xref> property to determine if a response has been received from an Internet resource.</p>Httpwebrequest_HaveResponse#1"
  syntax:
    content: public virtual bool HaveResponse { get; }
    content.vb: Public Overridable ReadOnly Property HaveResponse As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a response has been received; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.HttpWebRequest.Headers
  commentId: P:System.Net.HttpWebRequest.Headers
  id: Headers
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: Headers
  fullName: System.Net.HttpWebRequest.Headers
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Headers
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 20
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Specifies a collection of the name/value pairs that make up the HTTP headers.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.HttpWebRequest.Headers\" data-throw-if-not-resolved=\"false\"></xref> collection contains the protocol headers associated with the request. The following table lists the HTTP headers that are not stored in the <xref href=\"System.Net.HttpWebRequest.Headers\" data-throw-if-not-resolved=\"false\"></xref> collection but are either set by the system or set by properties or methods.</p>\n<p>Header </p>\n<p>Set by </p>\n<table><tbody><tr><td>\n<p>Accept </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.Accept\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Connection </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.Connection\" data-throw-if-not-resolved=\"false\"></xref> property and <xref href=\"System.Net.HttpWebRequest.KeepAlive\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Content-Length </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.ContentLength\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Content-Type </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.ContentType\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Expect </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.Expect\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Date </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.Date\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Host </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.Host\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>If-Modified-Since </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.IfModifiedSince\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Range </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.AddRange(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</td></tr><tr><td>\n<p>Referer </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.Referer\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr><tr><td>\n<p>Transfer-Encoding </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.TransferEncoding\" data-throw-if-not-resolved=\"false\"></xref> property (the <xref href=\"System.Net.HttpWebRequest.SendChunked\" data-throw-if-not-resolved=\"false\"></xref> property must be true). </p>\n</td></tr><tr><td>\n<p>User-Agent </p>\n</td><td>\n<p>Set by the <xref href=\"System.Net.HttpWebRequest.UserAgent\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</td></tr></tbody></table>\n<p>The <xref href=\"System.Net.WebHeaderCollection.Add(System.Net.HttpRequestHeader,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> if you try to set one of these protected headers.</p>\n<p>Changing the <xref href=\"System.Net.HttpWebRequest.Headers\" data-throw-if-not-resolved=\"false\"></xref> property after the request has been started by calling <xref href=\"System.Net.HttpWebRequest.GetRequestStream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.HttpWebRequest.GetResponse\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>You should not assume that the header values will remain unchanged, because Web servers and caches may change or add headers to a Web request.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.HttpWebRequest.Headers\" data-throw-if-not-resolved=\"false\"></xref> property to print the HTTP header name/value pairs to the console.</p>HttpWebRequest_Headers#1"
  syntax:
    content: public override WebHeaderCollection Headers { get; set; }
    content.vb: Public Overrides Property Headers As WebHeaderCollection
    parameters: []
    return:
      type: System.Net.WebHeaderCollection
      description: "\n<p>A <xref href=\"System.Net.WebHeaderCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the name/value pairs that make up the headers for the HTTP request.</p>\n"
  overridden: System.Net.WebRequest.Headers
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The request has been started by calling the <xref href=\"System.Net.HttpWebRequest.GetRequestStream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.HttpWebRequest.GetResponse\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.HttpWebRequest.Method
  commentId: P:System.Net.HttpWebRequest.Method
  id: Method
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: Method
  fullName: System.Net.HttpWebRequest.Method
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Method
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 21
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Gets or sets the method for the request.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.HttpWebRequest.Method\" data-throw-if-not-resolved=\"false\"></xref> property can be set to any of the HTTP 1.1 protocol verbs: GET, HEAD, POST, PUT, DELETE, TRACE, or OPTIONS.</p>\n<p>If the <xref href=\"System.Net.HttpWebRequest.ContentLength\" data-throw-if-not-resolved=\"false\"></xref> property is set to any value other than -1, the <xref href=\"System.Net.HttpWebRequest.Method\" data-throw-if-not-resolved=\"false\"></xref> property must be set to a protocol property that uploads data.</p>\n"
  example:
  - "\n<p>The following code example sets the <xref href=\"System.Net.HttpWebRequest.Method\" data-throw-if-not-resolved=\"false\"></xref> property to POST.</p>HttpWebRequest_ContentLength#4"
  syntax:
    content: public override string Method { get; set; }
    content.vb: Public Overrides Property Method As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The request method to use to contact the Internet resource. The default value is GET.</p>\n"
  overridden: System.Net.WebRequest.Method
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>No method is supplied.</p>\n<p>-or- </p>\n<p>The method string contains invalid characters. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.HttpWebRequest.RequestUri
  commentId: P:System.Net.HttpWebRequest.RequestUri
  id: RequestUri
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: RequestUri
  fullName: System.Net.HttpWebRequest.RequestUri
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RequestUri
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 22
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Gets the original Uniform Resource Identifier (URI) of the request.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> object passed to <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> by the call to <xref href=\"System.Net.WebRequest.Create(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Following a redirection header does not change the <xref href=\"System.Net.HttpWebRequest.RequestUri\" data-throw-if-not-resolved=\"false\"></xref> property. To get the actual URI that responded to the request, examine the <xref href=\"System.Net.HttpWebRequest.Address\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following code example checks to see if the <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> object <code>req</code> was redirected to another location to fulfill the request, and sets the value of the <code>hasChanged</code> variable to <strong>true</strong> if the request was redirected; otherwise, <code>hasChanged</code> is set to <strong>false</strong>.</p>Classic HttpWebRequest.RequestUri Example#1"
  syntax:
    content: public override Uri RequestUri { get; }
    content.vb: Public Overrides ReadOnly Property RequestUri As Uri
    parameters: []
    return:
      type: System.Uri
      description: "\n<p>A <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> that contains the URI of the Internet resource passed to the <xref href=\"System.Net.WebRequest.Create(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  overridden: System.Net.WebRequest.RequestUri
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.HttpWebRequest.SupportsCookieContainer
  commentId: P:System.Net.HttpWebRequest.SupportsCookieContainer
  id: SupportsCookieContainer
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: SupportsCookieContainer
  fullName: System.Net.HttpWebRequest.SupportsCookieContainer
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SupportsCookieContainer
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 23
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Gets a value that indicates whether the request provides support for a <xref href=\"System.Net.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual bool SupportsCookieContainer { get; }
    content.vb: Public Overridable ReadOnly Property SupportsCookieContainer As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the request provides support for a <xref href=\"System.Net.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n<p>\n<strong>true</strong> if a <xref href=\"System.Net.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> is supported; otherwise, <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.HttpWebRequest.UseDefaultCredentials
  commentId: P:System.Net.HttpWebRequest.UseDefaultCredentials
  id: UseDefaultCredentials
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: UseDefaultCredentials
  fullName: System.Net.HttpWebRequest.UseDefaultCredentials
  type: Property
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UseDefaultCredentials
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 24
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that controls whether default credentials are sent with requests.</p>\n"
  remarks: "\n<p>Set this property to <strong>true</strong> when requests made by this <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> object should, if requested by the server, be authenticated using the credentials of the currently logged on user. For client applications, this is the desired behavior in most scenarios. For middle-tier applications, such as ASP.NET applications, instead of using this property, you would typically set the <xref href=\"System.Net.HttpWebRequest.Credentials\" data-throw-if-not-resolved=\"false\"></xref> property to the credentials of the client on whose behalf the request is made.</p>\n"
  syntax:
    content: public override bool UseDefaultCredentials { get; set; }
    content.vb: Public Overrides Property UseDefaultCredentials As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the default credentials are used; otherwise <strong>false</strong>. The default value is <strong>false</strong>.</p>\n"
  overridden: System.Net.WebRequest.UseDefaultCredentials
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>You attempted to set this property after the request was sent.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.HttpWebRequest.Abort
  commentId: M:System.Net.HttpWebRequest.Abort
  id: Abort
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: Abort()
  fullName: System.Net.HttpWebRequest.Abort()
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Abort
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 25
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Cancels a request to an Internet resource.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.HttpWebRequest.Abort\" data-throw-if-not-resolved=\"false\"></xref> method cancels a request to a resource. After a request is canceled, calling the <xref href=\"System.Net.HttpWebRequest.GetResponse\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.HttpWebRequest.GetRequestStream\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> method causes a <xref href=\"System.Net.WebException\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Net.WebException.Status\" data-throw-if-not-resolved=\"false\"></xref> property set to <xref href=\"System.Net.WebExceptionStatus.RequestCanceled\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Net.HttpWebRequest.Abort\" data-throw-if-not-resolved=\"false\"></xref> method will synchronously execute the callback specified to the <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods if the <xref href=\"System.Net.HttpWebRequest.Abort\" data-throw-if-not-resolved=\"false\"></xref> method is called while either of these operations are outstanding. This can lead to potential deadlock issues.</p>\n<p>This member outputs trace information when you enable network tracing in your application. For more information, see Network Tracing in the .NET Framework.</p>\n"
  example:
  - "\n<p>In the case of asynchronous requests, it is the responsibility of the client application to implement its own time-out mechanism. The following code example shows how to do this.</p>System.Net.HttpWebRequest.BeginGetResponse#1"
  syntax:
    content: public override void Abort()
    content.vb: Public Overrides Sub Abort
  overridden: System.Net.WebRequest.Abort
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  commentId: M:System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  id: BeginGetRequestStream(System.AsyncCallback,System.Object)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: BeginGetRequestStream(AsyncCallback, Object)
  fullName: System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginGetRequestStream
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 26
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Begins an asynchronous request for a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object to use to write data.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method starts an asynchronous request for a stream used to send data for the <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref>. The asynchronous callback method uses the <xref href=\"System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> method to return the actual stream.</p>\n<p>The <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method requires some synchronous setup tasks to complete (DNS resolution, proxy detection, and TCP socket connection, for example) before this method becomes asynchronous. As a result, this method should never be called on a user interface (UI) thread because it might take considerable time (up to several minutes depending on network settings) to complete the initial synchronous setup tasks before an exception for an error is thrown or the method succeeds.  </p>\n<p>To learn more about the thread pool, see The Managed Thread Pool.</p>\n<p>Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, you must use the <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the response.</p>\n<p>This member outputs trace information when you enable network tracing in your application. For more information, see Network Tracing in the .NET Framework.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to make an asynchronous request for a stream instance.</p>HttpWebRequest_BeginGetRequestStream#2"
  syntax:
    content: public override IAsyncResult BeginGetRequestStream(AsyncCallback callback, object state)
    content.vb: Public Overrides Function BeginGetRequestStream(callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "\n<p>The <xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>\n"
    - id: state
      type: System.Object
      description: "\n<p>The state object for this request. </p>\n"
    return:
      type: System.IAsyncResult
      description: "\n<p>An <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references the asynchronous request.</p>\n"
  overridden: System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  exceptions:
  - type: System.Net.ProtocolViolationException
    commentId: T:System.Net.ProtocolViolationException
    description: "\n<p>The <xref href=\"System.Net.HttpWebRequest.Method\" data-throw-if-not-resolved=\"false\"></xref> property is GET or HEAD.</p>\n<p>-or- </p>\n<p>\n<xref href=\"System.Net.HttpWebRequest.KeepAlive\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, <xref href=\"System.Net.HttpWebRequest.AllowWriteStreamBuffering\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>, <xref href=\"System.Net.HttpWebRequest.ContentLength\" data-throw-if-not-resolved=\"false\"></xref> is -1, <xref href=\"System.Net.HttpWebRequest.SendChunked\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>, and <xref href=\"System.Net.HttpWebRequest.Method\" data-throw-if-not-resolved=\"false\"></xref> is POST or PUT. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream is being used by a previous call to <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>-or- </p>\n<p>\n<xref href=\"System.Net.HttpWebRequest.TransferEncoding\" data-throw-if-not-resolved=\"false\"></xref> is set to a value and <xref href=\"System.Net.HttpWebRequest.SendChunked\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>.</p>\n<p>-or- </p>\n<p>The thread pool is running out of threads. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The request cache validator indicated that the response for this request can be served from the cache; however, requests that write data must not use the cache. This exception can occur if you are using a custom cache validator that is incorrectly implemented. </p>\n"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "\n<p>\n<xref href=\"System.Net.HttpWebRequest.Abort\" data-throw-if-not-resolved=\"false\"></xref> was previously called. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>In a .NET Compact Framework application, a request stream with zero content length was not obtained and closed correctly. For more information about handling zero content length requests, see <see href=\"https://msdn.microsoft.com/subscriptions/downloads/1afx2b0f(v=vs.80).aspx\">Network Programming in the .NET Compact Framework</see>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  commentId: M:System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  id: BeginGetResponse(System.AsyncCallback,System.Object)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: BeginGetResponse(AsyncCallback, Object)
  fullName: System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginGetResponse
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 27
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Begins an asynchronous request to an Internet resource.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method starts an asynchronous request for a response from the Internet resource. The asynchronous callback method uses the <xref href=\"System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> method to return the actual <xref href=\"System.Net.WebResponse\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Net.ProtocolViolationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown in several cases when the properties set on the <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class are conflicting. This exception occurs if an application sets the <xref href=\"System.Net.HttpWebRequest.ContentLength\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Net.HttpWebRequest.SendChunked\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>true</strong>, and then sends an HTTP GET request. This exception occurs if an application tries to send chunked to a server that only supports HTTP 1.0 protocol, where this is not supported. This exception occurs if an application tries to send data without setting the <xref href=\"System.Net.HttpWebRequest.ContentLength\" data-throw-if-not-resolved=\"false\"></xref> property or the <xref href=\"System.Net.HttpWebRequest.SendChunked\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong> when buffering is disabled and on a keepalive connection (the <xref href=\"System.Net.HttpWebRequest.KeepAlive\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>)<strong>.</strong></p>\n<p>If a <xref href=\"System.Net.WebException\" data-throw-if-not-resolved=\"false\"></xref> is thrown, use the <xref href=\"System.Net.WebException.Response\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.WebException.Status\" data-throw-if-not-resolved=\"false\"></xref> properties of the exception to determine the response from the server.</p>\n<p>The <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method requires some synchronous setup tasks to complete (DNS resolution, proxy detection, and TCP socket connection, for example) before this method becomes asynchronous. As a result, this method should never be called on a user interface (UI) thread because it might take considerable time (up to several minutes depending on network settings) to complete the initial synchronous setup tasks before an exception for an error is thrown or the method succeeds.  </p>\n<p>To learn more about the thread pool, see The Managed Thread Pool.</p>\n<p>Your application cannot mix synchronous and asynchronous methods for a particular request. If you call the <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, you must use the <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the response. </p>\n<p>This member outputs trace information when you enable network tracing in your application. For more information, see Network Tracing in the .NET Framework.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to make an asynchronous request for an Internet resource.</p>\n<p>In the case of asynchronous requests, it is the responsibility of the client application to implement its own time-out mechanism. The following code example shows how to do it.</p>System.Net.HttpWebRequest.BeginGetResponse#1"
  syntax:
    content: public override IAsyncResult BeginGetResponse(AsyncCallback callback, object state)
    content.vb: Public Overrides Function BeginGetResponse(callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "\n<p>The <xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate </p>\n"
    - id: state
      type: System.Object
      description: "\n<p>The state object for this request. </p>\n"
    return:
      type: System.IAsyncResult
      description: "\n<p>An <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references the asynchronous request for a response.</p>\n"
  overridden: System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream is already in use by a previous call to <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>-or- </p>\n<p>\n<xref href=\"System.Net.HttpWebRequest.TransferEncoding\" data-throw-if-not-resolved=\"false\"></xref> is set to a value and <xref href=\"System.Net.HttpWebRequest.SendChunked\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>.</p>\n<p>-or- </p>\n<p>The thread pool is running out of threads. </p>\n"
  - type: System.Net.ProtocolViolationException
    commentId: T:System.Net.ProtocolViolationException
    description: "\n<p>\n<xref href=\"System.Net.HttpWebRequest.Method\" data-throw-if-not-resolved=\"false\"></xref> is GET or HEAD, and either <xref href=\"System.Net.HttpWebRequest.ContentLength\" data-throw-if-not-resolved=\"false\"></xref> is greater than zero or <xref href=\"System.Net.HttpWebRequest.SendChunked\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>.</p>\n<p>-or- </p>\n<p>\n<xref href=\"System.Net.HttpWebRequest.KeepAlive\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, <xref href=\"System.Net.HttpWebRequest.AllowWriteStreamBuffering\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>, and either <xref href=\"System.Net.HttpWebRequest.ContentLength\" data-throw-if-not-resolved=\"false\"></xref> is -1, <xref href=\"System.Net.HttpWebRequest.SendChunked\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong> and <xref href=\"System.Net.HttpWebRequest.Method\" data-throw-if-not-resolved=\"false\"></xref> is POST or PUT.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> has an entity body but the <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is called without calling the <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>-or- </p>\n<p>The <xref href=\"System.Net.HttpWebRequest.ContentLength\" data-throw-if-not-resolved=\"false\"></xref> is greater than zero, but the application does not write all of the promised data.</p>\n"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "\n<p>\n<xref href=\"System.Net.HttpWebRequest.Abort\" data-throw-if-not-resolved=\"false\"></xref> was previously called. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)
  commentId: M:System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)
  id: EndGetRequestStream(System.IAsyncResult)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: EndGetRequestStream(IAsyncResult)
  fullName: System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EndGetRequestStream
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 28
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Ends an asynchronous request for a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object to use to write data.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> method completes an asynchronous request for a stream that was started by the <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. After the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object has been returned, you can send data with the <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> by using the <xref href=\"System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>You must set the value of the <xref href=\"System.Net.HttpWebRequest.ContentLength\" data-throw-if-not-resolved=\"false\"></xref> property before writing data to the stream.</p>\n<p>You must call the <xref href=\"System.IO.Stream.Close\" data-throw-if-not-resolved=\"false\"></xref> method to close the stream and release the connection for reuse. Failure to close the stream causes your application to run out of connections.</p>\n<p>This member outputs trace information when you enable network tracing in your application. For more information, see Network Tracing in the .NET Framework.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> method to end an asynchronous request for a stream instance.</p>HttpWebRequest_BeginGetRequestStream#2"
  syntax:
    content: public override Stream EndGetRequestStream(IAsyncResult asyncResult)
    content.vb: Public Overrides Function EndGetRequestStream(asyncResult As IAsyncResult) As Stream
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The pending request for a stream. </p>\n"
    return:
      type: System.IO.Stream
      description: "\n<p>A <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> to use to write request data.</p>\n"
  overridden: System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>asyncResult</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The request did not complete, and no stream is available. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>asyncResult</em> was not returned by the current instance from a call to <xref href=\"System.Net.HttpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This method was called previously using <em>asyncResult</em>. </p>\n"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "\n<p>\n<xref href=\"System.Net.HttpWebRequest.Abort\" data-throw-if-not-resolved=\"false\"></xref> was previously called.</p>\n<p>-or- </p>\n<p>An error occurred while processing the request. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)
  commentId: M:System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)
  id: EndGetResponse(System.IAsyncResult)
  parent: System.Net.HttpWebRequest
  langs:
  - csharp
  - vb
  name: EndGetResponse(IAsyncResult)
  fullName: System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/System.Net.Requests/ref/System.Net.Requests.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EndGetResponse
    path: src/System.Net.Requests/ref/System.Net.Requests.cs
    startLine: 29
  assemblies:
  - System.Net.Requests
  namespace: System.Net
  summary: "\n<p>Ends an asynchronous request to an Internet resource.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> method completes an asynchronous request for an Internet resource that was started by calling the <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>You must call the <xref href=\"System.Net.HttpWebResponse.Close\" data-throw-if-not-resolved=\"false\"></xref> method to close the stream and release the connection. Failure to do so may cause your application to run out of connections.</p>\n<p>This member outputs trace information when you enable network tracing in your application. For more information, see Network Tracing in the .NET Framework.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Net.HttpWebRequest.EndGetResponse(System.IAsyncResult)\" data-throw-if-not-resolved=\"false\"></xref> method to end an asynchronous request for an Internet resource.</p>HttpWebRequest_BeginGetResponse#2"
  syntax:
    content: public override WebResponse EndGetResponse(IAsyncResult asyncResult)
    content.vb: Public Overrides Function EndGetResponse(asyncResult As IAsyncResult) As WebResponse
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The pending request for a response. </p>\n"
    return:
      type: System.Net.WebResponse
      description: "\n<p>A <xref href=\"System.Net.WebResponse\" data-throw-if-not-resolved=\"false\"></xref> that contains the response from the Internet resource.</p>\n"
  overridden: System.Net.WebRequest.EndGetResponse(System.IAsyncResult)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>asyncResult</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This method was called previously using <em>asyncResult.</em></p>\n<p>-or- </p>\n<p>The <xref href=\"System.Net.HttpWebRequest.ContentLength\" data-throw-if-not-resolved=\"false\"></xref> property is greater than 0 but the data has not been written to the request stream. </p>\n"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "\n<p>\n<xref href=\"System.Net.HttpWebRequest.Abort\" data-throw-if-not-resolved=\"false\"></xref> was previously called.</p>\n<p>-or- </p>\n<p>An error occurred while processing the request. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>asyncResult</em> was not returned by the current instance from a call to <xref href=\"System.Net.HttpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Net.WebRequest
  parent: System.Net
  isExternal: false
  name: WebRequest
  fullName: System.Net.WebRequest
- uid: System.Net.WebRequest.DefaultWebProxy
  parent: System.Net.WebRequest
  isExternal: false
  name: DefaultWebProxy
  fullName: System.Net.WebRequest.DefaultWebProxy
- uid: System.Net.WebRequest.Proxy
  parent: System.Net.WebRequest
  isExternal: false
  name: Proxy
  fullName: System.Net.WebRequest.Proxy
- uid: System.Net.WebRequest.Create(System.String)
  parent: System.Net.WebRequest
  isExternal: true
  name: Create(String)
  fullName: System.Net.WebRequest.Create(System.String)
  spec.csharp:
  - uid: System.Net.WebRequest.Create(System.String)
    name: Create
    fullName: System.Net.WebRequest.Create
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.WebRequest.Create(System.String)
    name: Create
    fullName: System.Net.WebRequest.Create
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.WebRequest.Create(System.Uri)
  parent: System.Net.WebRequest
  isExternal: true
  name: Create(Uri)
  fullName: System.Net.WebRequest.Create(System.Uri)
  spec.csharp:
  - uid: System.Net.WebRequest.Create(System.Uri)
    name: Create
    fullName: System.Net.WebRequest.Create
  - name: (
    fullName: (
  - uid: System.Uri
    name: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.WebRequest.Create(System.Uri)
    name: Create
    fullName: System.Net.WebRequest.Create
  - name: (
    fullName: (
  - uid: System.Uri
    name: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.WebRequest.CreateHttp(System.String)
  parent: System.Net.WebRequest
  isExternal: true
  name: CreateHttp(String)
  fullName: System.Net.WebRequest.CreateHttp(System.String)
  spec.csharp:
  - uid: System.Net.WebRequest.CreateHttp(System.String)
    name: CreateHttp
    fullName: System.Net.WebRequest.CreateHttp
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.WebRequest.CreateHttp(System.String)
    name: CreateHttp
    fullName: System.Net.WebRequest.CreateHttp
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.WebRequest.CreateHttp(System.Uri)
  parent: System.Net.WebRequest
  isExternal: true
  name: CreateHttp(Uri)
  fullName: System.Net.WebRequest.CreateHttp(System.Uri)
  spec.csharp:
  - uid: System.Net.WebRequest.CreateHttp(System.Uri)
    name: CreateHttp
    fullName: System.Net.WebRequest.CreateHttp
  - name: (
    fullName: (
  - uid: System.Uri
    name: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.WebRequest.CreateHttp(System.Uri)
    name: CreateHttp
    fullName: System.Net.WebRequest.CreateHttp
  - name: (
    fullName: (
  - uid: System.Uri
    name: Uri
    fullName: System.Uri
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.WebRequest.GetRequestStreamAsync
  parent: System.Net.WebRequest
  isExternal: false
  name: GetRequestStreamAsync()
  fullName: System.Net.WebRequest.GetRequestStreamAsync()
  spec.csharp:
  - uid: System.Net.WebRequest.GetRequestStreamAsync
    name: GetRequestStreamAsync
    fullName: System.Net.WebRequest.GetRequestStreamAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.WebRequest.GetRequestStreamAsync
    name: GetRequestStreamAsync
    fullName: System.Net.WebRequest.GetRequestStreamAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Net.WebRequest.GetResponseAsync
  parent: System.Net.WebRequest
  isExternal: false
  name: GetResponseAsync()
  fullName: System.Net.WebRequest.GetResponseAsync()
  spec.csharp:
  - uid: System.Net.WebRequest.GetResponseAsync
    name: GetResponseAsync
    fullName: System.Net.WebRequest.GetResponseAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.WebRequest.GetResponseAsync
    name: GetResponseAsync
    fullName: System.Net.WebRequest.GetResponseAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)
  parent: System.Net.WebRequest
  isExternal: true
  name: RegisterPrefix(String, IWebRequestCreate)
  fullName: System.Net.WebRequest.RegisterPrefix(System.String, System.Net.IWebRequestCreate)
  spec.csharp:
  - uid: System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)
    name: RegisterPrefix
    fullName: System.Net.WebRequest.RegisterPrefix
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Net.IWebRequestCreate
    name: IWebRequestCreate
    fullName: System.Net.IWebRequestCreate
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.WebRequest.RegisterPrefix(System.String,System.Net.IWebRequestCreate)
    name: RegisterPrefix
    fullName: System.Net.WebRequest.RegisterPrefix
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Net.IWebRequestCreate
    name: IWebRequestCreate
    fullName: System.Net.IWebRequestCreate
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Net.WebRequest.ContentType
  parent: System.Net.WebRequest
  isExternal: false
  name: ContentType
  fullName: System.Net.WebRequest.ContentType
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Net.CookieContainer
  isExternal: false
  name: CookieContainer
  fullName: System.Net.CookieContainer
- uid: System.Net.WebRequest.Credentials
  parent: System.Net.WebRequest
  isExternal: false
  name: Credentials
  fullName: System.Net.WebRequest.Credentials
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: false
  name: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Net.WebRequest.Headers
  parent: System.Net.WebRequest
  isExternal: false
  name: Headers
  fullName: System.Net.WebRequest.Headers
- uid: System.Net.WebHeaderCollection
  isExternal: false
  name: WebHeaderCollection
  fullName: System.Net.WebHeaderCollection
- uid: System.Net.WebRequest.Method
  parent: System.Net.WebRequest
  isExternal: false
  name: Method
  fullName: System.Net.WebRequest.Method
- uid: System.Net.WebRequest.RequestUri
  parent: System.Net.WebRequest
  isExternal: false
  name: RequestUri
  fullName: System.Net.WebRequest.RequestUri
- uid: System.Uri
  parent: System
  isExternal: false
  name: Uri
  fullName: System.Uri
- uid: System.Net.WebRequest.UseDefaultCredentials
  parent: System.Net.WebRequest
  isExternal: false
  name: UseDefaultCredentials
  fullName: System.Net.WebRequest.UseDefaultCredentials
- uid: System.Net.WebRequest.Abort
  parent: System.Net.WebRequest
  isExternal: false
  name: Abort()
  fullName: System.Net.WebRequest.Abort()
  spec.csharp:
  - uid: System.Net.WebRequest.Abort
    name: Abort
    fullName: System.Net.WebRequest.Abort
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.WebRequest.Abort
    name: Abort
    fullName: System.Net.WebRequest.Abort
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
  parent: System.Net.WebRequest
  isExternal: true
  name: BeginGetRequestStream(AsyncCallback, Object)
  fullName: System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
    name: BeginGetRequestStream
    fullName: System.Net.WebRequest.BeginGetRequestStream
  - name: (
    fullName: (
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.WebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)
    name: BeginGetRequestStream
    fullName: System.Net.WebRequest.BeginGetRequestStream
  - name: (
    fullName: (
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
  parent: System.Net.WebRequest
  isExternal: true
  name: BeginGetResponse(AsyncCallback, Object)
  fullName: System.Net.WebRequest.BeginGetResponse(System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
    name: BeginGetResponse
    fullName: System.Net.WebRequest.BeginGetResponse
  - name: (
    fullName: (
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)
    name: BeginGetResponse
    fullName: System.Net.WebRequest.BeginGetResponse
  - name: (
    fullName: (
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)
  parent: System.Net.WebRequest
  isExternal: true
  name: EndGetRequestStream(IAsyncResult)
  fullName: System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)
  spec.csharp:
  - uid: System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)
    name: EndGetRequestStream
    fullName: System.Net.WebRequest.EndGetRequestStream
  - name: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.WebRequest.EndGetRequestStream(System.IAsyncResult)
    name: EndGetRequestStream
    fullName: System.Net.WebRequest.EndGetRequestStream
  - name: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Net.WebRequest.EndGetResponse(System.IAsyncResult)
  parent: System.Net.WebRequest
  isExternal: true
  name: EndGetResponse(IAsyncResult)
  fullName: System.Net.WebRequest.EndGetResponse(System.IAsyncResult)
  spec.csharp:
  - uid: System.Net.WebRequest.EndGetResponse(System.IAsyncResult)
    name: EndGetResponse
    fullName: System.Net.WebRequest.EndGetResponse
  - name: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.WebRequest.EndGetResponse(System.IAsyncResult)
    name: EndGetResponse
    fullName: System.Net.WebRequest.EndGetResponse
  - name: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.WebResponse
  parent: System.Net
  isExternal: false
  name: WebResponse
  fullName: System.Net.WebResponse
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Net.ProtocolViolationException
  isExternal: false
  name: ProtocolViolationException
  fullName: System.Net.ProtocolViolationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Net.WebException
  isExternal: false
  name: WebException
  fullName: System.Net.WebException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
