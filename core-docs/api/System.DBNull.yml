items:
- uid: System.DBNull
  commentId: T:System.DBNull
  id: DBNull
  parent: System
  children:
  - System.DBNull.ToString
  - System.DBNull.ToString(System.IFormatProvider)
  - System.DBNull.Value
  langs:
  - csharp
  - vb
  name: DBNull
  fullName: System.DBNull
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/DBNull.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DBNull
    path: src/mscorlib/src/System/DBNull.cs
    startLine: 14
  assemblies:
  - System.Data.Common
  namespace: System
  summary: "\n<p>Represents a nonexistent value. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> class represents a nonexistent value. In a database, for example, a column in a row of a table might not contain any data whatsoever. That is, the column is considered to not exist at all instead of merely not having a value. A <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> object represents the nonexistent column. Additionally, COM interop uses the <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> class to distinguish between a VT_NULL variant, which indicates a nonexistent value, and a VT_EMPTY variant, which indicates an unspecified value.</p>\n<p>The <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> type is a singleton class, which means only one <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> object exists. The <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref> member represents the sole <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> object. <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>can be used to explicitly assign a nonexistent value to a database field, although most ADO.NET data providers automatically assign values of <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> when a field does not have a valid value. You can determine whether a value retrieved from a database field is a <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> value by passing the value of that field to the <strong>DBNull.Value.Equals</strong> method. However, some languages and database objects supply methods that make it easier to determine whether the value of a database field is <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref>. These include the Visual Basic <strong>IsDBNull</strong> function, the <xref href=\"System.Convert.IsDBNull(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Data.DataTableReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, and the <xref href=\"System.Data.IDataRecord.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Do not confuse the notion of <strong>null</strong> in an object-oriented programming language with a <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> object. In an object-oriented programming language, <strong>null</strong> means the absence of a reference to an object. <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> represents an uninitialized variant or nonexistent database column.</p>\n"
  example:
  - "\n<p>The following example calls the <strong>DBNull.Value.Equals</strong> method to determine whether a database field in a contacts database has a valid value. If it does, the field value is appended to the string output in a label.</p>System.DBNull.Class#1"
  syntax:
    content: >-
      [ComVisible(true)]

      [Serializable]

      public sealed class DBNull : ISerializable, IConvertible
    content.vb: >-
      <ComVisible(True)>

      <Serializable>

      Public NotInheritable Class DBNull
          Implements ISerializable, IConvertible
  seealso:
  - type: System.Convert.DBNull
    commentId: F:System.Convert.DBNull
  - type: System.Convert.IsDBNull(System.Object)
    commentId: M:System.Convert.IsDBNull(System.Object)
  - type: System.Runtime.InteropServices.VarEnum
    commentId: T:System.Runtime.InteropServices.VarEnum
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.DBNull.Value
  commentId: F:System.DBNull.Value
  id: Value
  parent: System.DBNull
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.DBNull.Value
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/DBNull.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Value
    path: src/mscorlib/src/System/DBNull.cs
    startLine: 26
  assemblies:
  - System.Data.Common
  namespace: System
  summary: "\n<p>Represents the sole instance of the <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> is a singleton class, which means only this instance of this class can exist.</p>\n<p>If a database field has missing data, you can use the <xref href=\"System.DBNull.Value\" data-throw-if-not-resolved=\"false\"></xref> property to explicitly assign a <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> object value to the field. However, most data providers do this automatically.</p>\n<p>To evaluate database fields to determine whether their values are <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref>, you can pass the field value to the <strong>DBNull.Value.Equals</strong> method. However, this method is rarely used because there are a number of other ways to evaluate a database field for missing data. These include the Visual Basic <strong>IsDBNull</strong> function, the <xref href=\"System.Convert.IsDBNull(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Data.DataTableReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Data.IDataRecord.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, and several other methods.</p>\n"
  example:
  - "\n<p>The following example calls the <strong>DBNull.Value.Equals</strong> method to determine whether a database field in a contacts database has a valid value. If it does, the field value is appended to the string output in a label.</p>System.DBNull.Class#1<p></p>"
  syntax:
    content: public static readonly DBNull Value
    content.vb: Public Shared ReadOnly Value As DBNull
    return:
      type: System.DBNull
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.DBNull.ToString
  commentId: M:System.DBNull.ToString
  id: ToString
  parent: System.DBNull
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.DBNull.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/DBNull.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/DBNull.cs
    startLine: 33
  assemblies:
  - System.Data.Common
  namespace: System
  summary: "\n<p>Returns an empty string (<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  seealso:
  - type: System.String.Empty
    commentId: F:System.String.Empty
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.DBNull.ToString(System.IFormatProvider)
  commentId: M:System.DBNull.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.DBNull
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  fullName: System.DBNull.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/DBNull.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/DBNull.cs
    startLine: 37
  assemblies:
  - System.Data.Common
  namespace: System
  summary: "\n<p>Returns an empty string using the specified <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public string ToString(IFormatProvider provider)
    content.vb: Public Function ToString(provider As IFormatProvider) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.String
  seealso:
  - type: System.String.Empty
    commentId: F:System.String.Empty
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.DBNull
  parent: System
  isExternal: false
  name: DBNull
  fullName: System.DBNull
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
