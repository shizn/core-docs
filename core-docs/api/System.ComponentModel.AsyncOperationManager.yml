items:
- uid: System.ComponentModel.AsyncOperationManager
  commentId: T:System.ComponentModel.AsyncOperationManager
  id: AsyncOperationManager
  parent: System.ComponentModel
  children:
  - System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)
  - System.ComponentModel.AsyncOperationManager.SynchronizationContext
  langs:
  - csharp
  - vb
  name: AsyncOperationManager
  fullName: System.ComponentModel.AsyncOperationManager
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperationManager.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsyncOperationManager
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperationManager.cs
    startLine: 10
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Provides concurrency management for classes that support asynchronous method calls. This class cannot be inherited.</p>\n"
  remarks: "\n<p>If your class needs to provide asynchronous behavior according to the Event-based Asynchronous Pattern Overview, you will encounter a number of concurrency management issues. Among these is the requirement to ensure that event handlers are called on a thread or context that is appropriate for the application model (for example, Windows Forms applications, ASP.NET applications, console applications, and so on). The <xref href=\"System.ComponentModel.AsyncOperationManager\" data-throw-if-not-resolved=\"false\"></xref> provides a convenient way to create a class that runs properly under all application models supported by the .NET Framework.</p>\n<p>The <xref href=\"System.ComponentModel.AsyncOperationManager\" data-throw-if-not-resolved=\"false\"></xref> class has one method, <xref href=\"System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, which returns an <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> that can be used to track the duration of a particular asynchronous task. The <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> for a task can be used to alert clients when a task completes. It can also be used to post progress updates and incremental results without terminating the operation.</p>\n<p>For more information about implementing asynchronous classes, see Implementing the Event-based Asynchronous Pattern.</p>\n"
  example:
  - "\n<p>The following code example demonstrates using the <xref href=\"System.ComponentModel.AsyncOperationManager\" data-throw-if-not-resolved=\"false\"></xref> class to create a class that supports asynchronous operations for any application model. It shows how to implement a class that tests a number to determine whether it is prime. This calculation can be time consuming, so it is done on a separate thread. Progress reports, incremental results, and completion notifications are handled by the <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> class, which ensures that the client's event handlers are called on the proper thread or context.</p>\n<p>For a full code listing, see How to: Implement a Component That Supports the Event-based Asynchronous Pattern. For a full code listing of a client form, see How to: Implement a Client of the Event-based Asynchronous Pattern.</p>System.ComponentModel.AsyncOperationManager#3"
  syntax:
    content: public class AsyncOperationManager
    content.vb: Public Class AsyncOperationManager
  seealso:
  - type: System.ComponentModel.AsyncOperation
    commentId: T:System.ComponentModel.AsyncOperation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ComponentModel.AsyncOperationManager.SynchronizationContext
  commentId: P:System.ComponentModel.AsyncOperationManager.SynchronizationContext
  id: SynchronizationContext
  parent: System.ComponentModel.AsyncOperationManager
  langs:
  - csharp
  - vb
  name: SynchronizationContext
  fullName: System.ComponentModel.AsyncOperationManager.SynchronizationContext
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperationManager.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SynchronizationContext
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperationManager.cs
    startLine: 17
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets the synchronization context for the asynchronous operation.</p>\n"
  remarks: "\n<p>The default implementation is the free-threaded implementation.</p>\n<p>A thread should set the <xref href=\"System.ComponentModel.AsyncOperationManager.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>null</strong> to release the free-threaded factory when it is done, or else its factory will never be disposed.</p>\n"
  syntax:
    content: public static SynchronizationContext SynchronizationContext { get; set; }
    content.vb: Public Shared Property SynchronizationContext As SynchronizationContext
    parameters: []
    return:
      type: System.Threading.SynchronizationContext
  see:
  - type: System.Security.NamedPermissionSet
    commentId: T:System.Security.NamedPermissionSet
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)
  commentId: M:System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)
  id: CreateOperation(System.Object)
  parent: System.ComponentModel.AsyncOperationManager
  langs:
  - csharp
  - vb
  name: CreateOperation(Object)
  fullName: System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperationManager.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateOperation
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/AsyncOperationManager.cs
    startLine: 12
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Returns an <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> for tracking the duration of a particular asynchronous operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns an <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> that you can use to track the duration of a particular asynchronous operation and to alert the application model when the operation completes. You can also use it to post progress updates and incremental results without terminating the operation. The <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> will correctly marshal these calls to the appropriate thread or context for the application model.</p>\n<p>If you implement a class that supports the Event-based Asynchronous Pattern, your class should call <xref href=\"System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> each time your MethodName<strong>Async</strong> method is called. The client application that makes calls to the method can use the <em>userSuppliedState</em> parameter to uniquely identify each invocation, so as to distinguish events raised during the execution of the asynchronous operation.</p>\n<p>Client code must provide a unique value for the <em>userSuppliedState</em> parameter. Non-unique task IDs may cause your implementation to report progress and other events incorrectly. Your code should check for a non-unique task ID and throw an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> if one is detected.</p>\n<p>Your code should track every <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> returned by <xref href=\"System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and use the object in the corresponding underlying asynchronous operation to post updates and terminate the operation. This tracking can be as simple as passing the <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> as a parameter among delegates. In more sophisticated designs, your class can maintain a collection of <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> objects, adding objects when tasks are started and removing them when tasks are completed or canceled. This approach allows you to check for unique <em>userSuppliedState</em> parameter values, and is the method you should use when working with classes that support multiple concurrent invocations.</p>\n<p>For more information about implementing asynchronous classes, see Implementing the Event-based Asynchronous Pattern.</p>\n"
  example:
  - "\n<p>The following code example demonstrates using the <xref href=\"System.ComponentModel.AsyncOperationManager.CreateOperation(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to create an <xref href=\"System.ComponentModel.AsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> for tracking the duration of asynchronous operations. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.AsyncOperationManager\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.AsyncOperationManager#3"
  syntax:
    content: public static AsyncOperation CreateOperation(object userSuppliedState)
    content.vb: Public Shared Function CreateOperation(userSuppliedState As Object) As AsyncOperation
    parameters:
    - id: userSuppliedState
      type: System.Object
    return:
      type: System.ComponentModel.AsyncOperation
  seealso:
  - type: System.ComponentModel.AsyncOperation
    commentId: T:System.ComponentModel.AsyncOperation
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.SynchronizationContext
  parent: System.Threading
  isExternal: false
  name: SynchronizationContext
  fullName: System.Threading.SynchronizationContext
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.ComponentModel.AsyncOperation
  parent: System.ComponentModel
  isExternal: false
  name: AsyncOperation
  fullName: System.ComponentModel.AsyncOperation
