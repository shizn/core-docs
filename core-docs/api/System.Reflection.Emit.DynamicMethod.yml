items:
- uid: System.Reflection.Emit.DynamicMethod
  commentId: T:System.Reflection.Emit.DynamicMethod
  id: DynamicMethod
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.Attributes
  - System.Reflection.Emit.DynamicMethod.CallingConvention
  - System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)
  - System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)
  - System.Reflection.Emit.DynamicMethod.DeclaringType
  - System.Reflection.Emit.DynamicMethod.GetILGenerator
  - System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)
  - System.Reflection.Emit.DynamicMethod.GetParameters
  - System.Reflection.Emit.DynamicMethod.InitLocals
  - System.Reflection.Emit.DynamicMethod.MethodImplementationFlags
  - System.Reflection.Emit.DynamicMethod.Name
  - System.Reflection.Emit.DynamicMethod.ReturnParameter
  - System.Reflection.Emit.DynamicMethod.ReturnType
  - System.Reflection.Emit.DynamicMethod.ToString
  langs:
  - csharp
  - vb
  name: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DynamicMethod
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 20
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> class to generate and execute a method at run time, without having to generate a dynamic assembly and a dynamic type to contain the method. The executable code created by the just-in-time (JIT) compiler is reclaimed when the <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> object is reclaimed. Dynamic methods are the most efficient way to generate and execute small amounts of code.</p>\n<p>A dynamic method can be anonymously hosted, or it can belogically associated with a module or with a type. </p>\n<ul><li>\n<p>If the dynamic method is anonymously hosted, it is located in a system-provided assembly, and therefore is isolated from other code. By default, it does not have access to any non-public data. An anonymously hosted dynamic method can have restricted ability to skip the JIT compiler's visibility checks, if it has been granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag. The trust level of the assembly whose non-public members are accessed by the dynamic method must be equal to, or a subset of, the trust level of the call stack that emitted the dynamic method. For more information about anonymously hosted dynamic methods, see Walkthrough: Emitting Code in Partial Trust Scenarios.</p>\n</li><li>\n<p>If the dynamic method is associated with a module that you specify, the dynamic method is effectively global to that module. It can access all types in the module and all <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) members of the types. You can associate a dynamic method with any module, regardless of whether you created the module, provided that a demand for <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag can be satisfied by the call stack that includes your code. If the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag is included in the grant, the dynamic method can skip the JIT compiler's visibility checks and access the private data of all types declared in the module or in any other module in any assembly. </p>\n<p>When you specify the module with which a dynamic method is associated, that module must not be in the system-provided assembly that is used for anonymous hosting.</p>\n</li><li>\n<p>If the dynamic method is associated with a type that you specify, it has access to all members of the type, regardless of access level. In addition, JIT visibility checks can be skipped. This gives the dynamic method access to the private data of other types declared in the same module or in any other module in any assembly. You can associate a dynamic method with any type, but your code must be granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with both the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flags.</p>\n</li></ul>\n<p>The following table shows which types and members are accessible to an anonymously hosted dynamic method, with and without JIT visibility checks, depending on whether <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag is granted. </p>\n<p>Prior to the .NET Framework 2.0 Service Pack 1, emitting code required <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. This permission is included by default in the FullTrust and LocalIntranet named permission sets, but not in the Internet permission set. Therefore, in earlier versions of the .NET Framework a library can be used with Internet permissions only if it has the <xref href=\"System.Security.SecurityCriticalAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute and also executes an <xref href=\"System.Security.PermissionSet.Assert\" data-throw-if-not-resolved=\"false\"></xref> for <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref>. Such libraries require careful security review because coding errors could result in security holes. The .NET Framework 2.0 SP1 allows code to be emitted in partial trust scenarios without issuing any security demands, because generating code is not inherently a privileged operation. That is, the generated code has no more permissions than the assembly that emits it. This allows libraries that emit code to be security transparent and removes the need to assert <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref>, which simplifies the task of writing a secure library. To use this feature, your application should target the .NET Framework 3.5 or later.</p>\n<p>The following table shows which types and members are accessible to a dynamic method that is associated with a module or with a type in a module. </p>\n<p>A dynamic method that is associated with a module has the permissions of that module. A dynamic method that is associated with a type has the permissions of the module containing that type. </p>\n<p>Dynamic methods and their parameters do not have to be named, but you can specify names to assist in debugging. Custom attributes are not supported on dynamic methods or their parameters.</p>\n<p>Although dynamic methods are <strong>static</strong> methods (<strong>Shared</strong> methods in Visual Basic), the relaxed rules for delegate binding introduced in the .NET Framework 2.0 allow a dynamic method to be bound to an object, so that it acts like an instance method when called using that delegate instance. An example that demonstrates this is provided for the <xref href=\"System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method overload. </p>\n<p>In the .NET Framework 2.0, dynamic methods do not support symbol information, that is, local variable names and line-number mapping. This limitation might be removed in a future version. You can use <xref href=\"System.Reflection.Emit.AssemblyBuilder\" data-throw-if-not-resolved=\"false\"></xref> during development to simplify debugging the generated Microsoft intermediate language (MSIL), and then switch to dynamic methods during final deployment, because the <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> calls are the same in both cases.</p>\n"
  example:
  - <p>The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref href="System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" data-throw-if-not-resolved="false"></xref> method.</p>Reflection.DynamicMethod.All#1
  syntax:
    content: >-
      [ComVisible(true)]

      public sealed class DynamicMethod : MethodInfo, ICustomAttributeProvider, _MemberInfo, _MethodBase, _MethodInfo
    content.vb: >-
      <ComVisible(True)>

      Public NotInheritable Class DynamicMethod
          Inherits MethodInfo
          Implements ICustomAttributeProvider, _MemberInfo, _MethodBase, _MethodInfo
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  - System.Reflection.MethodBase
  - System.Reflection.MethodInfo
  implements:
  - System.Reflection.ICustomAttributeProvider
  - System.Runtime.InteropServices._MemberInfo
  - System.Runtime.InteropServices._MethodBase
  - System.Runtime.InteropServices._MethodInfo
  inheritedMembers:
  - System.Reflection.MethodInfo.Equals(System.Object)
  - System.Reflection.MethodInfo.GetHashCode
  - System.Reflection.MethodInfo.GetBaseDefinition
  - System.Reflection.MethodInfo.GetGenericArguments
  - System.Reflection.MethodInfo.GetGenericMethodDefinition
  - System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.MethodInfo.MemberType
  - System.Reflection.MethodInfo.ReturnTypeCustomAttributes
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.MethodBase.GetCurrentMethod
  - System.Reflection.MethodBase.GetMethodImplementationFlags
  - System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  - System.Reflection.MethodBase.GetMethodBody
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.MethodBase.MethodHandle
  - System.Reflection.MethodBase.IsGenericMethodDefinition
  - System.Reflection.MethodBase.ContainsGenericParameters
  - System.Reflection.MethodBase.IsGenericMethod
  - System.Reflection.MethodBase.IsSecurityCritical
  - System.Reflection.MethodBase.IsSecuritySafeCritical
  - System.Reflection.MethodBase.IsSecurityTransparent
  - System.Reflection.MethodBase.IsPublic
  - System.Reflection.MethodBase.IsPrivate
  - System.Reflection.MethodBase.IsFamily
  - System.Reflection.MethodBase.IsAssembly
  - System.Reflection.MethodBase.IsFamilyAndAssembly
  - System.Reflection.MethodBase.IsFamilyOrAssembly
  - System.Reflection.MethodBase.IsStatic
  - System.Reflection.MethodBase.IsFinal
  - System.Reflection.MethodBase.IsVirtual
  - System.Reflection.MethodBase.IsHideBySig
  - System.Reflection.MethodBase.IsAbstract
  - System.Reflection.MethodBase.IsSpecialName
  - System.Reflection.MethodBase.IsConstructor
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName
  - System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor
  - System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  - System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.GetCustomAttributesData
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.MemberInfo.ReflectedType
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.Module
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  id: '#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Module, Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Reflection.Module, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 165
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n"
  remarks: "\n<p>The dynamic method created with this constructor has access to public and <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) members of all the public and internal types contained in module <em>m</em>. </p>\n<p>Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types in the module and in all other assemblies as well. This is useful, for example, when writing code to serialize objects.</p>\n<p>For backward compatibility, this constructor demands <xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.SecurityPermissionFlag.ControlEvidence\" data-throw-if-not-resolved=\"false\"></xref> flag if the following conditions are both true: <em>m</em> is a module other than the calling module, and the demand for <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag has failed. If the demand for <xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> succeeds, the operation is allowed.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As  Module, skipVisibility As Boolean)
    parameters:
    - id: name
      type: System.String
    - id: attributes
      type: System.Reflection.MethodAttributes
    - id: callingConvention
      type: System.Reflection.CallingConventions
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    - id: m
      type: System.Reflection.Module
    - id: skipVisibility
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element of <em>parameterTypes</em> is <strong>null</strong> or <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>m</em> is a module that provides anonymous hosting for dynamic methods.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>m</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>attributes</em> is a combination of flags other than <xref href=\"System.Reflection.MethodAttributes.Public\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>callingConvention</em> is not <xref href=\"System.Reflection.CallingConventions.Standard\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>returnType</em> is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong>. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type(), System.Reflection.Module, System.Boolean)
  name.vb: DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type(), Module, Boolean)
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)
  id: '#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type, Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 241
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n"
  remarks: "\n<p>The dynamic method is global to the module that contains the type <em>owner</em>. It has access to all members of the type <em>owner</em>.</p>\n<p>The dynamic method created with this constructor has access to all members of the type <em>owner</em>, and to public and <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) members of all the types contained in the module that contains <em>owner</em>. Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.</p>\n<p>For backward compatibility, this constructor demands <xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.SecurityPermissionFlag.ControlEvidence\" data-throw-if-not-resolved=\"false\"></xref> flag if the following conditions are both true: <em>owner</em> is in a module other than the calling module, and the demand for <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag has failed. If the demand for <xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> succeeds, the operation is allowed.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)
    parameters:
    - id: name
      type: System.String
    - id: attributes
      type: System.Reflection.MethodAttributes
    - id: callingConvention
      type: System.Reflection.CallingConventions
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    - id: owner
      type: System.Type
    - id: skipVisibility
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element of <em>parameterTypes</em> is <strong>null</strong> or <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>\n<em>owner</em> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>owner</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>attributes</em> is a combination of flags other than <xref href=\"System.Reflection.MethodAttributes.Public\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>callingConvention</em> is not <xref href=\"System.Reflection.CallingConventions.Standard\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>returnType</em> is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong>. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type, System.Boolean)
  name.vb: DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type(), Type, Boolean)
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])
  id: '#ctor(System.String,System.Type,System.Type[])'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, Type, Type[])
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 74
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types. </p>\n"
  remarks: "\n<p>The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code. </p>\n<p>This constructor specifies that just-in-time (JIT) visibility checks will be enforced for the Microsoft intermediate language (MSIL) of the dynamic method. That is, the code in the dynamic method has access to public methods of public classes. Exceptions are thrown if the method tries to access types or members that are <strong>private</strong>, <strong>protected</strong>, or <strong>internal</strong> (<strong>Friend</strong> in Visual Basic). To create a dynamic method that has restricted ability to skip JIT visibility checks, use the <xref href=\"System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting assembly are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</p>\n<p>This constructor specifies the method attributes <xref href=\"System.Reflection.MethodAttributes.Public\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>, and the calling convention <xref href=\"System.Reflection.CallingConventions.Standard\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor was introduced in the .NET Framework 3.5 or later.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public DynamicMethod(string name, Type returnType, Type[] parameterTypes)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(name As String, returnType As Type, parameterTypes As Type())
    parameters:
    - id: name
      type: System.String
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element of <em>parameterTypes</em> is <strong>null</strong> or <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>returnType</em> is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong>. </p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type())
  name.vb: DynamicMethod(String, Type, Type())
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)
  id: '#ctor(System.String,System.Type,System.Type[],System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, Type, Type[], Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type[], System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 94
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method. </p>\n"
  remarks: "\n<p>The dynamic method that is created by this constructor is associated with an anonymous assembly instead of an existing type or module. The anonymous assembly exists only to provide a sandbox environment for dynamic methods, that is, to isolate them from other code. This environment makes it safe for the dynamic method to be emitted and executed by partially trusted code. </p>\n<p>Anonymously hosted dynamic methods do not have automatic access to any types or members that are <strong>private</strong>, <strong>protected</strong>, or <strong>internal</strong> (<strong>Friend</strong> in Visual Basic). This is different from dynamic methods that are associated with an existing type or module, which have access to hidden members in their associated scope. </p>\n<p>Specify <strong>true</strong> for <em>restrictedSkipVisibility</em> if your dynamic method has to access types or members that are <strong>private</strong>, <strong>protected</strong>, or <strong>internal</strong>. This gives the dynamic method restricted access to these members. That is, the members can be accessed only if the following conditions are met:</p>\n<ul><li>\n<p>The target members belong to an assembly that has a level of trust equal to or lower than the call stack that emits the dynamic method.</p>\n</li><li>\n<p>The call stack that emits the dynamic method is granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag. This is always true when the code is executed with full trust. For partially trusted code, it is true only if the host explicitly grants the permission.</p>\n<p>If the permission has not been granted, a security exception is thrown when <see cref=\"Overload:System.Reflection.Emit.DynamicMethod.CreateDelegate\"></see> is called or when the dynamic method is invoked, not when this constructor is called. No special permissions are required to emit the dynamic method.</p>\n</li></ul>\n<p>For example, a dynamic method that is created with <em>restrictedSkipVisibility</em> set to <strong>true</strong> can access a private member of any assembly on the call stack if the call stack has been granted restricted member access. If the dynamic method is created with partially trusted code on the call stack, it cannot access a private member of a type in a .NET Framework assembly, because such assemblies are fully trusted. </p>\n<p>If <em>restrictedSkipVisibility</em> is <strong>false</strong>, JIT visibility checks are enforced. The code in the dynamic method has access to public methods of public classes, and exceptions are thrown if it tries to access types or members that are <strong>private</strong>, <strong>protected</strong>, or <strong>internal</strong>. </p>\n<p>When an anonymously hosted dynamic method is constructed, the call stack of the emitting assembly is included. When the method is invoked, the permissions of the emitting call stack are used instead of the permissions of the actual caller. Thus, the dynamic method cannot execute at a higher level of privilege than that of the assembly that emitted it, even if it is passed to and executed by an assembly that has a higher trust level.</p>\n<p>This constructor specifies the method attributes <xref href=\"System.Reflection.MethodAttributes.Public\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>, and the calling convention <xref href=\"System.Reflection.CallingConventions.Standard\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor was introduced in the .NET Framework 3.5 or later.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public DynamicMethod(string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)
    parameters:
    - id: name
      type: System.String
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    - id: restrictedSkipVisibility
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element of <em>parameterTypes</em> is <strong>null</strong> or <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>returnType</em> is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong>. </p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type(), System.Boolean)
  name.vb: DynamicMethod(String, Type, Type(), Boolean)
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)
  id: '#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, Type, Type[], Module)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type[], System.Reflection.Module)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 116
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.</p>\n"
  remarks: "\n<p>This constructor specifies method attributes <xref href=\"System.Reflection.MethodAttributes.Public\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>, calling convention <xref href=\"System.Reflection.CallingConventions.Standard\" data-throw-if-not-resolved=\"false\"></xref>, and does not skip just-in-time (JIT) visibility checks.</p>\n<p>The dynamic method created with this constructor has access to public and <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) members of all the types contained in module <em>m</em>. </p>\n<p>For backward compatibility, this constructor demands <xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.SecurityPermissionFlag.ControlEvidence\" data-throw-if-not-resolved=\"false\"></xref> flag if the following conditions are both true: <em>m</em> is a module other than the calling module, and the demand for <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag has failed. If the demand for <xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> succeeds, the operation is allowed.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref href=\"System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Reflection.DynamicMethod.ctor1#1"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(name As String, returnType As Type, parameterTypes As Type(), m As  Module)
    parameters:
    - id: name
      type: System.String
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    - id: m
      type: System.Reflection.Module
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element of <em>parameterTypes</em> is <strong>null</strong> or <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>\n<em>m</em> is a module that provides anonymous hosting for dynamic methods.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>m</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>returnType</em> is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong>. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type(), System.Reflection.Module)
  name.vb: DynamicMethod(String, Type, Type(), Module)
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  id: '#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, Type, Type[], Module, Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type[], System.Reflection.Module, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 140
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n"
  remarks: "\n<p>This constructor specifies method attributes <xref href=\"System.Reflection.MethodAttributes.Public\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>, and calling convention <xref href=\"System.Reflection.CallingConventions.Standard\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The dynamic method created with this constructor has access to public and <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) members of all the types in contained module <em>m</em>. Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.</p>\n<p>For backward compatibility, this constructor demands <xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.SecurityPermissionFlag.ControlEvidence\" data-throw-if-not-resolved=\"false\"></xref> flag if the following conditions are both true: <em>m</em> is a module other than the calling module, and the demand for <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag has failed. If the demand for <xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> succeeds, the operation is allowed.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(name As String, returnType As Type, parameterTypes As Type(), m As  Module, skipVisibility As Boolean)
    parameters:
    - id: name
      type: System.String
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    - id: m
      type: System.Reflection.Module
    - id: skipVisibility
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element of <em>parameterTypes</em> is <strong>null</strong> or <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>\n<em>m</em> is a module that provides anonymous hosting for dynamic methods.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>m</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>returnType</em> is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong>. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type(), System.Reflection.Module, System.Boolean)
  name.vb: DynamicMethod(String, Type, Type(), Module, Boolean)
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)
  id: '#ctor(System.String,System.Type,System.Type[],System.Type)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, Type, Type[], Type)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type[], System.Type)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 192
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.</p>\n"
  remarks: "\n<p>The dynamic method created with this constructor has access to all members of the type <em>owner</em>, and to public and <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) members of all the other types in the module that contains <em>owner</em>.</p>\n<p>This constructor specifies method attributes <xref href=\"System.Reflection.MethodAttributes.Public\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>, calling convention <xref href=\"System.Reflection.CallingConventions.Standard\" data-throw-if-not-resolved=\"false\"></xref>, and does not skip just-in-time (JIT) visibility checks.</p>\n<p>For backward compatibility, this constructor demands <xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.SecurityPermissionFlag.ControlEvidence\" data-throw-if-not-resolved=\"false\"></xref> flag if the following conditions are both true: <em>owner</em> is in a module other than the calling module, and the demand for <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag has failed. If the demand for <xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> succeeds, the operation is allowed.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  example:
  - "\n<p>The following code example creates a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> that is logically associated with a type. This association gives it access to the private members of that type.</p>\n<p>The code example defines a class named <code>Example</code> with a private field, a class named <code>DerivedFromxample</code> that derives from the first class, a delegate type named <code>UseLikeStatic</code> that returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> and has parameters of type <code>Example</code> and <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, and a delegate type named <code>UseLikeInstance</code> that returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> and has one parameter of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The example code then creates a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> that changes the private field of an instance of <code>Example</code> and returns the previous value.</p>\n<p>In general, changing the internal fields of classes is not good object-oriented coding practice.</p>\n<p>The example code creates an instance of <code>Example</code> and then creates two delegates. The first is of type <code>UseLikeStatic</code>, which has the same parameters as the dynamic method. The second is of type <code>UseLikeInstance</code>, which lacks the first parameter (of type <code>Example</code>). This delegate is created using the <xref href=\"System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method overload; the second parameter of that method overload is an instance of <code>Example</code>, in this case the instance just created, which is bound to the newly created delegate. Whenever that delegate is invoked, the dynamic method acts on the bound instance of <code>Example</code>.</p>\n<p>This is an example of the relaxed rules for delegate binding introduced in the .NET Framework 2.0, along with new overloads of the <see cref=\"Overload:System.Delegate.CreateDelegate\"></see> method. For more information, see the <xref href=\"System.Delegate\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>The <code>UseLikeStatic</code> delegate is invoked, passing in the instance of <code>Example</code> that is bound to the <code>UseLikeInstance</code> delegate. Then the <code>UseLikeInstance</code> delegate is invoked, so that both delegates act on the same instance of <code>Example</code>. The changes in the values of the internal field are displayed after each call. Finally, a <code>UseLikeInstance</code> delegate is bound to an instance of <code>DerivedFromxample</code>, and the delegate calls are repeated.</p>Reflection.DynamicMethod.ClosedOver#1"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(name As String, returnType As Type, parameterTypes As Type(), owner As Type)
    parameters:
    - id: name
      type: System.String
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    - id: owner
      type: System.Type
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element of <em>parameterTypes</em> is <strong>null</strong> or <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>owner</em> is an interface, an array, an open generic type, or a type parameter of a generic type or method. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>owner</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>returnType</em> is <strong>null</strong>, or is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong>. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type(), System.Type)
  name.vb: DynamicMethod(String, Type, Type(), Type)
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)
  id: '#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, Type, Type[], Type, Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type[], System.Type, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 216
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.</p>\n"
  remarks: "\n<p>The dynamic method created with this constructor has access to all members of the type <em>owner</em>, and to public and <strong>internal</strong> (<strong>Friend</strong> in Visual Basic) members of all the other types in the module that contains <em>owner</em>. Skipping the JIT compiler's visibility checks allows the dynamic method to access private and protected members of all other types as well. This is useful, for example, when writing code to serialize objects.</p>\n<p>This constructor specifies method attributes <xref href=\"System.Reflection.MethodAttributes.Public\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>, and calling convention <xref href=\"System.Reflection.CallingConventions.Standard\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For backward compatibility, this constructor demands <xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.SecurityPermissionFlag.ControlEvidence\" data-throw-if-not-resolved=\"false\"></xref> flag if the following conditions are both true: <em>owner</em> is in a module other than the calling module, and the demand for <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag has failed. If the demand for <xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> succeeds, the operation is allowed.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this member no longer requires <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit\" data-throw-if-not-resolved=\"false\"></xref> flag. (See Security Issues in Reflection Emit.) To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)
    parameters:
    - id: name
      type: System.String
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    - id: owner
      type: System.Type
    - id: skipVisibility
      type: System.Boolean
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element of <em>parameterTypes</em> is <strong>null</strong> or <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>owner</em> is an interface, an array, an open generic type, or a type parameter of a generic type or method.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>owner</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>returnType</em> is <strong>null</strong>, or is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong>. </p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type(), System.Type, System.Boolean)
  name.vb: DynamicMethod(String, Type, Type(), Type, Boolean)
- uid: System.Reflection.Emit.DynamicMethod.Attributes
  commentId: P:System.Reflection.Emit.DynamicMethod.Attributes
  id: Attributes
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.Emit.DynamicMethod.Attributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Attributes
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 616
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the attributes specified when the dynamic method was created.</p>\n"
  remarks: "\n<p>Currently, the method attributes for a dynamic method are always <xref href=\"System.Reflection.MethodAttributes.Public\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example displays the method attributes of a dynamic method. This code example is part of a larger example provided for the <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> class. </p>Reflection.DynamicMethod.All#21"
  syntax:
    content: public override MethodAttributes Attributes { get; }
    content.vb: Public Overrides ReadOnly Property Attributes As MethodAttributes
    parameters: []
    return:
      type: System.Reflection.MethodAttributes
  overridden: System.Reflection.MethodBase.Attributes
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.DynamicMethod.CallingConvention
  commentId: P:System.Reflection.Emit.DynamicMethod.CallingConvention
  id: CallingConvention
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: CallingConvention
  fullName: System.Reflection.Emit.DynamicMethod.CallingConvention
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CallingConvention
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 618
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the calling convention specified when the dynamic method was created.</p>\n"
  remarks: "\n<p>Currently, the calling convention for a dynamic method is always <xref href=\"System.Reflection.CallingConventions.Standard\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example displays the calling convention of a dynamic method. This code example is part of a larger example provided for the <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> class. </p>Reflection.DynamicMethod.All#22"
  syntax:
    content: public override CallingConventions CallingConvention { get; }
    content.vb: Public Overrides ReadOnly Property CallingConvention As CallingConventions
    parameters: []
    return:
      type: System.Reflection.CallingConventions
  overridden: System.Reflection.MethodBase.CallingConvention
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.DynamicMethod.DeclaringType
  commentId: P:System.Reflection.Emit.DynamicMethod.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DeclaringType
  fullName: System.Reflection.Emit.DynamicMethod.DeclaringType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaringType
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 607
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the type that declares the method, which is always <strong>null</strong> for dynamic methods.</p>\n"
  remarks: "\n<p>This property always returns <strong>null</strong> for dynamic methods. Even when a dynamic method is logically associated with a type, it is not declared by the type.</p>\n"
  example:
  - "\n<p>The following code example displays the declaring type of a dynamic method. This code example is part of a larger example provided for the <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> class. </p>Reflection.DynamicMethod.All#23"
  syntax:
    content: public override Type DeclaringType { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: System.Type
  overridden: System.Reflection.MemberInfo.DeclaringType
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.DynamicMethod.InitLocals
  commentId: P:System.Reflection.Emit.DynamicMethod.InitLocals
  id: InitLocals
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: InitLocals
  fullName: System.Reflection.Emit.DynamicMethod.InitLocals
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InitLocals
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 833
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets or sets a value indicating whether the local variables in the method are zero-initialized. </p>\n"
  remarks: "\n<p>If this property is set to <strong>true</strong>, the emitted Microsoft intermediate language (MSIL) includes initialization of local variables. If it is set to <strong>false</strong>, local variables are not initialized and the generated code is unverifiable.</p>\n"
  example:
  - "\n<p>The following code example displays the <xref href=\"System.Reflection.Emit.DynamicMethod.InitLocals\" data-throw-if-not-resolved=\"false\"></xref> property of a dynamic method. This code example is part of a larger example provided for the <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> class. </p>Reflection.DynamicMethod.All#24"
  syntax:
    content: public bool InitLocals { get; set; }
    content.vb: Public Property InitLocals As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.DynamicMethod.Name
  commentId: P:System.Reflection.Emit.DynamicMethod.Name
  id: Name
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.Emit.DynamicMethod.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 605
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the name of the dynamic method.</p>\n"
  remarks: "\n<p>It is not necessary to name dynamic methods.</p>\n"
  example:
  - "\n<p>The following code example displays the name of a dynamic method. This code example is part of a larger example provided for  the <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> class. </p>Reflection.DynamicMethod.All#27"
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  overridden: System.Reflection.MemberInfo.Name
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.DynamicMethod.ReturnParameter
  commentId: P:System.Reflection.Emit.DynamicMethod.ReturnParameter
  id: ReturnParameter
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: ReturnParameter
  fullName: System.Reflection.Emit.DynamicMethod.ReturnParameter
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReturnParameter
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 770
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the return parameter of the dynamic method.</p>\n"
  remarks: "\n<p>This property always returns <strong>null</strong> for dynamic methods.</p>\n"
  syntax:
    content: public override ParameterInfo ReturnParameter { get; }
    content.vb: Public Overrides ReadOnly Property ReturnParameter As ParameterInfo
    parameters: []
    return:
      type: System.Reflection.ParameterInfo
  overridden: System.Reflection.MethodInfo.ReturnParameter
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.DynamicMethod.ReturnType
  commentId: P:System.Reflection.Emit.DynamicMethod.ReturnType
  id: ReturnType
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: ReturnType
  fullName: System.Reflection.Emit.DynamicMethod.ReturnType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReturnType
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 768
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the type of return value for the dynamic method.</p>\n"
  remarks: "\n<p>If <strong>null</strong> was specified for the return type when the dynamic method was created, this property returns <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example displays the return type of a dynamic method. This code example is part of a larger example provided for the <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> class. </p>Reflection.DynamicMethod.All#30"
  syntax:
    content: public override Type ReturnType { get; }
    content.vb: Public Overrides ReadOnly Property ReturnType As Type
    parameters: []
    return:
      type: System.Type
  overridden: System.Reflection.MethodInfo.ReturnType
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)
  commentId: M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)
  id: CreateDelegate(System.Type)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: CreateDelegate(Type)
  fullName: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateDelegate
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 531
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Completes the dynamic method and creates a delegate that can be used to execute it.</p>\n"
  remarks: "\n<p>Calling the <xref href=\"System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method or the <see cref=\"Overload:System.Reflection.Emit.DynamicMethod.Invoke\"></see> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</p>\n<p>To create a method body for a dynamic method when you have your own MSIL generator, call the <xref href=\"System.Reflection.Emit.DynamicMethod.GetDynamicILInfo\" data-throw-if-not-resolved=\"false\"></xref> method to obtain a <xref href=\"System.Reflection.Emit.DynamicILInfo\" data-throw-if-not-resolved=\"false\"></xref> object. If you do not have your own MSIL generator, call the <see cref=\"Overload:System.Reflection.Emit.DynamicMethod.GetILGenerator\"></see> method to obtain an <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to generate the method body.</p>\n"
  example:
  - "\n<p>The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <see cref=\"Overload:System.Reflection.Emit.DynamicMethod.Invoke\"></see> method.</p>Reflection.DynamicMethod.ctor1#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ComVisible(true)]

      public override sealed Delegate CreateDelegate(Type delegateType)
    content.vb: "<SecuritySafeCritical>\n<ComVisible(True)>\nPublic NotOverridable Overrides Function CreateDelegate(delegateType As Type) As "
    parameters:
    - id: delegateType
      type: System.Type
    return:
      type: System.Delegate
  overridden: System.Reflection.MethodInfo.CreateDelegate(System.Type)
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The dynamic method has no method body.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>delegateType</em> has the wrong number of parameters or the wrong parameter types.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)
  commentId: M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)
  id: CreateDelegate(System.Type,System.Object)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: CreateDelegate(Type, Object)
  fullName: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateDelegate
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 547
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.</p>\n"
  remarks: "\n<p>This method overload creates a delegate bound to a particular object. Such a delegate is said to be closed over its first argument. Although the method is static, it acts as if it were an instance method; the instance is <em>target</em>. </p>\n<p>This method overload requires <em>target</em> to be of the same type as the first parameter of the dynamic method, or to be assignable to that type (for example, a derived class).  The signature of <em>delegateType</em> has all the parameters of the dynamic method except the first. For example, if the dynamic method has the parameters <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>, then <em>delegateType</em> has the parameters <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>; <em>target</em> is of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>Calling the <xref href=\"System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method or the <see cref=\"Overload:System.Reflection.Emit.DynamicMethod.Invoke\"></see> method completes the dynamic method. Any further attempt to alter the dynamic method, such as modifying parameter definitions or emitting more Microsoft intermediate language (MSIL), is ignored; no exception is thrown.</p>\n<p>To create a method body for a dynamic method when you have your own MSIL generator, call the <xref href=\"System.Reflection.Emit.DynamicMethod.GetDynamicILInfo\" data-throw-if-not-resolved=\"false\"></xref> method to obtain a <xref href=\"System.Reflection.Emit.DynamicILInfo\" data-throw-if-not-resolved=\"false\"></xref> object. If you do not have your own MSIL generator, call the <see cref=\"Overload:System.Reflection.Emit.DynamicMethod.GetILGenerator\"></see> method to obtain an <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> object that can be used to generate the method body.</p>\n"
  example:
  - "\n<p>The following code example creates delegate that binds a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> to an instance of a type, so that the method acts on the same instance each time it is invoked.</p>\n<p>The code example defines a class named <code>Example</code> with a private field, a class named <code>DerivedFromxample</code> that derives from the first class, a delegate type named <code>UseLikeStatic</code> that returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> and has parameters of type <code>Example</code> and <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, and a delegate type named <code>UseLikeInstance</code> that returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> and has one parameter of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>The example code then creates a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> that changes the private field of an instance of <code>Example</code> and returns the previous value.</p>\n<p>In general, changing the internal fields of classes is not good object-oriented coding practice.</p>\n<p>The example code creates an instance of <code>Example</code> and then creates two delegates. The first is of type <code>UseLikeStatic</code>, which has the same parameters as the dynamic method. The second is of type <code>UseLikeInstance</code>, which lacks the first parameter (of type <code>Example</code>). This delegate is created using the <xref href=\"System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method overload; the second parameter of that method overload is an instance of <code>Example</code>, in this case the instance just created, which is bound to the newly created delegate. Whenever that delegate is invoked, the dynamic method acts on the bound instance of <code>Example</code>.</p>\n<p>This is an example of the relaxed rules for delegate binding introduced in the .NET Framework 2.0, along with new overloads of the <see cref=\"Overload:System.Delegate.CreateDelegate\"></see> method. For more information, see the <xref href=\"System.Delegate\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>The <code>UseLikeStatic</code> delegate is invoked, passing in the instance of <code>Example</code> that is bound to the <code>UseLikeInstance</code> delegate. Then the <code>UseLikeInstance</code> delegate is invoked, so that both delegates act on the same instance of <code>Example</code>. The changes in the values of the internal field are displayed after each call. Finally, a <code>UseLikeInstance</code> delegate is bound to an instance of <code>DerivedFromxample</code>, and the delegate calls are repeated.</p>Reflection.DynamicMethod.ClosedOver#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ComVisible(true)]

      public override sealed Delegate CreateDelegate(Type delegateType, object target)
    content.vb: "<SecuritySafeCritical>\n<ComVisible(True)>\nPublic NotOverridable Overrides Function CreateDelegate(delegateType As Type, target As Object) As "
    parameters:
    - id: delegateType
      type: System.Type
    - id: target
      type: System.Object
    return:
      type: System.Delegate
  overridden: System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The dynamic method has no method body.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>target</em> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.</p>\n<p>-or-</p>\n<p>\n<em>delegateType</em> has the wrong number of parameters or the wrong parameter types.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator
  commentId: M:System.Reflection.Emit.DynamicMethod.GetILGenerator
  id: GetILGenerator
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: GetILGenerator()
  fullName: System.Reflection.Emit.DynamicMethod.GetILGenerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetILGenerator
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 817
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.</p>\n"
  remarks: "\n<p>After a dynamic method has been completed, by calling the <see cref=\"Overload:System.Reflection.Emit.DynamicMethod.CreateDelegate\"></see> or <see cref=\"Overload:System.Reflection.Emit.DynamicMethod.Invoke\"></see> method, any further attempt to add MSIL is ignored. No exception is thrown.</p>\n<p>There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the \"Verification\" section in Remarks for <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example creates a dynamic method that takes two parameters. The example emits a simple function body that prints the first parameter to the console, and the example uses the second parameter as the return value of the method. The example completes the method by creating a delegate, invokes the delegate with different parameters, and finally invokes the dynamic method using the <xref href=\"System.Reflection.Emit.DynamicMethod.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Reflection.DynamicMethod.ctor1#1"
  syntax:
    content: public ILGenerator GetILGenerator()
    content.vb: Public Function GetILGenerator As ILGenerator
    return:
      type: System.Reflection.Emit.ILGenerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)
  commentId: M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)
  id: GetILGenerator(System.Int32)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: GetILGenerator(Int32)
  fullName: System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetILGenerator
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 821
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.</p>\n"
  remarks: "\n<p>After a dynamic method has been completed, by calling the <see cref=\"Overload:System.Reflection.Emit.DynamicMethod.CreateDelegate\"></see> or <see cref=\"Overload:System.Reflection.Emit.DynamicMethod.Invoke\"></see> method, any further attempt to add MSIL is ignored. No exception is thrown.</p>\n<p>There are restrictions on unverifiable code in dynamic methods, even in some full-trust scenarios. See the \"Verification\" section in Remarks for <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates this method overload. This code example is part of a larger example provided for the <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> class. </p>Reflection.DynamicMethod.All#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public ILGenerator GetILGenerator(int streamSize)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function GetILGenerator(streamSize As Integer) As ILGenerator
    parameters:
    - id: streamSize
      type: System.Int32
    return:
      type: System.Reflection.Emit.ILGenerator
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.DynamicMethod.GetParameters
  commentId: M:System.Reflection.Emit.DynamicMethod.GetParameters
  id: GetParameters
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: GetParameters()
  fullName: System.Reflection.Emit.DynamicMethod.GetParameters()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetParameters
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 622
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the parameters of the dynamic method.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> objects returned by this method are for information only. Use the <xref href=\"System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to set or change the characteristics of the parameters.</p>\n"
  example:
  - "\n<p>The following code example displays the parameters of a dynamic method. This code example is part of a larger example provided for the <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> class. </p>Reflection.DynamicMethod.All#34"
  syntax:
    content: public override ParameterInfo[] GetParameters()
    content.vb: Public Overrides Function GetParameters As ParameterInfo()
    return:
      type: System.Reflection.ParameterInfo[]
  overridden: System.Reflection.MethodBase.GetParameters
  seealso:
  - type: System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
    commentId: M:System.Reflection.Emit.DynamicMethod.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.DynamicMethod.ToString
  commentId: M:System.Reflection.Emit.DynamicMethod.ToString
  id: ToString
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Reflection.Emit.DynamicMethod.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 603
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the signature of the method, represented as a string.</p>\n"
  remarks: "\n<p>The signature includes only types and the method name, if any. Parameter names are not included.</p>\n"
  example:
  - "\n<p>The following code example displays the <xref href=\"System.Reflection.Emit.DynamicMethod.ToString\" data-throw-if-not-resolved=\"false\"></xref> method of a dynamic method. This code example is part of a larger example provided for the <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> class. </p>Reflection.DynamicMethod.All#32"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.DynamicMethod.MethodImplementationFlags
  commentId: P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags
  id: MethodImplementationFlags
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: MethodImplementationFlags
  fullName: System.Reflection.Emit.DynamicMethod.MethodImplementationFlags
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit.Lightweight/ref/System.Reflection.Emit.Lightweight.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MethodImplementationFlags
    path: src/System.Reflection.Emit.Lightweight/ref/System.Reflection.Emit.Lightweight.Manual.cs
    startLine: 12
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  syntax:
    content: public override MethodImplAttributes MethodImplementationFlags { get; }
    content.vb: Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes
    parameters: []
    return:
      type: System.Reflection.MethodImplAttributes
  overridden: System.Reflection.MethodBase.MethodImplementationFlags
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Runtime.InteropServices._MemberInfo
  parent: System.Runtime.InteropServices
  isExternal: true
  name: _MemberInfo
  fullName: System.Runtime.InteropServices._MemberInfo
- uid: System.Runtime.InteropServices._MethodBase
  parent: System.Runtime.InteropServices
  isExternal: true
  name: _MethodBase
  fullName: System.Runtime.InteropServices._MethodBase
- uid: System.Runtime.InteropServices._MethodInfo
  parent: System.Runtime.InteropServices
  isExternal: true
  name: _MethodInfo
  fullName: System.Runtime.InteropServices._MethodInfo
- uid: System.Reflection.MethodInfo.Equals(System.Object)
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: Equals(Object)
  fullName: System.Reflection.MethodInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MethodInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MethodInfo.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MethodInfo.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodInfo.GetHashCode
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: GetHashCode()
  fullName: System.Reflection.MethodInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MethodInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MethodInfo.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MethodInfo.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodInfo.GetBaseDefinition
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: GetBaseDefinition()
  fullName: System.Reflection.MethodInfo.GetBaseDefinition()
  spec.csharp:
  - uid: System.Reflection.MethodInfo.GetBaseDefinition
    name: GetBaseDefinition
    fullName: System.Reflection.MethodInfo.GetBaseDefinition
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.GetBaseDefinition
    name: GetBaseDefinition
    fullName: System.Reflection.MethodInfo.GetBaseDefinition
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodInfo.GetGenericArguments
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: GetGenericArguments()
  fullName: System.Reflection.MethodInfo.GetGenericArguments()
  spec.csharp:
  - uid: System.Reflection.MethodInfo.GetGenericArguments
    name: GetGenericArguments
    fullName: System.Reflection.MethodInfo.GetGenericArguments
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.GetGenericArguments
    name: GetGenericArguments
    fullName: System.Reflection.MethodInfo.GetGenericArguments
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodInfo.GetGenericMethodDefinition
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: GetGenericMethodDefinition()
  fullName: System.Reflection.MethodInfo.GetGenericMethodDefinition()
  spec.csharp:
  - uid: System.Reflection.MethodInfo.GetGenericMethodDefinition
    name: GetGenericMethodDefinition
    fullName: System.Reflection.MethodInfo.GetGenericMethodDefinition
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.GetGenericMethodDefinition
    name: GetGenericMethodDefinition
    fullName: System.Reflection.MethodInfo.GetGenericMethodDefinition
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: MakeGenericMethod(Type[])
  fullName: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
  fullname.vb: System.Reflection.MethodInfo.MakeGenericMethod(System.Type())
  name.vb: MakeGenericMethod(Type())
  spec.csharp:
  - uid: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
    name: MakeGenericMethod
    fullName: System.Reflection.MethodInfo.MakeGenericMethod
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
    name: MakeGenericMethod
    fullName: System.Reflection.MethodInfo.MakeGenericMethod
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: _MethodInfo.GetType()
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetType()
  name.vb: System.Runtime.InteropServices._MethodInfo.GetType()
  spec.csharp:
  - uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType
    name: _MethodInfo.GetType
    fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetType
    name: System.Runtime.InteropServices._MethodInfo.GetType
    fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: _MethodInfo.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(System.UInt32)
  name.vb: System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount(UInt32)
  spec.csharp:
  - uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)
    name: _MethodInfo.GetTypeInfoCount
    fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfoCount(System.UInt32@)
    name: System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount
    fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfoCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: _MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr)
  name.vb: System.Runtime.InteropServices._MethodInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  spec.csharp:
  - uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    name: _MethodInfo.GetTypeInfo
    fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    name: System.Runtime.InteropServices._MethodInfo.GetTypeInfo
    fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetTypeInfo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: _MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr)
  name.vb: System.Runtime.InteropServices._MethodInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  spec.csharp:
  - uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    name: _MethodInfo.GetIDsOfNames
    fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetIDsOfNames
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    name: System.Runtime.InteropServices._MethodInfo.GetIDsOfNames
    fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.GetIDsOfNames
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: _MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr)
  name.vb: System.Runtime.InteropServices._MethodInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  spec.csharp:
  - uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    name: _MethodInfo.Invoke
    fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.Invoke
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    fullName: System.Int16
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.System#Runtime#InteropServices#_MethodInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    name: System.Runtime.InteropServices._MethodInfo.Invoke
    fullName: System.Reflection.MethodInfo.System.Runtime.InteropServices._MethodInfo.Invoke
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    fullName: System.Int16
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodInfo.MemberType
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: MemberType
  fullName: System.Reflection.MethodInfo.MemberType
- uid: System.Reflection.MethodInfo.ReturnTypeCustomAttributes
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: ReturnTypeCustomAttributes
  fullName: System.Reflection.MethodInfo.ReturnTypeCustomAttributes
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: GetMethodFromHandle(RuntimeMethodHandle)
  fullName: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
    name: GetMethodFromHandle
    fullName: System.Reflection.MethodBase.GetMethodFromHandle
  - name: (
    fullName: (
  - uid: System.RuntimeMethodHandle
    name: RuntimeMethodHandle
    fullName: System.RuntimeMethodHandle
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
    name: GetMethodFromHandle
    fullName: System.Reflection.MethodBase.GetMethodFromHandle
  - name: (
    fullName: (
  - uid: System.RuntimeMethodHandle
    name: RuntimeMethodHandle
    fullName: System.RuntimeMethodHandle
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)
  fullName: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle, System.RuntimeTypeHandle)
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
    name: GetMethodFromHandle
    fullName: System.Reflection.MethodBase.GetMethodFromHandle
  - name: (
    fullName: (
  - uid: System.RuntimeMethodHandle
    name: RuntimeMethodHandle
    fullName: System.RuntimeMethodHandle
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.RuntimeTypeHandle
    name: RuntimeTypeHandle
    fullName: System.RuntimeTypeHandle
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
    name: GetMethodFromHandle
    fullName: System.Reflection.MethodBase.GetMethodFromHandle
  - name: (
    fullName: (
  - uid: System.RuntimeMethodHandle
    name: RuntimeMethodHandle
    fullName: System.RuntimeMethodHandle
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.RuntimeTypeHandle
    name: RuntimeTypeHandle
    fullName: System.RuntimeTypeHandle
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.GetCurrentMethod
  parent: System.Reflection.MethodBase
  isExternal: true
  name: GetCurrentMethod()
  fullName: System.Reflection.MethodBase.GetCurrentMethod()
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetCurrentMethod
    name: GetCurrentMethod
    fullName: System.Reflection.MethodBase.GetCurrentMethod
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetCurrentMethod
    name: GetCurrentMethod
    fullName: System.Reflection.MethodBase.GetCurrentMethod
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.GetMethodImplementationFlags
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetMethodImplementationFlags()
  fullName: System.Reflection.MethodBase.GetMethodImplementationFlags()
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetMethodImplementationFlags
    name: GetMethodImplementationFlags
    fullName: System.Reflection.MethodBase.GetMethodImplementationFlags
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetMethodImplementationFlags
    name: GetMethodImplementationFlags
    fullName: System.Reflection.MethodBase.GetMethodImplementationFlags
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: Invoke(Object, BindingFlags, Binder, Object[], CultureInfo)
  fullName: System.Reflection.MethodBase.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo)
  fullname.vb: System.Reflection.MethodBase.Invoke(System.Object, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object(), System.Globalization.CultureInfo)
  name.vb: Invoke(Object, BindingFlags, Binder, Object(), CultureInfo)
  spec.csharp:
  - uid: System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
    name: Invoke
    fullName: System.Reflection.MethodBase.Invoke
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.Binder
    name: Binder
    fullName: System.Reflection.Binder
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)
    name: Invoke
    fullName: System.Reflection.MethodBase.Invoke
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Reflection.Binder
    name: Binder
    fullName: System.Reflection.Binder
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  parent: System.Reflection.MethodBase
  isExternal: true
  name: Invoke(Object, Object[])
  fullName: System.Reflection.MethodBase.Invoke(System.Object, System.Object[])
  fullname.vb: System.Reflection.MethodBase.Invoke(System.Object, System.Object())
  name.vb: Invoke(Object, Object())
  spec.csharp:
  - uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
    name: Invoke
    fullName: System.Reflection.MethodBase.Invoke
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
    name: Invoke
    fullName: System.Reflection.MethodBase.Invoke
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.GetMethodBody
  parent: System.Reflection.MethodBase
  isExternal: true
  name: GetMethodBody()
  fullName: System.Reflection.MethodBase.GetMethodBody()
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetMethodBody
    name: GetMethodBody
    fullName: System.Reflection.MethodBase.GetMethodBody
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetMethodBody
    name: GetMethodBody
    fullName: System.Reflection.MethodBase.GetMethodBody
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.GetType()
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetType()
  name.vb: System.Runtime.InteropServices._MethodBase.GetType()
  spec.csharp:
  - uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType
    name: _MethodBase.GetType
    fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetType
    name: System.Runtime.InteropServices._MethodBase.GetType
    fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(System.UInt32)
  name.vb: System.Runtime.InteropServices._MethodBase.GetTypeInfoCount(UInt32)
  spec.csharp:
  - uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
    name: _MethodBase.GetTypeInfoCount
    fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfoCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfoCount(System.UInt32@)
    name: System.Runtime.InteropServices._MethodBase.GetTypeInfoCount
    fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfoCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr)
  name.vb: System.Runtime.InteropServices._MethodBase.GetTypeInfo(UInt32, UInt32, IntPtr)
  spec.csharp:
  - uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    name: _MethodBase.GetTypeInfo
    fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    name: System.Runtime.InteropServices._MethodBase.GetTypeInfo
    fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetTypeInfo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr)
  name.vb: System.Runtime.InteropServices._MethodBase.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  spec.csharp:
  - uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    name: _MethodBase.GetIDsOfNames
    fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetIDsOfNames
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    name: System.Runtime.InteropServices._MethodBase.GetIDsOfNames
    fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.GetIDsOfNames
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr)
  name.vb: System.Runtime.InteropServices._MethodBase.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  spec.csharp:
  - uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    name: _MethodBase.Invoke
    fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.Invoke
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    fullName: System.Int16
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    name: System.Runtime.InteropServices._MethodBase.Invoke
    fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.Invoke
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    fullName: System.Int16
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.MethodHandle
  parent: System.Reflection.MethodBase
  isExternal: true
  name: MethodHandle
  fullName: System.Reflection.MethodBase.MethodHandle
- uid: System.Reflection.MethodBase.IsGenericMethodDefinition
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsGenericMethodDefinition
  fullName: System.Reflection.MethodBase.IsGenericMethodDefinition
- uid: System.Reflection.MethodBase.ContainsGenericParameters
  parent: System.Reflection.MethodBase
  isExternal: false
  name: ContainsGenericParameters
  fullName: System.Reflection.MethodBase.ContainsGenericParameters
- uid: System.Reflection.MethodBase.IsGenericMethod
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsGenericMethod
  fullName: System.Reflection.MethodBase.IsGenericMethod
- uid: System.Reflection.MethodBase.IsSecurityCritical
  parent: System.Reflection.MethodBase
  isExternal: true
  name: IsSecurityCritical
  fullName: System.Reflection.MethodBase.IsSecurityCritical
- uid: System.Reflection.MethodBase.IsSecuritySafeCritical
  parent: System.Reflection.MethodBase
  isExternal: true
  name: IsSecuritySafeCritical
  fullName: System.Reflection.MethodBase.IsSecuritySafeCritical
- uid: System.Reflection.MethodBase.IsSecurityTransparent
  parent: System.Reflection.MethodBase
  isExternal: true
  name: IsSecurityTransparent
  fullName: System.Reflection.MethodBase.IsSecurityTransparent
- uid: System.Reflection.MethodBase.IsPublic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsPublic
  fullName: System.Reflection.MethodBase.IsPublic
- uid: System.Reflection.MethodBase.IsPrivate
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsPrivate
  fullName: System.Reflection.MethodBase.IsPrivate
- uid: System.Reflection.MethodBase.IsFamily
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamily
  fullName: System.Reflection.MethodBase.IsFamily
- uid: System.Reflection.MethodBase.IsAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsAssembly
  fullName: System.Reflection.MethodBase.IsAssembly
- uid: System.Reflection.MethodBase.IsFamilyAndAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamilyAndAssembly
  fullName: System.Reflection.MethodBase.IsFamilyAndAssembly
- uid: System.Reflection.MethodBase.IsFamilyOrAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamilyOrAssembly
  fullName: System.Reflection.MethodBase.IsFamilyOrAssembly
- uid: System.Reflection.MethodBase.IsStatic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsStatic
  fullName: System.Reflection.MethodBase.IsStatic
- uid: System.Reflection.MethodBase.IsFinal
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFinal
  fullName: System.Reflection.MethodBase.IsFinal
- uid: System.Reflection.MethodBase.IsVirtual
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsVirtual
  fullName: System.Reflection.MethodBase.IsVirtual
- uid: System.Reflection.MethodBase.IsHideBySig
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsHideBySig
  fullName: System.Reflection.MethodBase.IsHideBySig
- uid: System.Reflection.MethodBase.IsAbstract
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsAbstract
  fullName: System.Reflection.MethodBase.IsAbstract
- uid: System.Reflection.MethodBase.IsSpecialName
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsSpecialName
  fullName: System.Reflection.MethodBase.IsSpecialName
- uid: System.Reflection.MethodBase.IsConstructor
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsConstructor
  fullName: System.Reflection.MethodBase.IsConstructor
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPublic
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsPublic
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsPublic
  name.vb: System.Runtime.InteropServices._MethodBase.IsPublic
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsPrivate
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsPrivate
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsPrivate
  name.vb: System.Runtime.InteropServices._MethodBase.IsPrivate
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamily
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsFamily
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsFamily
  name.vb: System.Runtime.InteropServices._MethodBase.IsFamily
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAssembly
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsAssembly
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsAssembly
  name.vb: System.Runtime.InteropServices._MethodBase.IsAssembly
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyAndAssembly
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsFamilyAndAssembly
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
  name.vb: System.Runtime.InteropServices._MethodBase.IsFamilyAndAssembly
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFamilyOrAssembly
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsFamilyOrAssembly
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
  name.vb: System.Runtime.InteropServices._MethodBase.IsFamilyOrAssembly
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsStatic
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsStatic
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsStatic
  name.vb: System.Runtime.InteropServices._MethodBase.IsStatic
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsFinal
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsFinal
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsFinal
  name.vb: System.Runtime.InteropServices._MethodBase.IsFinal
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsVirtual
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsVirtual
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsVirtual
  name.vb: System.Runtime.InteropServices._MethodBase.IsVirtual
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsHideBySig
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsHideBySig
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsHideBySig
  name.vb: System.Runtime.InteropServices._MethodBase.IsHideBySig
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsAbstract
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsAbstract
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsAbstract
  name.vb: System.Runtime.InteropServices._MethodBase.IsAbstract
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsSpecialName
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsSpecialName
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsSpecialName
  name.vb: System.Runtime.InteropServices._MethodBase.IsSpecialName
- uid: System.Reflection.MethodBase.System#Runtime#InteropServices#_MethodBase#IsConstructor
  parent: System.Reflection.MethodBase
  isExternal: true
  name: _MethodBase.IsConstructor
  fullName: System.Reflection.MethodBase.System.Runtime.InteropServices._MethodBase.IsConstructor
  name.vb: System.Runtime.InteropServices._MethodBase.IsConstructor
- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: GetCustomAttributes(Boolean)
  fullName: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
    name: GetCustomAttributes
    fullName: System.Reflection.MemberInfo.GetCustomAttributes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)
    name: GetCustomAttributes
    fullName: System.Reflection.MemberInfo.GetCustomAttributes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: GetCustomAttributes(Type, Boolean)
  fullName: System.Reflection.MemberInfo.GetCustomAttributes(System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
    name: GetCustomAttributes
    fullName: System.Reflection.MemberInfo.GetCustomAttributes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)
    name: GetCustomAttributes
    fullName: System.Reflection.MemberInfo.GetCustomAttributes
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: IsDefined(Type, Boolean)
  fullName: System.Reflection.MemberInfo.IsDefined(System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
    name: IsDefined
    fullName: System.Reflection.MemberInfo.IsDefined
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)
    name: IsDefined
    fullName: System.Reflection.MemberInfo.IsDefined
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.GetCustomAttributesData
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: GetCustomAttributesData()
  fullName: System.Reflection.MemberInfo.GetCustomAttributesData()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetCustomAttributesData
    name: GetCustomAttributesData
    fullName: System.Reflection.MemberInfo.GetCustomAttributesData
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetCustomAttributesData
    name: GetCustomAttributesData
    fullName: System.Reflection.MemberInfo.GetCustomAttributesData
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: _MemberInfo.GetType()
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetType()
  name.vb: System.Runtime.InteropServices._MemberInfo.GetType()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
    name: _MemberInfo.GetType
    fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetType
    name: System.Runtime.InteropServices._MemberInfo.GetType
    fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: _MemberInfo.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(System.UInt32)
  name.vb: System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount(UInt32)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
    name: _MemberInfo.GetTypeInfoCount
    fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfoCount(System.UInt32@)
    name: System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount
    fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfoCount
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: _MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr)
  name.vb: System.Runtime.InteropServices._MemberInfo.GetTypeInfo(UInt32, UInt32, IntPtr)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    name: _MemberInfo.GetTypeInfo
    fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    name: System.Runtime.InteropServices._MemberInfo.GetTypeInfo
    fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetTypeInfo
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: _MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr)
  name.vb: System.Runtime.InteropServices._MemberInfo.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    name: _MemberInfo.GetIDsOfNames
    fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetIDsOfNames
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    name: System.Runtime.InteropServices._MemberInfo.GetIDsOfNames
    fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.GetIDsOfNames
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: _MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr)
  name.vb: System.Runtime.InteropServices._MemberInfo.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    name: _MemberInfo.Invoke
    fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.Invoke
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    fullName: System.Int16
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Runtime#InteropServices#_MemberInfo#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    name: System.Runtime.InteropServices._MemberInfo.Invoke
    fullName: System.Reflection.MemberInfo.System.Runtime.InteropServices._MemberInfo.Invoke
    isExternal: true
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    fullName: System.Int16
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.ReflectedType
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: ReflectedType
  fullName: System.Reflection.MemberInfo.ReflectedType
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.MetadataToken
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MetadataToken
  fullName: System.Reflection.MemberInfo.MetadataToken
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  fullName: System.Reflection.Module
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.Attributes
  parent: System.Reflection.MethodBase
  isExternal: false
  name: Attributes
  fullName: System.Reflection.MethodBase.Attributes
- uid: System.Reflection.MethodBase.CallingConvention
  parent: System.Reflection.MethodBase
  isExternal: false
  name: CallingConvention
  fullName: System.Reflection.MethodBase.CallingConvention
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System.Reflection.MethodInfo.ReturnParameter
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: ReturnParameter
  fullName: System.Reflection.MethodInfo.ReturnParameter
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Reflection.MethodInfo.ReturnType
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: ReturnType
  fullName: System.Reflection.MethodInfo.ReturnType
- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type)
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: CreateDelegate(Type)
  fullName: System.Reflection.MethodInfo.CreateDelegate(System.Type)
  spec.csharp:
  - uid: System.Reflection.MethodInfo.CreateDelegate(System.Type)
    name: CreateDelegate
    fullName: System.Reflection.MethodInfo.CreateDelegate
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.CreateDelegate(System.Type)
    name: CreateDelegate
    fullName: System.Reflection.MethodInfo.CreateDelegate
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  fullName: System.Delegate
- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)
  parent: System.Reflection.MethodInfo
  isExternal: true
  name: CreateDelegate(Type, Object)
  fullName: System.Reflection.MethodInfo.CreateDelegate(System.Type, System.Object)
  spec.csharp:
  - uid: System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)
    name: CreateDelegate
    fullName: System.Reflection.MethodInfo.CreateDelegate
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)
    name: CreateDelegate
    fullName: System.Reflection.MethodInfo.CreateDelegate
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.Emit.ILGenerator
  parent: System.Reflection.Emit
  isExternal: false
  name: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.MethodBase.GetParameters
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetParameters()
  fullName: System.Reflection.MethodBase.GetParameters()
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetParameters
    name: GetParameters
    fullName: System.Reflection.MethodBase.GetParameters
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetParameters
    name: GetParameters
    fullName: System.Reflection.MethodBase.GetParameters
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.ParameterInfo[]
  isExternal: false
  name: ParameterInfo[]
  fullName: System.Reflection.ParameterInfo[]
  fullname.vb: System.Reflection.ParameterInfo()
  name.vb: ParameterInfo()
  spec.csharp:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: ()
    fullName: ()
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.MethodImplementationFlags
  parent: System.Reflection.MethodBase
  isExternal: false
  name: MethodImplementationFlags
  fullName: System.Reflection.MethodBase.MethodImplementationFlags
- uid: System.Reflection.MethodImplAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodImplAttributes
  fullName: System.Reflection.MethodImplAttributes
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
