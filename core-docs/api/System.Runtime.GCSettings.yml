items:
- uid: System.Runtime.GCSettings
  commentId: T:System.Runtime.GCSettings
  id: GCSettings
  parent: System.Runtime
  children:
  - System.Runtime.GCSettings.IsServerGC
  - System.Runtime.GCSettings.LargeObjectHeapCompactionMode
  - System.Runtime.GCSettings.LatencyMode
  langs:
  - csharp
  - vb
  name: GCSettings
  fullName: System.Runtime.GCSettings
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GCSettings
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2815
  assemblies:
  - System.Runtime
  namespace: System.Runtime
  summary: "\n<p>Specifies the garbage collection settings for the current process. </p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Runtime.GCSettings.IsServerGC\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether server garbage collection is enabled for the current process.</p>\n"
  syntax:
    content: public class GCSettings
    content.vb: Public Class GCSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Runtime.GCSettings.IsServerGC
  commentId: P:System.Runtime.GCSettings.IsServerGC
  id: IsServerGC
  parent: System.Runtime.GCSettings
  langs:
  - csharp
  - vb
  name: IsServerGC
  fullName: System.Runtime.GCSettings.IsServerGC
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsServerGC
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2817
  assemblies:
  - System.Runtime
  namespace: System.Runtime
  summary: "\n<p>Gets a value that indicates whether server garbage collection is enabled.</p>\n"
  remarks: "\n<p>For information about server garbage collection, see the \"Workstation and Server Garbage Collection\" section in Fundamentals of Garbage Collection. </p>\n<p>If server garbage collection is not enabled, workstation garbage collection is in effect (with or without concurrent collection). Server garbage collection is available only on multiprocessor computers.</p>\n<p>An unmanaged host can request server garbage collection, and the host request overrides configuration file settings. If the host does not specify the type of garbage collection, you can use a configuration file setting to specify server garbage collection. This setting is valid only in the application configuration file, not in the machine configuration file (see Configuring Apps by using Configuration Files). The following example shows the contents of a sample application configuration file that enables server garbage collection.</p>\n<pre><code><configuration>\n<runtime>\n<gcServer enabled=\"true\" />\n</runtime>\n</configuration></code></pre>\n"
  example:
  - "\n<p>The following example indicates whether the host computer is using server or workstation garbage collection. </p>Environment.IsServerGC#1"
  syntax:
    content: public static bool IsServerGC { get; }
    content.vb: Public Shared ReadOnly Property IsServerGC As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if server garbage collection is enabled; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Runtime.GCSettings.LargeObjectHeapCompactionMode
  commentId: P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode
  id: LargeObjectHeapCompactionMode
  parent: System.Runtime.GCSettings
  langs:
  - csharp
  - vb
  name: LargeObjectHeapCompactionMode
  fullName: System.Runtime.GCSettings.LargeObjectHeapCompactionMode
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LargeObjectHeapCompactionMode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2818
  assemblies:
  - System.Runtime
  namespace: System.Runtime
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Gets or sets a value that indicates whether a full blocking garbage collection compacts the large object heap (LOH). </p>\n"
  remarks: "\n<p>The LOH is used for allocating memory for large objects (such as arrays) that require more than 85,000 bytes. Because of the performance impact of copying large blocks of memory, the garbage collector ordinarily sweeps the   LOH, which involves creating a list of the memory locations that were occupied by dead objects and that can be reused to satisfy future requests for allocation of memory for large objects. However, in apps that make extensive use of the LOH to store transient objects, memory fragmentation can also adversely impact performance. In this case, it is possible to use the <xref href=\"System.Runtime.GCSettings.LargeObjectHeapCompactionMode\" data-throw-if-not-resolved=\"false\"></xref> property to compact rather than simply sweep the LOH during a garbage collection. </p>\n<p>The default value of the <xref href=\"System.Runtime.GCSettings.LargeObjectHeapCompactionMode\" data-throw-if-not-resolved=\"false\"></xref> property is <xref href=\"System.Runtime.GCLargeObjectHeapCompactionMode.Default\" data-throw-if-not-resolved=\"false\"></xref>, which indicates that the LOH is not compacted during garbage collections. If you assign the property a value of <xref href=\"System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce\" data-throw-if-not-resolved=\"false\"></xref>, the LOH is compacted during the next full blocking garbage collection, and the property value is reset to <xref href=\"System.Runtime.GCLargeObjectHeapCompactionMode.Default\" data-throw-if-not-resolved=\"false\"></xref>.  </p>\n<p>Background garbage collections are not blocking. This means that, if you set the <xref href=\"System.Runtime.GCSettings.LargeObjectHeapCompactionMode\" data-throw-if-not-resolved=\"false\"></xref> property to <xref href=\"System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce\" data-throw-if-not-resolved=\"false\"></xref>, any background generation 2 collections that occur subsequently do not compact the LOH. Only the first blocking generation 2 collection compacts the LOH. </p>\n<p>After the <xref href=\"System.Runtime.GCSettings.LargeObjectHeapCompactionMode\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Runtime.GCLargeObjectHeapCompactionMode.CompactOnce\" data-throw-if-not-resolved=\"false\"></xref>, the next full blocking garbage collection (and compaction of the LOH) occurs at an indeterminate future time. You can compact the LOH immediately by using code like the following: </p>System.Runtime.GCSettings#1"
  syntax:
    content: >-
      public static GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode

      {
          get;
          [SecurityCritical]
          set;
      }
    content.vb: Public Shared Property LargeObjectHeapCompactionMode As GCLargeObjectHeapCompactionMode
    parameters: []
    return:
      type: System.Runtime.GCLargeObjectHeapCompactionMode
      description: "\n<p>One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH. </p>\n"
  seealso:
  - type: System.Runtime.GCLargeObjectHeapCompactionMode
    commentId: T:System.Runtime.GCLargeObjectHeapCompactionMode
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.GCSettings.LatencyMode
  commentId: P:System.Runtime.GCSettings.LatencyMode
  id: LatencyMode
  parent: System.Runtime.GCSettings
  langs:
  - csharp
  - vb
  name: LatencyMode
  fullName: System.Runtime.GCSettings.LatencyMode
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LatencyMode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2819
  assemblies:
  - System.Runtime
  namespace: System.Runtime
  summary: "\n<p>Gets or sets the current latency mode for garbage collection.</p>\n"
  remarks: "\n<p>You can reduce the level of intrusiveness of garbage collection in your application by setting the <xref href=\"System.Runtime.GCLatencyMode\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Runtime.GCLatencyMode.LowLatency\" data-throw-if-not-resolved=\"false\"></xref> during critical operations. After such operations are completed, return to a higher latency mode so that more objects can be reclaimed to increase memory. </p>\n<p>Ordinarily, you set the value of the <xref href=\"System.Runtime.GCSettings.LatencyMode\" data-throw-if-not-resolved=\"false\"></xref> property to define the garbage collector's latency mode. However, you cannot set the no GC region latency mode by assigning the <xref href=\"System.Runtime.GCLatencyMode.NoGCRegion\" data-throw-if-not-resolved=\"false\"></xref> enumeration value to the <xref href=\"System.Runtime.GCSettings.LatencyMode\" data-throw-if-not-resolved=\"false\"></xref> property. Instead, you call the <see cref=\"Overload:System.GC.TryStartNoGCRegion\"></see> method to begin the no GC region latency mode, and you call the <xref href=\"System.GC.EndNoGCRegion\" data-throw-if-not-resolved=\"false\"></xref> to end it. </p>\n<p>See Latency Modes for a discussion of how the runtime configuration settings for garbage collection affect the default value of the <xref href=\"System.Runtime.GCLatencyMode\" data-throw-if-not-resolved=\"false\"></xref> enumeration. </p>\n"
  example:
  - 
  syntax:
    content: >-
      public static GCLatencyMode LatencyMode

      {
          get;
          [SecurityCritical]
          set;
      }
    content.vb: Public Shared Property LatencyMode As GCLatencyMode
    parameters: []
    return:
      type: System.Runtime.GCLatencyMode
      description: "\n<p>One of the enumeration values that specifies the latency mode. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <xref href=\"System.Runtime.GCSettings.LatencyMode\" data-throw-if-not-resolved=\"false\"></xref> property is being set to an invalid value. </p>\n<p>-or-</p>\n<p>The <xref href=\"System.Runtime.GCSettings.LatencyMode\" data-throw-if-not-resolved=\"false\"></xref> property cannot be set to <xref href=\"System.Runtime.GCLatencyMode.NoGCRegion\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Runtime
  isExternal: false
  name: System.Runtime
  fullName: System.Runtime
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Runtime.GCLargeObjectHeapCompactionMode
  parent: System.Runtime
  isExternal: false
  name: GCLargeObjectHeapCompactionMode
  fullName: System.Runtime.GCLargeObjectHeapCompactionMode
- uid: System.Runtime.GCLatencyMode
  parent: System.Runtime
  isExternal: false
  name: GCLatencyMode
  fullName: System.Runtime.GCLatencyMode
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
