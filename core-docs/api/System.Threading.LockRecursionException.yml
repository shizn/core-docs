items:
- uid: System.Threading.LockRecursionException
  commentId: T:System.Threading.LockRecursionException
  id: LockRecursionException
  parent: System.Threading
  children:
  - System.Threading.LockRecursionException.#ctor
  - System.Threading.LockRecursionException.#ctor(System.String)
  - System.Threading.LockRecursionException.#ctor(System.String,System.Exception)
  langs:
  - csharp
  - vb
  name: LockRecursionException
  fullName: System.Threading.LockRecursionException
  type: Class
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LockRecursionException
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 149
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>The exception that is thrown when recursive entry into a lock is not compatible with the recursion policy for the lock.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Threading.LockRecursionException\" data-throw-if-not-resolved=\"false\"></xref> is thrown for several reasons, including the following:</p>\n<ul><li>\n<p>If a thread tries to enter an instance of <xref href=\"System.Threading.ReaderWriterLockSlim\" data-throw-if-not-resolved=\"false\"></xref> recursively, but the instance does not support recursion.</p>\n</li><li>\n<p>If a thread tries to enter a <xref href=\"System.Threading.ReaderWriterLockSlim\" data-throw-if-not-resolved=\"false\"></xref> instance in write mode or upgradeable mode when the thread initially entered the lock in read mode. This represents a potential deadlock and therefore is not allowed.</p>\n</li><li>\n<p>If allowing one more level of recursion would exceed the maximum value for the internal storage counter used to track recursions. This limit is so large that applications should never encounter it.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example shows two causes of <xref href=\"System.Threading.LockRecursionException\" data-throw-if-not-resolved=\"false\"></xref> when using the <xref href=\"System.Threading.ReaderWriterLockSlim\" data-throw-if-not-resolved=\"false\"></xref> class. The program creates a <xref href=\"System.Threading.ReaderWriterLockSlim\" data-throw-if-not-resolved=\"false\"></xref> by using the default constructor, which disallows recursion. The program then starts a thread that enters the lock in read mode. The thread tries to enter the lock recursively in read mode, and catches the resulting exception. Finally, the thread tries to enter write mode, which would create a potential for deadlocks. The thread catches the resulting exception.</p>System.Threading.LockRecursionException#1"
  syntax:
    content: 'public class LockRecursionException : Exception'
    content.vb: >-
      Public Class LockRecursionException
          Inherits Exception
  seealso:
  - type: System.Threading.ReaderWriterLockSlim
    commentId: T:System.Threading.ReaderWriterLockSlim
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.LockRecursionException.#ctor
  commentId: M:System.Threading.LockRecursionException.#ctor
  id: '#ctor'
  parent: System.Threading.LockRecursionException
  langs:
  - csharp
  - vb
  name: LockRecursionException()
  fullName: System.Threading.LockRecursionException.LockRecursionException()
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 151
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.LockRecursionException\" data-throw-if-not-resolved=\"false\"></xref> class with a system-supplied message that describes the error.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"Recursive read lock acquisitions not allowed in this mode.\" This message takes the current system culture into account.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.InsufficientMemoryException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The localized error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public LockRecursionException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.LockRecursionException.#ctor(System.String)
  commentId: M:System.Threading.LockRecursionException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Threading.LockRecursionException
  langs:
  - csharp
  - vb
  name: LockRecursionException(String)
  fullName: System.Threading.LockRecursionException.LockRecursionException(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 152
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.LockRecursionException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified message that describes the error.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new exception with the <em>message</em> parameter. The content of <em>message</em> is intended to be understood by humans. The caller of this constructor must make sure that this string has been localized for the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Threading.LockRecursionException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public LockRecursionException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.LockRecursionException.#ctor(System.String,System.Exception)
  commentId: M:System.Threading.LockRecursionException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Threading.LockRecursionException
  langs:
  - csharp
  - vb
  name: LockRecursionException(String, Exception)
  fullName: System.Threading.LockRecursionException.LockRecursionException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 153
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.LockRecursionException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or <strong>null</strong> if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.Threading.LockRecursionException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The exception specified in <em>innerException</em>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string specified in <em>message</em>. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public LockRecursionException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The message that describes the exception. The caller of this constructor must make sure that this string has been localized for the current system culture. </p>\n"
    - id: innerException
      type: System.Exception
      description: "\n<p>The exception that caused the current exception. If the <em>innerException</em> parameter is not <strong>null</strong>, the current exception is raised in a <strong>catch</strong> block that handles the inner exception. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
