items:
- uid: System.Collections.IStructuralComparable
  commentId: T:System.Collections.IStructuralComparable
  id: IStructuralComparable
  parent: System.Collections
  children:
  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  langs:
  - csharp
  - vb
  name: IStructuralComparable
  fullName: System.Collections.IStructuralComparable
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IStructuralComparable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IStructuralComparable
    path: src/mscorlib/src/System/Collections/IStructuralComparable.cs
    startLine: 7
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Supports the structural comparison of collection objects.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.IStructuralComparable\" data-throw-if-not-resolved=\"false\"></xref> interface enables you to implement customized comparisons for collection members. That is, you can define precisely what it means for one collection object to precede, follow, or occur in the same position in the sort order as a second collection object. You can then specify that this definition be used with a collection type that accepts the <xref href=\"System.Collections.IStructuralComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n<p>The interface has a single member, <xref href=\"System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref>, which determines whether the current collection object is less than, equal to, or greater than a second object in the sort order. The actual comparison of the members or elements in the current instance with those in a second object is performed by an <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface implementation, which contains the definition of your custom comparison.</p>\n<p>The <xref href=\"System.Collections.IStructuralComparable\" data-throw-if-not-resolved=\"false\"></xref> interface supports only structural comparisons for sorting or ordering. The <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface supports custom comparisons for structural equality.</p>\n<p>The .NET Framework provides two default comparers. One is returned by the <xref href=\"System.Collections.StructuralComparisons.StructuralComparer\" data-throw-if-not-resolved=\"false\"></xref> property; the other is returned by the <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The generic tuple classes (<xref href=\"System.Tuple`1\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`2\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`3\" data-throw-if-not-resolved=\"false\"></xref>, and so on) and the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> class provide explicit implementations of the <xref href=\"System.Collections.IStructuralComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. By casting (in C#) or converting (in Visual Basic) the current instance of an array or tuple to an <xref href=\"System.Collections.IStructuralComparable\" data-throw-if-not-resolved=\"false\"></xref> interface value and providing your <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation as an argument to the <xref href=\"System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method, you can define a custom sort order for the array or collection. However, you do not call the <xref href=\"System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method directly in most cases. Instead, the <xref href=\"System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method is called by sorting methods such as <xref href=\"System.Array.Sort(System.Array,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref>. In this case, you define your <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation and pass it as an argument to a sorting method or collection object's class constructor. The <xref href=\"System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method with your custom comparer is then called automatically whenever the collection is sorted. </p>\n"
  example:
  - "\n<p>The following example creates an array of <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects that contains population data for three U.S. cities from 1960 to 2000. The sextuple's first component is the city name. The remaining five components represent the population at ten-year intervals from 1960 to 2000.</p>\n<p>The <code>PopulationComparer</code> class provides an <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation that allows the array of sextuples to be sorted by any one of its components. Two values are provided to the <code>PopulationComparer</code> class in its constructor: the position of the component that defines the sort order, and a Boolean value that indicates whether the tuple objects should be sorted in ascending or descending order.</p>\n<p>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1970) and displays them, and then sorts them by the sixth component (the population in 2000) and displays them. Note that the example does not directly call the <xref href=\"System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method. The method is called implicitly by the <xref href=\"System.Array.Sort(System.Array,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method for each tuple object in the array. </p>System.Tuple`6.CompareTo#2"
  syntax:
    content: public interface IStructuralComparable
    content.vb: Public Interface IStructuralComparable
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Collections.IStructuralEquatable
    commentId: T:System.Collections.IStructuralEquatable
  - type: System.Collections.StructuralComparisons.StructuralComparer
    commentId: P:System.Collections.StructuralComparisons.StructuralComparer
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  commentId: M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  id: CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Collections.IStructuralComparable
  langs:
  - csharp
  - vb
  name: CompareTo(Object, IComparer)
  fullName: System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IStructuralComparable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareTo
    path: src/mscorlib/src/System/Collections/IStructuralComparable.cs
    startLine: 8
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method supports custom structural comparison and sorting of array and tuple objects. The <xref href=\"System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method calls the <em>comparer</em> object's <xref href=\"System.Collections.IComparer.Compare(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to compare individual array elements or tuple components, starting with the first element or component. The individual calls to <xref href=\"System.Collections.IComparer.Compare(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> end and the <xref href=\"System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method returns a value when one of the following conditions becomes true:</p>\n<ul><li>\n<p>The <xref href=\"System.Collections.IComparer.Compare(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns -1.</p>\n</li><li>\n<p>The <xref href=\"System.Collections.IComparer.Compare(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns 1.</p>\n</li><li>\n<p>The <xref href=\"System.Collections.IComparer.Compare(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is called for the last element or component in the collection object.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example creates an array of <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects that contains population data for three U.S. cities from 1960 to 2000. The sextuple's first component is the city name. The remaining five components represent the population at ten-year intervals from 1960 to 2000.</p>\n<p>The <code>PopulationComparer</code> class provides an <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation that allows the array of sextuples to be sorted by any one of its components. Two values are provided to the <code>PopulationComparer</code> class in its constructor: the position of the component that defines the sort order, and a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the tuple objects should be sorted in ascending or descending order.</p>\n<p>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1970) and displays them, and then sorts them by the sixth component (the population in 2000) and displays them. Note that the example does not directly call the <xref href=\"System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> implementation. The method is called implicitly by the <xref href=\"System.Array.Sort(System.Array,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method for each tuple object in the array. </p>System.Tuple`6.CompareTo#2"
  syntax:
    content: int CompareTo(object other, IComparer comparer)
    content.vb: Function CompareTo(other As Object, comparer As IComparer) As Integer
    parameters:
    - id: other
      type: System.Object
    - id: comparer
      type: System.Collections.IComparer
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>This instance and <em>other</em> are not the same type.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  fullName: System.Collections.IComparer
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
