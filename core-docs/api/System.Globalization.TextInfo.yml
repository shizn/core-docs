items:
- uid: System.Globalization.TextInfo
  commentId: T:System.Globalization.TextInfo
  id: TextInfo
  parent: System.Globalization
  children:
  - System.Globalization.TextInfo.CultureName
  - System.Globalization.TextInfo.Equals(System.Object)
  - System.Globalization.TextInfo.GetHashCode
  - System.Globalization.TextInfo.IsReadOnly
  - System.Globalization.TextInfo.IsRightToLeft
  - System.Globalization.TextInfo.ListSeparator
  - System.Globalization.TextInfo.ToLower(System.Char)
  - System.Globalization.TextInfo.ToLower(System.String)
  - System.Globalization.TextInfo.ToString
  - System.Globalization.TextInfo.ToUpper(System.Char)
  - System.Globalization.TextInfo.ToUpper(System.String)
  langs:
  - csharp
  - vb
  name: TextInfo
  fullName: System.Globalization.TextInfo
  type: Class
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TextInfo
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 276
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Defines text properties and behaviors, such as casing, that are specific to a writing system. </p>\n"
  remarks: "\n<p>A writing system is the collection of scripts and orthographic rules required to represent a language as text. The <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> class represents a writing system.  </p>\n<p>The application should use the <xref href=\"System.Globalization.CultureInfo.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object for a particular <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object. If a security decision depends on a string comparison or a case-change operation, the application should use the <xref href=\"System.Globalization.CultureInfo.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> property of the object returned by the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> property to ensure that the behavior of the operation is consistent regardless of the operating system culture settings.  </p>\n"
  syntax:
    content: 'public class TextInfo : object'
    content.vb: >-
      Public Class TextInfo
          Inherits Object
  seealso:
  - type: System.Globalization.StringInfo
    commentId: T:System.Globalization.StringInfo
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Globalization.TextInfo.CultureName
  commentId: P:System.Globalization.TextInfo.CultureName
  id: CultureName
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: CultureName
  fullName: System.Globalization.TextInfo.CultureName
  type: Property
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CultureName
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 279
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the name of the culture associated with the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object is created from a specific culture, and the <xref href=\"System.Globalization.TextInfo.CultureName\" data-throw-if-not-resolved=\"false\"></xref> property returns the name of that culture. </p>\n<p>The <xref href=\"System.Globalization.TextInfo.CultureName\" data-throw-if-not-resolved=\"false\"></xref> property always reflects a specific culture rather than a neutral culture. If <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> has a neutral culture as its value, then the corresponding <xref href=\"System.Globalization.TextInfo.CultureName\" data-throw-if-not-resolved=\"false\"></xref> has as its value an arbitrary specific culture that uses the same language. For example, the <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property returns \"en\" for the English neutral culture, but the corresponding <xref href=\"System.Globalization.TextInfo.CultureName\" data-throw-if-not-resolved=\"false\"></xref> property might return \"en-US\" for the English (United States) culture. If the<xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object is associated with a specific culture instead of a neutral culture, the value of its <xref href=\"System.Globalization.TextInfo.CultureName\" data-throw-if-not-resolved=\"false\"></xref> property is always identical to the <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> property value of its associated <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n<p>Similarly, the <xref href=\"System.Globalization.TextInfo.CultureName\" data-throw-if-not-resolved=\"false\"></xref> property never reflects a particular sort. It always corresponds to a default sort order. For example, the default sort order for Spanish (Spain) is the international sort order. If <xref href=\"System.Globalization.CultureInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> is es-ES_tradnl (Spanish with the traditional sort order) then the corresponding <xref href=\"System.Globalization.TextInfo.CultureName\" data-throw-if-not-resolved=\"false\"></xref> is es-ES (Spanish with the default international sort order).</p>\n"
  example:
  - 
  syntax:
    content: public string CultureName { get; }
    content.vb: Public ReadOnly Property CultureName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of a culture. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Globalization.TextInfo.IsReadOnly
  commentId: P:System.Globalization.TextInfo.IsReadOnly
  id: IsReadOnly
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Globalization.TextInfo.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 280
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Globalization.TextInfo.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, the application cannot change any of the properties of the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object is read-only; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Globalization.TextInfo.IsRightToLeft
  commentId: P:System.Globalization.TextInfo.IsRightToLeft
  id: IsRightToLeft
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: IsRightToLeft
  fullName: System.Globalization.TextInfo.IsRightToLeft
  type: Property
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsRightToLeft
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 281
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object represents a writing system where text flows from right to left.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Globalization.TextInfo.IsRightToLeft\" data-throw-if-not-resolved=\"false\"></xref> property indicates the dominant direction of written text and the relative position of user interface elements such as buttons and scroll bars.</p>\n"
  syntax:
    content: public bool IsRightToLeft { get; }
    content.vb: Public ReadOnly Property IsRightToLeft As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if text flows from right to left; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Globalization.TextInfo.ListSeparator
  commentId: P:System.Globalization.TextInfo.ListSeparator
  id: ListSeparator
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: ListSeparator
  fullName: System.Globalization.TextInfo.ListSeparator
  type: Property
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListSeparator
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 282
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets or sets the string that separates items in a list.</p>\n"
  syntax:
    content: public virtual string ListSeparator { get; set; }
    content.vb: Public Overridable Property ListSeparator As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The string that separates items in a list.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value in a set operation is null.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>In a set operation, the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.TextInfo.Equals(System.Object)
  commentId: M:System.Globalization.TextInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Globalization.TextInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 283
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified object represents the same writing system as the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> represents the same writing system as the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.TextInfo.GetHashCode
  commentId: M:System.Globalization.TextInfo.GetHashCode
  id: GetHashCode
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Globalization.TextInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 284
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Serves as a hash function for the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>, suitable for hashing algorithms and data structures, such as a hash table.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.Object.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method generates the same hash code for two objects that are equal according to the <xref href=\"System.Globalization.TextInfo.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash code for the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - type: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - type: System.Globalization.TextInfo.Equals(System.Object)
    commentId: M:System.Globalization.TextInfo.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.TextInfo.ToLower(System.Char)
  commentId: M:System.Globalization.TextInfo.ToLower(System.Char)
  id: ToLower(System.Char)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: ToLower(Char)
  fullName: System.Globalization.TextInfo.ToLower(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLower
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 285
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Converts the specified character to lowercase.</p>\n"
  remarks: "\n<p>Casing semantics depend on the culture in use. For the invariant culture, the casing semantics are not culture-sensitive. For a specific culture, the casing semantics are sensitive to that culture.</p>\n<p>If a security decision depends on a string comparison or a case-change operation, the application should use the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.</p>\n<p>For more information on cultures, see <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example changes the casing of a string based on the English (United States) culture, with the culture name en-US.</p>System.Globalization.TextInfo_casing#1"
  syntax:
    content: public virtual char ToLower(char c)
    content.vb: Public Overridable Function ToLower(c As Char) As Char
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The character to convert to lowercase. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The specified character converted to lowercase.</p>\n"
  seealso:
  - type: System.Globalization.TextInfo.ToUpper(System.Char)
    commentId: M:System.Globalization.TextInfo.ToUpper(System.Char)
  - type: System.Globalization.TextInfo.ToTitleCase(System.String)
    commentId: M:System.Globalization.TextInfo.ToTitleCase(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.TextInfo.ToLower(System.String)
  commentId: M:System.Globalization.TextInfo.ToLower(System.String)
  id: ToLower(System.String)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: ToLower(String)
  fullName: System.Globalization.TextInfo.ToLower(System.String)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLower
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 286
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Converts the specified string to lowercase.</p>\n"
  remarks: "\n<p>The returned string might differ in length from the input string. For more information on casing, refer to the Unicode Technical Report #21 \"Case Mappings,\" published by the Unicode Consortium (http://www.unicode.org). The current implementation preserves the length of the string. However, this behavior is not guaranteed and could change in future implementations.</p>\n<p>Casing semantics depend on the culture in use. For the invariant culture, the casing semantics are not culture-sensitive. For a specific culture, the casing semantics are sensitive to that culture.</p>\n<p>If a security decision depends on a string comparison or a case-change operation, the application should use the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.</p>\n<p>For more information on cultures, see <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example changes the casing of a string based on the English (United States) culture, with the culture name en-US.</p>System.Globalization.TextInfo_casing#1"
  syntax:
    content: public virtual string ToLower(string str)
    content.vb: Public Overridable Function ToLower(str As String) As String
    parameters:
    - id: str
      type: System.String
      description: "\n<p>The string to convert to lowercase. </p>\n"
    return:
      type: System.String
      description: "\n<p>The specified string converted to lowercase.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>str</em> is null. </p>\n"
  seealso:
  - type: System.Globalization.TextInfo.ToUpper(System.Char)
    commentId: M:System.Globalization.TextInfo.ToUpper(System.Char)
  - type: System.Globalization.TextInfo.ToTitleCase(System.String)
    commentId: M:System.Globalization.TextInfo.ToTitleCase(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.TextInfo.ToString
  commentId: M:System.Globalization.TextInfo.ToString
  id: ToString
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Globalization.TextInfo.ToString()
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 287
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Returns a string that represents the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that represents the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Object.ToString
    commentId: M:System.Object.ToString
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.TextInfo.ToUpper(System.Char)
  commentId: M:System.Globalization.TextInfo.ToUpper(System.Char)
  id: ToUpper(System.Char)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: ToUpper(Char)
  fullName: System.Globalization.TextInfo.ToUpper(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUpper
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 288
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Converts the specified character to uppercase.</p>\n"
  remarks: "\n<p>Casing semantics depend on the culture in use. For the invariant culture, the casing semantics are not culture-sensitive. For a specific culture, the casing semantics are sensitive to that culture.</p>\n<p>If a security decision depends on a string comparison or a case-change operation, the application should use the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.</p>\n<p>For more information on cultures, see <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example changes the casing of a string based on the English (United States) culture, with the culture name en-US.</p>System.Globalization.TextInfo_casing#1"
  syntax:
    content: public virtual char ToUpper(char c)
    content.vb: Public Overridable Function ToUpper(c As Char) As Char
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The character to convert to uppercase. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The specified character converted to uppercase.</p>\n"
  seealso:
  - type: System.Globalization.TextInfo.ToLower(System.Char)
    commentId: M:System.Globalization.TextInfo.ToLower(System.Char)
  - type: System.Globalization.TextInfo.ToTitleCase(System.String)
    commentId: M:System.Globalization.TextInfo.ToTitleCase(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.TextInfo.ToUpper(System.String)
  commentId: M:System.Globalization.TextInfo.ToUpper(System.String)
  id: ToUpper(System.String)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: ToUpper(String)
  fullName: System.Globalization.TextInfo.ToUpper(System.String)
  type: Method
  source:
    remote:
      path: src/System.Globalization/ref/System.Globalization.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUpper
    path: src/System.Globalization/ref/System.Globalization.cs
    startLine: 289
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Converts the specified string to uppercase.</p>\n"
  remarks: "\n<p>The returned string might differ in length from the input string. For more information on casing, refer to the Unicode Technical Report #21 \"Case Mappings,\" published by the Unicode Consortium (http://www.unicode.org). The current implementation preserves the length of the string. However, this behavior is not guaranteed and could change in future implementations.</p>\n<p>Casing semantics depend on the culture in use. For the invariant culture, the casing semantics are not culture-sensitive. For a specific culture, the casing semantics are sensitive to that culture.</p>\n<p>If a security decision depends on a string comparison or a case-change operation, the application should use the <xref href=\"System.Globalization.CultureInfo.InvariantCulture\" data-throw-if-not-resolved=\"false\"></xref> to ensure that the behavior is consistent regardless of the culture settings of the system. However, the invariant culture must be used only by processes that require culture-independent results, such as system services. Otherwise, it produces results that might be linguistically incorrect or culturally inappropriate.</p>\n<p>For more information on cultures, see <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example changes the casing of a string based on the English (United States) culture, with the culture name en-US.</p>System.Globalization.TextInfo_casing#1"
  syntax:
    content: public virtual string ToUpper(string str)
    content.vb: Public Overridable Function ToUpper(str As String) As String
    parameters:
    - id: str
      type: System.String
      description: "\n<p>The string to convert to uppercase. </p>\n"
    return:
      type: System.String
      description: "\n<p>The specified string converted to uppercase.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>str</em> is null. </p>\n"
  seealso:
  - type: System.Globalization.TextInfo.ToLower(System.Char)
    commentId: M:System.Globalization.TextInfo.ToLower(System.Char)
  - type: System.Globalization.TextInfo.ToTitleCase(System.String)
    commentId: M:System.Globalization.TextInfo.ToTitleCase(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
