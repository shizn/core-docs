items:
- uid: System.Threading.LockRecursionPolicy
  commentId: T:System.Threading.LockRecursionPolicy
  id: LockRecursionPolicy
  parent: System.Threading
  children:
  - System.Threading.LockRecursionPolicy.NoRecursion
  - System.Threading.LockRecursionPolicy.SupportsRecursion
  langs:
  - csharp
  - vb
  name: LockRecursionPolicy
  fullName: System.Threading.LockRecursionPolicy
  type: Enum
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LockRecursionPolicy
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 155
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Specifies whether a lock can be entered multiple times by the same thread.</p>\n"
  remarks: "\n<p>The default recursion policy depends on the type of lock. For the default policy and the precise behavior of lock recursion for any given lock type, see the documentation for the type. For example, the <xref href=\"System.Threading.ReaderWriterLockSlim\" data-throw-if-not-resolved=\"false\"></xref> class does not allow a thread to enter the lock in write mode if it already entered the lock in read mode, regardless of the lock policy setting, in order to reduce the chance of deadlocks. </p>\n<p>Currently only one lock uses this enumeration:</p>\n<ul><li>\n<p>\n<xref href=\"System.Threading.ReaderWriterLockSlim\" data-throw-if-not-resolved=\"false\"></xref>. For more information, see the <xref href=\"System.Threading.ReaderWriterLockSlim.RecursionPolicy\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example shows two exception scenarios, one that depends on the <xref href=\"System.Threading.LockRecursionPolicy\" data-throw-if-not-resolved=\"false\"></xref> setting and one that does not. </p>\n<p>In the first scenario, the thread enters the lock in read mode and then tries to enter read mode recursively. If the <xref href=\"System.Threading.ReaderWriterLockSlim\" data-throw-if-not-resolved=\"false\"></xref> is created by using the default constructor, which sets recursion policy to <xref href=\"System.Threading.LockRecursionPolicy.NoRecursion\" data-throw-if-not-resolved=\"false\"></xref>, an exception is thrown. If <xref href=\"System.Threading.LockRecursionPolicy.SupportsRecursion\" data-throw-if-not-resolved=\"false\"></xref> is used to create the <xref href=\"System.Threading.ReaderWriterLockSlim\" data-throw-if-not-resolved=\"false\"></xref>, no exception is thrown.</p>\n<p>In the second scenario, the thread enters the lock in read mode and then tries to enter the lock in write mode. <xref href=\"System.Threading.LockRecursionException\" data-throw-if-not-resolved=\"false\"></xref> is thrown regardless of the lock recursion policy.</p>System.Threading.LockRecursionPolicy#1"
  syntax:
    content: public enum LockRecursionPolicy
    content.vb: Public Enum LockRecursionPolicy
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Threading.LockRecursionPolicy.NoRecursion
  commentId: F:System.Threading.LockRecursionPolicy.NoRecursion
  id: NoRecursion
  parent: System.Threading.LockRecursionPolicy
  langs:
  - csharp
  - vb
  name: NoRecursion
  fullName: System.Threading.LockRecursionPolicy.NoRecursion
  type: Field
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NoRecursion
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 157
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>If a thread tries to enter a lock recursively, an exception is thrown. Some classes may allow certain recursions when this setting is in effect. </p>\n"
  syntax:
    content: NoRecursion = 0
    return:
      type: System.Threading.LockRecursionPolicy
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.LockRecursionPolicy.SupportsRecursion
  commentId: F:System.Threading.LockRecursionPolicy.SupportsRecursion
  id: SupportsRecursion
  parent: System.Threading.LockRecursionPolicy
  langs:
  - csharp
  - vb
  name: SupportsRecursion
  fullName: System.Threading.LockRecursionPolicy.SupportsRecursion
  type: Field
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SupportsRecursion
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 158
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>A thread can enter a lock recursively. Some classes may restrict this capability. </p>\n"
  syntax:
    content: SupportsRecursion = 1
    return:
      type: System.Threading.LockRecursionPolicy
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.LockRecursionPolicy
  parent: System.Threading
  isExternal: false
  name: LockRecursionPolicy
  fullName: System.Threading.LockRecursionPolicy
