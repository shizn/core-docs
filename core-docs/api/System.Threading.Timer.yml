items:
- uid: System.Threading.Timer
  commentId: T:System.Threading.Timer
  id: Timer
  parent: System.Threading
  children:
  - System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)
  - System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)
  - System.Threading.Timer.Change(System.Int32,System.Int32)
  - System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)
  - System.Threading.Timer.Dispose
  langs:
  - csharp
  - vb
  name: Timer
  fullName: System.Threading.Timer
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Timer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Timer
    path: src/mscorlib/src/System/Threading/Timer.cs
    startLine: 774
  assemblies:
  - System.Threading.Timer
  namespace: System.Threading
  summary: "\n<p>Provides a mechanism for executing a method on a thread pool thread at specified intervals. This class cannot be inherited.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/threading/timer.cs#051a39d380760b26\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>Use a <xref href=\"System.Threading.TimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate to specify the method you want the <xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref> to execute. The signature of the <xref href=\"System.Threading.TimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate is: </p>\n<pre><code class=\"c#\">void TimerCallback(Object state)</code></pre>\n<pre><code class=\"cpp\">void TimerCallback(Object state)</code></pre>\n<pre><code class=\"vb\">Sub TimerCallback(state As Object)</code></pre>\n<p>The timer delegate is specified when the timer is constructed, and cannot be changed. The method does not execute on the thread that created the timer; it executes on a <xref href=\"System.Threading.ThreadPool\" data-throw-if-not-resolved=\"false\"></xref> thread supplied by the system.</p>\n<p>The .NET Framework Class Library includes four classes named <strong>Timer</strong>, each of which offers different functionality: </p>\n<ul><li>\n<p>\n<xref href=\"System.Timers.Timer\" data-throw-if-not-resolved=\"false\"></xref>, which fires an event and executes the code in one or more event sinks at regular intervals. The class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime. </p>\n</li><li>\n<p>\n<xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref>, which executes a single callback method on a thread pool thread at regular intervals. The callback method is defined when the timer is instantiated and cannot be changed. Like the <xref href=\"System.Timers.Timer\" data-throw-if-not-resolved=\"false\"></xref> class, this class is intended for use as a server-based or service component in a multithreaded environment; it has no user interface and is not visible at runtime. </p>\n</li><li>\n<p>\n<xref href=\"System.Windows.Forms.Timer\" data-throw-if-not-resolved=\"false\"></xref>, a Windows Forms component that fires an event and executes the code in one or more event sinks at regular intervals. The component has no user interface and is designed for use in a single-threaded environment; it executes on the UI thread. </p>\n</li><li>\n<p>\n<xref href=\"System.Web.UI.Timer\" data-throw-if-not-resolved=\"false\"></xref>, an ASP.NET component that performs asynchronous or synchronous web page postbacks at a regular interval. </p>\n</li></ul>\n<p>When you create a timer, you can specify an amount of time to wait before the first execution of the method (due time), and an amount of time to wait between subsequent executions (period). The <xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref> class has the same resolution as the system clock. This means that if the period is less than the resolution of the system clock, the <xref href=\"System.Threading.TimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate will execute at intervals defined by the resolution of the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems. You can change the due time and period, or disable the timer, by using the <xref href=\"System.Threading.Timer.Change(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>As long as you are using a <xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref>, you must keep a reference to it. As with any managed object, a <xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref> is subject to garbage collection when there are no references to it. The fact that a <xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref> is still active does not prevent it from being collected.</p>\n<p>When a timer is no longer needed, use the <see cref=\"Overload:System.Threading.Timer.Dispose\"></see> method to free the resources held by the timer. Note that callbacks can occur after the <xref href=\"System.Threading.Timer.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref href=\"System.Threading.Timer.Dispose(System.Threading.WaitHandle)\" data-throw-if-not-resolved=\"false\"></xref> method overload to wait until all callbacks have completed. </p>\n<p>The callback method executed by the timer should be reentrant, because it is called on <xref href=\"System.Threading.ThreadPool\" data-throw-if-not-resolved=\"false\"></xref> threads. The callback can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the callback, or if all thread pool threads are in use and the callback is queued multiple times.</p>\n<p>\n<xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref> is a simple, lightweight timer that uses callback methods and is served by thread pool threads. It is not recommended for use with Windows Forms, because its callbacks do not occur on the user interface thread. <xref href=\"System.Windows.Forms.Timer\" data-throw-if-not-resolved=\"false\"></xref> is a better choice for use with Windows Forms. For server-based timer functionality, you might consider using <xref href=\"System.Timers.Timer\" data-throw-if-not-resolved=\"false\"></xref>, which raises events and has additional features.</p>\n"
  example:
  - "\n<p>The following example defines a <code>StatusChecker</code> class  that includes a <code>CheckStatus</code> method whose signature is the same as the <xref href=\"System.Threading.TimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate. The  <em>state</em> argument of the <code>CheckStatus</code> method is an <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> object that is used to synchronize the application thread and the thread pool thread that executes the callback delegate. The <code>StatusChecker</code> class also includes two state variables:</p>\n<code>invokeCount</code>\n<p>Indicates the number of times the callback method has been invoked.</p>\n<code>maxCount</code>\n<p>Determines the maximum number of times the callback method should be invoked.</p>\n<p>The application thread creates the timer, which waits one second and then executes  the <code>CheckStatus</code> callback method every 250 milliseconds. The application thread then blocks until the <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> object is signaled. When the <code>CheckStatus</code> callback method executes <code>maxCount</code> times, it calls the <strong>AutoResetEvent.Set</strong> method to set the state of the <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> object to signaled. The first time this happens, the application thread calls the <xref href=\"System.Threading.Timer.Change(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method so that the callback method now executes every half second. It once again blocks until the <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> object is signaled. When this happens, the timer is destroyed by calling its <xref href=\"System.Threading.Timer.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method, and the application terminates. </p>System.Threading.Timer#1"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      [ComVisible(true)]

      public sealed class Timer : IDisposable
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      <ComVisible(True)>

      Public NotInheritable Class Timer
          Implements IDisposable
  seealso:
  - type: System.Threading.TimerCallback
    commentId: T:System.Threading.TimerCallback
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Runtime.InteropServices.ComVisibleAttribute
    ctor: System.Runtime.InteropServices.ComVisibleAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)
  commentId: M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)
  id: '#ctor(System.Threading.TimerCallback,System.Object,System.Int32,System.Int32)'
  parent: System.Threading.Timer
  langs:
  - csharp
  - vb
  name: Timer(TimerCallback, Object, Int32, Int32)
  fullName: System.Threading.Timer.Timer(System.Threading.TimerCallback, System.Object, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Timer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Timer.cs
    startLine: 786
  assemblies:
  - System.Threading.Timer
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <strong>Timer</strong> class, using a 32-bit signed integer to specify the time interval.</p>\n"
  remarks: "\n<p>The delegate specified by the <em>callback</em> parameter is invoked once after <em>dueTime</em> elapses, and thereafter each time the <em>period</em> time interval elapses.</p>\n<p>If <em>dueTime</em> is zero (0), <em>callback</em> is invoked immediately. If <em>dueTime</em> is <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>, <em>callback</em> is not invoked; the timer is disabled, but can be re-enabled by calling the <xref href=\"System.Threading.Timer.Change(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Because the <xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <em>callback</em> delegate executes at intervals defined by the resolution of the system clock if <em>period</em> is less than the resolution of the system clock. If <em>period</em> is zero (0) or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> and <em>dueTime</em> is not <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>, <em>callback</em> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref href=\"System.Threading.Timer.Change(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The method specified for <em>callback</em> should be reentrant, because it is called on <xref href=\"System.Threading.ThreadPool\" data-throw-if-not-resolved=\"false\"></xref> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a <strong>TimerCallback</strong> delegate and initialize a new instance of the <strong>Timer</strong> class.</p>System.Threading.Timer#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public Timer(TimerCallback callback, object state, int dueTime, int period)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(callback As TimerCallback, state As Object, dueTime As Integer, period As Integer)
    parameters:
    - id: callback
      type: System.Threading.TimerCallback
    - id: state
      type: System.Object
    - id: dueTime
      type: System.Int32
    - id: period
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>dueTime</em> or <em>period</em> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>callback</em> parameter is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)
  commentId: M:System.Threading.Timer.#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)
  id: '#ctor(System.Threading.TimerCallback,System.Object,System.TimeSpan,System.TimeSpan)'
  parent: System.Threading.Timer
  langs:
  - csharp
  - vb
  name: Timer(TimerCallback, Object, TimeSpan, TimeSpan)
  fullName: System.Threading.Timer.Timer(System.Threading.TimerCallback, System.Object, System.TimeSpan, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Timer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Timer.cs
    startLine: 803
  assemblies:
  - System.Threading.Timer
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <strong>Timer</strong> class, using <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> values to measure time intervals.</p>\n"
  remarks: "\n<p>The delegate specified by the <em>callback</em> parameter is invoked once after <em>dueTime</em> elapses, and thereafter each time the <em>period</em> time interval elapses.</p>\n<p>If <em>dueTime</em> is zero (0), <em>callback</em> is invoked immediately. If <em>dueTime</em> is negative one (-1) milliseconds, <em>callback</em> is not invoked; the timer is disabled, but can be re-enabled by calling the <xref href=\"System.Threading.Timer.Change(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Because the <xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref> class has the same resolution as the system clock, which is approximately 15 milliseconds on Windows 7 and Windows 8 systems, the <em>callback</em> delegate executes at intervals defined by the resolution of the system clock if <em>period</em> is less than the resolution of the system clock. If <em>period</em> is zero (0) or negative one (-1) milliseconds and <em>dueTime</em> is positive, <em>callback</em> is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled using the <xref href=\"System.Threading.Timer.Change(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The method specified for <em>callback</em> should be reentrant, because it is called on <xref href=\"System.Threading.ThreadPool\" data-throw-if-not-resolved=\"false\"></xref> threads. The method can be executed simultaneously on two thread pool threads if the timer interval is less than the time required to execute the method, or if all thread pool threads are in use and the method is queued multiple times.</p>\n"
  example:
  - "\n<p>The following code example shows how to create a <strong>TimerCallback</strong> delegate and initialize a new instance of the <strong>Timer</strong> class.</p>System.Threading.Timer2#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public Timer(TimerCallback callback, object state, TimeSpan dueTime, TimeSpan period)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Sub New(callback As TimerCallback, state As Object, dueTime As TimeSpan, period As TimeSpan)
    parameters:
    - id: callback
      type: System.Threading.TimerCallback
    - id: state
      type: System.Object
    - id: dueTime
      type: System.TimeSpan
    - id: period
      type: System.TimeSpan
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The number of milliseconds in the value of <em>dueTime</em> or <em>period</em> is negative and not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>, or is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>callback</em> parameter is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Timer.Change(System.Int32,System.Int32)
  commentId: M:System.Threading.Timer.Change(System.Int32,System.Int32)
  id: Change(System.Int32,System.Int32)
  parent: System.Threading.Timer
  langs:
  - csharp
  - vb
  name: Change(Int32, Int32)
  fullName: System.Threading.Timer.Change(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Timer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Change
    path: src/mscorlib/src/System/Threading/Timer.cs
    startLine: 897
  assemblies:
  - System.Threading.Timer
  namespace: System.Threading
  summary: "\n<p>Changes the start time and the interval between method invocations for a timer, using 32-bit signed integers to measure time intervals.</p>\n"
  remarks: "\n<p>The callback method is invoked once after <em>dueTime</em> elapses, and thereafter each time the time interval specified by <em>period</em> elapses.</p>\n<p>If <em>dueTime</em> is zero (0), the callback method is invoked immediately. If <em>dueTime</em> is <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref href=\"System.Threading.Timer.Change(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and specifying a positive value for <em>dueTime</em>.</p>\n<p>If <em>period</em> is zero (0) or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>, and <em>dueTime</em> is not <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref href=\"System.Threading.Timer.Change(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and specifying a positive value for <em>period</em>.</p>\n<p>The <xref href=\"System.Threading.Timer.Change(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method can be called from the <xref href=\"System.Threading.TimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>\n"
  example:
  - "\n<p>The following code example demonstrates how to start a <strong>Timer</strong> and, after a set number of invocations, change its period.</p>System.Threading.Timer#1"
  syntax:
    content: public bool Change(int dueTime, int period)
    content.vb: Public Function Change(dueTime As Integer, period As Integer) As Boolean
    parameters:
    - id: dueTime
      type: System.Int32
    - id: period
      type: System.Int32
    return:
      type: System.Boolean
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>dueTime</em> or <em>period</em> parameter is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)
  commentId: M:System.Threading.Timer.Change(System.TimeSpan,System.TimeSpan)
  id: Change(System.TimeSpan,System.TimeSpan)
  parent: System.Threading.Timer
  langs:
  - csharp
  - vb
  name: Change(TimeSpan, TimeSpan)
  fullName: System.Threading.Timer.Change(System.TimeSpan, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Timer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Change
    path: src/mscorlib/src/System/Threading/Timer.cs
    startLine: 908
  assemblies:
  - System.Threading.Timer
  namespace: System.Threading
  summary: "\n<p>Changes the start time and the interval between method invocations for a timer, using <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> values to measure time intervals.</p>\n"
  remarks: "\n<p>The callback method is invoked once after <em>dueTime</em> elapses, and thereafter each time the time interval specified by <em>period</em> elapses.</p>\n<p>If <em>dueTime</em> is zero (0), the callback method is invoked immediately. If <em>dueTime</em> is negative one (-1) milliseconds, the callback method is never invoked; the timer is disabled, but can be re-enabled by calling <xref href=\"System.Threading.Timer.Change(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and specifying a positive value for <em>dueTime</em>.</p>\n<p>If <em>period</em> is zero (0) or negative one (-1) milliseconds, and <em>dueTime</em> is positive, the callback method is invoked once; the periodic behavior of the timer is disabled, but can be re-enabled by calling <xref href=\"System.Threading.Timer.Change(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and specifying a value greater than zero for <em>period</em>.</p>\n<p>The <xref href=\"System.Threading.Timer.Change(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method can be called from the <xref href=\"System.Threading.TimerCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate. </p>\n"
  example:
  - "\n<p>The following code example demonstrates how to start a <strong>Timer</strong> and, after a set number of invocations, change its period.</p>System.Threading.Timer2#1"
  syntax:
    content: public bool Change(TimeSpan dueTime, TimeSpan period)
    content.vb: Public Function Change(dueTime As TimeSpan, period As TimeSpan) As Boolean
    parameters:
    - id: dueTime
      type: System.TimeSpan
    - id: period
      type: System.TimeSpan
    return:
      type: System.Boolean
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>dueTime</em> or <em>period</em> parameter, in milliseconds, is less than -1. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <em>dueTime</em> or <em>period</em> parameter, in milliseconds, is greater than 4294967294. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Timer.Dispose
  commentId: M:System.Threading.Timer.Dispose
  id: Dispose
  parent: System.Threading.Timer
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Threading.Timer.Dispose()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Timer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Threading/Timer.cs
    startLine: 943
  assemblies:
  - System.Threading.Timer
  namespace: System.Threading
  summary: "\n<p>Releases all resources used by the current instance of <xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Calling <strong>Dispose</strong> allows the resources used by the <xref href=\"System.Threading.Timer\" data-throw-if-not-resolved=\"false\"></xref> to be reallocated for other purposes. For more information about <strong>Dispose</strong>, see Cleaning Up Unmanaged Resources.</p>\n<p>Callbacks can occur after the <xref href=\"System.Threading.Timer.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method overload has been called, because the timer queues callbacks for execution by thread pool threads. You can use the <xref href=\"System.Threading.Timer.Dispose(System.Threading.WaitHandle)\" data-throw-if-not-resolved=\"false\"></xref> method overload to wait until all callbacks have completed.</p>\n"
  example:
  - "\n<p>The following code example shows how to free the resources held by a <strong>Timer</strong>.</p>System.Threading.Timer#1"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.TimerCallback
  parent: System.Threading
  isExternal: false
  name: TimerCallback
  fullName: System.Threading.TimerCallback
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
