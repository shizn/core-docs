items:
- uid: System.Security.AccessControl.RawSecurityDescriptor
  commentId: T:System.Security.AccessControl.RawSecurityDescriptor
  id: RawSecurityDescriptor
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Byte[],System.Int32)
  - System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.RawAcl,System.Security.AccessControl.RawAcl)
  - System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.String)
  - System.Security.AccessControl.RawSecurityDescriptor.ControlFlags
  - System.Security.AccessControl.RawSecurityDescriptor.DiscretionaryAcl
  - System.Security.AccessControl.RawSecurityDescriptor.Group
  - System.Security.AccessControl.RawSecurityDescriptor.Owner
  - System.Security.AccessControl.RawSecurityDescriptor.ResourceManagerControl
  - System.Security.AccessControl.RawSecurityDescriptor.SetFlags(System.Security.AccessControl.ControlFlags)
  - System.Security.AccessControl.RawSecurityDescriptor.SystemAcl
  langs:
  - csharp
  - vb
  name: RawSecurityDescriptor
  fullName: System.Security.AccessControl.RawSecurityDescriptor
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RawSecurityDescriptor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 476
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents a security descriptor. A security descriptor includes an owner, a primary group, a Discretionary Access Control List (DACL), and a System Access Control List (SACL).</p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class RawSecurityDescriptor : GenericSecurityDescriptor'
    content.vb: >-
      Public NotInheritable Class RawSecurityDescriptor
          Inherits GenericSecurityDescriptor
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericSecurityDescriptor
  inheritedMembers:
  - System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength
  - System.Security.AccessControl.GenericSecurityDescriptor.Revision
  - System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Byte[],System.Int32)
  id: '#ctor(System.Byte[],System.Int32)'
  parent: System.Security.AccessControl.RawSecurityDescriptor
  langs:
  - csharp
  - vb
  name: RawSecurityDescriptor(Byte[], Int32)
  fullName: System.Security.AccessControl.RawSecurityDescriptor.RawSecurityDescriptor(System.Byte[], System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 478
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class from the specified array of byte values.</p>\n"
  example:
  - 
  syntax:
    content: public RawSecurityDescriptor(byte[] binaryForm, int offset)
    content.vb: Public Sub New(binaryForm As Byte(), offset As Integer)
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "\n<p>The array of byte values from which to create the new <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset in the  <em>binaryForm</em> array at which to begin copying.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.RawSecurityDescriptor.RawSecurityDescriptor(System.Byte(), System.Int32)
  name.vb: RawSecurityDescriptor(Byte(), Int32)
- uid: System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.RawAcl,System.Security.AccessControl.RawAcl)
  commentId: M:System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.RawAcl,System.Security.AccessControl.RawAcl)
  id: '#ctor(System.Security.AccessControl.ControlFlags,System.Security.Principal.SecurityIdentifier,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.RawAcl,System.Security.AccessControl.RawAcl)'
  parent: System.Security.AccessControl.RawSecurityDescriptor
  langs:
  - csharp
  - vb
  name: RawSecurityDescriptor(ControlFlags, SecurityIdentifier, SecurityIdentifier, RawAcl, RawAcl)
  fullName: System.Security.AccessControl.RawSecurityDescriptor.RawSecurityDescriptor(System.Security.AccessControl.ControlFlags, System.Security.Principal.SecurityIdentifier, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.RawAcl, System.Security.AccessControl.RawAcl)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 479
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class with the specified values.</p>\n"
  example:
  - 
  syntax:
    content: public RawSecurityDescriptor(ControlFlags flags, SecurityIdentifier owner, SecurityIdentifier group, RawAcl systemAcl, RawAcl discretionaryAcl)
    content.vb: Public Sub New(flags As ControlFlags, owner As SecurityIdentifier, group As SecurityIdentifier, systemAcl As RawAcl, discretionaryAcl As RawAcl)
    parameters:
    - id: flags
      type: System.Security.AccessControl.ControlFlags
      description: "\n<p>Flags that specify behavior of the new <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: owner
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>The owner for the new <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: group
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>The primary group for the new <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: systemAcl
      type: System.Security.AccessControl.RawAcl
      description: "\n<p>The System Access Control List (SACL) for the new <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: discretionaryAcl
      type: System.Security.AccessControl.RawAcl
      description: "\n<p>The Discretionary Access Control List (DACL) for the new <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.String)
  commentId: M:System.Security.AccessControl.RawSecurityDescriptor.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.AccessControl.RawSecurityDescriptor
  langs:
  - csharp
  - vb
  name: RawSecurityDescriptor(String)
  fullName: System.Security.AccessControl.RawSecurityDescriptor.RawSecurityDescriptor(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 480
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class from the specified Security Descriptor Definition Language (SDDL) string.</p>\n"
  example:
  - 
  syntax:
    content: public RawSecurityDescriptor(string sddlForm)
    content.vb: Public Sub New(sddlForm As String)
    parameters:
    - id: sddlForm
      type: System.String
      description: "\n<p>The SDDL string from which to create the new <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RawSecurityDescriptor.ControlFlags
  commentId: P:System.Security.AccessControl.RawSecurityDescriptor.ControlFlags
  id: ControlFlags
  parent: System.Security.AccessControl.RawSecurityDescriptor
  langs:
  - csharp
  - vb
  name: ControlFlags
  fullName: System.Security.AccessControl.RawSecurityDescriptor.ControlFlags
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ControlFlags
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 481
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets values that specify behavior of the <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override ControlFlags ControlFlags { get; }
    content.vb: Public Overrides ReadOnly Property ControlFlags As ControlFlags
    parameters: []
    return:
      type: System.Security.AccessControl.ControlFlags
      description: "\n<p>One or more values of the <xref href=\"System.Security.AccessControl.ControlFlags\" data-throw-if-not-resolved=\"false\"></xref> enumeration combined with a logical OR operation.</p>\n"
  overridden: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.RawSecurityDescriptor.DiscretionaryAcl
  commentId: P:System.Security.AccessControl.RawSecurityDescriptor.DiscretionaryAcl
  id: DiscretionaryAcl
  parent: System.Security.AccessControl.RawSecurityDescriptor
  langs:
  - csharp
  - vb
  name: DiscretionaryAcl
  fullName: System.Security.AccessControl.RawSecurityDescriptor.DiscretionaryAcl
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DiscretionaryAcl
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 482
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets the Discretionary Access Control List (DACL) for this <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object. The DACL contains access rules.</p>\n"
  example:
  - 
  syntax:
    content: public RawAcl DiscretionaryAcl { get; set; }
    content.vb: Public Property DiscretionaryAcl As RawAcl
    parameters: []
    return:
      type: System.Security.AccessControl.RawAcl
      description: "\n<p>The DACL for this <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RawSecurityDescriptor.Group
  commentId: P:System.Security.AccessControl.RawSecurityDescriptor.Group
  id: Group
  parent: System.Security.AccessControl.RawSecurityDescriptor
  langs:
  - csharp
  - vb
  name: Group
  fullName: System.Security.AccessControl.RawSecurityDescriptor.Group
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Group
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 483
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets the primary group for this <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override SecurityIdentifier Group { get; set; }
    content.vb: Public Overrides Property Group As SecurityIdentifier
    parameters: []
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>The primary group for this <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Security.AccessControl.GenericSecurityDescriptor.Group
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.AccessControl.RawSecurityDescriptor.Owner
  commentId: P:System.Security.AccessControl.RawSecurityDescriptor.Owner
  id: Owner
  parent: System.Security.AccessControl.RawSecurityDescriptor
  langs:
  - csharp
  - vb
  name: Owner
  fullName: System.Security.AccessControl.RawSecurityDescriptor.Owner
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Owner
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 484
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets the owner of the object associated with this <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override SecurityIdentifier Owner { get; set; }
    content.vb: Public Overrides Property Owner As SecurityIdentifier
    parameters: []
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>The owner of the object associated with this <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Security.AccessControl.GenericSecurityDescriptor.Owner
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.AccessControl.RawSecurityDescriptor.ResourceManagerControl
  commentId: P:System.Security.AccessControl.RawSecurityDescriptor.ResourceManagerControl
  id: ResourceManagerControl
  parent: System.Security.AccessControl.RawSecurityDescriptor
  langs:
  - csharp
  - vb
  name: ResourceManagerControl
  fullName: System.Security.AccessControl.RawSecurityDescriptor.ResourceManagerControl
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResourceManagerControl
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 485
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets a byte value that represents the resource manager control bits associated with this <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The resource manager control bits contain information specific to the resource manager accessing the security descriptor.</p>\n"
  example:
  - 
  syntax:
    content: public byte ResourceManagerControl { get; set; }
    content.vb: Public Property ResourceManagerControl As Byte
    parameters: []
    return:
      type: System.Byte
      description: "\n<p>A byte value that represents the resource manager control bits associated with this <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RawSecurityDescriptor.SystemAcl
  commentId: P:System.Security.AccessControl.RawSecurityDescriptor.SystemAcl
  id: SystemAcl
  parent: System.Security.AccessControl.RawSecurityDescriptor
  langs:
  - csharp
  - vb
  name: SystemAcl
  fullName: System.Security.AccessControl.RawSecurityDescriptor.SystemAcl
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SystemAcl
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 486
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets or sets the System Access Control List (SACL) for this <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object. The SACL contains audit rules.</p>\n"
  example:
  - 
  syntax:
    content: public RawAcl SystemAcl { get; set; }
    content.vb: Public Property SystemAcl As RawAcl
    parameters: []
    return:
      type: System.Security.AccessControl.RawAcl
      description: "\n<p>The SACL for this <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RawSecurityDescriptor.SetFlags(System.Security.AccessControl.ControlFlags)
  commentId: M:System.Security.AccessControl.RawSecurityDescriptor.SetFlags(System.Security.AccessControl.ControlFlags)
  id: SetFlags(System.Security.AccessControl.ControlFlags)
  parent: System.Security.AccessControl.RawSecurityDescriptor
  langs:
  - csharp
  - vb
  name: SetFlags(ControlFlags)
  fullName: System.Security.AccessControl.RawSecurityDescriptor.SetFlags(System.Security.AccessControl.ControlFlags)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetFlags
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 487
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the <xref href=\"System.Security.AccessControl.RawSecurityDescriptor.ControlFlags\" data-throw-if-not-resolved=\"false\"></xref> property of this <xref href=\"System.Security.AccessControl.RawSecurityDescriptor\" data-throw-if-not-resolved=\"false\"></xref> object to the specified value.</p>\n"
  example:
  - 
  syntax:
    content: public void SetFlags(ControlFlags flags)
    content.vb: Public Sub SetFlags(flags As ControlFlags)
    parameters:
    - id: flags
      type: System.Security.AccessControl.ControlFlags
      description: "\n<p>One or more values of the <xref href=\"System.Security.AccessControl.ControlFlags\" data-throw-if-not-resolved=\"false\"></xref> enumeration combined with a logical OR operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.AccessControl.GenericSecurityDescriptor
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericSecurityDescriptor
  fullName: System.Security.AccessControl.GenericSecurityDescriptor
- uid: System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: BinaryLength
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.BinaryLength
- uid: System.Security.AccessControl.GenericSecurityDescriptor.Revision
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: Revision
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Revision
- uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: true
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: GetSddlForm(AccessControlSections)
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
    name: GetSddlForm
    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm
  - name: (
    fullName: (
  - uid: System.Security.AccessControl.AccessControlSections
    name: AccessControlSections
    fullName: System.Security.AccessControl.AccessControlSections
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm(System.Security.AccessControl.AccessControlSections)
    name: GetSddlForm
    fullName: System.Security.AccessControl.GenericSecurityDescriptor.GetSddlForm
  - name: (
    fullName: (
  - uid: System.Security.AccessControl.AccessControlSections
    name: AccessControlSections
    fullName: System.Security.AccessControl.AccessControlSections
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: IsSddlConversionSupported()
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
    name: IsSddlConversionSupported
    fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
    name: IsSddlConversionSupported
    fullName: System.Security.AccessControl.GenericSecurityDescriptor.IsSddlConversionSupported
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.ControlFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: ControlFlags
  fullName: System.Security.AccessControl.ControlFlags
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.AccessControl.RawAcl
  parent: System.Security.AccessControl
  isExternal: false
  name: RawAcl
  fullName: System.Security.AccessControl.RawAcl
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: ControlFlags
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.ControlFlags
- uid: System.Security.AccessControl.GenericSecurityDescriptor.Group
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: Group
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Group
- uid: System.Security.AccessControl.GenericSecurityDescriptor.Owner
  parent: System.Security.AccessControl.GenericSecurityDescriptor
  isExternal: false
  name: Owner
  fullName: System.Security.AccessControl.GenericSecurityDescriptor.Owner
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
