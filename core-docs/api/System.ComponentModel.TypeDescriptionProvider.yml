items:
- uid: System.ComponentModel.TypeDescriptionProvider
  commentId: T:System.ComponentModel.TypeDescriptionProvider
  id: TypeDescriptionProvider
  parent: System.ComponentModel
  children:
  - System.ComponentModel.TypeDescriptionProvider.#ctor
  - System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  - System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  - System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  langs:
  - csharp
  - vb
  name: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeDescriptionProvider
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 14
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Provides supplemental metadata to the <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> class dynamically extends the type information associated with a type or object by adding, modifying, or hiding characteristics such as attributes, properties, and events. There can be multiple type description provider classes that offer metadata to a single <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>There are two ways to associate a <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> with a <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref>: </p>\n<ul><li>\n<p>At design time, when the target class can be assigned the appropriate <xref href=\"System.ComponentModel.TypeDescriptionProviderAttribute\" data-throw-if-not-resolved=\"false\"></xref> tag.</p>\n</li><li>\n<p>At run time, when one of the <see cref=\"Overload:System.ComponentModel.TypeDescriptor.AddProvider\"></see> methods of the <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class can be called. These overloaded methods require either the target object or its class type.</p>\n</li></ul>\n<p>The <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> class relies on a parent object of the same type, supplied during construction. This allows classes that derive from <xref href=\"System.ComponentModel.CustomTypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to selectively override methods.</p>\n<p>Instances of <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> are only built upon demand, minimizing the impact of custom type information on performance. </p>\n<p>This class cannot be inherited.</p>\n"
  syntax:
    content: public abstract class TypeDescriptionProvider
    content.vb: Public MustInherit Class TypeDescriptionProvider
  seealso:
  - type: System.ComponentModel.TypeDescriptionProviderAttribute
    commentId: T:System.ComponentModel.TypeDescriptionProviderAttribute
  - type: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor
  commentId: M:System.ComponentModel.TypeDescriptionProvider.#ctor
  id: '#ctor'
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: TypeDescriptionProvider()
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider()
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 27
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor is equivalent to calling the other <xref href=\"System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)\" data-throw-if-not-resolved=\"false\"></xref> constructor with a parameter value that is <strong>null</strong>.</p>\n"
  syntax:
    content: protected TypeDescriptionProvider()
    content.vb: Protected Sub New
  seealso:
  - type: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  id: '#ctor(System.ComponentModel.TypeDescriptionProvider)'
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: TypeDescriptionProvider(TypeDescriptionProvider)
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider(System.ComponentModel.TypeDescriptionProvider)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 39
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> class using a parent type description provider.</p>\n"
  remarks: "\n<p>If the <em>parent</em> parameter is <strong>null</strong>, all <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> methods will return default values. Otherwise, all <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> methods will delegate to the methods of <em>parent</em>.</p>\n<p>The following table shows the default return values for <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>Method</p>\n<p>Default return value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A newly created object through a call to the <see cref=\"Overload:System.Activator.CreateInstance\"></see> method.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A default instance of a <xref href=\"System.ComponentModel.CustomTypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n</td></tr><tr><td>\n<p>\n<see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor\"></see>\n</p>\n</td><td>\n<p>A default instance of a <xref href=\"System.ComponentModel.CustomTypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n</td></tr><tr><td>\n<p>\n<see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType\"></see>\n</p>\n</td><td>\n<p>The <em>objectType</em> first parameter.</p>\n</td></tr></tbody></table>\n"
  syntax:
    content: protected TypeDescriptionProvider(TypeDescriptionProvider parent)
    content.vb: Protected Sub New(parent As TypeDescriptionProvider)
    parameters:
    - id: parent
      type: System.ComponentModel.TypeDescriptionProvider
  seealso:
  - type: System.ComponentModel.CustomTypeDescriptor
    commentId: T:System.ComponentModel.CustomTypeDescriptor
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  commentId: M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: CreateInstance(IServiceProvider, Type, Type[], Object[])
  fullName: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider, System.Type, System.Type[], System.Object[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 53
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Creates an object that can substitute for another data type.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> specified by the <em>provider</em> parameter is passed in by the <xref href=\"System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class. If <em>provider</em> is not <strong>null</strong>, the service provider can be used by the type description provider to obtain additional context about the creation call.</p>\n<p>The <xref href=\"System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method is <strong>virtual</strong> and, by default, returns the result of the <see cref=\"Overload:System.Activator.CreateInstance\"></see> method if <em>provider</em> is <strong>null</strong>. If <em>provider</em> is <strong>null</strong>, this method will invoke the <xref href=\"System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method of the parent provider.</p>\n"
  syntax:
    content: public virtual object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, object[] args)
    content.vb: Public Overridable Function CreateInstance(provider As IServiceProvider, objectType As Type, argTypes As Type(), args As Object()) As Object
    parameters:
    - id: provider
      type: System.IServiceProvider
    - id: objectType
      type: System.Type
    - id: argTypes
      type: System.Type[]
    - id: args
      type: System.Object[]
    return:
      type: System.Object
  seealso:
  - type: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
    commentId: M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider, System.Type, System.Type(), System.Object())
  name.vb: CreateInstance(IServiceProvider, Type, Type(), Object())
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  id: GetCache(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetCache(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCache
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 79
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a per-object cache, accessed as an <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> of key/value pairs.</p>\n"
  remarks: "\n<p>A <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> may need to perform complex operations on collections of metadata. Because types are not unloaded for the life of a domain, the <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class will automatically cache the results of these operations based on type. However, some operations use live object instances. These operations cannot be cached within the <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class because caching them would prevent the object from being garbage collected. Instead, the <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> class allows for a per-object cache, accessed as an <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> of key/value pairs, to exist on an object. The <xref href=\"System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns an instance of this cache. The <xref href=\"System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method will return <strong>null</strong> if there is no supported cache for an object.</p>\n<p>The default <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> used by <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> examines the object to see if it is a sited component that implements the <xref href=\"System.ComponentModel.Design.IDictionaryService\" data-throw-if-not-resolved=\"false\"></xref> interface. If the object is, it uses the dictionary service to store the object's cache. Otherwise, the object it returns <strong>null</strong>. Other type description providers may provide their own implementation here. For example, dependency objects can just attach a property of type <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual IDictionary GetCache(object instance)
    content.vb: Public Overridable Function GetCache(instance As Object) As IDictionary
    parameters:
    - id: instance
      type: System.Object
    return:
      type: System.Collections.IDictionary
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.ComponentModel.Design.IDictionaryService
    commentId: T:System.ComponentModel.Design.IDictionaryService
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  id: GetExtendedTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetExtendedTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetExtendedTypeDescriptor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 103
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets an extended custom type descriptor for the given object.</p>\n"
  remarks: "\n<p>An extended type descriptor is a custom type descriptor that offers properties that other objects have added to this object, but that are not actually defined on the object. For example, in the .NET Framework component model, objects that implement the <xref href=\"System.ComponentModel.IExtenderProvider\" data-throw-if-not-resolved=\"false\"></xref> interface can attach properties to other objects that reside in the same logical container. The overloaded <see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor\"></see> methods do not return a type descriptor that provides these extra extended properties. The <xref href=\"System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns the set of these extended properties. The <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> will automatically merge the results of these two property collections. While the .NET Framework component model supports only extended properties, <xref href=\"System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> can be used for extended attributes as well as events, if the type description provider supports it. </p>\n<p>\n<xref href=\"System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> is <strong>virtual</strong> and, by default, returns a custom type descriptor that returns empty results if no parent provider was passed. If a parent provider was passed, this method will invoke the parent provider's <xref href=\"System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public virtual ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance)
    content.vb: Public Overridable Function GetExtendedTypeDescriptor(instance As Object) As ICustomTypeDescriptor
    parameters:
    - id: instance
      type: System.Object
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
  seealso:
  - type: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  id: GetExtenderProviders(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetExtenderProviders(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetExtenderProviders
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 118
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the extender providers for the specified object.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual IExtenderProvider[] GetExtenderProviders(object instance)
    content.vb: Protected Overridable Function GetExtenderProviders(instance As Object) As IExtenderProvider()
    parameters:
    - id: instance
      type: System.Object
    return:
      type: System.ComponentModel.IExtenderProvider[]
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>instance</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  id: GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFullComponentName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 142
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the name of the specified component, or <strong>null</strong> if the component has no name.</p>\n"
  syntax:
    content: public virtual string GetFullComponentName(object component)
    content.vb: Public Overridable Function GetFullComponentName(component As Object) As String
    parameters:
    - id: component
      type: System.Object
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  id: GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetReflectionType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 171
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Performs normal reflection against the given object.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType\"></see> method is a lower-level version of the <see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor\"></see> method. If no custom type descriptor can be located for an object, <see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType\"></see> is called to perform normal reflection against the object.</p>\n<p>Use this method overload if you have called a type descriptor member that uses an instance instead of a type.</p>\n"
  syntax:
    content: public Type GetReflectionType(object instance)
    content.vb: Public Function GetReflectionType(instance As Object) As Type
    parameters:
    - id: instance
      type: System.Object
    return:
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>instance</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  id: GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetReflectionType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 157
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Performs normal reflection against a type.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType\"></see> method is a lower-level version of the <see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor\"></see> method. If no custom type descriptor can be located for an object, <see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType\"></see> is called to perform normal reflection against the object.</p>\n<p>Use this method overload if you have called a type descriptor member that uses a type instead of an instance.</p>\n"
  syntax:
    content: public Type GetReflectionType(Type objectType)
    content.vb: Public Function GetReflectionType(objectType As Type) As Type
    parameters:
    - id: objectType
      type: System.Type
    return:
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>objectType</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  id: GetReflectionType(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetReflectionType(Type, Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetReflectionType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 190
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Performs normal reflection against the given object with the given type.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType\"></see> method is a lower-level version of the <see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor\"></see> method. If no custom type descriptor can be located for an object, <see cref=\"Overload:System.ComponentModel.TypeDescriptionProvider.GetReflectionType\"></see> is called to perform normal reflection against the object.</p>\n"
  syntax:
    content: public virtual Type GetReflectionType(Type objectType, object instance)
    content.vb: Public Overridable Function GetReflectionType(objectType As Type, instance As Object) As Type
    parameters:
    - id: objectType
      type: System.Type
    - id: instance
      type: System.Object
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  id: GetRuntimeType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetRuntimeType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRuntimeType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 206
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts a reflection type into a runtime type.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method reverses the<xref href=\"System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to convert a reflection type back into a runtime type. Using the <xref href=\"System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method is preferred over using the <xref href=\"System.Type.UnderlyingSystemType\" data-throw-if-not-resolved=\"false\"></xref> property, which was used in earlier versions to return the runtime type. </p>\n"
  example:
  - 
  syntax:
    content: public virtual Type GetRuntimeType(Type reflectionType)
    content.vb: Public Overridable Function GetRuntimeType(reflectionType As Type) As Type
    parameters:
    - id: reflectionType
      type: System.Type
    return:
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>reflectionType</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  id: GetTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTypeDescriptor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 247
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a custom type descriptor for the given object.</p>\n"
  syntax:
    content: public ICustomTypeDescriptor GetTypeDescriptor(object instance)
    content.vb: Public Function GetTypeDescriptor(instance As Object) As ICustomTypeDescriptor
    parameters:
    - id: instance
      type: System.Object
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>instance</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  id: GetTypeDescriptor(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetTypeDescriptor(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTypeDescriptor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 234
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a custom type descriptor for the given type.</p>\n"
  syntax:
    content: public ICustomTypeDescriptor GetTypeDescriptor(Type objectType)
    content.vb: Public Function GetTypeDescriptor(objectType As Type) As ICustomTypeDescriptor
    parameters:
    - id: objectType
      type: System.Type
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
  seealso:
  - type: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  id: GetTypeDescriptor(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetTypeDescriptor(Type, Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTypeDescriptor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 271
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a custom type descriptor for the given type and object.</p>\n"
  remarks: "\n<p>This method is prototyped as <strong>virtual</strong> and, by default, returns an empty descriptor if no parent provider was passed. If a parent provider was passed, this method will invoke the parent provider's <xref href=\"System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance)
    content.vb: Public Overridable Function GetTypeDescriptor(objectType As Type, instance As Object) As ICustomTypeDescriptor
    parameters:
    - id: objectType
      type: System.Type
    - id: instance
      type: System.Object
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
  seealso:
  - type: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  id: IsSupportedType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: IsSupportedType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSupportedType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 290
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers. </p>\n"
  example:
  - 
  syntax:
    content: public virtual bool IsSupportedType(Type type)
    content.vb: Public Overridable Function IsSupportedType(type As Type) As Boolean
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.ComponentModel.TypeDescriptionProvider
  parent: System.ComponentModel
  isExternal: false
  name: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
- uid: System.IServiceProvider
  parent: System
  isExternal: false
  name: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.ComponentModel.ICustomTypeDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: ICustomTypeDescriptor
  fullName: System.ComponentModel.ICustomTypeDescriptor
- uid: System.ComponentModel.IExtenderProvider[]
  isExternal: false
  name: IExtenderProvider[]
  fullName: System.ComponentModel.IExtenderProvider[]
  fullname.vb: System.ComponentModel.IExtenderProvider()
  name.vb: IExtenderProvider()
  spec.csharp:
  - uid: System.ComponentModel.IExtenderProvider
    name: IExtenderProvider
    fullName: System.ComponentModel.IExtenderProvider
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ComponentModel.IExtenderProvider
    name: IExtenderProvider
    fullName: System.ComponentModel.IExtenderProvider
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
