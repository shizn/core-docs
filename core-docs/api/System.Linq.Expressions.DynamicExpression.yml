items:
- uid: System.Linq.Expressions.DynamicExpression
  commentId: T:System.Linq.Expressions.DynamicExpression
  id: DynamicExpression
  parent: System.Linq.Expressions
  children:
  - System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)
  - System.Linq.Expressions.DynamicExpression.Arguments
  - System.Linq.Expressions.DynamicExpression.Binder
  - System.Linq.Expressions.DynamicExpression.DelegateType
  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  - System.Linq.Expressions.DynamicExpression.NodeType
  - System.Linq.Expressions.DynamicExpression.Type
  - System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  langs:
  - csharp
  - vb
  name: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
  type: Class
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DynamicExpression
    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs
    startLine: 21
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Represents a dynamic operation.</p>\n"
  example:
  - 
  syntax:
    content: 'public class DynamicExpression : Expression, IDynamicExpression'
    content.vb: >-
      Public Class DynamicExpression
          Inherits Expression
          Implements IDynamicExpression
  inheritance:
  - System.Object
  implements:
  - System.Linq.Expressions.IArgumentProvider
  - System.Linq.Expressions.IDynamicExpression
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Linq.Expressions.DynamicExpression.Arguments
  commentId: P:System.Linq.Expressions.DynamicExpression.Arguments
  id: Arguments
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: Arguments
  fullName: System.Linq.Expressions.DynamicExpression.Arguments
  type: Property
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Arguments
    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs
    startLine: 150
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets the arguments to the dynamic operation.</p>\n"
  example:
  - 
  syntax:
    content: public ReadOnlyCollection<Expression> Arguments { get; }
    content.vb: Public ReadOnly Property Arguments As ReadOnlyCollection(Of Expression)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{Expression}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Linq.Expressions.DynamicExpression.Binder
  commentId: P:System.Linq.Expressions.DynamicExpression.Binder
  id: Binder
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: Binder
  fullName: System.Linq.Expressions.DynamicExpression.Binder
  type: Property
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Binder
    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs
    startLine: 134
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets the <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref>, which determines the run-time behavior of the dynamic site.</p>\n"
  example:
  - 
  syntax:
    content: public CallSiteBinder Binder { get; }
    content.vb: Public ReadOnly Property Binder As CallSiteBinder
    parameters: []
    return:
      type: System.Runtime.CompilerServices.CallSiteBinder
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Linq.Expressions.DynamicExpression.DelegateType
  commentId: P:System.Linq.Expressions.DynamicExpression.DelegateType
  id: DelegateType
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: DelegateType
  fullName: System.Linq.Expressions.DynamicExpression.DelegateType
  type: Property
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DelegateType
    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs
    startLine: 142
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets the type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public Type DelegateType { get; }
    content.vb: Public ReadOnly Property DelegateType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Linq.Expressions.DynamicExpression.NodeType
  commentId: P:System.Linq.Expressions.DynamicExpression.NodeType
  id: NodeType
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: NodeType
  fullName: System.Linq.Expressions.DynamicExpression.NodeType
  type: Property
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeType
    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs
    startLine: 125
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Returns the node type of this expression. Extension nodes should return <xref href=\"System.Linq.Expressions.ExpressionType.Extension\" data-throw-if-not-resolved=\"false\"></xref> when overriding this method.</p>\n"
  example:
  - 
  syntax:
    content: public override sealed ExpressionType NodeType { get; }
    content.vb: Public NotOverridable Overrides ReadOnly Property NodeType As ExpressionType
    parameters: []
    return:
      type: ExpressionType
      description: The <see cref="!:ExpressionType"></see> of the expression.
  modifiers.csharp:
  - public
  - override
  - sealed
  - get
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
  - ReadOnly
- uid: System.Linq.Expressions.DynamicExpression.Type
  commentId: P:System.Linq.Expressions.DynamicExpression.Type
  id: Type
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: Type
  fullName: System.Linq.Expressions.DynamicExpression.Type
  type: Property
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Type
    path: src/System.Dynamic.Runtime/src/System/Linq/Expressions/DynamicExpression.cs
    startLine: 115
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets the static type of the expression that this <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> represents.</p>\n"
  example:
  - 
  syntax:
    content: public override Type Type { get; }
    content.vb: Public Overrides ReadOnly Property Type As Type
    parameters: []
    return:
      type: System.Type
      description: The <xref href="System.Linq.Expressions.DynamicExpression.Type" data-throw-if-not-resolved="false"></xref> that represents the static type of the expression.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)
  commentId: M:System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)
  id: Accept(System.Linq.Expressions.ExpressionVisitor)
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: Accept(ExpressionVisitor)
  fullName: System.Linq.Expressions.DynamicExpression.Accept(System.Linq.Expressions.ExpressionVisitor)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Accept
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 241
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Dispatches to the specific visit method for this node type. For example, <xref href=\"System.Linq.Expressions.MethodCallExpression\" data-throw-if-not-resolved=\"false\"></xref> calls the <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This default implementation for <xref href=\"System.Linq.Expressions.ExpressionType.Extension\" data-throw-if-not-resolved=\"false\"></xref> nodes calls <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref>. Override this method to call into a more specific method on a derived visitor class of the <xref href=\"System.Linq.Expressions.ExpressionVisitor\" data-throw-if-not-resolved=\"false\"></xref> class. However, it should still support unknown visitors by calling <xref href=\"System.Linq.Expressions.ExpressionVisitor.VisitExtension(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  example:
  - 
  syntax:
    content: protected override Expression Accept(ExpressionVisitor visitor)
    content.vb: Protected Overrides Function Accept(visitor As ExpressionVisitor) As Expression
    parameters:
    - id: visitor
      type: System.Linq.Expressions.ExpressionVisitor
      description: "\n<p>The visitor to visit this node with.</p>\n"
    return:
      type: System.Linq.Expressions.Expression
      description: "\n<p>The result of visiting this node.</p>\n"
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: Dynamic(CallSiteBinder, Type, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dynamic
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 242
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\" data-throw-if-not-resolved=\"false\"></xref> property of the result is inferred from the types of the arguments and the specified return type.</p>\n"
  syntax:
    content: public static DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, IEnumerable<Expression> arguments)
    content.vb: Public Shared Function Dynamic(binder As CallSiteBinder, returnType As Type, arguments As IEnumerable(Of Expression)) As DynamicExpression
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>The runtime binder for the dynamic operation.</p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The result type of the dynamic expression.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>The arguments to the dynamic operation.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\" data-throw-if-not-resolved=\"false\"></xref>,  and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Dynamic(CallSiteBinder, Type, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: Dynamic(CallSiteBinder, Type, Expression)
  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dynamic
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 243
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\" data-throw-if-not-resolved=\"false\"></xref> property of the result is inferred from the types of the arguments and the specified return type.</p>\n"
  syntax:
    content: public static DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0)
    content.vb: Public Shared Function Dynamic(binder As CallSiteBinder, returnType As Type, arg0 As Expression) As DynamicExpression
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>The runtime binder for the dynamic operation.</p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The result type of the dynamic expression.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The first argument to the dynamic operation.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\" data-throw-if-not-resolved=\"false\"></xref>,  and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: Dynamic(CallSiteBinder, Type, Expression, Expression)
  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dynamic
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 244
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\" data-throw-if-not-resolved=\"false\"></xref> property of the result is inferred from the types of the arguments and the specified return type.</p>\n"
  syntax:
    content: public static DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1)
    content.vb: Public Shared Function Dynamic(binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression) As DynamicExpression
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>The runtime binder for the dynamic operation.</p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The result type of the dynamic expression.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The first argument to the dynamic operation.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The second argument to the dynamic operation.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\" data-throw-if-not-resolved=\"false\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dynamic
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 245
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\" data-throw-if-not-resolved=\"false\"></xref> property of the result is inferred from the types of the arguments and the specified return type.</p>\n"
  syntax:
    content: public static DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function Dynamic(binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>The runtime binder for the dynamic operation.</p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The result type of the dynamic expression.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The first argument to the dynamic operation.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The second argument to the dynamic operation.</p>\n"
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: "\n<p>The third argument to the dynamic operation.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\" data-throw-if-not-resolved=\"false\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: Dynamic(CallSiteBinder, Type, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dynamic
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 246
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\" data-throw-if-not-resolved=\"false\"></xref> property of the result is inferred from the types of the arguments and the specified return type.</p>\n"
  syntax:
    content: public static DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
    content.vb: Public Shared Function Dynamic(binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>The runtime binder for the dynamic operation.</p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The result type of the dynamic expression.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The first argument to the dynamic operation.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The second argument to the dynamic operation.</p>\n"
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: "\n<p>The third argument to the dynamic operation.</p>\n"
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: "\n<p>The fourth argument to the dynamic operation.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\" data-throw-if-not-resolved=\"false\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  id: Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: Dynamic(CallSiteBinder, Type, Expression[])
  fullName: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dynamic
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 247
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\" data-throw-if-not-resolved=\"false\"></xref> property of the result is inferred from the types of the arguments and the specified return type.</p>\n"
  syntax:
    content: public static DynamicExpression Dynamic(CallSiteBinder binder, Type returnType, params Expression[] arguments)
    content.vb: Public Shared Function Dynamic(binder As CallSiteBinder, returnType As Type, ParamArray arguments As Expression()) As DynamicExpression
    parameters:
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>The runtime binder for the dynamic operation.</p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The result type of the dynamic expression.</p>\n"
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>The arguments to the dynamic operation.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\" data-throw-if-not-resolved=\"false\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.DynamicExpression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression())
  name.vb: Dynamic(CallSiteBinder, Type, Expression())
- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: MakeDynamic(Type, CallSiteBinder, IEnumerable<Expression>)
  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeDynamic
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 248
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, IEnumerable<Expression> arguments)
    content.vb: Public Shared Function MakeDynamic(delegateType As Type, binder As CallSiteBinder, arguments As IEnumerable(Of Expression)) As DynamicExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: "\n<p>The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>The runtime binder for the dynamic operation.</p>\n"
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>The arguments to the dynamic operation.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\" data-throw-if-not-resolved=\"false\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: MakeDynamic(Type, CallSiteBinder, IEnumerable(Of Expression))
- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: MakeDynamic(Type, CallSiteBinder, Expression)
  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeDynamic
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 249
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref> and one argument.</p>\n"
  syntax:
    content: public static DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0)
    content.vb: Public Shared Function MakeDynamic(delegateType As Type, binder As CallSiteBinder, arg0 As Expression) As DynamicExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: "\n<p>The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>The runtime binder for the dynamic operation.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The argument to the dynamic operation.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\" data-throw-if-not-resolved=\"false\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression)
  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeDynamic
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 250
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref> and two arguments.</p>\n"
  syntax:
    content: public static DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1)
    content.vb: Public Shared Function MakeDynamic(delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression) As DynamicExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: "\n<p>The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>The runtime binder for the dynamic operation.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The first argument to the dynamic operation.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The second argument to the dynamic operation.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\" data-throw-if-not-resolved=\"false\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeDynamic
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 251
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref> and three arguments.</p>\n"
  syntax:
    content: public static DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2)
    content.vb: Public Shared Function MakeDynamic(delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: "\n<p>The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>The runtime binder for the dynamic operation.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The first argument to the dynamic operation.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The second argument to the dynamic operation.</p>\n"
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: "\n<p>The third argument to the dynamic operation.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\" data-throw-if-not-resolved=\"false\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: MakeDynamic(Type, CallSiteBinder, Expression, Expression, Expression, Expression)
  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeDynamic
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 252
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref> and four arguments.</p>\n"
  syntax:
    content: public static DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, Expression arg0, Expression arg1, Expression arg2, Expression arg3)
    content.vb: Public Shared Function MakeDynamic(delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: "\n<p>The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>The runtime binder for the dynamic operation.</p>\n"
    - id: arg0
      type: System.Linq.Expressions.Expression
      description: "\n<p>The first argument to the dynamic operation.</p>\n"
    - id: arg1
      type: System.Linq.Expressions.Expression
      description: "\n<p>The second argument to the dynamic operation.</p>\n"
    - id: arg2
      type: System.Linq.Expressions.Expression
      description: "\n<p>The third argument to the dynamic operation.</p>\n"
    - id: arg3
      type: System.Linq.Expressions.Expression
      description: "\n<p>The fourth argument to the dynamic operation.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\" data-throw-if-not-resolved=\"false\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  commentId: M:System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  id: MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: MakeDynamic(Type, CallSiteBinder, Expression[])
  fullName: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression[])
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeDynamic
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 253
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that represents a dynamic operation bound by the provided <xref href=\"System.Runtime.CompilerServices.CallSiteBinder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static DynamicExpression MakeDynamic(Type delegateType, CallSiteBinder binder, params Expression[] arguments)
    content.vb: Public Shared Function MakeDynamic(delegateType As Type, binder As CallSiteBinder, ParamArray arguments As Expression()) As DynamicExpression
    parameters:
    - id: delegateType
      type: System.Type
      description: "\n<p>The type of the delegate used by the <xref href=\"System.Runtime.CompilerServices.CallSite\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: binder
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>The runtime binder for the dynamic operation.</p>\n"
    - id: arguments
      type: System.Linq.Expressions.Expression[]
      description: "\n<p>The arguments to the dynamic operation.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>A <xref href=\"System.Linq.Expressions.DynamicExpression\" data-throw-if-not-resolved=\"false\"></xref> that has <xref href=\"System.Linq.Expressions.DynamicExpression.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equal to <xref href=\"System.Linq.Expressions.ExpressionType.Dynamic\" data-throw-if-not-resolved=\"false\"></xref>, and has the <xref href=\"System.Linq.Expressions.DynamicExpression.DelegateType\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.Expressions.DynamicExpression.Binder\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> set to the specified values.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Expressions.DynamicExpression.MakeDynamic(System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression())
  name.vb: MakeDynamic(Type, CallSiteBinder, Expression())
- uid: System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  commentId: M:System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  id: Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})
  parent: System.Linq.Expressions.DynamicExpression
  langs:
  - csharp
  - vb
  name: Update(IEnumerable<Expression>)
  fullName: System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Update
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 257
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Linq.Expressions
  summary: "\n<p>Compares the value sent to the parameter, <code>arguments</code>, to the <strong>Arguments</strong> property of the current instance of <strong>DynamicExpression</strong>. If the values of the parameter and the property are equal, the current instance is returned. If they are not equal, a new <strong>DynamicExpression</strong> instance is returned that is identical to the current instance except that the <strong>Arguments</strong> property is set to the value of parameter <code>arguments</code>. </p>\n"
  example:
  - 
  syntax:
    content: public DynamicExpression Update(IEnumerable<Expression> arguments)
    content.vb: Public Function Update(arguments As IEnumerable(Of Expression)) As DynamicExpression
    parameters:
    - id: arguments
      type: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
      description: "\n<p>The <xref href=\"System.Linq.Expressions.DynamicExpression.Arguments\" data-throw-if-not-resolved=\"false\"></xref> property of the result.</p>\n"
    return:
      type: System.Linq.Expressions.DynamicExpression
      description: "\n<p>This expression if no children are changed or an expression with the updated children.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Linq.Expressions.DynamicExpression.Update(System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression))
  name.vb: Update(IEnumerable(Of Expression))
references:
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Linq.Expressions.IArgumentProvider
  parent: System.Linq.Expressions
  isExternal: false
  name: IArgumentProvider
  fullName: System.Linq.Expressions.IArgumentProvider
- uid: System.Linq.Expressions.IDynamicExpression
  isExternal: false
  name: IDynamicExpression
  fullName: System.Linq.Expressions.IDynamicExpression
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Linq.Expressions.Expression}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Expression>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Linq.Expressions.Expression>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Linq.Expressions.Expression)
  name.vb: ReadOnlyCollection(Of Expression)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
- uid: System.Linq.Expressions.ExpressionVisitor
  parent: System.Linq.Expressions
  isExternal: false
  name: ExpressionVisitor
  fullName: System.Linq.Expressions.ExpressionVisitor
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Expression>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.Expressions.Expression)
  name.vb: IEnumerable(Of Expression)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: )
    fullName: )
- uid: System.Linq.Expressions.DynamicExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: DynamicExpression
  fullName: System.Linq.Expressions.DynamicExpression
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Linq.Expressions.Expression[]
  isExternal: false
  name: Expression[]
  fullName: System.Linq.Expressions.Expression[]
  fullname.vb: System.Linq.Expressions.Expression()
  name.vb: Expression()
  spec.csharp:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: ()
    fullName: ()
