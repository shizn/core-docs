items:
- uid: System.Text.ASCIIEncoding
  commentId: T:System.Text.ASCIIEncoding
  id: ASCIIEncoding
  parent: System.Text
  children:
  - System.Text.ASCIIEncoding.#ctor
  - System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)
  - System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - System.Text.ASCIIEncoding.GetByteCount(System.String)
  - System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  - System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)
  - System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.ASCIIEncoding.GetDecoder
  - System.Text.ASCIIEncoding.GetEncoder
  - System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  - System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  - System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  - System.Text.ASCIIEncoding.IsSingleByte
  langs:
  - csharp
  - vb
  name: ASCIIEncoding
  fullName: System.Text.ASCIIEncoding
  type: Class
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ASCIIEncoding
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 10
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Represents an ASCII character encoding of Unicode characters.</p>\n"
  remarks: "\n<p>Encoding is the process of transforming a set of Unicode characters into a sequence of bytes. Decoding is the process of transforming a sequence of encoded bytes into a set of Unicode characters.</p>\n<p>\n<xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> corresponds to the Windows code page 20127. Because ASCII is a 7-bit encoding, ASCII characters are limited to the lowest 128 Unicode characters, from U+0000 to U+007F. If you use the default encoder returned by the <xref href=\"System.Text.Encoding.ASCII\" data-throw-if-not-resolved=\"false\"></xref> property or the <xref href=\"System.Text.ASCIIEncoding.#ctor\" data-throw-if-not-resolved=\"false\"></xref> constructor, characters outside that range are replaced with a question mark (?) before the encoding operation is performed.  Because the <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> class supports only a limited character set, the <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> classes are better suited for globalized applications. The following considerations can help you to decide whether to use <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref>:</p>\n<ul><li>\n<p>Some protocols require ASCII or a subset of ASCII. In these cases ASCII encoding is appropriate.</p>\n</li><li>\n<p>If an 8-bit encoding is expected, then ASCII probably isn't the correct choice. Instead, consider using UTF8 instead of ASCII. For the characters U+0000 through U+007F, the results are identical, but all Unicode characters are representable in UTF-8, which avoids data loss.</p>\n</li></ul>\n<p>\n<xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. For security reasons, you should use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n<p>The <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method determines how many bytes result in encoding a set of Unicode characters, and the <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method performs the actual encoding.</p>\n<p>Likewise, the <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method determines how many characters result in decoding a sequence of bytes, and the <xref href=\"System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods perform the actual decoding.</p>\n<p>Note that the default <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> constructor by itself might not have the appropriate behavior for your application. You might want to consider setting the <xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> property to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref> to prevent sequences with the 8th bit set. Custom behavior might also be appropriate for these cases.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to encode Unicode characters into ASCII. Notice the loss of data that occurs when your application uses <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> to encode Unicode characters outside of the ASCII range.</p>System.Text.ASCIIEncoding Example#1"
  syntax:
    content: 'public class ASCIIEncoding : Encoding'
    content.vb: >-
      Public Class ASCIIEncoding
          Inherits Encoding
  seealso:
  - type: System.Text.Decoder
    commentId: T:System.Text.Decoder
  - type: System.Text.Encoder
    commentId: T:System.Text.Encoder
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Text.ASCIIEncoding.#ctor
  commentId: M:System.Text.ASCIIEncoding.#ctor
  id: '#ctor'
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: ASCIIEncoding()
  fullName: System.Text.ASCIIEncoding.ASCIIEncoding()
  type: Constructor
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 12
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> class does not provide error detection. For security reasons, you should use the <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> class and enable error detection.</p>\n<p>If you choose to use ASCII encoding, this constructor may not provide the appropriate fallback behavior for your application. It uses the <xref href=\"System.Text.EncoderReplacementFallback\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.DecoderReplacementFallback\" data-throw-if-not-resolved=\"false\"></xref> classes to replace every character outside the range of U+0000 through U+007F with a question mark (?). Instead, you can call the <xref href=\"System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)\" data-throw-if-not-resolved=\"false\"></xref> method and pass it <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref> objects to use exception fallback.</p>\n<p>\n<xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> supports only the Unicode character values between U+0000 and U+007F. Therefore, <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> are better suited for globalized applications.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create a new <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> instance and display the name of the encoding.</p>System.Text.ASCIIEncoding.ctor Example#1"
  syntax:
    content: public ASCIIEncoding()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.ASCIIEncoding.IsSingleByte
  commentId: P:System.Text.ASCIIEncoding.IsSingleByte
  id: IsSingleByte
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: IsSingleByte
  fullName: System.Text.ASCIIEncoding.IsSingleByte
  type: Property
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSingleByte
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 13
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Gets a value indicating whether the current encoding uses single-byte code points.</p>\n"
  remarks: "\n<p>Instead of using the <xref href=\"System.Text.ASCIIEncoding.IsSingleByte\" data-throw-if-not-resolved=\"false\"></xref> property to determine the size of a byte array for encoding operations  and the size of a character array for decoding operations (for example, so that the size of the byte array is <xref href=\"System.Text.ASCIIEncoding.IsSingleByte\" data-throw-if-not-resolved=\"false\"></xref> * the number of characters to be encoded), you should call the <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method for encoding operations and the <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method for decoding operations. These methods takes the <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> object's replacement fallback strategy into account when calculating the required array size.</p>\n"
  syntax:
    content: public override bool IsSingleByte { get; }
    content.vb: Public Overrides ReadOnly Property IsSingleByte As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>This property is always <strong>true</strong>.</p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  - type: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)
  commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char*,System.Int32)
  id: GetByteCount(System.Char*,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetByteCount(Char*, Int32)
  fullName: System.Text.ASCIIEncoding.GetByteCount(System.Char*, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetByteCount
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 14
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n"
  syntax:
    content: public override int GetByteCount(char *chars, int count)
    content.vb: Public Overrides Function GetByteCount(chars As Char *, count As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char*
      description: "\n<p>A pointer to the first character to encode.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to encode.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes produced by encoding the specified characters.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  - type: System.Text.ASCIIEncoding.GetEncoder
    commentId: M:System.Text.ASCIIEncoding.GetEncoder
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  id: GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetByteCount(Char[], Int32, Int32)
  fullName: System.Text.ASCIIEncoding.GetByteCount(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetByteCount
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 17
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to return the number of bytes required to encode an array of Unicode characters using <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Text.ASCIIEncoding.GetByteCount1 Example#1"
  syntax:
    content: public override int GetByteCount(char[] chars, int index, int count)
    content.vb: Public Overrides Function GetByteCount(chars As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array containing the set of characters to encode.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first character to encode.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to encode.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes produced by encoding the specified characters.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  - type: System.Text.ASCIIEncoding.GetEncoder
    commentId: M:System.Text.ASCIIEncoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.ASCIIEncoding.GetByteCount(System.Char(), System.Int32, System.Int32)
  name.vb: GetByteCount(Char(), Int32, Int32)
- uid: System.Text.ASCIIEncoding.GetByteCount(System.String)
  commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.String)
  id: GetByteCount(System.String)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetByteCount(String)
  fullName: System.Text.ASCIIEncoding.GetByteCount(System.String)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetByteCount
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 18
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of bytes produced by encoding the characters in the specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to return the number of bytes required to encode a string using <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Text.ASCIIEncoding.GetByteCount2 Example#1"
  syntax:
    content: public override int GetByteCount(string chars)
    content.vb: Public Overrides Function GetByteCount(chars As String) As Integer
    parameters:
    - id: chars
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the set of characters to encode.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes produced by encoding the specified characters.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  - type: System.Text.ASCIIEncoding.GetEncoder
    commentId: M:System.Text.ASCIIEncoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  commentId: M:System.Text.ASCIIEncoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetBytes(Char*, Int32, Byte*, Int32)
  fullName: System.Text.ASCIIEncoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 19
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.ASCIIEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.ASCIIEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>\n<xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. Any Unicode character greater than U+007F is translated to an ASCII question mark (\"?\").</p>\n<p>For security reasons, your application is recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  syntax:
    content: public override int GetBytes(char *chars, int charCount, byte *bytes, int byteCount)
    content.vb: Public Overrides Function GetBytes(chars As Char *, charCount As Integer, bytes As Byte *, byteCount As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char*
      description: "\n<p>A pointer to the first character to encode.</p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to encode.</p>\n"
    - id: bytes
      type: System.Byte*
      description: "\n<p>A pointer to the location at which to start writing the resulting sequence of bytes.</p>\n"
    - id: byteCount
      type: System.Int32
      description: "\n<p>The maximum number of bytes to write.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of bytes written at the location indicated by <em>bytes</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charCount</em> or <em>byteCount</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>byteCount</em> is less than the resulting number of bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetEncoder
    commentId: M:System.Text.ASCIIEncoding.GetEncoder
  - type: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: System.Text.ASCIIEncoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 22
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Encodes a set of characters from the specified character array into the specified byte array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.ASCIIEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.ASCIIEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>\n<xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. Any Unicode character greater than U+007F is encoded as the ASCII question mark (\"?\").</p>\n<p>For security reasons, your application is recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to encode a range of characters from a string and store the encoded characters in a range of elements in a byte array.</p>System.Text.ASCIIEncoding.GetBytes1 Example#1"
  syntax:
    content: public override int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)
    content.vb: Public Overrides Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array containing the set of characters to encode.</p>\n"
    - id: charIndex
      type: System.Int32
      description: "\n<p>The index of the first character to encode.</p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to encode.</p>\n"
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array to contain the resulting sequence of bytes.</p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The index at which to start writing the resulting sequence of bytes.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of bytes written into <em>bytes</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetEncoder
    commentId: M:System.Text.ASCIIEncoding.GetEncoder
  - type: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.ASCIIEncoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)
- uid: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: System.Text.ASCIIEncoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 23
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Encodes a set of characters from the specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> into the specified byte array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting bytes, the application uses <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.ASCIIEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.ASCIIEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>\n<xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. Any Unicode character greater than U+007F is encoded as the ASCII question mark (\"?\").</p>\n<p>For security reasons, your application is recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to encode a range of elements from a Unicode character array and store the encoded bytes in a range of elements in a byte array.</p>System.Text.ASCIIEncoding.GetBytes2#1"
  syntax:
    content: public override int GetBytes(string chars, int charIndex, int charCount, byte[] bytes, int byteIndex)
    content.vb: Public Overrides Function GetBytes(chars As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer
    parameters:
    - id: chars
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the set of characters to encode.</p>\n"
    - id: charIndex
      type: System.Int32
      description: "\n<p>The index of the first character to encode.</p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to encode.</p>\n"
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array to contain the resulting sequence of bytes.</p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The index at which to start writing the resulting sequence of bytes.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of bytes written into <em>bytes</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetEncoder
    commentId: M:System.Text.ASCIIEncoding.GetEncoder
  - type: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.ASCIIEncoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)
- uid: System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)
  commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte*,System.Int32)
  id: GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetCharCount(Byte*, Int32)
  fullName: System.Text.ASCIIEncoding.GetCharCount(System.Byte*, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCharCount
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 24
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, the application uses <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n"
  syntax:
    content: public override int GetCharCount(byte *bytes, int count)
    content.vb: Public Overrides Function GetCharCount(bytes As Byte *, count As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte*
      description: "\n<p>A pointer to the first byte to decode.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to decode.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  - type: System.Text.ASCIIEncoding.GetDecoder
    commentId: M:System.Text.ASCIIEncoding.GetDecoder
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetCharCount(Byte[], Int32, Int32)
  fullName: System.Text.ASCIIEncoding.GetCharCount(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCharCount
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 27
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, the application uses <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to return the number of characters produced by decoding a range of elements in a byte array.</p>System.Text.ASCIIEncoding.GetCharCount Example#1"
  syntax:
    content: public override int GetCharCount(byte[] bytes, int index, int count)
    content.vb: Public Overrides Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first byte to decode.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to decode.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  - type: System.Text.ASCIIEncoding.GetDecoder
    commentId: M:System.Text.ASCIIEncoding.GetDecoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.ASCIIEncoding.GetCharCount(System.Byte(), System.Int32, System.Int32)
  name.vb: GetCharCount(Byte(), Int32, Int32)
- uid: System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetChars(Byte*, Int32, Char*, Int32)
  fullName: System.Text.ASCIIEncoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChars
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 28
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, the application uses <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.ASCIIEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.ASCIIEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>\n<xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").</p>\n<p>For security reasons, your application is recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  syntax:
    content: public override int GetChars(byte *bytes, int byteCount, char *chars, int charCount)
    content.vb: Public Overrides Function GetChars(bytes As Byte *, byteCount As Integer, chars As Char *, charCount As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte*
      description: "\n<p>A pointer to the first byte to decode.</p>\n"
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of bytes to decode.</p>\n"
    - id: chars
      type: System.Char*
      description: "\n<p>A pointer to the location at which to start writing the resulting set of characters.</p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The maximum number of characters to write.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of characters written at the location indicated by <em>chars</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteCount</em> or <em>charCount</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>charCount</em> is less than the resulting number of characters. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  - type: System.Text.ASCIIEncoding.GetDecoder
    commentId: M:System.Text.ASCIIEncoding.GetDecoder
  - type: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: System.Text.ASCIIEncoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChars
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 31
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Decodes a sequence of bytes from the specified byte array into the specified character array.</p>\n"
  remarks: "\n<p>To calculate the exact array size required by <xref href=\"System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to store the resulting characters, the application uses <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. To calculate the maximum array size, the application should use <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allows allocation of less memory, while the <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.ASCIIEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.ASCIIEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>\n<xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").</p>\n<p>For security reasons, your application is recommended to use <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> and enable error detection.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to decode a range of elements from a byte array and store the result in a set of elements in a Unicode character array.</p>System.Text.ASCIIEncoding.GetChars Example#1"
  syntax:
    content: public override int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)
    content.vb: Public Overrides Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode.</p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The index of the first byte to decode.</p>\n"
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of bytes to decode.</p>\n"
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array to contain the resulting set of characters.</p>\n"
    - id: charIndex
      type: System.Int32
      description: "\n<p>The index at which to start writing the resulting set of characters.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of characters written into <em>chars</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  - type: System.Text.ASCIIEncoding.GetDecoder
    commentId: M:System.Text.ASCIIEncoding.GetDecoder
  - type: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.ASCIIEncoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)
  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)
- uid: System.Text.ASCIIEncoding.GetDecoder
  commentId: M:System.Text.ASCIIEncoding.GetDecoder
  id: GetDecoder
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetDecoder()
  fullName: System.Text.ASCIIEncoding.GetDecoder()
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDecoder
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 32
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Obtains a decoder that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.Decoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts sequential blocks of bytes into sequential blocks of characters, in a manner similar to the <xref href=\"System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method of this class. However, a <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> maintains state information between calls so it can correctly decode byte sequences that span blocks. The <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> also preserves trailing bytes at the end of data blocks and uses the trailing bytes in the next decoding operation. Therefore, <xref href=\"System.Text.ASCIIEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.ASCIIEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</p>\n"
  example:
  - 
  syntax:
    content: public override Decoder GetDecoder()
    content.vb: Public Overrides Function GetDecoder As Decoder
    return:
      type: System.Text.Decoder
      description: "\n<p>A <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> that converts an ASCII encoded sequence of bytes into a sequence of Unicode characters.</p>\n"
  seealso:
  - type: System.Text.Decoder
    commentId: T:System.Text.Decoder
  - type: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.ASCIIEncoding.GetEncoder
    commentId: M:System.Text.ASCIIEncoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.ASCIIEncoding.GetEncoder
  commentId: M:System.Text.ASCIIEncoding.GetEncoder
  id: GetEncoder
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetEncoder()
  fullName: System.Text.ASCIIEncoding.GetEncoder()
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEncoder
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 33
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Obtains an encoder that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.Encoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method converts sequential blocks of characters into sequential blocks of bytes, in a manner similar to the <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method of this class. However, an <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> maintains state information between calls so it can correctly encode character sequences that span blocks. The <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> also preserves trailing characters at the end of data blocks and uses the trailing characters in the next encoding operation. For example, a data block might end with an unmatched high surrogate, and the matching low surrogate might be in the next data block. Therefore, <xref href=\"System.Text.ASCIIEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Text.ASCIIEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> are useful for network transmission and file operations, because those operations often deal with blocks of data instead of a complete data stream.</p>\n"
  example:
  - 
  syntax:
    content: public override Encoder GetEncoder()
    content.vb: Public Overrides Function GetEncoder As Encoder
    return:
      type: System.Text.Encoder
      description: "\n<p>An <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> that converts a sequence of Unicode characters into an ASCII encoded sequence of bytes.</p>\n"
  seealso:
  - type: System.Text.Encoder
    commentId: T:System.Text.Encoder
  - type: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.ASCIIEncoding.GetDecoder
    commentId: M:System.Text.ASCIIEncoding.GetDecoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  commentId: M:System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  id: GetMaxByteCount(System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetMaxByteCount(Int32)
  fullName: System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMaxByteCount
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 34
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method calculates the exact array size required by the <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to store the resulting bytes, whereas the <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method calculates the maximum array size. The <xref href=\"System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, but the <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>\n<xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is a worst-case number, including the worst case for the currently selected <xref href=\"System.Text.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref>.  If you choose a replacement fallback with a potentially large string, <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> can return large values.</p>\n<p>The <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method considers potential leftover surrogates from a previous encoding operation. As a result, if the <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> object uses the default replacement fallback, or if a custom replacement fallback has been defined with a single possible fallback character, the method returns <em>charCount</em> + 1. If the <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> object uses a replacement fallback with more than one possible fallback character, the method returns n * (<em>charCount</em> + 1), where n is the maximum number of fallback characters.</p>\n<p>\n<xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> has no relation to <xref href=\"System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. If your application needs a similar function to use with <xref href=\"System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, it should use <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<code>GetMaxByteCount(N)</code> is not necessarily the same value as <code>N* GetMaxByteCount(1)</code>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to calculate the bytes required to encode a specified number of characters.</p>System.Text.ASCIIEncoding.GetMaxByteCount Example#1"
  syntax:
    content: public override int GetMaxByteCount(int charCount)
    content.vb: Public Overrides Function GetMaxByteCount(charCount As Integer) As Integer
    parameters:
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to encode.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - type: System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - type: System.Text.ASCIIEncoding.GetEncoder
    commentId: M:System.Text.ASCIIEncoding.GetEncoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  id: GetMaxCharCount(System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetMaxCharCount(Int32)
  fullName: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMaxCharCount
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 35
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method calculates the exact array size required by the <xref href=\"System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to store the resulting characters, whereas  the <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method calculates the maximum array size. The <xref href=\"System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally allocates less memory, while the <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method generally executes faster.</p>\n<p>\n<xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> retrieves a worst-case number, including the worst case for the currently selected <xref href=\"System.Text.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref>. If a decoder fallback is present that has a maximum fallback length of n, the <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns n * <em>byteCount</em>.</p>\n<p>\n<xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> has no relation to <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. If your application needs a similar function to use with <xref href=\"System.Text.ASCIIEncoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, it should use <xref href=\"System.Text.ASCIIEncoding.GetMaxByteCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<code>GetMaxCharCount(N)</code> is not necessarily the same value as <code>N* GetMaxCharCount(1)</code>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to calculate the maximum number of characters needed to decode a specified number of bytes.</p>System.Text.ASCIIEncoding.GetMaxCharCount Example#1"
  syntax:
    content: public override int GetMaxCharCount(int byteCount)
    content.vb: Public Overrides Function GetMaxCharCount(byteCount As Integer) As Integer
    parameters:
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of bytes to decode.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>The resulting number of bytes is greater than the maximum number that can be returned as an integer. </p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.ASCIIEncoding.GetDecoder
    commentId: M:System.Text.ASCIIEncoding.GetDecoder
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)
  id: GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.ASCIIEncoding
  langs:
  - csharp
  - vb
  name: GetString(Byte[], Int32, Int32)
  fullName: System.Text.ASCIIEncoding.GetString(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetString
    path: src/System.Text.Encoding.Extensions/ref/System.Text.Encoding.Extensions.cs
    startLine: 36
  assemblies:
  - System.Text.Encoding.Extensions
  namespace: System.Text
  summary: "\n<p>Decodes a range of bytes from a byte array into a string.</p>\n"
  remarks: "\n<p>Data to be converted, such as data read from a stream, can be available only in sequential blocks. In this case, or if the amount of data is so large that it needs to be divided into smaller blocks, the application should use the <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> or the <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> provided by the <xref href=\"System.Text.ASCIIEncoding.GetDecoder\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Text.ASCIIEncoding.GetEncoder\" data-throw-if-not-resolved=\"false\"></xref> method, respectively.</p>\n<p>\n<xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> does not provide error detection. Any byte greater than hexadecimal 0x7F is decoded as the Unicode question mark (\"?\").</p>\n<p>For security reasons, you should use the <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.UnicodeEncoding\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> classes and enable error detection instead of using the <xref href=\"System.Text.ASCIIEncoding\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Text.ASCIIEncoding.GetString(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to convert a byte array into a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Text.ASCIIEncoding.GetString1 Example#1"
  syntax:
    content: public override string GetString(byte[] bytes, int byteIndex, int byteCount)
    content.vb: Public Overrides Function GetString(bytes As Byte(), byteIndex As Integer, byteCount As Integer) As String
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode.</p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The index of the first byte to decode.</p>\n"
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of bytes to decode.</p>\n"
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the results of decoding the specified sequence of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - type: System.Text.ASCIIEncoding.GetDecoder
    commentId: M:System.Text.ASCIIEncoding.GetDecoder
  - type: System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - type: System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.ASCIIEncoding.GetMaxCharCount(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Text.ASCIIEncoding.GetString(System.Byte(), System.Int32, System.Int32)
  name.vb: GetString(Byte(), Int32, Int32)
references:
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Char*
  isExternal: false
  name: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '*'
    fullName: '*'
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Char[]
  isExternal: false
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Byte*
  isExternal: true
  name: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Text.Decoder
  parent: System.Text
  isExternal: false
  name: Decoder
  fullName: System.Text.Decoder
- uid: System.Text.Encoder
  parent: System.Text
  isExternal: false
  name: Encoder
  fullName: System.Text.Encoder
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Text.EncoderFallbackException
  isExternal: false
  name: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Text.DecoderFallbackException
  isExternal: false
  name: DecoderFallbackException
  fullName: System.Text.DecoderFallbackException
