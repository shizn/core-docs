items:
- uid: System.Threading.AsyncLocal`1
  commentId: T:System.Threading.AsyncLocal`1
  id: AsyncLocal`1
  parent: System.Threading
  children:
  - System.Threading.AsyncLocal`1.#ctor
  - System.Threading.AsyncLocal`1.#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})
  - System.Threading.AsyncLocal`1.Value
  langs:
  - csharp
  - vb
  name: AsyncLocal<T>
  fullName: System.Threading.AsyncLocal<T>
  type: Class
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsyncLocal
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 21
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Represents ambient data that is local to a given asynchronous control flow, such as an asynchronous method. </p>\n"
  remarks: "\n<p>Because the task-based asynchronous programming model tends to abstract the use of threads, <xref href=\"System.Threading.AsyncLocal`1\" data-throw-if-not-resolved=\"false\"></xref> instances can be used to persist data across threads. </p>\n<p>The <xref href=\"System.Threading.AsyncLocal`1\" data-throw-if-not-resolved=\"false\"></xref> class also provides optional notifications when the value associated with the current thread changes, either because it was explicitly changed by setting the <xref href=\"System.Threading.AsyncLocal`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property, or implicitly changed when the thread encountered an <strong>await</strong> or other context transition.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Threading.AsyncLocal`1\" data-throw-if-not-resolved=\"false\"></xref> class to persist a string value across an asynchronous flow. It also contrasts the use of  <xref href=\"System.Threading.AsyncLocal`1\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Threading.ThreadLocal`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Threading.AsyncLocal#1"
  syntax:
    content: 'public sealed class AsyncLocal<T> : object'
    content.vb: >-
      Public NotInheritable Class AsyncLocal(Of T)
          Inherits Object
    typeParameters:
    - id: T
      description: "\n<p>The type of the ambient data. </p>\n"
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  fullName.vb: System.Threading.AsyncLocal(Of T)
  name.vb: AsyncLocal(Of T)
- uid: System.Threading.AsyncLocal`1.#ctor
  commentId: M:System.Threading.AsyncLocal`1.#ctor
  id: '#ctor'
  parent: System.Threading.AsyncLocal`1
  langs:
  - csharp
  - vb
  name: AsyncLocal()
  fullName: System.Threading.AsyncLocal<T>.AsyncLocal()
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 23
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Instantiates an <xref href=\"System.Threading.AsyncLocal`1\" data-throw-if-not-resolved=\"false\"></xref> instance that does not receive change notifications. </p>\n"
  syntax:
    content: public AsyncLocal()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.AsyncLocal(Of T).AsyncLocal()
- uid: System.Threading.AsyncLocal`1.#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})
  commentId: M:System.Threading.AsyncLocal`1.#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})
  id: '#ctor(System.Action{System.Threading.AsyncLocalValueChangedArgs{`0}})'
  parent: System.Threading.AsyncLocal`1
  langs:
  - csharp
  - vb
  name: AsyncLocal(Action<AsyncLocalValueChangedArgs<T>>)
  fullName: System.Threading.AsyncLocal<T>.AsyncLocal(System.Action<System.Threading.AsyncLocalValueChangedArgs<T>>)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 24
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Instantiates an <xref href=\"System.Threading.AsyncLocal`1\" data-throw-if-not-resolved=\"false\"></xref> local instance that receives change notifications. </p>\n"
  remarks: "\n<p>The delegate's signature is <strong>Action<ASyncLocalValueChangedArgs<T></strong>. </p>\n"
  syntax:
    content: public AsyncLocal(Action<AsyncLocalValueChangedArgs<T>> valueChangedHandler)
    content.vb: Public Sub New(valueChangedHandler As Action(Of AsyncLocalValueChangedArgs(Of T)))
    parameters:
    - id: valueChangedHandler
      type: System.Action{System.Threading.AsyncLocalValueChangedArgs{{T}}}
      description: "\n<p>The delegate that is called whenever the current value changes on any thread. </p>\n"
  seealso:
  - type: System.Threading.AsyncLocalValueChangedArgs`1
    commentId: T:System.Threading.AsyncLocalValueChangedArgs`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.AsyncLocal(Of T).AsyncLocal(System.Action(Of System.Threading.AsyncLocalValueChangedArgs(Of T)))
  name.vb: AsyncLocal(Action(Of AsyncLocalValueChangedArgs(Of T)))
- uid: System.Threading.AsyncLocal`1.Value
  commentId: P:System.Threading.AsyncLocal`1.Value
  id: Value
  parent: System.Threading.AsyncLocal`1
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Threading.AsyncLocal<T>.Value
  type: Property
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 26
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets or sets the value of the ambient data. </p>\n"
  syntax:
    content: public T Value { get; set; }
    content.vb: Public Property Value As T
    parameters: []
    return:
      type: '{T}'
      description: "\n<p>The value of the ambient data. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.AsyncLocal(Of T).Value
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Action{System.Threading.AsyncLocalValueChangedArgs{{T}}}
  definition: System.Action`1
  name: Action<AsyncLocalValueChangedArgs<T>>
  fullName: System.Action<System.Threading.AsyncLocalValueChangedArgs<T>>
  fullname.vb: System.Action(Of System.Threading.AsyncLocalValueChangedArgs(Of T))
  name.vb: Action(Of AsyncLocalValueChangedArgs(Of T))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.AsyncLocalValueChangedArgs`1
    name: AsyncLocalValueChangedArgs
    fullName: System.Threading.AsyncLocalValueChangedArgs
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.AsyncLocalValueChangedArgs`1
    name: AsyncLocalValueChangedArgs
    fullName: System.Threading.AsyncLocalValueChangedArgs
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Action`1
  isExternal: false
  name: Action<>
  fullName: System.Action<>
  fullname.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
