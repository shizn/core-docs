items:
- uid: System.BitConverter
  commentId: T:System.BitConverter
  id: BitConverter
  parent: System
  children:
  - System.BitConverter.DoubleToInt64Bits(System.Double)
  - System.BitConverter.GetBytes(System.Boolean)
  - System.BitConverter.GetBytes(System.Char)
  - System.BitConverter.GetBytes(System.Double)
  - System.BitConverter.GetBytes(System.Int16)
  - System.BitConverter.GetBytes(System.Int32)
  - System.BitConverter.GetBytes(System.Int64)
  - System.BitConverter.GetBytes(System.Single)
  - System.BitConverter.GetBytes(System.UInt16)
  - System.BitConverter.GetBytes(System.UInt32)
  - System.BitConverter.GetBytes(System.UInt64)
  - System.BitConverter.Int64BitsToDouble(System.Int64)
  - System.BitConverter.IsLittleEndian
  - System.BitConverter.ToBoolean(System.Byte[],System.Int32)
  - System.BitConverter.ToChar(System.Byte[],System.Int32)
  - System.BitConverter.ToDouble(System.Byte[],System.Int32)
  - System.BitConverter.ToInt16(System.Byte[],System.Int32)
  - System.BitConverter.ToInt32(System.Byte[],System.Int32)
  - System.BitConverter.ToInt64(System.Byte[],System.Int32)
  - System.BitConverter.ToSingle(System.Byte[],System.Int32)
  - System.BitConverter.ToString(System.Byte[])
  - System.BitConverter.ToString(System.Byte[],System.Int32)
  - System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)
  - System.BitConverter.ToUInt16(System.Byte[],System.Int32)
  - System.BitConverter.ToUInt32(System.Byte[],System.Int32)
  - System.BitConverter.ToUInt64(System.Byte[],System.Int32)
  langs:
  - csharp
  - vb
  name: BitConverter
  fullName: System.BitConverter
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BitConverter
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 26
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts base data types to an array of bytes, and an array of bytes to base data types.</p>\n"
  remarks: "\n<p>The <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref> class helps manipulate value types in their fundamental form, as a series of bytes. A byte is defined as an 8-bit unsigned integer. The <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref> class includes static methods to convert each of the primitive types to and from an array of bytes, as the following table illustrates.</p>\n<p>Type</p>\n<p>To byte conversion </p>\n<p>From byte conversion</p>\n<p>If you use <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref> methods to round-trip data, make sure that the <see cref=\"Overload:System.BitConverter.GetBytes\"></see> overload and the <strong>To</strong>Type method specify the same type. As the following example illustrates, restoring an array that represents a signed integer by calling the <xref href=\"System.BitConverter.ToUInt32(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method can result in a value that is different from the original. For more information, see the entry <see href=\"http://go.microsoft.com/fwlink/?LinkId=186999\">Working with Signed Non-Decimal and Bitwise Values</see> in the BCL Team Blog. </p>System.BitConverter.Class#3<p>The order of bytes in the array returned by the <see cref=\"Overload:System.BitConverter.GetBytes\"></see> method overloads (as well as the order of bits in the integer returned by the <xref href=\"System.BitConverter.DoubleToInt64Bits(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method and the order of hexadecimal strings returned by the <xref href=\"System.BitConverter.ToString(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method) depends on whether the computer architecture is little-endian or big-endian. Similarly, the order of bytes in the array and returned by the <strong>To</strong>IntegerValue methods and the <xref href=\"System.BitConverter.ToChar(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian. The endianness of an architecture is indicated by the <xref href=\"System.BitConverter.IsLittleEndian\" data-throw-if-not-resolved=\"false\"></xref> property, which returns <strong>true</strong> on little-endian systems and <strong>false</strong> on big-endian systems. On little-endian systems, lower-order bytes precede higher-order bytes. On big-endian system, higher-order bytes precede lower-order bytes. The following table illustrates the difference in the byte arrays that result from passing the integer 1,234,567,890 (0x499602D2) to the <xref href=\"System.BitConverter.GetBytes(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The bytes are listed in order from the byte at index 0 to the byte at index 3.</p><table><tbody><tr><td><p>Little-endian </p></td><td><p>D2-02-96-49</p></td></tr><tr><td><p>Big-endian</p></td><td><p>49-96-02-D2</p></td></tr></tbody></table><p>Because the return value of some methods depends on system architecture, be careful when transmitting byte data beyond machine boundaries:</p><ul><li><p>If all systems sending and receiving data are guaranteed to have the same endianness, nothing has be done to the data.</p></li><li><p>If systems sending and receiving data can have different endianness, always transmit data in a particular order. This means that the order of bytes in the array may have to be reversed either before sending them or after receiving them. A common convention is to transmit data in network byte order (big-endian order). The following example provides an implementation for sending an integer value in network byte order.</p>System.BitConverter.Class#4</li><li><p>If systems sending and receiving data can have different endianness and the data to be transmitted consists of signed integers, call the <xref href=\"System.Net.IPAddress.HostToNetworkOrder(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to convert the data to network byte order and the <xref href=\"System.Net.IPAddress.NetworkToHostOrder(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to convert it to the order required by the recipient.</p></li></ul>"
  example:
  - "\n<p>The following code example illustrates the use of several <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref> class methods.</p>System.BitConverter.Class#1"
  syntax:
    content: public class BitConverter
    content.vb: Public Class BitConverter
  seealso:
  - type: System.Byte
    commentId: T:System.Byte
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.BitConverter.IsLittleEndian
  commentId: F:System.BitConverter.IsLittleEndian
  id: IsLittleEndian
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: IsLittleEndian
  fullName: System.BitConverter.IsLittleEndian
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsLittleEndian
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 34
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Indicates the byte order (\"endianness\") in which data is stored in this computer architecture.</p>\n"
  remarks: "\n<p>Different computer architectures store data using different byte orders. \"Big-endian\" means the most significant byte is on the left end of a word. \"Little-endian\" means the most significant byte is on the right end of a word.</p>\n<p>You can convert from network byte order to the byte order of the host computer without retrieving  the value of the <xref href=\"System.BitConverter.IsLittleEndian\" data-throw-if-not-resolved=\"false\"></xref> field by passing a 16-bit, 32-bit, or 64 bit integer to the <xref href=\"System.Net.IPAddress.HostToNetworkOrder(System.Int16)\" data-throw-if-not-resolved=\"false\"></xref> method.  </p>\n"
  example:
  - "\n<p>The following code example illustrates the use of the <strong>IsLittleEndian</strong> field.</p>System.BitConverter.Class#2"
  syntax:
    content: public static readonly bool IsLittleEndian
    content.vb: Public Shared ReadOnly IsLittleEndian As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.BitConverter.DoubleToInt64Bits(System.Double)
  commentId: M:System.BitConverter.DoubleToInt64Bits(System.Double)
  id: DoubleToInt64Bits(System.Double)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: DoubleToInt64Bits(Double)
  fullName: System.BitConverter.DoubleToInt64Bits(System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DoubleToInt64Bits
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 440
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified double-precision floating point number to a 64-bit signed integer.</p>\n"
  remarks: "\n<p>The order of bits in the integer returned by the <xref href=\"System.BitConverter.DoubleToInt64Bits(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following code example converts the bit patterns of several <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>DoubleToInt64Bits</strong> method.</p>System.BitConverter.DoubleInt64#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static long DoubleToInt64Bits(double value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function DoubleToInt64Bits(value As Double) As Long
    parameters:
    - id: value
      type: System.Double
    return:
      type: System.Int64
  seealso:
  - type: System.BitConverter.Int64BitsToDouble(System.Int64)
    commentId: M:System.BitConverter.Int64BitsToDouble(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.BitConverter.GetBytes(System.Boolean)
  commentId: M:System.BitConverter.GetBytes(System.Boolean)
  id: GetBytes(System.Boolean)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: GetBytes(Boolean)
  fullName: System.BitConverter.GetBytes(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 38
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified Boolean value as a byte array.</p>\n"
  remarks: "\n<p>You can convert a byte array back to a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value by calling the <xref href=\"System.BitConverter.ToBoolean(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example converts the bit patterns of <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays with the <strong>GetBytes</strong> method.</p>System.BitConverter.GetBytes.Others#1"
  syntax:
    content: public static byte[] GetBytes(bool value)
    content.vb: Public Shared Function GetBytes(value As Boolean) As Byte()
    parameters:
    - id: value
      type: System.Boolean
    return:
      type: System.Byte[]
  seealso:
  - type: System.BitConverter.ToBoolean(System.Byte[],System.Int32)
    commentId: M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.BitConverter.GetBytes(System.Char)
  commentId: M:System.BitConverter.GetBytes(System.Char)
  id: GetBytes(System.Char)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: GetBytes(Char)
  fullName: System.BitConverter.GetBytes(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 48
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified Unicode character value as an array of bytes.</p>\n"
  remarks: "\n<p>The order of bytes in the array returned by the <xref href=\"System.BitConverter.GetBytes(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following code example converts the bit patterns of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> values (Unicode characters) to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays with the <strong>GetBytes</strong> method.</p>System.BitConverter.GetBytes.Others#2"
  syntax:
    content: public static byte[] GetBytes(char value)
    content.vb: Public Shared Function GetBytes(value As Char) As Byte()
    parameters:
    - id: value
      type: System.Char
    return:
      type: System.Byte[]
  seealso:
  - type: System.BitConverter.ToChar(System.Byte[],System.Int32)
    commentId: M:System.BitConverter.ToChar(System.Byte[],System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.BitConverter.GetBytes(System.Double)
  commentId: M:System.BitConverter.GetBytes(System.Double)
  id: GetBytes(System.Double)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: GetBytes(Double)
  fullName: System.BitConverter.GetBytes(System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 141
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified double-precision floating point value as an array of bytes.</p>\n"
  remarks: "\n<p>The order of bytes in the array returned by the <xref href=\"System.BitConverter.GetBytes(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following code example converts the bit patterns of <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays with the <strong>GetBytes</strong> method.</p>System.BitConverter.GetBytes.Others#4"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static byte[] GetBytes(double value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetBytes(value As Double) As Byte()
    parameters:
    - id: value
      type: System.Double
    return:
      type: System.Byte[]
  seealso:
  - type: System.BitConverter.ToDouble(System.Byte[],System.Int32)
    commentId: M:System.BitConverter.ToDouble(System.Byte[],System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.BitConverter.GetBytes(System.Int16)
  commentId: M:System.BitConverter.GetBytes(System.Int16)
  id: GetBytes(System.Int16)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: GetBytes(Int16)
  fullName: System.BitConverter.GetBytes(System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 58
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 16-bit signed integer value as an array of bytes.</p>\n"
  remarks: "\n<p>The order of bytes in the array returned by the <xref href=\"System.BitConverter.GetBytes(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following code example converts the bit patterns of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays with the <strong>GetBytes</strong> method.</p>System.BitConverter.GetBytes.SInts#3"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static byte[] GetBytes(short value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetBytes(value As Short) As Byte()
    parameters:
    - id: value
      type: System.Int16
    return:
      type: System.Byte[]
  seealso:
  - type: System.BitConverter.ToInt16(System.Byte[],System.Int32)
    commentId: M:System.BitConverter.ToInt16(System.Byte[],System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.BitConverter.GetBytes(System.Int32)
  commentId: M:System.BitConverter.GetBytes(System.Int32)
  id: GetBytes(System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: GetBytes(Int32)
  fullName: System.BitConverter.GetBytes(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 72
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 32-bit signed integer value as an array of bytes.</p>\n"
  remarks: "\n<p>The order of bytes in the array returned by the <xref href=\"System.BitConverter.GetBytes(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following code example converts the bit patterns of <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays with the <strong>GetBytes</strong> method.</p>System.BitConverter.GetBytes.SInts#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static byte[] GetBytes(int value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetBytes(value As Integer) As Byte()
    parameters:
    - id: value
      type: System.Int32
    return:
      type: System.Byte[]
  seealso:
  - type: System.BitConverter.ToInt32(System.Byte[],System.Int32)
    commentId: M:System.BitConverter.ToInt32(System.Byte[],System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.BitConverter.GetBytes(System.Int64)
  commentId: M:System.BitConverter.GetBytes(System.Int64)
  id: GetBytes(System.Int64)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: GetBytes(Int64)
  fullName: System.BitConverter.GetBytes(System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 86
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 64-bit signed integer value as an array of bytes.</p>\n"
  remarks: "\n<p>The order of bytes in the array returned by the <xref href=\"System.BitConverter.GetBytes(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following example calls the <xref href=\"System.BitConverter.GetBytes(System.Int64)\" data-throw-if-not-resolved=\"false\"></xref> method to convert each element in an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> array to a<xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays.</p>System.BitConverter.GetBytes.SInts#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static byte[] GetBytes(long value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetBytes(value As Long) As Byte()
    parameters:
    - id: value
      type: System.Int64
    return:
      type: System.Byte[]
  seealso:
  - type: System.BitConverter.ToInt64(System.Byte[],System.Int32)
    commentId: M:System.BitConverter.ToInt64(System.Byte[],System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.BitConverter.GetBytes(System.Single)
  commentId: M:System.BitConverter.GetBytes(System.Single)
  id: GetBytes(System.Single)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: GetBytes(Single)
  fullName: System.BitConverter.GetBytes(System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 130
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified single-precision floating point value as an array of bytes.</p>\n"
  remarks: "\n<p>The order of bytes in the array returned by the <xref href=\"System.BitConverter.GetBytes(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following code example converts the bit patterns of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays with the <strong>GetBytes</strong> method.</p>System.BitConverter.GetBytes.Others#3"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static byte[] GetBytes(float value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetBytes(value As Single) As Byte()
    parameters:
    - id: value
      type: System.Single
    return:
      type: System.Byte[]
  seealso:
  - type: System.BitConverter.ToSingle(System.Byte[],System.Int32)
    commentId: M:System.BitConverter.ToSingle(System.Byte[],System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.BitConverter.GetBytes(System.UInt16)
  commentId: M:System.BitConverter.GetBytes(System.UInt16)
  id: GetBytes(System.UInt16)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: GetBytes(UInt16)
  fullName: System.BitConverter.GetBytes(System.UInt16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 100
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 16-bit unsigned integer value as an array of bytes.</p>\n"
  remarks: "\n<p>The order of bytes in the array returned by the <xref href=\"System.BitConverter.GetBytes(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following code example converts the bit patterns of <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays with the <strong>GetBytes</strong> method.</p>System.BitConverter.GetBytes.UInts#3"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static byte[] GetBytes(ushort value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function GetBytes(value As UShort) As Byte()
    parameters:
    - id: value
      type: System.UInt16
    return:
      type: System.Byte[]
  seealso:
  - type: System.BitConverter.ToUInt16(System.Byte[],System.Int32)
    commentId: M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.BitConverter.GetBytes(System.UInt32)
  commentId: M:System.BitConverter.GetBytes(System.UInt32)
  id: GetBytes(System.UInt32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: GetBytes(UInt32)
  fullName: System.BitConverter.GetBytes(System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 110
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 32-bit unsigned integer value as an array of bytes.</p>\n"
  remarks: "\n<p>The order of bytes in the array returned by the <xref href=\"System.BitConverter.GetBytes(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following code example converts the bit patterns of <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays with the <strong>GetBytes</strong> method.</p>System.BitConverter.GetBytes.UInts#2"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static byte[] GetBytes(uint value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function GetBytes(value As UInteger) As Byte()
    parameters:
    - id: value
      type: System.UInt32
    return:
      type: System.Byte[]
  seealso:
  - type: System.BitConverter.ToUInt32(System.Byte[],System.Int32)
    commentId: M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.BitConverter.GetBytes(System.UInt64)
  commentId: M:System.BitConverter.GetBytes(System.UInt64)
  id: GetBytes(System.UInt64)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: GetBytes(UInt64)
  fullName: System.BitConverter.GetBytes(System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 120
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns the specified 64-bit unsigned integer value as an array of bytes.</p>\n"
  remarks: "\n<p>The order of bytes in the array returned by the <xref href=\"System.BitConverter.GetBytes(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following code example converts the bit patterns of <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays with the <strong>GetBytes</strong> method.</p>System.BitConverter.GetBytes.UInts#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static byte[] GetBytes(ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function GetBytes(value As ULong) As Byte()
    parameters:
    - id: value
      type: System.UInt64
    return:
      type: System.Byte[]
  seealso:
  - type: System.BitConverter.ToUInt64(System.Byte[],System.Int32)
    commentId: M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.BitConverter.Int64BitsToDouble(System.Int64)
  commentId: M:System.BitConverter.Int64BitsToDouble(System.Int64)
  id: Int64BitsToDouble(System.Int64)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: Int64BitsToDouble(Int64)
  fullName: System.BitConverter.Int64BitsToDouble(System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Int64BitsToDouble
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 445
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the specified 64-bit signed integer to a double-precision floating point number.</p>\n"
  remarks: "\n<p>Typically, <em>value</em> is an integer that is returned by the <xref href=\"System.BitConverter.DoubleToInt64Bits(System.Double)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example converts the bit patterns of several <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values to <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>Int64BitsToDouble</strong> method.</p>System.BitConverter.DoubleInt64#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static double Int64BitsToDouble(long value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Int64BitsToDouble(value As Long) As Double
    parameters:
    - id: value
      type: System.Int64
    return:
      type: System.Double
  seealso:
  - type: System.BitConverter.DoubleToInt64Bits(System.Double)
    commentId: M:System.BitConverter.DoubleToInt64Bits(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.BitConverter.ToBoolean(System.Byte[],System.Int32)
  commentId: M:System.BitConverter.ToBoolean(System.Byte[],System.Int32)
  id: ToBoolean(System.Byte[],System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToBoolean(Byte[], Int32)
  fullName: System.BitConverter.ToBoolean(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToBoolean
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 428
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a Boolean value converted from the byte at a specified position in a byte array.</p>\n"
  remarks: "\n<p>To convert a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value to its byte representation, call the <xref href=\"System.BitConverter.ToBoolean(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example converts elements of <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>ToBoolean</strong> method.</p>System.BitConverter.ToXXX.Others#1"
  syntax:
    content: public static bool ToBoolean(byte[] value, int startIndex)
    content.vb: Public Shared Function ToBoolean(value As Byte(), startIndex As Integer) As Boolean
    parameters:
    - id: value
      type: System.Byte[]
    - id: startIndex
      type: System.Int32
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\n"
  seealso:
  - type: System.BitConverter.GetBytes(System.Boolean)
    commentId: M:System.BitConverter.GetBytes(System.Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToBoolean(System.Byte(), System.Int32)
  name.vb: ToBoolean(Byte(), Int32)
- uid: System.BitConverter.ToChar(System.Byte[],System.Int32)
  commentId: M:System.BitConverter.ToChar(System.Byte[],System.Int32)
  id: ToChar(System.Byte[],System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToChar(Byte[], Int32)
  fullName: System.BitConverter.ToChar(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToChar
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 151
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a Unicode character converted from two bytes at a specified position in a byte array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.BitConverter.ToChar(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts the bytes from index <em>startIndex</em> to <em>startIndex</em> + 1 to a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref> class topic. </p>\n"
  example:
  - "\n<p>The following code example converts elements of <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays to <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> values (Unicode characters) with the <strong>ToChar</strong> method.</p>System.BitConverter.ToXXX.Others#2"
  syntax:
    content: public static char ToChar(byte[] value, int startIndex)
    content.vb: Public Shared Function ToChar(value As Byte(), startIndex As Integer) As Char
    parameters:
    - id: value
      type: System.Byte[]
    - id: startIndex
      type: System.Int32
    return:
      type: System.Char
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>startIndex</em> equals the length of <em>value</em> minus 1.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\n"
  seealso:
  - type: System.BitConverter.GetBytes(System.Char)
    commentId: M:System.BitConverter.GetBytes(System.Char)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToChar(System.Byte(), System.Int32)
  name.vb: ToChar(Byte(), Int32)
- uid: System.BitConverter.ToDouble(System.Byte[],System.Int32)
  commentId: M:System.BitConverter.ToDouble(System.Byte[],System.Int32)
  id: ToDouble(System.Byte[],System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToDouble(Byte[], Int32)
  fullName: System.BitConverter.ToDouble(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToDouble
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 333
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a double-precision floating point number converted from eight bytes at a specified position in a byte array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.BitConverter.ToDouble(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts the bytes from index <em>startIndex</em> to <em>startIndex</em> + 7 to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref> class topic. </p>\n"
  example:
  - "\n<p>The following code example converts elements of <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays to <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>ToDouble</strong> method.</p>System.BitConverter.ToXXX.Others#3"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static double ToDouble(byte[] value, int startIndex)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function ToDouble(value As Byte(), startIndex As Integer) As Double
    parameters:
    - id: value
      type: System.Byte[]
    - id: startIndex
      type: System.Int32
    return:
      type: System.Double
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 7, and is less than or equal to the length of <em>value</em> minus 1.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\n"
  seealso:
  - type: System.BitConverter.GetBytes(System.Double)
    commentId: M:System.BitConverter.GetBytes(System.Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToDouble(System.Byte(), System.Int32)
  name.vb: ToDouble(Byte(), Int32)
- uid: System.BitConverter.ToInt16(System.Byte[],System.Int32)
  commentId: M:System.BitConverter.ToInt16(System.Byte[],System.Int32)
  id: ToInt16(System.Byte[],System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToInt16(Byte[], Int32)
  fullName: System.BitConverter.ToInt16(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToInt16
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 170
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a 16-bit signed integer converted from two bytes at a specified position in a byte array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.BitConverter.ToInt16(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts the bytes from index <em>startIndex</em> to <em>startIndex</em> + 1 to an <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref> class topic. </p>\n"
  example:
  - "\n<p>The following code example converts elements of <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays to <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>ToInt16</strong> method.</p>System.BitConverter.ToXXX.SInts#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static short ToInt16(byte[] value, int startIndex)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function ToInt16(value As Byte(), startIndex As Integer) As Short
    parameters:
    - id: value
      type: System.Byte[]
    - id: startIndex
      type: System.Int32
    return:
      type: System.Int16
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>startIndex</em> equals the length of <em>value</em> minus 1.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\n"
  seealso:
  - type: System.BitConverter.GetBytes(System.Int16)
    commentId: M:System.BitConverter.GetBytes(System.Int16)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToInt16(System.Byte(), System.Int32)
  name.vb: ToInt16(Byte(), Int32)
- uid: System.BitConverter.ToInt32(System.Byte[],System.Int32)
  commentId: M:System.BitConverter.ToInt32(System.Byte[],System.Int32)
  id: ToInt32(System.Byte[],System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToInt32(Byte[], Int32)
  fullName: System.BitConverter.ToInt32(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToInt32
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 202
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a 32-bit signed integer converted from four bytes at a specified position in a byte array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.BitConverter.ToInt32(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts the bytes from index <em>startIndex</em> to <em>startIndex</em> + 3 to an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.BitConverter.ToInt32(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to create <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> values from a four-byte array and from the upper four bytes of an eight-byte array. It also uses the <xref href=\"System.BitConverter.GetBytes(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.BitConverter.ToInt32(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods to round-trip an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value. </p>System.BitConverter.ToInt32#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static int ToInt32(byte[] value, int startIndex)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function ToInt32(value As Byte(), startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.Byte[]
    - id: startIndex
      type: System.Int32
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 3, and is less than or equal to the length of <em>value</em> minus 1.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\n"
  seealso:
  - type: System.BitConverter.GetBytes(System.Int32)
    commentId: M:System.BitConverter.GetBytes(System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToInt32(System.Byte(), System.Int32)
  name.vb: ToInt32(Byte(), Int32)
- uid: System.BitConverter.ToInt64(System.Byte[],System.Int32)
  commentId: M:System.BitConverter.ToInt64(System.Byte[],System.Int32)
  id: ToInt64(System.Byte[],System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToInt64(Byte[], Int32)
  fullName: System.BitConverter.ToInt64(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToInt64
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 233
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a 64-bit signed integer converted from eight bytes at a specified position in a byte array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.BitConverter.ToInt64(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts the bytes from index <em>startIndex</em> to <em>startIndex</em> + 7 to a <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref> class topic. </p>\n"
  example:
  - "\n<p>The following code example converts elements of <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays to <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>ToInt64</strong> method.</p>System.BitConverter.ToXXX.SInts#3"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static long ToInt64(byte[] value, int startIndex)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function ToInt64(value As Byte(), startIndex As Integer) As Long
    parameters:
    - id: value
      type: System.Byte[]
    - id: startIndex
      type: System.Int32
    return:
      type: System.Int64
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 7, and is less than or equal to the length of <em>value</em> minus 1.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\n"
  seealso:
  - type: System.BitConverter.GetBytes(System.Int64)
    commentId: M:System.BitConverter.GetBytes(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToInt64(System.Byte(), System.Int32)
  name.vb: ToInt64(Byte(), Int32)
- uid: System.BitConverter.ToSingle(System.Byte[],System.Int32)
  commentId: M:System.BitConverter.ToSingle(System.Byte[],System.Int32)
  id: ToSingle(System.Byte[],System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToSingle(Byte[], Int32)
  fullName: System.BitConverter.ToSingle(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToSingle
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 317
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a single-precision floating point number converted from four bytes at a specified position in a byte array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.BitConverter.ToSingle(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts the bytes from index <em>startIndex</em> to <em>startIndex</em> + 3 to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  example:
  - "\n<p>The following code example converts elements of <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays to <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>ToSingle</strong> method.</p>System.BitConverter.ToXXX.Others#4"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static float ToSingle(byte[] value, int startIndex)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function ToSingle(value As Byte(), startIndex As Integer) As Single
    parameters:
    - id: value
      type: System.Byte[]
    - id: startIndex
      type: System.Int32
    return:
      type: System.Single
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 3, and is less than or equal to the length of <em>value</em> minus 1.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\n"
  seealso:
  - type: System.BitConverter.GetBytes(System.Single)
    commentId: M:System.BitConverter.GetBytes(System.Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToSingle(System.Byte(), System.Int32)
  name.vb: ToSingle(Byte(), Int32)
- uid: System.BitConverter.ToString(System.Byte[])
  commentId: M:System.BitConverter.ToString(System.Byte[])
  id: ToString(System.Byte[])
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToString(Byte[])
  fullName: System.BitConverter.ToString(System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 402
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the numeric value of each element of a specified array of bytes to its equivalent hexadecimal string representation.</p>\n"
  remarks: "\n<p>All the elements of <em>value</em> are converted. The order of hexadecimal strings returned by the <xref href=\"System.BitConverter.ToString(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following code example converts <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays to <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects with the <strong>ToString</strong> method.</p>System.BitConverter.ToString#1"
  syntax:
    content: public static string ToString(byte[] value)
    content.vb: Public Shared Function ToString(value As Byte()) As String
    parameters:
    - id: value
      type: System.Byte[]
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToString(System.Byte())
  name.vb: ToString(Byte())
- uid: System.BitConverter.ToString(System.Byte[],System.Int32)
  commentId: M:System.BitConverter.ToString(System.Byte[],System.Int32)
  id: ToString(System.Byte[],System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToString(Byte[], Int32)
  fullName: System.BitConverter.ToString(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 411
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</p>\n"
  remarks: "\n<p>The elements from array position <em>startIndex</em> to the end of the array are converted. The order of hexadecimal strings returned by the <xref href=\"System.BitConverter.ToString(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following code example converts the part of a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array starting at the specified <em>startIndex</em> to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> with the <strong>ToString</strong> method.</p>System.BitConverter.ToString#2"
  syntax:
    content: public static string ToString(byte[] value, int startIndex)
    content.vb: Public Shared Function ToString(value As Byte(), startIndex As Integer) As String
    parameters:
    - id: value
      type: System.Byte[]
    - id: startIndex
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToString(System.Byte(), System.Int32)
  name.vb: ToString(Byte(), Int32)
- uid: System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)
  id: ToString(System.Byte[],System.Int32,System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToString(Byte[], Int32, Int32)
  fullName: System.BitConverter.ToString(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 358
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Converts the numeric value of each element of a specified subarray of bytes to its equivalent hexadecimal string representation.</p>\n"
  remarks: "\n<p>The <em>length</em> elements from array position <em>startIndex</em> are converted. If <em>length</em> equals zero, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The order of hexadecimal strings returned by the <xref href=\"System.BitConverter.ToString(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method depends on whether the computer architecture is little-endian or big-endian.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.BitConverter.ToString(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to convert part of a byte array, starting at the specified <em>startIndex</em> and with the specified <em>length</em>, to a string.</p>System.BitConverter.ToString#2"
  syntax:
    content: public static string ToString(byte[] value, int startIndex, int length)
    content.vb: Public Shared Function ToString(value As Byte(), startIndex As Integer, length As Integer) As String
    parameters:
    - id: value
      type: System.Byte[]
    - id: startIndex
      type: System.Int32
    - id: length
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>startIndex</em> is greater than zero and is greater than or equal to the length of <em>value</em>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The combination of <em>startIndex</em> and <em>length</em> does not specify a position within <em>value</em>; that is, the <em>startIndex</em> parameter is greater than the length of <em>value</em> minus the <em>length</em> parameter.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToString(System.Byte(), System.Int32, System.Int32)
  name.vb: ToString(Byte(), Int32, Int32)
- uid: System.BitConverter.ToUInt16(System.Byte[],System.Int32)
  commentId: M:System.BitConverter.ToUInt16(System.Byte[],System.Int32)
  id: ToUInt16(System.Byte[],System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToUInt16(Byte[], Int32)
  fullName: System.BitConverter.ToUInt16(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToUInt16
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 270
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a 16-bit unsigned integer converted from two bytes at a specified position in a byte array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.BitConverter.ToUInt16(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts the bytes from index <em>startIndex</em> to <em>startIndex</em> + 1 to a <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref> class topic. </p>\n"
  example:
  - "\n<p>The following code example converts elements of <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays to <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>ToUInt16</strong> method.</p>System.BitConverter.ToXXX.UInts#1"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static ushort ToUInt16(byte[] value, int startIndex)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function ToUInt16(value As Byte(), startIndex As Integer) As UShort
    parameters:
    - id: value
      type: System.Byte[]
    - id: startIndex
      type: System.Int32
    return:
      type: System.UInt16
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>startIndex</em> equals the length of <em>value</em> minus 1.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\n"
  seealso:
  - type: System.BitConverter.GetBytes(System.UInt16)
    commentId: M:System.BitConverter.GetBytes(System.UInt16)
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToUInt16(System.Byte(), System.Int32)
  name.vb: ToUInt16(Byte(), Int32)
- uid: System.BitConverter.ToUInt32(System.Byte[],System.Int32)
  commentId: M:System.BitConverter.ToUInt32(System.Byte[],System.Int32)
  id: ToUInt32(System.Byte[],System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToUInt32(Byte[], Int32)
  fullName: System.BitConverter.ToUInt32(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToUInt32
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 286
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a 32-bit unsigned integer converted from four bytes at a specified position in a byte array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.BitConverter.ToUInt32(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts the bytes from index <em>startIndex</em> to <em>startIndex</em> + 3 to a <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref> class topic. </p>\n"
  example:
  - "\n<p>The following code example converts elements of <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays to <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>ToUInt32</strong> method.</p>System.BitConverter.ToXXX.UInts#2"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static uint ToUInt32(byte[] value, int startIndex)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function ToUInt32(value As Byte(), startIndex As Integer) As UInteger
    parameters:
    - id: value
      type: System.Byte[]
    - id: startIndex
      type: System.Int32
    return:
      type: System.UInt32
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 3, and is less than or equal to the length of <em>value</em> minus 1.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\n"
  seealso:
  - type: System.BitConverter.GetBytes(System.UInt32)
    commentId: M:System.BitConverter.GetBytes(System.UInt32)
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToUInt32(System.Byte(), System.Int32)
  name.vb: ToUInt32(Byte(), Int32)
- uid: System.BitConverter.ToUInt64(System.Byte[],System.Int32)
  commentId: M:System.BitConverter.ToUInt64(System.Byte[],System.Int32)
  id: ToUInt64(System.Byte[],System.Int32)
  parent: System.BitConverter
  langs:
  - csharp
  - vb
  name: ToUInt64(Byte[], Int32)
  fullName: System.BitConverter.ToUInt64(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/BitConverter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToUInt64
    path: src/mscorlib/src/System/BitConverter.cs
    startLine: 302
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a 64-bit unsigned integer converted from eight bytes at a specified position in a byte array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.BitConverter.ToUInt64(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method converts the bytes from index <em>startIndex</em> to <em>startIndex</em> + 7 to a <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> value. The order of bytes in the array must reflect the endianness of the computer system's architecture; for more information, see the Remarks section of the <xref href=\"System.BitConverter\" data-throw-if-not-resolved=\"false\"></xref> class topic. </p>\n"
  example:
  - "\n<p>The following code example converts elements of <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> arrays to <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref> values with the <strong>ToUInt64</strong> method.</p>System.BitConverter.ToXXX.UInts#3"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static ulong ToUInt64(byte[] value, int startIndex)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Function ToUInt64(value As Byte(), startIndex As Integer) As ULong
    parameters:
    - id: value
      type: System.Byte[]
    - id: startIndex
      type: System.Int32
    return:
      type: System.UInt64
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>startIndex</em> is greater than or equal to the length of <em>value</em> minus 7, and is less than or equal to the length of <em>value</em> minus 1.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of <em>value</em> minus 1. </p>\n"
  seealso:
  - type: System.BitConverter.GetBytes(System.UInt64)
    commentId: M:System.BitConverter.GetBytes(System.UInt64)
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.BitConverter.ToUInt64(System.Byte(), System.Int32)
  name.vb: ToUInt64(Byte(), Int32)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
