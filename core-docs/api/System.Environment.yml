items:
- uid: System.Environment
  commentId: T:System.Environment
  id: Environment
  parent: System
  children:
  - System.Environment.CurrentManagedThreadId
  - System.Environment.Exit(System.Int32)
  - System.Environment.ExpandEnvironmentVariables(System.String)
  - System.Environment.FailFast(System.String)
  - System.Environment.FailFast(System.String,System.Exception)
  - System.Environment.GetCommandLineArgs
  - System.Environment.GetEnvironmentVariable(System.String)
  - System.Environment.GetEnvironmentVariables
  - System.Environment.HasShutdownStarted
  - System.Environment.MachineName
  - System.Environment.NewLine
  - System.Environment.ProcessorCount
  - System.Environment.SetEnvironmentVariable(System.String,System.String)
  - System.Environment.StackTrace
  - System.Environment.TickCount
  langs:
  - csharp
  - vb
  name: Environment
  fullName: System.Environment
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Environment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Environment
    path: src/mscorlib/src/System/Environment.cs
    startLine: 42
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Provides information about, and means to manipulate, the current environment and platform. This class cannot be inherited.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Environment\" data-throw-if-not-resolved=\"false\"></xref> class to retrieve information such as command-line arguments, the exit code, environment variable settings, contents of the call stack, time since last system boot, and the version of the common language runtime.</p>\n"
  example:
  - "\n<p>The following example demonstrates displays a list of information about the current environment.</p>environment.class#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public class Environment
    content.vb: >-
      <ComVisible(True)>

      Public Class Environment
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Environment.CurrentManagedThreadId
  commentId: P:System.Environment.CurrentManagedThreadId
  id: CurrentManagedThreadId
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: CurrentManagedThreadId
  fullName: System.Environment.CurrentManagedThreadId
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Environment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentManagedThreadId
    path: src/mscorlib/src/System/Environment.cs
    startLine: 1757
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets a unique identifier for the current managed thread.</p>\n"
  syntax:
    content: >-
      public static int CurrentManagedThreadId

      {
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          get;
      }
    content.vb: Public Shared ReadOnly Property CurrentManagedThreadId As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Environment.HasShutdownStarted
  commentId: P:System.Environment.HasShutdownStarted
  id: HasShutdownStarted
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: HasShutdownStarted
  fullName: System.Environment.HasShutdownStarted
  type: Property
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets a value that indicates whether the current application domain is being unloaded or the common language runtime (CLR) is shutting down. </p>\n"
  remarks: "\n<p>When the CLR unloads an application domain, it runs the finalizers on all objects that have a finalizer method in that application domain. When the CLR shuts down, it starts the finalizer thread on all objects that have a finalizer method. The <xref href=\"System.Environment.HasShutdownStarted\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong> only after the finalizer thread has been started. When the property returns <strong>true</strong>, you can determine whether an application domain is being unloaded or the CLR itself is shutting down by calling the <xref href=\"System.AppDomain.IsFinalizingForUnload\" data-throw-if-not-resolved=\"false\"></xref> method. This method returns <strong>true</strong> if finalizers are called because the application domain is unloading or <strong>false</strong> if the CLR is shutting down. </p>\n<p>The <xref href=\"System.Environment.HasShutdownStarted\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong> if the finalizer thread has not been started. </p>\n<p>By using this property, you can determine whether to access static variables in your finalization code. If either an application domain or the CLR is shutting down, you cannot reliably access any object that has a finalization method and that is referenced by a static field. This is because these objects may have already been finalized.</p>\n"
  syntax:
    content: >-
      public static bool HasShutdownStarted

      {
          [SecuritySafeCritical]
          [MethodImpl(MethodImplOptions.InternalCall)]
          get;
      }
    content.vb: Public Shared ReadOnly Property HasShutdownStarted As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.AppDomain.IsFinalizingForUnload
    commentId: M:System.AppDomain.IsFinalizingForUnload
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Environment.MachineName
  commentId: P:System.Environment.MachineName
  id: MachineName
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: MachineName
  fullName: System.Environment.MachineName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Environment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MachineName
    path: src/mscorlib/src/System/Environment.cs
    startLine: 520
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets the NetBIOS name of this local computer.</p>\n"
  remarks: "\n<p>The name of this computer is established at system startup when the name is read from the registry. If this computer is a node in a cluster, the name of the node is returned.</p>\n"
  example:
  - "\n<p>The following example displays the name of the computer that runs the code example. (The machine name is omitted from the example output for security reasons.) </p>environment.machinename#1"
  syntax:
    content: >-
      public static string MachineName

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Shared ReadOnly Property MachineName As String
    parameters: []
    return:
      type: System.String
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The name of this computer cannot be obtained.</p>\n"
  see:
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Environment.NewLine
  commentId: P:System.Environment.NewLine
  id: NewLine
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: NewLine
  fullName: System.Environment.NewLine
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Environment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NewLine
    path: src/mscorlib/src/System/Environment.cs
    startLine: 1063
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets the newline string defined for this environment.</p>\n"
  remarks: "\n<p>The property value of <xref href=\"System.Environment.NewLine\" data-throw-if-not-resolved=\"false\"></xref> is a constant customized specifically for the current platform and implementation of the .NET Framework. For more information about the escape characters in the property value, see Character Escapes in Regular Expressions.</p>\n<p>The functionality provided by <xref href=\"System.Environment.NewLine\" data-throw-if-not-resolved=\"false\"></xref> is often what is meant by the terms newline, line feed, line break, carriage return, CRLF, and end of line. </p>\n<p>\n<xref href=\"System.Environment.NewLine\" data-throw-if-not-resolved=\"false\"></xref> can be used in conjunction with language-specific newline support such as the escape characters '\\r' and '\\n' in Microsoft C# and C/C++, or <strong>vbCrLf</strong> in Microsoft Visual Basic.</p>\n<p>\n<xref href=\"System.Environment.NewLine\" data-throw-if-not-resolved=\"false\"></xref> is automatically appended to text processed by the <see cref=\"Overload:System.Console.WriteLine\"></see> and <see cref=\"Overload:System.Text.StringBuilder.AppendLine\"></see> methods.</p>\n"
  example:
  - "\n<p>The following example displays three lines separated by newlines.</p>environment.newline#1"
  syntax:
    content: public static string NewLine { get; }
    content.vb: Public Shared ReadOnly Property NewLine As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Environment.ProcessorCount
  commentId: P:System.Environment.ProcessorCount
  id: ProcessorCount
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: ProcessorCount
  fullName: System.Environment.ProcessorCount
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Environment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ProcessorCount
    path: src/mscorlib/src/System/Environment.cs
    startLine: 549
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets the number of processors on the current machine.</p>\n"
  remarks: "\n<p>For more information about processor groups and logical processors, see <see href=\"http://msdn.microsoft.com/library/windows/desktop/dd405503.aspx\">Processor Groups</see>. </p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Environment.ProcessorCount\" data-throw-if-not-resolved=\"false\"></xref> property.</p>environment.processorcount#1"
  syntax:
    content: >-
      public static int ProcessorCount

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Shared ReadOnly Property ProcessorCount As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Environment.StackTrace
  commentId: P:System.Environment.StackTrace
  id: StackTrace
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: StackTrace
  fullName: System.Environment.StackTrace
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Environment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StackTrace
    path: src/mscorlib/src/System/Environment.cs
    startLine: 1223
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets current stack trace information.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Environment.StackTrace\" data-throw-if-not-resolved=\"false\"></xref> property lists method calls in reverse chronological order, that is, the most recent method call is described first, and one line of stack trace information is listed for each method call on the stack. However, the <xref href=\"System.Environment.StackTrace\" data-throw-if-not-resolved=\"false\"></xref> property might not report as many method calls as expected due to code transformations that occur during optimization.</p>\n<p>For a hierarchical view of the stack trace information by class, use the <xref href=\"System.Diagnostics.StackTrace\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>The <xref href=\"System.Environment.StackTrace\" data-throw-if-not-resolved=\"false\"></xref> property formats the stack trace information for each method call as follows: </p>\n<p>\"at <em>FullClassName</em>.<em>MethodName</em>(<em>MethodParams</em>) in <em>FileName</em> :line <em>LineNumber</em> \" </p>\n<p>The literal \"at\" is preceded by three spaces, and the entire substring starting with \"in\" is omitted if debug symbols are not available. The placeholders, <em>FullClassName</em>, <em>MethodName</em>, <em>MethodParams</em>, <em>FileName</em>, and <em>LineNumber</em>, are replaced by actual values, and are defined as follows: </p>FullClassName<p>The full name of the class, including the namespace. </p><em>MethodName</em><p>The name of the method. </p><em>MethodParams</em><p>The list of parameter type/name pairs. Each pair is separated by a comma (\",\"). This information is omitted if <em>MethodName</em> takes no parameters. </p><em>FileName</em><p>The name of the source file where the <em>MethodName</em> method is declared. This information is omitted if debug symbols are not available. </p><em>LineNumber</em><p>The number of the line in <em>FileName</em> that contains the source code from <em>MethodName</em> for the instruction that is on the call stack. This information is omitted if debug symbols are not available. </p><p>The <xref href=\"System.Environment.NewLine\" data-throw-if-not-resolved=\"false\"></xref> string terminates each line of the stack trace. </p>"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Environment.StackTrace\" data-throw-if-not-resolved=\"false\"></xref> property.</p>environment.stacktrace#1"
  syntax:
    content: >-
      public static string StackTrace

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Shared ReadOnly Property StackTrace As String
    parameters: []
    return:
      type: System.String
  see:
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Environment.TickCount
  commentId: P:System.Environment.TickCount
  id: TickCount
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: TickCount
  fullName: System.Environment.TickCount
  type: Property
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Gets the number of milliseconds elapsed since the system started.</p>\n"
  remarks: "\n<p>The value of this property is derived from the system timer and is stored as a 32-bit signed integer. Note that, because it is derived from the system timer, the resolution of the <xref href=\"System.Environment.TickCount\" data-throw-if-not-resolved=\"false\"></xref> property is limited to the resolution of the system timer, which is typically in the range of 10 to 16 milliseconds. </p>\n<p>Because the value of the <xref href=\"System.Environment.TickCount\" data-throw-if-not-resolved=\"false\"></xref> property value is a 32-bit signed integer, if the system runs continuously, <xref href=\"System.Environment.TickCount\" data-throw-if-not-resolved=\"false\"></xref> will increment from zero to <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> for approximately 24.9 days, then jump to <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref>, which is a negative number, then increment back to zero during the next 24.9 days. You can work around this issue by calling the Windows <see href=\"https://msdn.microsoft.com/library/windows/desktop/ms724408.aspx\">GetTickCount</see> function, which resets to zero after approximately 49.7 days, or by calling the <see href=\"https://msdn.microsoft.com/library/windows/desktop/ms724411.aspx\">GetTickCount64</see> function. </p>\n<p>\n<xref href=\"System.Environment.TickCount\" data-throw-if-not-resolved=\"false\"></xref> is different from the <xref href=\"System.DateTime.Ticks\" data-throw-if-not-resolved=\"false\"></xref> property, which is the number of 100-nanosecond intervals that have elapsed since 1/1/0001, 12:00am.</p>\n<p>Use the <xref href=\"System.DateTime.Now\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the current local date and time on this computer.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to retrieve the positive range of values returned by the <xref href=\"System.Environment.TickCount\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Environment.TickCount\" data-throw-if-not-resolved=\"false\"></xref> property cycles between <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref>, which is a negative number, and <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> once every 49.8 days. This code sample removes the sign bit to yield a nonnegative number that cycles between zero and <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> once every 24.9 days.</p>environment.tickcount#1"
  syntax:
    content: >-
      public static int TickCount

      {
          [SecuritySafeCritical]
          [MethodImpl(MethodImplOptions.InternalCall)]
          get;
      }
    content.vb: Public Shared ReadOnly Property TickCount As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Environment.ExpandEnvironmentVariables(System.String)
  commentId: M:System.Environment.ExpandEnvironmentVariables(System.String)
  id: ExpandEnvironmentVariables(System.String)
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: ExpandEnvironmentVariables(String)
  fullName: System.Environment.ExpandEnvironmentVariables(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Environment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ExpandEnvironmentVariables
    path: src/mscorlib/src/System/Environment.cs
    startLine: 401
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Replaces the name of each environment variable embedded in the specified string with the string equivalent of the value of the variable, then returns the resulting string.</p>\n"
  remarks: "\n<p>COM interop is used to retrieve the environment variables from the operating system. If the environment variables cannot be retrieved due to a COM error, the HRESULT that explains the cause of the failure is used to generate one of several possible exceptions; that is, the exception depends on the HRESULT. For more information about how the HRESULT is processed, see the Remarks section of the <xref href=\"System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Replacement only occurs for environment variables that are set. For example, suppose <em>name</em> is \"MyENV = %MyENV%\". If the environment variable, MyENV, is set to 42, this method returns \"MyENV = 42\". If MyENV is not set, no change occurs; this method returns \"MyENV = %MyENV%\".</p>\n<p>The size of the return value is limited to 32K. </p>\n"
  example:
  - "\n<p>The following example shows how to obtain the system drive and system root variables.</p>Environment.ExpandEnvironmentVariables#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static string ExpandEnvironmentVariables(string name)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function ExpandEnvironmentVariables(name As String) As String
    parameters:
    - id: name
      type: System.String
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Environment.Exit(System.Int32)
  commentId: M:System.Environment.Exit(System.Int32)
  id: Exit(System.Int32)
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: Exit(Int32)
  fullName: System.Environment.Exit(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Environment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exit
    path: src/mscorlib/src/System/Environment.cs
    startLine: 261
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Terminates this process and returns an exit code to the operating system.</p>\n"
  remarks: "\n<p>For the <em>exitCode</em> parameter, use a non-zero number to indicate an error. In your application, you can define your own error codes in an enumeration, and return the appropriate error code based on the scenario. For example, return a value of 1 to indicate that the required file is not present, and a value of 2 to indicate that the file is in the wrong format. For a list of exit codes used by the Windows operating system, see <see href=\"http://msdn.microsoft.com/library/ms681381.aspx\">System Error Codes</see> in the Windows documentation.</p>\n<p>Calling the <xref href=\"System.Environment.Exit(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method differs from using your programming language's <strong>return</strong> statement in the following ways: </p>\n<ul><li>\n<p>\n<xref href=\"System.Environment.Exit(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> always terminates an application. Using the <strong>return</strong> statement may terminate an application only if it is used in the application entry point, such as in the <strong>Main</strong> method. </p>\n</li><li>\n<p>\n<xref href=\"System.Environment.Exit(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> terminates an application immediately, even if other threads are running. If the <strong>return</strong> statement is called in the application entry point, it causes an application to terminate only after all foreground threads have terminated. </p>\n</li><li>\n<p>\n<xref href=\"System.Environment.Exit(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> requires the caller to have permission to call unmanaged code. The <strong>return</strong> statement does not. </p>\n</li><li>\n<p>If <xref href=\"System.Environment.Exit(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is called from a <strong>try</strong> or <strong>catch</strong> block, the code in any <strong>finally</strong> block does not execute. If the <strong>return</strong> statement is used, the code in the <strong>finally</strong> block does execute. </p>\n</li><li>\n<p>If <xref href=\"System.Environment.Exit(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is called when code in a constrained execution region (CER) is running, the CER will not complete execution. If the <strong>return</strong> statement is used, the CER completes execution. </p>\n</li></ul>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SecurityPermission(SecurityAction.Demand, Flags = SecurityPermissionFlag.UnmanagedCode)]

      public static void Exit(int exitCode)
    content.vb: >-
      <SecuritySafeCritical>

      <SecurityPermission(SecurityAction.Demand, Flags:=SecurityPermissionFlag.UnmanagedCode)>

      Public Shared Sub Exit(exitCode As Integer)
    parameters:
    - id: exitCode
      type: System.Int32
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have sufficient security permission to perform this function. </p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Environment.FailFast(System.String)
  commentId: M:System.Environment.FailFast(System.String)
  id: FailFast(System.String)
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: FailFast(String)
  fullName: System.Environment.FailFast(System.String)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message in error reporting to Microsoft.</p>\n"
  remarks: "\n<p>This method terminates a process without running any active <strong>try</strong>/<strong>finally</strong> blocks or finalizers. </p>\n<p>The <xref href=\"System.Environment.FailFast(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method writes the <em>message</em> string to the Windows Application event log, creates a dump of your application, and then terminates the current process. The <em>message</em> string is also included in error reporting to Microsoft.</p>\n<p>Use the <xref href=\"System.Environment.FailFast(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method instead of the <xref href=\"System.Environment.Exit(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to terminate your application if the state of your application is damaged beyond repair, and executing your application's <strong>try</strong>/<strong>finally</strong> blocks and finalizers will corrupt program resources.</p>\n<p>Information is reported to Microsoft by using Windows Error Reporting. For more information, see <see href=\"http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx\">Windows Error Reporting: Getting Started</see>. </p>\n"
  example:
  - "\n<p>The following example writes a log entry to the Windows Application event log and terminates the current process.</p>environment.FailFast#1"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static void FailFast(string message)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Sub FailFast(message As String)
    parameters:
    - id: message
      type: System.String
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Environment.FailFast(System.String,System.Exception)
  commentId: M:System.Environment.FailFast(System.String,System.Exception)
  id: FailFast(System.String,System.Exception)
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: FailFast(String, Exception)
  fullName: System.Environment.FailFast(System.String, System.Exception)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Immediately terminates a process after writing a message to the Windows Application event log, and then includes the message and exception information in error reporting to Microsoft.</p>\n"
  remarks: "\n<p>This method terminates the process without running any active <strong>try</strong>/<strong>finally</strong> blocks or finalizers. </p>\n<p>The <xref href=\"System.Environment.FailFast(System.String,System.Exception)\" data-throw-if-not-resolved=\"false\"></xref> method writes the <em>message</em> string to the Windows Application event log, creates a dump of your application, and then terminates the current process.</p>\n<p>Information is reported to Microsoft by using Windows Error Reporting. For more information, see <see href=\"http://msdn.microsoft.com/library/windows/hardware/dn641144.aspx\">Windows Error Reporting: Getting Started</see>. Error reporting to Microsoft includes <em>message</em> and <em>exception</em> information, which provides details used to classify the error. Although <em>exception</em> is not handled because the process is terminated, the contextual information that raised the exception is still obtained.</p>\n<p>If <em>exception</em> is <strong>null</strong>, or if <em>exception</em> is not thrown, this method operates the same as the <xref href=\"System.Environment.FailFast(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method overload. </p>\n<p>Use the <xref href=\"System.Environment.FailFast(System.String,System.Exception)\" data-throw-if-not-resolved=\"false\"></xref> method instead of the <xref href=\"System.Environment.Exit(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to terminate your application if the state of your application is damaged beyond repair, and executing your application's <strong>try</strong>/<strong>finally</strong> blocks and finalizers will corrupt program resources.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static void FailFast(string message, Exception exception)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Sub FailFast(message As String, exception As Exception)
    parameters:
    - id: message
      type: System.String
    - id: exception
      type: System.Exception
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Environment.GetEnvironmentVariable(System.String)
  commentId: M:System.Environment.GetEnvironmentVariable(System.String)
  id: GetEnvironmentVariable(System.String)
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: GetEnvironmentVariable(String)
  fullName: System.Environment.GetEnvironmentVariable(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Environment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnvironmentVariable
    path: src/mscorlib/src/System/Environment.cs
    startLine: 625
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Retrieves the value of an environment variable from the current process. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Environment.GetEnvironmentVariable(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method retrieves an environment variable from the environment block of the current process only. It is equivalent to calling the <xref href=\"System.Environment.GetEnvironmentVariable(System.String,System.EnvironmentVariableTarget)\" data-throw-if-not-resolved=\"false\"></xref> method with a <em>target</em> value of <xref href=\"System.EnvironmentVariableTarget.Process\" data-throw-if-not-resolved=\"false\"></xref>. The environment block of the current process includes the following environment variables: </p>\n<ul><li>\n<p>All per-machine environment variables that are defined at the time the process is created, along with their values. </p>\n</li><li>\n<p>All per-user environment variables that are defined at the time the process is created, along with their values. </p>\n</li><li>\n<p>Any variables added to the process block while the process is running by calling either the <xref href=\"System.Environment.SetEnvironmentVariable(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)\" data-throw-if-not-resolved=\"false\"></xref> method with a <em>target</em> value of <xref href=\"System.EnvironmentVariableTarget.Process\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</li></ul>\n<p>If environment variables are created after the process has started, you can use this method to retrieve only those variables that were created by calling the <xref href=\"System.Environment.SetEnvironmentVariable(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)\" data-throw-if-not-resolved=\"false\"></xref> method with a <em>target</em> value of .<xref href=\"System.EnvironmentVariableTarget.Process\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>To retrieve all environment variables along with their values, call the <xref href=\"System.Environment.GetEnvironmentVariables\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>Environment variable names are not case-sensitive.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Environment.GetEnvironmentVariable(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the <code>windir</code> environment variable, which contains the path of the Windows directory.</p>System.Environment#4"
  - "\n<p>The following example attempts to retrieve the value of an environment variable named <code>Test1</code> from the process environment block. If the variable doesn't exist, the example creates its and retrieves its value. The example displays the value of the variable. If the example created the variable, it also calls the <xref href=\"System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)\" data-throw-if-not-resolved=\"false\"></xref> method with each member of the <xref href=\"System.EnvironmentVariableTarget\" data-throw-if-not-resolved=\"false\"></xref> enumeration to establish that the variable can be retrieved only from the current process environment block. Finally, if the example created the variable, it deletes it. </p>System.Environment.GetEnvironmentVariable#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static string GetEnvironmentVariable(string variable)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetEnvironmentVariable(variable As String) As String
    parameters:
    - id: variable
      type: System.String
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>variable</em> is <strong>null</strong>.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission to perform this operation. </p>\n"
  seealso:
  - type: System.Environment.GetEnvironmentVariables
    commentId: M:System.Environment.GetEnvironmentVariables
  - type: System.Environment.SetEnvironmentVariable(System.String,System.String)
    commentId: M:System.Environment.SetEnvironmentVariable(System.String,System.String)
  - type: System.EnvironmentVariableTarget
    commentId: T:System.EnvironmentVariableTarget
  see:
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Environment.GetEnvironmentVariables
  commentId: M:System.Environment.GetEnvironmentVariables
  id: GetEnvironmentVariables
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: GetEnvironmentVariables()
  fullName: System.Environment.GetEnvironmentVariables()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Environment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnvironmentVariables
    path: src/mscorlib/src/System/Environment.cs
    startLine: 761
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Retrieves all environment variable names and their values from the current process.</p>\n"
  remarks: "\n<p>The names and values for the environment variables are stored as key-value pairs in the returned <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Environment.GetEnvironmentVariables\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Environment.GetEnvironmentVariables#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static IDictionary GetEnvironmentVariables()
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetEnvironmentVariables As IDictionary
    return:
      type: System.Collections.IDictionary
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission to perform this operation.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>The buffer is out of memory.</p>\n"
  seealso:
  - type: System.Environment.GetEnvironmentVariable(System.String)
    commentId: M:System.Environment.GetEnvironmentVariable(System.String)
  see:
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Environment.SetEnvironmentVariable(System.String,System.String)
  commentId: M:System.Environment.SetEnvironmentVariable(System.String,System.String)
  id: SetEnvironmentVariable(System.String,System.String)
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: SetEnvironmentVariable(String, String)
  fullName: System.Environment.SetEnvironmentVariable(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Environment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetEnvironmentVariable
    path: src/mscorlib/src/System/Environment.cs
    startLine: 890
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Creates, modifies, or deletes an environment variable stored in the current process.</p>\n"
  remarks: "\n<p>Calling this method is equivalent to calling the <xref href=\"System.Environment.SetEnvironmentVariable(System.String,System.String,System.EnvironmentVariableTarget)\" data-throw-if-not-resolved=\"false\"></xref> overload with a value of <xref href=\"System.EnvironmentVariableTarget.Process\" data-throw-if-not-resolved=\"false\"></xref> for the <em>target</em> argument. </p>\n<p>If the <em>value</em> argument is not empty (see the discussion of deleting an environment variable later in this section for the definition of an empty value) and the environment variable named by the <em>variable</em> parameter does not exist, the environment variable is created and assigned the contents of <em>value</em>. If it does exist, its value is modified. Because the environment variable is defined in the environment block of the current process only, it does not persist after the process has ended. </p>\n<p>If <em>variable</em> contains a non-initial hexadecimal zero character, the characters before the zero character are considered the environment variable name and all subsequent characters are ignored.</p>\n<p>If <em>value</em> contains a non-initial hexadecimal zero character, the characters before the zero character are assigned to the environment variable and all subsequent characters are ignored.</p>\n<p>If <em>value</em> is empty and the environment variable named by <em>variable</em> exists, the environment variable is deleted. If <em>variable</em> does not exist, no error occurs even though the operation cannot be performed. <em>value</em> is considered empty under any of the following conditions: </p>\n<ul><li>\n<p>It is <strong>null</strong>. </p>\n</li><li>\n<p>It is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</li><li>\n<p>It consists of a single character whose value is U+0000. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example tests whether an environment variable named <strong>APPDOMAIN</strong> exists in the current process. If it does not, it creates it and sets its value to \"True\". If the value of the <strong>APPDOMAIN</strong> environment variable is \"True\", it calls the <code>Message.Display</code> method in a new application domain. Otherwise, it executes the <code>Message.Display</code> method in the current application domain. </p>System.Environment.SetEnvironmentVariable#1<p>If you run the example for the first time, the message \"Executing in domain Domain2\" displays to the console. If you set the environment variable from the command line by using the command:</p><p><code>Set AppDomain=False</code></p><p>the example displays the message \"Executing in domain exeName.exe\", where exeName is the name of the executable. </p>"
  - "\n<p>The following example attempts to retrieve the value of an environment variable named <code>Test1</code> from the process environment block. If the variable doesn't exist, the example creates the variable and retrieves its value. The example displays the value of the variable. If the example created the variable, it also calls the <xref href=\"System.Environment.GetEnvironmentVariables(System.EnvironmentVariableTarget)\" data-throw-if-not-resolved=\"false\"></xref> method with each member of the <xref href=\"System.EnvironmentVariableTarget\" data-throw-if-not-resolved=\"false\"></xref> enumeration to establish that the variable can be retrieved only from the current process environment block. Finally, if the example created the variable, it deletes it. </p>System.Environment.GetEnvironmentVariable#2"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void SetEnvironmentVariable(string variable, string value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub SetEnvironmentVariable(variable As String, value As String)
    parameters:
    - id: variable
      type: System.String
    - id: value
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>variable</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>variable</em> contains a zero-length string, an initial hexadecimal zero character (0x00), or an equal sign (\"=\"). </p>\n<p>-or-</p>\n<p>The length of <em>variable</em> or <em>value</em> is greater than or equal to 32,767 characters.</p>\n<p>-or-</p>\n<p>An error occurred during the execution of this operation.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission to perform this operation.</p>\n"
  seealso:
  - type: System.Environment.GetEnvironmentVariable(System.String)
    commentId: M:System.Environment.GetEnvironmentVariable(System.String)
  - type: System.Environment.GetEnvironmentVariables
    commentId: M:System.Environment.GetEnvironmentVariables
  see:
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Environment.GetCommandLineArgs
  commentId: M:System.Environment.GetCommandLineArgs
  id: GetCommandLineArgs
  parent: System.Environment
  langs:
  - csharp
  - vb
  name: GetCommandLineArgs()
  fullName: System.Environment.GetCommandLineArgs()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Environment.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCommandLineArgs
    path: src/mscorlib/src/System/Environment.cs
    startLine: 573
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a string array containing the command-line arguments for the current process.</p>\n"
  remarks: "\n<p>The first element in the array contains the file name of the executing program. If the file name is not available, the first element is equal to <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. The remaining elements contain any additional tokens entered on the command line.</p>\n<p>The program file name can, but is not required to, include path information.</p>\n<p>Command line arguments are delimited by spaces. You can use double quotation marks (\") to include spaces within an argument. The single quotation mark ('), however, does not provide this functionality. </p>\n<p>If a double quotation mark follows two or an even number of backslashes, each proceeding backslash pair is replaced with one backslash and the double quotation mark is removed. If a double quotation mark follows an odd number of backslashes, including just one, each preceding pair is replaced with one backslash and the remaining backslash is removed; however, in this case the double quotation mark is not removed. </p>\n<p>The following table shows how command line arguments can be delimited, and assumes <code>MyApp</code> as the current executing application.</p>\n<p>Input at the command line</p>\n<p>Resulting command line arguments</p>\n<table><tbody><tr><td>\n<p>\n<code>MyApp alpha beta</code>\n</p>\n</td><td>\n<p>\n<code>MyApp, alpha, beta</code>\n</p>\n</td></tr><tr><td>\n<p>\n<code>MyApp \"alpha with spaces\" \"beta with spaces\"</code>\n</p>\n</td><td>\n<p>\n<code>MyApp, alpha with spaces, beta with spaces </code>\n</p>\n</td></tr><tr><td>\n<p>\n<code>MyApp 'alpha with spaces' beta</code>\n</p>\n</td><td>\n<p>\n<code>MyApp, 'alpha, with, spaces', beta</code>\n</p>\n</td></tr><tr><td>\n<p>\n<code>MyApp \\\\\\alpha \\\\\\\\\"beta</code>\n</p>\n</td><td>\n<p>\n<code>MyApp, \\\\\\alpha, \\\\beta</code>\n</p>\n</td></tr><tr><td>\n<p>\n<code>MyApp \\\\\\\\\\\"alpha \\\"beta</code>\n</p>\n</td><td>\n<p>\n<code>MyApp, \\\\\"alpha, \"beta</code>\n</p>\n</td></tr></tbody></table>\n<p>To obtain the command line as a single string, use the <xref href=\"System.Environment.CommandLine\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example displays the application's command line arguments.</p>Environment.GetCommandLineArgs#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static string[] GetCommandLineArgs()
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetCommandLineArgs As String()
    return:
      type: System.String[]
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The system does not support command-line arguments.</p>\n"
  seealso:
  - type: System.Environment.CommandLine
    commentId: P:System.Environment.CommandLine
  see:
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.String[]
  isExternal: true
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
