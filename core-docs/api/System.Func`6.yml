items:
- uid: System.Func`6
  commentId: T:System.Func`6
  id: Func`6
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, TResult>
  type: Delegate
  source:
    remote:
      path: src/mscorlib/src/System/Action.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Func
    path: src/mscorlib/src/System/Action.cs
    startLine: 83
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Encapsulates a method that has five parameters and returns a value of the type specified by the <em>TResult</em> parameter.</p>\n"
  remarks: "\n<p>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have five parameters, each of which is passed to it by value, and that it must return a value.</p>\n<p>To reference a method that has five parameters and returns <strong>void</strong> (or in Visual Basic, that is declared as a <strong>Sub</strong> rather than as a <strong>Function</strong>), use the generic <xref href=\"System.Action`5\" data-throw-if-not-resolved=\"false\"></xref> delegate instead. </p>\n<p>You can also use the <xref href=\"System.Func`6\" data-throw-if-not-resolved=\"false\"></xref> delegate with anonymous methods and lambda expressions.</p>\n<p>The underlying type of a lambda expression is one of the generic <strong>Func</strong> delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</p>\n"
  example:
  - 
  syntax:
    content: public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5);
    content.vb: Public Delegate Function Func(Of In T1, In T2, In T3, In T4, In T5, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5) As TResult
    parameters:
    - id: arg1
      type: '{T1}'
    - id: arg2
      type: '{T2}'
    - id: arg3
      type: '{T3}'
    - id: arg4
      type: '{T4}'
    - id: arg5
      type: '{T5}'
    typeParameters:
    - id: T1
    - id: T2
    - id: T3
    - id: T4
    - id: T5
    - id: TResult
    return:
      type: '{TResult}'
  seealso:
  - type: System.Action`5
    commentId: T:System.Action`5
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{T1}'
  isExternal: false
  name: T1
  fullName: T1
- uid: '{T2}'
  isExternal: false
  name: T2
  fullName: T2
- uid: '{T3}'
  isExternal: false
  name: T3
  fullName: T3
- uid: '{T4}'
  isExternal: false
  name: T4
  fullName: T4
- uid: '{T5}'
  isExternal: false
  name: T5
  fullName: T5
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
