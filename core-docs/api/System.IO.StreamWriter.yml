items:
- uid: System.IO.StreamWriter
  commentId: T:System.IO.StreamWriter
  id: StreamWriter
  parent: System.IO
  children:
  - System.IO.StreamWriter.#ctor(System.IO.Stream)
  - System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)
  - System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)
  - System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)
  - System.IO.StreamWriter.AutoFlush
  - System.IO.StreamWriter.BaseStream
  - System.IO.StreamWriter.Dispose(System.Boolean)
  - System.IO.StreamWriter.Encoding
  - System.IO.StreamWriter.Flush
  - System.IO.StreamWriter.FlushAsync
  - System.IO.StreamWriter.Null
  - System.IO.StreamWriter.Write(System.Char)
  - System.IO.StreamWriter.Write(System.Char[])
  - System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)
  - System.IO.StreamWriter.Write(System.String)
  - System.IO.StreamWriter.WriteAsync(System.Char)
  - System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.StreamWriter.WriteAsync(System.String)
  - System.IO.StreamWriter.WriteLineAsync
  - System.IO.StreamWriter.WriteLineAsync(System.Char)
  - System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.StreamWriter.WriteLineAsync(System.String)
  langs:
  - csharp
  - vb
  name: StreamWriter
  fullName: System.IO.StreamWriter
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StreamWriter
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 33
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Implements a <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> for writing characters to a stream in a particular encoding.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/streamwriter.cs#9e38cb1c84769eba\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/streamwriter.cs#9e38cb1c84769eba\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>\n<xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> is designed for character output in a particular encoding, whereas classes derived from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> are designed for byte input and output.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>\n<xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> defaults to using an instance of <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref> unless specified otherwise. This instance of <strong>UTF8Encoding</strong> is constructed without a byte order mark (BOM), so its <xref href=\"System.Text.Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method returns an empty byte array. The default UTF-8 encoding for this constructor throws an exception on invalid bytes. This behavior is different from the behavior provided by the encoding object in the <xref href=\"System.Text.Encoding.UTF8\" data-throw-if-not-resolved=\"false\"></xref> property. To specify a BOM and determine whether an exception is thrown on invalid bytes, use a constructor that accepts an encoding object as a parameter, such as <xref href=\"System.IO.StreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>By default, a <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> is not thread safe. See <xref href=\"System.IO.TextWriter.Synchronized(System.IO.TextWriter)\" data-throw-if-not-resolved=\"false\"></xref> for a thread-safe wrapper.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example shows how to use a <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> object to write a file that lists the directories on the C drive, and then uses a <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object to read and display each directory name. A good practice is to use these objects in a <strong>using</strong> statement so that the unmanaged resources are correctly disposed. The <strong>using</strong> statement automatically calls <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on the object when the code that is using it has completed. The constructor used in this example is not supported for use in Windows Store Apps.</p>StreamReadWrite#1"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public class StreamWriter : TextWriter, IDisposable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Class StreamWriter
          Inherits TextWriter
          Implements IDisposable
  seealso:
  - type: System.IO.Stream
    commentId: T:System.IO.Stream
  - type: System.IO.StreamReader
    commentId: T:System.IO.StreamReader
  - type: System.Text.Encoder
    commentId: T:System.Text.Encoder
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  inheritance:
  - System.Object
  - System.IO.TextWriter
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.IO.TextWriter.CoreNewLine
  - System.IO.TextWriter.FormatProvider
  - System.IO.TextWriter.NewLine
  - System.IO.TextWriter.Dispose
  - System.IO.TextWriter.Write(System.Boolean)
  - System.IO.TextWriter.Write(System.Decimal)
  - System.IO.TextWriter.Write(System.Double)
  - System.IO.TextWriter.Write(System.Int32)
  - System.IO.TextWriter.Write(System.Int64)
  - System.IO.TextWriter.Write(System.Object)
  - System.IO.TextWriter.Write(System.Single)
  - System.IO.TextWriter.Write(System.String,System.Object)
  - System.IO.TextWriter.Write(System.String,System.Object,System.Object)
  - System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)
  - System.IO.TextWriter.Write(System.String,System.Object[])
  - System.IO.TextWriter.Write(System.UInt32)
  - System.IO.TextWriter.Write(System.UInt64)
  - System.IO.TextWriter.WriteAsync(System.Char[])
  - System.IO.TextWriter.WriteLine
  - System.IO.TextWriter.WriteLine(System.Boolean)
  - System.IO.TextWriter.WriteLine(System.Char)
  - System.IO.TextWriter.WriteLine(System.Char[])
  - System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)
  - System.IO.TextWriter.WriteLine(System.Decimal)
  - System.IO.TextWriter.WriteLine(System.Double)
  - System.IO.TextWriter.WriteLine(System.Int32)
  - System.IO.TextWriter.WriteLine(System.Int64)
  - System.IO.TextWriter.WriteLine(System.Object)
  - System.IO.TextWriter.WriteLine(System.Single)
  - System.IO.TextWriter.WriteLine(System.String)
  - System.IO.TextWriter.WriteLine(System.String,System.Object)
  - System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)
  - System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)
  - System.IO.TextWriter.WriteLine(System.String,System.Object[])
  - System.IO.TextWriter.WriteLine(System.UInt32)
  - System.IO.TextWriter.WriteLine(System.UInt64)
  - System.IO.TextWriter.WriteLineAsync(System.Char[])
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.StreamWriter.Null
  commentId: F:System.IO.StreamWriter.Null
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  fullName: System.IO.StreamWriter.Null
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 50
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Provides a <strong>StreamWriter</strong> with no backing store that can be written to, but not read from.</p>\n"
  remarks: "\n<p>Use <strong>Null</strong> to redirect output to a <strong>StreamWriter</strong> that will not consume any operating system resources.</p>\n<p>When the <strong>StreamWriter.Write</strong> methods are invoked on <strong>Null</strong>, the call simply returns, and no data is actually written to any backing store.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates a use of the <strong>Null</strong> field.</p>System.IO.StreamWriter#6"
  syntax:
    content: public static readonly StreamWriter Null
    content.vb: Public Shared ReadOnly Null As StreamWriter
    return:
      type: System.IO.StreamWriter
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.IO.StreamWriter.#ctor(System.IO.Stream)
  commentId: M:System.IO.StreamWriter.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: StreamWriter(Stream)
  fullName: System.IO.StreamWriter.StreamWriter(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 115
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> class for the specified stream by using UTF-8 encoding and the default buffer size.</p>\n"
  remarks: "\n<p>This constructor creates a <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> with UTF-8 encoding without a Byte-Order Mark (BOM), so its <xref href=\"System.Text.Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method returns an empty byte array. The default UTF-8 encoding for this constructor throws an exception on invalid bytes. This behavior is different from the behavior provided by the encoding object in the <xref href=\"System.Text.Encoding.UTF8\" data-throw-if-not-resolved=\"false\"></xref> property. To specify whether an exception is thrown on invalid bytes, use a constructor that accepts an encoding object as a parameter, such as <xref href=\"System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.IO.StreamWriter.BaseStream\" data-throw-if-not-resolved=\"false\"></xref> property is initialized using the <em>stream</em> parameter. The position of the stream is not reset.</p>\n<p>The <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> object calls <xref href=\"System.IO.Stream.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on the provided <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object when <xref href=\"System.IO.StreamWriter.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable and could cause an exception to be thrown.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates this constructor.</p>System.IO.StreamWriter.ctor#1"
  syntax:
    content: public StreamWriter(Stream stream)
    content.vb: Public Sub New(stream As Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>stream</em> is not writable. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)
  commentId: M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)
  id: '#ctor(System.IO.Stream,System.Text.Encoding)'
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: StreamWriter(Stream, Encoding)
  fullName: System.IO.StreamWriter.StreamWriter(System.IO.Stream, System.Text.Encoding)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 119
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> class for the specified stream by using the specified encoding and the default buffer size.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.IO.StreamWriter.Encoding\" data-throw-if-not-resolved=\"false\"></xref> property using the encoding parameter, and the <xref href=\"System.IO.StreamWriter.BaseStream\" data-throw-if-not-resolved=\"false\"></xref> property using the stream parameter. The position of the stream is not reset. For additional information, see <xref href=\"System.IO.TextWriter.Encoding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> object calls <xref href=\"System.IO.Stream.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on the provided <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object when <xref href=\"System.IO.StreamWriter.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates this constructor.</p>System.IO.StreamWriter.ctor#2"
  syntax:
    content: public StreamWriter(Stream stream, Encoding encoding)
    content.vb: Public Sub New(stream As Stream, encoding As Encoding)
    parameters:
    - id: stream
      type: System.IO.Stream
    - id: encoding
      type: System.Text.Encoding
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> or <em>encoding</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>stream</em> is not writable. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)
  commentId: M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Int32)'
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: StreamWriter(Stream, Encoding, Int32)
  fullName: System.IO.StreamWriter.StreamWriter(System.IO.Stream, System.Text.Encoding, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 127
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> class for the specified stream by using the specified encoding and buffer size.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.IO.StreamWriter.Encoding\" data-throw-if-not-resolved=\"false\"></xref> property using the <em>encoding</em> parameter, and the <xref href=\"System.IO.StreamWriter.BaseStream\" data-throw-if-not-resolved=\"false\"></xref> property using the <em>stream</em> parameter. The position of the stream is not reset. For additional information, see <xref href=\"System.IO.TextWriter.Encoding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> object calls <xref href=\"System.IO.Stream.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on the provided <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object when <xref href=\"System.IO.StreamWriter.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example demonstrates this constructor.</p>System.IO.StreamWriter.ctor#3"
  syntax:
    content: public StreamWriter(Stream stream, Encoding encoding, int bufferSize)
    content.vb: Public Sub New(stream As Stream, encoding As Encoding, bufferSize As Integer)
    parameters:
    - id: stream
      type: System.IO.Stream
    - id: encoding
      type: System.Text.Encoding
    - id: bufferSize
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> or <em>encoding</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>bufferSize</em> is negative. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>stream</em> is not writable. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)
  commentId: M:System.IO.StreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)'
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: StreamWriter(Stream, Encoding, Int32, Boolean)
  fullName: System.IO.StreamWriter.StreamWriter(System.IO.Stream, System.Text.Encoding, System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 131
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> class for the specified stream by using the specified encoding and buffer size, and optionally leaves the stream open.</p>\n"
  remarks: "\n<p>Unless you set the <em>leaveOpen</em> parameter to <strong>true</strong>, the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> object calls <xref href=\"System.IO.Stream.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on the provided <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object when <xref href=\"System.IO.StreamWriter.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>This constructor initializes the <xref href=\"System.IO.StreamWriter.Encoding\" data-throw-if-not-resolved=\"false\"></xref> property by using the <em>encoding</em> parameter, and initializes the <xref href=\"System.IO.StreamWriter.BaseStream\" data-throw-if-not-resolved=\"false\"></xref> property by using the <em>stream</em> parameter. The position of the stream is not reset. For additional information, see the <xref href=\"System.IO.TextWriter.Encoding\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n"
  example:
  - "\n<p>The following example demonstrates this constructor.</p>System.IO.StreamWriter.ctor#4"
  syntax:
    content: public StreamWriter(Stream stream, Encoding encoding, int bufferSize, bool leaveOpen)
    content.vb: Public Sub New(stream As Stream, encoding As Encoding, bufferSize As Integer, leaveOpen As Boolean)
    parameters:
    - id: stream
      type: System.IO.Stream
    - id: encoding
      type: System.Text.Encoding
    - id: bufferSize
      type: System.Int32
    - id: leaveOpen
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> or <em>encoding</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>bufferSize</em> is negative. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>stream</em> is not writable. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamWriter.AutoFlush
  commentId: P:System.IO.StreamWriter.AutoFlush
  id: AutoFlush
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: AutoFlush
  fullName: System.IO.StreamWriter.AutoFlush
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AutoFlush
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 303
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets or sets a value indicating whether the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> will flush its buffer to the underlying stream after every call to <xref href=\"System.IO.StreamWriter.Write(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Flushing the stream will not flush its underlying encoder unless you explicitly call <xref href=\"System.IO.StreamWriter.Flush\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.StreamWriter.Close\" data-throw-if-not-resolved=\"false\"></xref>. Setting <xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong> means that data will be flushed from the buffer to the stream after each write operation, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</p>\n<p>When <strong>AutoFlush</strong> is set to <strong>false</strong>, <strong>StreamWriter</strong> will do a limited amount of buffering, both internally and potentially in the encoder from the encoding you passed in. You can get better performance by setting <strong>AutoFlush</strong> to <strong>false</strong>, assuming that you always call <strong>Close</strong> (or at least <strong>Flush</strong>) when you're done writing with a <strong>StreamWriter</strong>.</p>\n<p>For example, set <strong>AutoFlush</strong> to <strong>true</strong> when you are writing to a device where the user expects immediate feedback. <strong>Console.Out</strong> is one of these cases: The <strong>StreamWriter</strong> used internally for writing to <strong>Console</strong> flushes all its internal state except the encoder state after every call to <xref href=\"System.IO.StreamWriter.Write(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example shows the syntax for using the <strong>AutoFlush</strong> property.</p>System.IO.StreamWriter#5"
  syntax:
    content: public virtual bool AutoFlush { get; set; }
    content.vb: Public Overridable Property AutoFlush As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.IO.StreamWriter.BaseStream
  commentId: P:System.IO.StreamWriter.BaseStream
  id: BaseStream
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: BaseStream
  fullName: System.IO.StreamWriter.BaseStream
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BaseStream
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 315
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets the underlying stream that interfaces with a backing store.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual Stream BaseStream { get; }
    content.vb: Public Overridable ReadOnly Property BaseStream As Stream
    parameters: []
    return:
      type: System.IO.Stream
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.StreamWriter.Encoding
  commentId: P:System.IO.StreamWriter.Encoding
  id: Encoding
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: Encoding
  fullName: System.IO.StreamWriter.Encoding
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Encoding
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 327
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> in which the output is written.</p>\n"
  remarks: "\n<p>This property is necessary for some XML scenarios where a header must be written containing the encoding used by the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref>. This allows the XML code to consume an arbitrary <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> and generate the correct XML header.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example retrieves the encoding of the specified <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>System.IO.StreamWriter#11"
  syntax:
    content: public override Encoding Encoding { get; }
    content.vb: Public Overrides ReadOnly Property Encoding As Encoding
    parameters: []
    return:
      type: System.Text.Encoding
  overridden: System.IO.TextWriter.Encoding
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.StreamWriter.Dispose(System.Boolean)
  commentId: M:System.IO.StreamWriter.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.StreamWriter.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 215
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  overridden: System.IO.TextWriter.Dispose(System.Boolean)
  exceptions:
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>The current encoding does not support displaying half of a Unicode surrogate pair.</p>\n"
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.IO.StreamWriter.Flush
  commentId: M:System.IO.StreamWriter.Flush
  id: Flush
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.IO.StreamWriter.Flush()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Flush
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 265
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Clears all buffers for the current writer and causes any buffered data to be written to the underlying stream.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.TextWriter.Flush\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Flushing the stream will not flush its underlying encoder unless you explicitly call <strong>Flush</strong> or <xref href=\"System.IO.StreamWriter.Close\" data-throw-if-not-resolved=\"false\"></xref>. Setting <xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong> means that data will be flushed from the buffer to the stream after each write operation, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  overridden: System.IO.TextWriter.Flush
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current writer is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error has occurred. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>The current encoding does not support displaying half of a Unicode surrogate pair. </p>\n"
  seealso:
  - type: System.IO.Stream.Close
    commentId: M:System.IO.Stream.Close
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamWriter.FlushAsync
  commentId: M:System.IO.StreamWriter.FlushAsync
  id: FlushAsync
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: FlushAsync()
  fullName: System.IO.StreamWriter.FlushAsync()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FlushAsync
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 753
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Clears all buffers for this stream asynchronously and causes any buffered data to be written to the underlying device.</p>\n"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task FlushAsync()
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function FlushAsync As Task
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.FlushAsync
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamWriter.Write(System.Char)
  commentId: M:System.IO.StreamWriter.Write(System.Char)
  id: Write(System.Char)
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: Write(Char)
  fullName: System.IO.StreamWriter.Write(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 331
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character to the stream.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.TextWriter.Write(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The specified character is written to the underlying stream unless the end of the stream is reached prematurely. If <xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, <xref href=\"System.IO.StreamWriter.Flush\" data-throw-if-not-resolved=\"false\"></xref> is invoked automatically.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public override void Write(char value)
    content.vb: Public Overrides Sub Write(value As Char)
    parameters:
    - id: value
      type: System.Char
  overridden: System.IO.TextWriter.Write(System.Char)
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>\n<xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> is true or the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> buffer is full, and current writer is closed. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> is true or the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> is at the end the stream. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamWriter.Write(System.Char[])
  commentId: M:System.IO.StreamWriter.Write(System.Char[])
  id: Write(System.Char[])
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: Write(Char[])
  fullName: System.IO.StreamWriter.Write(System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 341
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character array to the stream.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.TextWriter.Write(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The specified characters are written to the underlying stream unless the end of the stream is reached prematurely. If <xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, <xref href=\"System.IO.StreamWriter.Flush\" data-throw-if-not-resolved=\"false\"></xref> is invoked automatically.</p>\n<p>This method might provide faster performance than <strong>Write</strong> (<em>char[],</em><em>int,</em><em>int</em>) because it has fewer arguments to check.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public override void Write(char[] buffer)
    content.vb: Public Overrides Sub Write(buffer As Char())
    parameters:
    - id: buffer
      type: System.Char[]
  overridden: System.IO.TextWriter.Write(System.Char[])
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>\n<xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> is true or the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> buffer is full, and current writer is closed. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> is true or the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> is at the end the stream. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StreamWriter.Write(System.Char())
  name.vb: Write(Char())
- uid: System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)
  id: Write(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: Write(Char[], Int32, Int32)
  fullName: System.IO.StreamWriter.Write(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 365
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a subarray of characters to the stream.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.TextWriter.Write(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The characters are read from <em>buffer</em> beginning at <em>index</em> and continuing through <em>index</em> + (<em>count</em> - 1). All characters are written to the underlying stream unless the end of the underlying stream is reached prematurely. <xref href=\"System.IO.StreamWriter.Flush\" data-throw-if-not-resolved=\"false\"></xref> is invoked automatically if <xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>This example writes eight characters from a 13-element array to a file, beginning at the third element of the array.</p>Classic StreamWriter.Write2 Example#1"
  syntax:
    content: public override void Write(char[] buffer, int index, int count)
    content.vb: Public Overrides Sub Write(buffer As Char(), index As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Char[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
  overridden: System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>\n<xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> is true or the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> buffer is full, and current writer is closed. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> is true or the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> is at the end the stream. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StreamWriter.Write(System.Char(), System.Int32, System.Int32)
  name.vb: Write(Char(), Int32, Int32)
- uid: System.IO.StreamWriter.Write(System.String)
  commentId: M:System.IO.StreamWriter.Write(System.String)
  id: Write(System.String)
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: Write(String)
  fullName: System.IO.StreamWriter.Write(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 391
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a string to the stream.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.TextWriter.Write(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> is written to the underlying stream unless the end of the stream is reached prematurely.</p>\n<p>\n<xref href=\"System.IO.StreamWriter.Flush\" data-throw-if-not-resolved=\"false\"></xref> is invoked automatically if <xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>. If <em>value</em> is <strong>null</strong>, no entries are written.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public override void Write(string value)
    content.vb: Public Overrides Sub Write(value As String)
    parameters:
    - id: value
      type: System.String
  overridden: System.IO.TextWriter.Write(System.String)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>\n<xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> is true or the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> buffer is full, and current writer is closed. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> is true or the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> buffer is full, and the contents of the buffer cannot be written to the underlying fixed size stream because the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> is at the end the stream. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamWriter.WriteAsync(System.Char)
  commentId: M:System.IO.StreamWriter.WriteAsync(System.Char)
  id: WriteAsync(System.Char)
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: WriteAsync(Char)
  fullName: System.IO.StreamWriter.WriteAsync(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAsync
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 415
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character to the stream asynchronously.</p>\n"
  example:
  - "\n<p>The following example shows how to write a single character (the letter \"a\") to a text file by using the <xref href=\"System.IO.StreamWriter.WriteAsync(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StreamWriter#20"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteAsync(char value)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteAsync(value As Char) As Task
    parameters:
    - id: value
      type: System.Char
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteAsync(System.Char)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream writer is currently in use by a previous write operation.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  id: WriteAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: WriteAsync(Char[], Int32, Int32)
  fullName: System.IO.StreamWriter.WriteAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAsync
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 563
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a subarray of characters to the stream asynchronously.</p>\n"
  example:
  - "\n<p>The following example shows how to write multiple characters to a text file by using the <xref href=\"System.IO.StreamWriter.WriteAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StreamWriter#24"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteAsync(char[] buffer, int index, int count)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteAsync(buffer As Char(), index As Integer, count As Integer) As Task
    parameters:
    - id: buffer
      type: System.Char[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>index</em> plus <em>count</em> is greater than the buffer length.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream writer is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StreamWriter.WriteAsync(System.Char(), System.Int32, System.Int32)
  name.vb: WriteAsync(Char(), Int32, Int32)
- uid: System.IO.StreamWriter.WriteAsync(System.String)
  commentId: M:System.IO.StreamWriter.WriteAsync(System.String)
  id: WriteAsync(System.String)
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: WriteAsync(String)
  fullName: System.IO.StreamWriter.WriteAsync(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAsync
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 477
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a string to the stream asynchronously.</p>\n"
  example:
  - "\n<p>The following example shows how to write a string to a text file by using the <xref href=\"System.IO.StreamWriter.WriteAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StreamWriter#21"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteAsync(string value)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteAsync(value As String) As Task
    parameters:
    - id: value
      type: System.String
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteAsync(System.String)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream writer is currently in use by a previous write operation.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamWriter.WriteLineAsync
  commentId: M:System.IO.StreamWriter.WriteLineAsync
  id: WriteLineAsync
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: WriteLineAsync()
  fullName: System.IO.StreamWriter.WriteLineAsync()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteLineAsync
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 651
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a line terminator asynchronously to the stream.</p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteLineAsync()
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteLineAsync As Task
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteLineAsync
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream writer is currently in use by a previous write operation.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamWriter.WriteLineAsync(System.Char)
  commentId: M:System.IO.StreamWriter.WriteLineAsync(System.Char)
  id: WriteLineAsync(System.Char)
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: WriteLineAsync(Char)
  fullName: System.IO.StreamWriter.WriteLineAsync(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteLineAsync
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 674
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a character followed by a line terminator asynchronously to the stream.</p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following example shows how to write a single character (the letter \"a\") to a line in a text file, followed by another line that contains a single character (the letter \"b\"), by using the <xref href=\"System.IO.StreamWriter.WriteLineAsync(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StreamWriter#22"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteLineAsync(char value)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteLineAsync(value As Char) As Task
    parameters:
    - id: value
      type: System.Char
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteLineAsync(System.Char)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream writer is currently in use by a previous write operation.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  id: WriteLineAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: WriteLineAsync(Char[], Int32, Int32)
  fullName: System.IO.StreamWriter.WriteLineAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteLineAsync
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 720
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a subarray of characters followed by a line terminator asynchronously to the stream.</p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following example shows how to write characters to two separate lines in a text file by using the <xref href=\"System.IO.StreamWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. The first line contains the first 11 characters from the string (the letters \"First line\" followed by a space). The second line contains the remaining characters from the string (the letters \"and second line\").</p>System.IO.StreamWriter#25"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteLineAsync(char[] buffer, int index, int count)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteLineAsync(buffer As Char(), index As Integer, count As Integer) As Task
    parameters:
    - id: buffer
      type: System.Char[]
    - id: index
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>index</em> plus <em>count</em> is greater than the buffer length.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream writer is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StreamWriter.WriteLineAsync(System.Char(), System.Int32, System.Int32)
  name.vb: WriteLineAsync(Char(), Int32, Int32)
- uid: System.IO.StreamWriter.WriteLineAsync(System.String)
  commentId: M:System.IO.StreamWriter.WriteLineAsync(System.String)
  id: WriteLineAsync(System.String)
  parent: System.IO.StreamWriter
  langs:
  - csharp
  - vb
  name: WriteLineAsync(String)
  fullName: System.IO.StreamWriter.WriteLineAsync(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamWriter.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteLineAsync
    path: src/mscorlib/src/System/IO/StreamWriter.cs
    startLine: 697
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Writes a string followed by a line terminator asynchronously to the stream.</p>\n"
  remarks: "\n<p>The line terminator is defined by the <xref href=\"System.IO.TextWriter.NewLine\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following example shows how to write two lines that consist of string values to a text file by using the <xref href=\"System.IO.StreamWriter.WriteLineAsync(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StreamWriter#23"
  syntax:
    content: >-
      [HostProtection(ExternalThreading = true)]

      [ComVisible(false)]

      public override Task WriteLineAsync(string value)
    content.vb: >-
      <HostProtection(ExternalThreading:=True)>

      <ComVisible(False)>

      Public Overrides Function WriteLineAsync(value As String) As Task
    parameters:
    - id: value
      type: System.String
    return:
      type: System.Threading.Tasks.Task
  overridden: System.IO.TextWriter.WriteLineAsync(System.String)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream writer is disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream writer is currently in use by a previous write operation.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: false
  name: TextWriter
  fullName: System.IO.TextWriter
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.IO.TextWriter.CoreNewLine
  parent: System.IO.TextWriter
  isExternal: false
  name: CoreNewLine
  fullName: System.IO.TextWriter.CoreNewLine
- uid: System.IO.TextWriter.FormatProvider
  parent: System.IO.TextWriter
  isExternal: false
  name: FormatProvider
  fullName: System.IO.TextWriter.FormatProvider
- uid: System.IO.TextWriter.NewLine
  parent: System.IO.TextWriter
  isExternal: false
  name: NewLine
  fullName: System.IO.TextWriter.NewLine
- uid: System.IO.TextWriter.Dispose
  parent: System.IO.TextWriter
  isExternal: false
  name: Dispose()
  fullName: System.IO.TextWriter.Dispose()
  spec.csharp:
  - uid: System.IO.TextWriter.Dispose
    name: Dispose
    fullName: System.IO.TextWriter.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Dispose
    name: Dispose
    fullName: System.IO.TextWriter.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Boolean)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Boolean)
  fullName: System.IO.TextWriter.Write(System.Boolean)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Boolean)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Boolean)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Decimal)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Decimal)
  fullName: System.IO.TextWriter.Write(System.Decimal)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Decimal)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Decimal)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Double)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Double)
  fullName: System.IO.TextWriter.Write(System.Double)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Double)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Double)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Int32)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Int32)
  fullName: System.IO.TextWriter.Write(System.Int32)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Int32)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Int32)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Int64)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Int64)
  fullName: System.IO.TextWriter.Write(System.Int64)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Int64)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Int64)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Object)
  fullName: System.IO.TextWriter.Write(System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.Single)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Single)
  fullName: System.IO.TextWriter.Write(System.Single)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Single)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Single)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.String,System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(String, Object)
  fullName: System.IO.TextWriter.Write(System.String, System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.String,System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.String,System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(String, Object, Object)
  fullName: System.IO.TextWriter.Write(System.String, System.Object, System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(String, Object, Object, Object)
  fullName: System.IO.TextWriter.Write(System.String, System.Object, System.Object, System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.String,System.Object,System.Object,System.Object)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.String,System.Object[])
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(String, Object[])
  fullName: System.IO.TextWriter.Write(System.String, System.Object[])
  fullname.vb: System.IO.TextWriter.Write(System.String, System.Object())
  name.vb: Write(String, Object())
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.String,System.Object[])
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.String,System.Object[])
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.UInt32)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(UInt32)
  fullName: System.IO.TextWriter.Write(System.UInt32)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.UInt32)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.UInt32)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.UInt64)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(UInt64)
  fullName: System.IO.TextWriter.Write(System.UInt64)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.UInt64)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.UInt64)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteAsync(System.Char[])
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteAsync(Char[])
  fullName: System.IO.TextWriter.WriteAsync(System.Char[])
  fullname.vb: System.IO.TextWriter.WriteAsync(System.Char())
  name.vb: WriteAsync(Char())
  spec.csharp:
  - uid: System.IO.TextWriter.WriteAsync(System.Char[])
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteAsync(System.Char[])
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine
  parent: System.IO.TextWriter
  isExternal: false
  name: WriteLine()
  fullName: System.IO.TextWriter.WriteLine()
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Boolean)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Boolean)
  fullName: System.IO.TextWriter.WriteLine(System.Boolean)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Boolean)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Boolean)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Char)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Char)
  fullName: System.IO.TextWriter.WriteLine(System.Char)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Char)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Char)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Char[])
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Char[])
  fullName: System.IO.TextWriter.WriteLine(System.Char[])
  fullname.vb: System.IO.TextWriter.WriteLine(System.Char())
  name.vb: WriteLine(Char())
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Char[])
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Char[])
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Char[], Int32, Int32)
  fullName: System.IO.TextWriter.WriteLine(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextWriter.WriteLine(System.Char(), System.Int32, System.Int32)
  name.vb: WriteLine(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Char[],System.Int32,System.Int32)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Decimal)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Decimal)
  fullName: System.IO.TextWriter.WriteLine(System.Decimal)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Decimal)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Decimal)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Double)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Double)
  fullName: System.IO.TextWriter.WriteLine(System.Double)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Double)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Double)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Int32)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Int32)
  fullName: System.IO.TextWriter.WriteLine(System.Int32)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Int32)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Int32)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Int64)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Int64)
  fullName: System.IO.TextWriter.WriteLine(System.Int64)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Int64)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Int64)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Object)
  fullName: System.IO.TextWriter.WriteLine(System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.Single)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(Single)
  fullName: System.IO.TextWriter.WriteLine(System.Single)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.Single)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.Single)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.String)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(String)
  fullName: System.IO.TextWriter.WriteLine(System.String)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.String)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.String)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.String,System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(String, Object)
  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(String, Object, Object)
  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(String, Object, Object, Object)
  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object, System.Object, System.Object)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object,System.Object,System.Object)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.String,System.Object[])
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(String, Object[])
  fullName: System.IO.TextWriter.WriteLine(System.String, System.Object[])
  fullname.vb: System.IO.TextWriter.WriteLine(System.String, System.Object())
  name.vb: WriteLine(String, Object())
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object[])
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.String,System.Object[])
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.UInt32)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(UInt32)
  fullName: System.IO.TextWriter.WriteLine(System.UInt32)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.UInt32)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.UInt32)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLine(System.UInt64)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLine(UInt64)
  fullName: System.IO.TextWriter.WriteLine(System.UInt64)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLine(System.UInt64)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLine(System.UInt64)
    name: WriteLine
    fullName: System.IO.TextWriter.WriteLine
  - name: (
    fullName: (
  - uid: System.UInt64
    name: UInt64
    fullName: System.UInt64
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLineAsync(System.Char[])
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLineAsync(Char[])
  fullName: System.IO.TextWriter.WriteLineAsync(System.Char[])
  fullname.vb: System.IO.TextWriter.WriteLineAsync(System.Char())
  name.vb: WriteLineAsync(Char())
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLineAsync(System.Char[])
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLineAsync(System.Char[])
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.StreamWriter
  parent: System.IO
  isExternal: false
  name: StreamWriter
  fullName: System.IO.StreamWriter
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IO.TextWriter.Encoding
  parent: System.IO.TextWriter
  isExternal: false
  name: Encoding
  fullName: System.IO.TextWriter.Encoding
- uid: System.IO.TextWriter.Dispose(System.Boolean)
  parent: System.IO.TextWriter
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.IO.TextWriter.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.IO.TextWriter.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.TextWriter.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.TextWriter.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Flush
  parent: System.IO.TextWriter
  isExternal: false
  name: Flush()
  fullName: System.IO.TextWriter.Flush()
  spec.csharp:
  - uid: System.IO.TextWriter.Flush
    name: Flush
    fullName: System.IO.TextWriter.Flush
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Flush
    name: Flush
    fullName: System.IO.TextWriter.Flush
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextWriter.FlushAsync
  parent: System.IO.TextWriter
  isExternal: false
  name: FlushAsync()
  fullName: System.IO.TextWriter.FlushAsync()
  spec.csharp:
  - uid: System.IO.TextWriter.FlushAsync
    name: FlushAsync
    fullName: System.IO.TextWriter.FlushAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.FlushAsync
    name: FlushAsync
    fullName: System.IO.TextWriter.FlushAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.IO.TextWriter.Write(System.Char)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Char)
  fullName: System.IO.TextWriter.Write(System.Char)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Char)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Char)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.IO.TextWriter.Write(System.Char[])
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Char[])
  fullName: System.IO.TextWriter.Write(System.Char[])
  fullname.vb: System.IO.TextWriter.Write(System.Char())
  name.vb: Write(Char())
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Char[])
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Char[])
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(Char[], Int32, Int32)
  fullName: System.IO.TextWriter.Write(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextWriter.Write(System.Char(), System.Int32, System.Int32)
  name.vb: Write(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.Char[],System.Int32,System.Int32)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.Write(System.String)
  parent: System.IO.TextWriter
  isExternal: true
  name: Write(String)
  fullName: System.IO.TextWriter.Write(System.String)
  spec.csharp:
  - uid: System.IO.TextWriter.Write(System.String)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.Write(System.String)
    name: Write
    fullName: System.IO.TextWriter.Write
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.TextWriter.WriteAsync(System.Char)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteAsync(Char)
  fullName: System.IO.TextWriter.WriteAsync(System.Char)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteAsync(System.Char)
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteAsync(System.Char)
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteAsync(Char[], Int32, Int32)
  fullName: System.IO.TextWriter.WriteAsync(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextWriter.WriteAsync(System.Char(), System.Int32, System.Int32)
  name.vb: WriteAsync(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteAsync(System.Char[],System.Int32,System.Int32)
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteAsync(System.String)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteAsync(String)
  fullName: System.IO.TextWriter.WriteAsync(System.String)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteAsync(System.String)
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteAsync(System.String)
    name: WriteAsync
    fullName: System.IO.TextWriter.WriteAsync
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLineAsync
  parent: System.IO.TextWriter
  isExternal: false
  name: WriteLineAsync()
  fullName: System.IO.TextWriter.WriteLineAsync()
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLineAsync
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLineAsync
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLineAsync(System.Char)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLineAsync(Char)
  fullName: System.IO.TextWriter.WriteLineAsync(System.Char)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLineAsync(System.Char)
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLineAsync(System.Char)
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLineAsync(Char[], Int32, Int32)
  fullName: System.IO.TextWriter.WriteLineAsync(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextWriter.WriteLineAsync(System.Char(), System.Int32, System.Int32)
  name.vb: WriteLineAsync(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLineAsync(System.Char[],System.Int32,System.Int32)
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextWriter.WriteLineAsync(System.String)
  parent: System.IO.TextWriter
  isExternal: true
  name: WriteLineAsync(String)
  fullName: System.IO.TextWriter.WriteLineAsync(System.String)
  spec.csharp:
  - uid: System.IO.TextWriter.WriteLineAsync(System.String)
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextWriter.WriteLineAsync(System.String)
    name: WriteLineAsync
    fullName: System.IO.TextWriter.WriteLineAsync
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Text.EncoderFallbackException
  isExternal: false
  name: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
