items:
- uid: System.Threading.ParameterizedThreadStart
  commentId: T:System.Threading.ParameterizedThreadStart
  id: ParameterizedThreadStart
  parent: System.Threading
  children: []
  langs:
  - csharp
  - vb
  name: ParameterizedThreadStart
  fullName: System.Threading.ParameterizedThreadStart
  type: Delegate
  source:
    remote:
      path: src/System.Threading.Thread/ref/System.Threading.Thread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParameterizedThreadStart
    path: src/System.Threading.Thread/ref/System.Threading.Thread.cs
    startLine: 9
  assemblies:
  - System.Threading.Thread
  namespace: System.Threading
  summary: "\n<p>Represents the method that executes on a <xref href=\"System.Threading.Thread\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>When a managed thread is created, the method that executes on the thread is represented by: </p>\n<ul><li>\n<p>A <xref href=\"System.Threading.ThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate that is passed to the <xref href=\"System.Threading.Thread.#ctor(System.Threading.ThreadStart)\" data-throw-if-not-resolved=\"false\"></xref> constructor.  Any method that has no parameters and that returns <strong>void</strong> in C# or is a <strong>Sub</strong> procedure in Visual Basic can represent the delegate.</p>\n</li><li>\n<p>A <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate that is passed to the <xref href=\"System.Threading.Thread.#ctor(System.Threading.ParameterizedThreadStart,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor. Any method that has a single parameter of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and that returns void in C# or is a Sub procedure in Visual Basic can represent the delegate.</p>\n</li></ul>\n<p>The thread does not begin executing until the <see cref=\"Overload:System.Threading.Thread.Start\"></see> method is called. The <xref href=\"System.Threading.ThreadStart\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate is invoked on the thread, and execution begins at the first line of the method represented by the delegate. In the case of the <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate, the object that is passed to the <xref href=\"System.Threading.Thread.Start(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is passed to the delegate.</p>\n<p>\n      Visual Basic and C# users can omit the <xref href=\"System.Threading.ThreadStart\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate constructor when creating a thread. In Visual Basic, use the <strong>AddressOf</strong> operator when passing your method to the <see cref=\"Overload:System.Threading.Thread.#ctor\"></see> constructor; for example, <code>Dim t As New Thread(AddressOf ThreadProc)</code>. In C#, simply specify the name of the thread procedure. The compiler selects the correct delegate constructor.</p>\n<p>When you create a <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate for an instance method in C++, the first parameter of the constructor is the instance variable. For a static method, the first parameter of the constructor is zero. For a static method, the delegate constructor requires only one parameter: the address of the callback method, qualified by the class name.</p>\n<p>The <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate and the <xref href=\"System.Threading.Thread.Start(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method overload make it easy to pass data to a thread procedure, but this technique is not type safe because any object can be passed to <xref href=\"System.Threading.Thread.Start(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. A more robust way to pass data to a thread procedure is to put both the thread procedure and the data fields into a worker object. For more information, see Creating Threads and Passing Data at Start Time.</p>\n<p>The <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate supports only a single parameter. You can pass multiple data items to the <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> by making that parameter one of the following: </p>\n<ul><li>\n<p>An array. </p>\n</li><li>\n<p>A collection type, if all of the data items are of the same type. </p>\n</li><li>\n<p>A tuple type, such as <xref href=\"System.Tuple`2\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Tuple`4\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following code example uses a <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate with to execute a static method and an instance method. The first <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref>  delegate is represented by the static <code>DoWork</code> method and the second is represented by the instance <code>DoMoreWork</code> method. Both methods match the <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref>  delegate signature; that is, they have a single parameter of type <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and don't return a value. </p>\n<p>The Visual Basic and C# compilers infer the <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate from the signatures of the <code>DoWork</code> and <code>DoMoreWork</code> methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.</p>System.Threading.ParameterizedThreadStart#1"
  syntax:
    content: public delegate void ParameterizedThreadStart(object obj);
    content.vb: Public Delegate Sub ParameterizedThreadStart(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object that contains data for the thread procedure.</p>\n"
  seealso:
  - type: System.Threading.ThreadStart
    commentId: T:System.Threading.ThreadStart
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  - type: System.AppDomain
    commentId: T:System.AppDomain
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
