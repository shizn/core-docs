items:
- uid: System.Activator
  commentId: T:System.Activator
  id: Activator
  parent: System
  children:
  - System.Activator.CreateInstance(System.Type)
  - System.Activator.CreateInstance(System.Type,System.Boolean)
  - System.Activator.CreateInstance(System.Type,System.Object[])
  - System.Activator.CreateInstance``1
  langs:
  - csharp
  - vb
  name: Activator
  fullName: System.Activator
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Activator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Activator
    path: src/mscorlib/src/System/Activator.cs
    startLine: 34
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Contains methods to create types of objects locally or remotely, or obtain references to existing remote objects. This class cannot be inherited. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> method creates an instance of a type defined in an assembly by invoking the constructor that best matches the specified arguments. If no arguments are specified, the constructor that takes no parameters, that is, the default constructor, is invoked.</p>\n<p>You must have sufficient permission to search for and call a constructor; otherwise, an exception is thrown. By default, only public constructors are considered during the search for a constructor. If no constructor or default constructor can be found, an exception is thrown.</p>\n<p>A binder parameter specifies an object that searches an assembly for a suitable constructor. You can specify your own binder and search criteria. If no binder is specified, a default binder is used. For more information, see the <xref href=\"System.Reflection.Binder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.BindingFlags\" data-throw-if-not-resolved=\"false\"></xref> classes.</p>\n<p>An evidence parameter affects the security policy and permissions for the constructor. For more information, see the <xref href=\"System.Security.Policy.Evidence\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>An instance of a type can be created at a local or remote site. If the type is created remotely, an activation attribute parameter specifies the URI of the remote site. The call to create the instance might pass through intermediary sites before it reaches the remote site. Other activation attributes can modify the environment, or context, in which the call operates at the remote and intermediary sites.</p>\n<p>If the instance is created locally, a reference to that object is returned. If the instance is created remotely, a reference to a proxy is returned. The remote object is manipulated through the proxy as if it were a local object.</p>\n<p>The <xref href=\"System.Activator.GetObject(System.Type,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method creates a proxy to a currently running remote object, server-activated well-known object, or XML Web service. You can specify the connection medium, that is, the channel. For more information, see the <xref href=\"System.Runtime.Remoting.Channels.ChannelServices\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Assemblies contain type definitions. The <xref href=\"System.Activator.CreateInstance(System.Type,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> method creates an instance of a type from a currently running assembly. The <xref href=\"System.Activator.CreateInstanceFrom(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method creates an instance from a file that contains an assembly. The <xref href=\"System.Activator.CreateComInstanceFrom(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method creates an instance of a COM object from a file that contains an assembly.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Activator\" data-throw-if-not-resolved=\"false\"></xref> class to dynamically construct objects at run time.</p>ActivatorX#1"
  syntax:
    content: >-
      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_Activator))]

      [ComVisible(true)]

      public sealed class Activator : _Activator
    content.vb: >-
      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_Activator))>

      <ComVisible(True)>

      Public NotInheritable Class Activator
          Implements _Activator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Activator.CreateInstance(System.Type)
  commentId: M:System.Activator.CreateInstance(System.Type)
  id: CreateInstance(System.Type)
  parent: System.Activator
  langs:
  - csharp
  - vb
  name: CreateInstance(Type)
  fullName: System.Activator.CreateInstance(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Activator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateInstance
    path: src/mscorlib/src/System/Activator.cs
    startLine: 130
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates an instance of the specified type using that type's default constructor.</p>\n"
  remarks: "\n<p>The constructor to be invoked must be accessible.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access nonpublic types if the caller has been granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See Security Considerations for Reflection.) </p>\n<p>To use this functionality, your application should target the .NET Framework 3.5 or later. </p>\n"
  example:
  - "\n<p>The following code example demonstrates how to call the <xref href=\"System.Activator.CreateInstance(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method. Instances of several different types are created and their default values are displayed. </p>ActivatorX#4"
  syntax:
    content: public static object CreateInstance(Type type)
    content.vb: Public Shared Function CreateInstance(type As Type) As Object
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>type</em> is not a <strong>RuntimeType</strong>. </p>\n<p>-or-</p>\n<p>\n<em>type</em> is an open generic type (that is, the <xref href=\"System.Type.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong>).</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>type</em> cannot be a <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>Creation of <xref href=\"System.TypedReference\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.ArgIterator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\" data-throw-if-not-resolved=\"false\"></xref> types, or arrays of those types, is not supported.</p>\n<p>-or-</p>\n<p>The assembly that contains <em>type</em> is a dynamic assembly that was created with <xref href=\"System.Reflection.Emit.AssemblyBuilderAccess.Save\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "\n<p>The constructor being called throws an exception. </p>\n"
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The caller does not have permission to call this constructor. </p>\n"
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </p>\n"
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: "\n<p>The COM type was not obtained through <see cref=\"Overload:System.Type.GetTypeFromProgID\"></see> or <see cref=\"Overload:System.Type.GetTypeFromCLSID\"></see>. </p>\n"
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MissingMemberException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>No matching public constructor was found. </p>\n"
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "\n<p>\n<em>type</em> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>\n<em>type</em> is not a valid type. </p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Activator.CreateInstance(System.Type,System.Boolean)
  commentId: M:System.Activator.CreateInstance(System.Type,System.Boolean)
  id: CreateInstance(System.Type,System.Boolean)
  parent: System.Activator
  langs:
  - csharp
  - vb
  name: CreateInstance(Type, Boolean)
  fullName: System.Activator.CreateInstance(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Activator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateInstance
    path: src/mscorlib/src/System/Activator.cs
    startLine: 178
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates an instance of the specified type using that type's default constructor.</p>\n"
  remarks: "\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access nonpublic types and members if the caller has been granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag and if the grant set of the assembly that contains the nonpublic types and members is restricted to the caller’s grant set or to a subset thereof. (See Security Considerations for Reflection.) </p>\n<p>To use this functionality, your application should target the .NET Framework 3.5 or later. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static object CreateInstance(Type type, bool nonPublic)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function CreateInstance(type As Type, nonPublic As Boolean) As Object
    parameters:
    - id: type
      type: System.Type
    - id: nonPublic
      type: System.Boolean
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>type</em> is not a <strong>RuntimeType</strong>. </p>\n<p>-or-</p>\n<p>\n<em>type</em> is an open generic type (that is, the <xref href=\"System.Type.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong>).</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>type</em> cannot be a <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>Creation of <xref href=\"System.TypedReference\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.ArgIterator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\" data-throw-if-not-resolved=\"false\"></xref> types, or arrays of those types, is not supported. </p>\n<p>-or-</p>\n<p>The assembly that contains <em>type</em> is a dynamic assembly that was created with <xref href=\"System.Reflection.Emit.AssemblyBuilderAccess.Save\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "\n<p>The constructor being called throws an exception. </p>\n"
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "\n<p>The caller does not have permission to call this constructor. </p>\n"
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </p>\n"
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: "\n<p>The COM type was not obtained through <see cref=\"Overload:System.Type.GetTypeFromProgID\"></see> or <see cref=\"Overload:System.Type.GetTypeFromCLSID\"></see>. </p>\n"
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "\n<p>No matching public constructor was found. </p>\n"
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "\n<p>\n<em>type</em> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>\n<em>type</em> is not a valid type. </p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Activator.CreateInstance(System.Type,System.Object[])
  commentId: M:System.Activator.CreateInstance(System.Type,System.Object[])
  id: CreateInstance(System.Type,System.Object[])
  parent: System.Activator
  langs:
  - csharp
  - vb
  name: CreateInstance(Type, Object[])
  fullName: System.Activator.CreateInstance(System.Type, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Activator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateInstance
    path: src/mscorlib/src/System/Activator.cs
    startLine: 108
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates an instance of the specified type using the constructor that best matches the specified parameters.</p>\n"
  remarks: "\n<p>The constructor to be invoked must be accessible and must provide the most specific match with the specified argument list.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access nonpublic types if the caller has been granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag and if the grant set of the assembly that contains the nonpublic types is restricted to the caller’s grant set or to a subset thereof. (See Security Considerations for Reflection.) </p>\n<p>To use this functionality, your application should target the .NET Framework 3.5 or later. </p>\n"
  example:
  - "\n<p>The following example calls the  <xref href=\"System.Activator.CreateInstance(System.Type,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method to create an instance of a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> method. It calls the <xref href=\"System.String.#ctor(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor to instantiate a string that contains ten elements from a character array starting at the fourteenth position. </p>System.Activator.CreateInstance#5"
  - "\n<p>The following example creates a jagged array whose elements are arguments to be passed to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> constructor. The example then passes each array to the <xref href=\"System.Activator.CreateInstance(System.Type,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method to invoke the appropriate string constructor. </p>System.Activator.CreateInstance#4"
  syntax:
    content: public static object CreateInstance(Type type, params object[] args)
    content.vb: Public Shared Function CreateInstance(type As Type, ParamArray args As Object()) As Object
    parameters:
    - id: type
      type: System.Type
    - id: args
      type: System.Object[]
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>type</em> is not a <strong>RuntimeType</strong>. </p>\n<p>-or-</p>\n<p>\n<em>type</em> is an open generic type (that is, the <xref href=\"System.Type.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong>).</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>type</em> cannot be a <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>Creation of <xref href=\"System.TypedReference\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.ArgIterator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\" data-throw-if-not-resolved=\"false\"></xref> types, or arrays of those types, is not supported. </p>\n<p>-or-</p>\n<p>The assembly that contains <em>type</em> is a dynamic assembly that was created with <xref href=\"System.Reflection.Emit.AssemblyBuilderAccess.Save\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The constructor that best matches <em>args</em> has <strong>varargs</strong> arguments. </p>\n"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "\n<p>The constructor being called throws an exception. </p>\n"
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The caller does not have permission to call this constructor. </p>\n"
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>Cannot create an instance of an abstract class, or this member was invoked with a late-binding mechanism. </p>\n"
  - type: System.Runtime.InteropServices.InvalidComObjectException
    commentId: T:System.Runtime.InteropServices.InvalidComObjectException
    description: "\n<p>The COM type was not obtained through <see cref=\"Overload:System.Type.GetTypeFromProgID\"></see> or <see cref=\"Overload:System.Type.GetTypeFromCLSID\"></see>. </p>\n"
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MissingMemberException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>No matching public constructor was found. </p>\n"
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "\n<p>\n<em>type</em> is a COM object but the class identifier used to obtain the type is invalid, or the identified class is not registered. </p>\n"
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>\n<em>type</em> is not a valid type. </p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Activator.CreateInstance(System.Type, System.Object())
  name.vb: CreateInstance(Type, Object())
- uid: System.Activator.CreateInstance``1
  commentId: M:System.Activator.CreateInstance``1
  id: CreateInstance``1
  parent: System.Activator
  langs:
  - csharp
  - vb
  name: CreateInstance<T>()
  fullName: System.Activator.CreateInstance<T>()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Activator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateInstance
    path: src/mscorlib/src/System/Activator.cs
    startLine: 194
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates an instance of the type designated by the specified generic type parameter, using the parameterless constructor.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Activator.CreateInstance``1\" data-throw-if-not-resolved=\"false\"></xref> generic method is used by compilers to implement the instantiation of types specified by type parameters. For example, in the following generic method, the implementation of <code>new T()</code> (<code>gcnew T()</code> in C++) uses the <xref href=\"System.Activator.CreateInstance``1\" data-throw-if-not-resolved=\"false\"></xref> generic method. </p>System.Activation.CreateInstance~~1#1<p>In general, there is no use for the <xref href=\"System.Activator.CreateInstance``1\" data-throw-if-not-resolved=\"false\"></xref> generic method in application code, because the type must be known at compile time. If the type is known at compile time, normal instantiation syntax can be used (<strong>new</strong> operator in C#, <strong>New</strong> in Visual Basic, <strong>gcnew</strong> in C++). If the type is not known at compile time, you can call a non-generic overload of <xref href=\"System.Activator.CreateInstance(System.ActivationContext)\" data-throw-if-not-resolved=\"false\"></xref>. </p><p>There are no overloads of the <xref href=\"System.Activator.CreateInstance``1\" data-throw-if-not-resolved=\"false\"></xref> generic method that take argument lists, because the non-generic overloads of <xref href=\"System.Activator.CreateInstance(System.ActivationContext)\" data-throw-if-not-resolved=\"false\"></xref> already provide late-bound constructor resolution.</p>"
  example:
  - 
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static T CreateInstance<T>()
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function CreateInstance(Of T) As T
    typeParameters:
    - id: T
    return:
      type: '{T}'
  exceptions:
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MissingMemberException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The type that is specified for <em>T</em> does not have a parameterless constructor. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Activator.CreateInstance(Of T)()
  name.vb: CreateInstance(Of T)()
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Reflection.TargetInvocationException
  isExternal: false
  name: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
- uid: System.MethodAccessException
  isExternal: false
  name: MethodAccessException
  fullName: System.MethodAccessException
- uid: System.MemberAccessException
  parent: System
  isExternal: false
  name: MemberAccessException
  fullName: System.MemberAccessException
- uid: System.Runtime.InteropServices.InvalidComObjectException
  isExternal: false
  name: InvalidComObjectException
  fullName: System.Runtime.InteropServices.InvalidComObjectException
- uid: System.MissingMethodException
  isExternal: false
  name: MissingMethodException
  fullName: System.MissingMethodException
- uid: System.Runtime.InteropServices.COMException
  isExternal: false
  name: COMException
  fullName: System.Runtime.InteropServices.COMException
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  fullName: System.TypeLoadException
