items:
- uid: System.Security.AllowPartiallyTrustedCallersAttribute
  commentId: T:System.Security.AllowPartiallyTrustedCallersAttribute
  id: AllowPartiallyTrustedCallersAttribute
  parent: System.Security
  children:
  - System.Security.AllowPartiallyTrustedCallersAttribute.#ctor
  langs:
  - csharp
  - vb
  name: AllowPartiallyTrustedCallersAttribute
  fullName: System.Security.AllowPartiallyTrustedCallersAttribute
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Security/Attributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AllowPartiallyTrustedCallersAttribute
    path: src/mscorlib/src/System/Security/Attributes.cs
    startLine: 39
  assemblies:
  - System.Runtime
  namespace: System.Security
  summary: "\n<p>Allows an assembly to be called by partially trusted code. Without this declaration, only fully trusted callers are able to use the assembly. This class cannot be inherited.</p>\n"
  remarks: "\n<p> The .NET Framework 4 introduces new security rules that affect the behavior of the <xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute (see Security-Transparent Code, Level 2). In the .NET Framework 4, all code defaults to security-transparent, that is, partially trusted. However, you can annotate individual types and members to assign them other transparency attributes. For this and other security changes, see Security Changes in the .NET Framework.</p>\n<p>.NET Framework version 2.0 () assemblies must be strong-named to effectively use the <xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\" data-throw-if-not-resolved=\"false\"></xref> (APTCA) attribute. .NET Framework 4 () assemblies do not have to be strong-named for the APTCA attribute to be effective, and they can contain transparent, security-critical and security-safe-critical code. For more information about applying attributes at the assembly level, see Applying Attributes.</p>\n<p>By default, if a strong-named,  assembly does not explicitly apply this attribute at the assembly level, it can be called only by other assemblies that are granted full trust. This restriction is enforced by placing a <xref href=\"System.Security.Permissions.SecurityAction.LinkDemand\" data-throw-if-not-resolved=\"false\"></xref> for <strong>FullTrust</strong> on every public or protected method on every publicly accessible class in the assembly. Assemblies that are intended to be called by partially trusted code can declare their intent through the use of <xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\" data-throw-if-not-resolved=\"false\"></xref>. An example of the declaration in C# is <code>[assembly:AllowPartiallyTrustedCallers]</code>; an example in Visual Basic is <code><assembly:AllowPartiallyTrustedCallers></code>.</p>\n<p>The presence of this assembly-level attribute prevents the default behavior of placing <strong>FullTrust</strong><xref href=\"System.Security.Permissions.SecurityAction.LinkDemand\" data-throw-if-not-resolved=\"false\"></xref> security checks, and makes the assembly callable from any other (partially or fully trusted) assembly.</p>\n<p>When the APTCA attribute is present, all other security checks function as intended, including any class-level or method-level declarative security attributes that are present. This attribute blocks only the implicit, fully trusted caller demand.</p>\n<p>This is not a declarative security attribute, but a regular attribute (it derives from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>, not from <xref href=\"System.Security.Permissions.SecurityAttribute\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n<p>For more information, see Using Libraries from Partially Trusted Code.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Security.AllowPartiallyTrustedCallersAttribute#1"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Assembly, AllowMultiple = false, Inherited = false)]

      [ComVisible(true)]

      public sealed class AllowPartiallyTrustedCallersAttribute : Attribute, _Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Assembly, AllowMultiple:=False, Inherited:=False)>

      <ComVisible(True)>

      Public NotInheritable Class AllowPartiallyTrustedCallersAttribute
          Inherits Attribute
          Implements _Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 1
    namedArguments:
    - name: AllowMultiple
      type: System.Boolean
      value: false
    - name: Inherited
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AllowPartiallyTrustedCallersAttribute.#ctor
  commentId: M:System.Security.AllowPartiallyTrustedCallersAttribute.#ctor
  id: '#ctor'
  parent: System.Security.AllowPartiallyTrustedCallersAttribute
  langs:
  - csharp
  - vb
  name: AllowPartiallyTrustedCallersAttribute()
  fullName: System.Security.AllowPartiallyTrustedCallersAttribute.AllowPartiallyTrustedCallersAttribute()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Security/Attributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Security/Attributes.cs
    startLine: 44
  assemblies:
  - System.Runtime
  namespace: System.Security
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  remarks: "\n<p>This attribute should be applied only at the assembly level.</p>\n"
  example:
  - "\n<p>For an example of how to use this constructor, see the code example provided for the <xref href=\"System.Security.AllowPartiallyTrustedCallersAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public AllowPartiallyTrustedCallersAttribute()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security
  isExternal: false
  name: System.Security
  fullName: System.Security
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
