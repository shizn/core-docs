items:
- uid: System.Single
  commentId: T:System.Single
  id: Single
  parent: System
  children:
  - System.Single.CompareTo(System.Single)
  - System.Single.Epsilon
  - System.Single.Equals(System.Object)
  - System.Single.Equals(System.Single)
  - System.Single.GetHashCode
  - System.Single.IsInfinity(System.Single)
  - System.Single.IsNaN(System.Single)
  - System.Single.IsNegativeInfinity(System.Single)
  - System.Single.IsPositiveInfinity(System.Single)
  - System.Single.MaxValue
  - System.Single.MinValue
  - System.Single.NaN
  - System.Single.NegativeInfinity
  - System.Single.op_Equality(System.Single,System.Single)
  - System.Single.op_GreaterThan(System.Single,System.Single)
  - System.Single.op_GreaterThanOrEqual(System.Single,System.Single)
  - System.Single.op_Inequality(System.Single,System.Single)
  - System.Single.op_LessThan(System.Single,System.Single)
  - System.Single.op_LessThanOrEqual(System.Single,System.Single)
  - System.Single.Parse(System.String)
  - System.Single.Parse(System.String,System.Globalization.NumberStyles)
  - System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - System.Single.Parse(System.String,System.IFormatProvider)
  - System.Single.PositiveInfinity
  - System.Single.System#IComparable#CompareTo(System.Object)
  - System.Single.System#IConvertible#GetTypeCode
  - System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)
  - System.Single.System#IConvertible#ToByte(System.IFormatProvider)
  - System.Single.System#IConvertible#ToChar(System.IFormatProvider)
  - System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)
  - System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)
  - System.Single.System#IConvertible#ToDouble(System.IFormatProvider)
  - System.Single.System#IConvertible#ToInt16(System.IFormatProvider)
  - System.Single.System#IConvertible#ToInt32(System.IFormatProvider)
  - System.Single.System#IConvertible#ToInt64(System.IFormatProvider)
  - System.Single.System#IConvertible#ToSByte(System.IFormatProvider)
  - System.Single.System#IConvertible#ToSingle(System.IFormatProvider)
  - System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  - System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)
  - System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)
  - System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)
  - System.Single.ToString
  - System.Single.ToString(System.IFormatProvider)
  - System.Single.ToString(System.String)
  - System.Single.ToString(System.String,System.IFormatProvider)
  - System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)
  - System.Single.TryParse(System.String,System.Single@)
  langs:
  - csharp
  - vb
  name: Single
  fullName: System.Single
  type: Struct
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Runtime/ref/System.Runtime.Manual.cs
    startLine: 18
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a single-precision floating-point number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value type represents a single-precision 32-bit number with values ranging from negative 3.402823e38 to positive 3.402823e38, as well as positive or negative zero, <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>, and not a number (<xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>). It is intended to represent values that are extremely large (such as distances between planets or galaxies) or extremely small (such as the molecular mass of a substance in kilograms) and that often are imprecise (such as the distance from earth to another solar system). The <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> type complies with the IEC 60559:1989 (IEEE 754) standard for binary floating-point arithmetic.</p>\n<p>This topic consists of the following sections:</p>\n<ul><li>\n<p>Floating-point representation and precision</p>\n</li><li>\n<p>Testing for equality</p>\n</li><li>\n<p>Floating-point values and exceptions</p>\n</li><li>\n<p>Type conversion and the Single structure</p>\n</li><li>\n<p>Floating-point functionality</p>\n</li></ul>\n<p>\n<xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> provides methods to compare instances of this type, to convert the value of an instance to its string representation, and to convert the string representation of a number to an instance of this type. For information about how format specification codes control the string representation of value types, see Formatting Types in the .NET Framework, Standard Numeric Format Strings, and Custom Numeric Format Strings. </p>\n"
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      public struct Single : IComparable, IComparable<float>, IConvertible, IEquatable<float>, IFormattable
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      Public Structure Single
          Implements IComparable, IComparable(Of Single), IConvertible, IEquatable(Of Single), IFormattable
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  - type: System.Double
    commentId: T:System.Double
  implements:
  - System.IComparable
  - System.IComparable{System.Single}
  - System.IConvertible
  - System.IEquatable{System.Single}
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Single.CompareTo(System.Single)
  commentId: M:System.Single.CompareTo(System.Single)
  id: CompareTo(System.Single)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: CompareTo(Single)
  fullName: System.Single.CompareTo(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1443
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares this instance to a specified single-precision floating-point number and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified single-precision floating-point number.</p>\n"
  remarks: "\n<p>Values must be identical to be considered equal. It is common for floating-point values to lose precision and to become nearly identical except for their least significant digits, especially when the values depend on multiple mathematical operations. Because of this, the return value of the <xref href=\"System.Single.CompareTo(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method at times may seem surprising. For example, multiplication by any value followed by division by the same value should produce the original value. However, in the following example, the computed value turns out to be greater than the original value. Showing all significant digits of the two values by using the \"R\" standard numeric format string indicates that the computed value differs from the original value in its least significant digits. For information about handling such comparisons, see the Remarks section of the <xref href=\"System.Single.Equals(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>System.Single.CompareTo#1<p>This method implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> interface and performs slightly better than the <xref href=\"System.Single.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method because it does not have to convert the <em>value</em> parameter to an object.</p><p>Note that, although an object whose value is <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref> is not considered equal to another object whose value is <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref> (even itself), the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> interface requires that <code>A.CompareTo(A)</code> return zero.</p>"
  example:
  - <p>The following code example demonstrates generic and nongeneric versions of the <see cref="Overload:System.Single.CompareTo"></see> method for several value and reference types.</p>T.CompareTo#1
  syntax:
    content: public int CompareTo(float value)
    content.vb: Public Function CompareTo(value As Single) As Integer
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>A single-precision floating-point number to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed number indicating the relative values of this instance and <em>value</em>.</p>\n<p>Return Value </p>\n<p>Description </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>This instance is less than <em>value</em>.</p>\n<p>-or- </p>\n<p>This instance is not a number (<xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>) and <em>value</em> is a number. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>This instance is equal to <em>value</em>.</p>\n<p>-or- </p>\n<p>Both this instance and <em>value</em> are not a number (<xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>), <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>This instance is greater than <em>value</em>.</p>\n<p>-or- </p>\n<p>This instance is a number and <em>value</em> is not a number (<xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>). </p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.Single.Equals(System.Object)
    commentId: M:System.Single.Equals(System.Object)
  implements:
  - System.IComparable{System.Single}.CompareTo(System.Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Single.Equals(System.Object)
  commentId: M:System.Single.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Single.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1444
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\n"
  remarks: "\n<p>The<xref href=\"System.Single.Equals(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method should be used with caution, because two apparently equivalent values can be unequal due to the differing precision of the two values. The following example reports that the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value .3333 and the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> returned by dividing 1 by 3 are unequal.</p>System.Single.Epsilon#3<p>Rather than comparing for equality, one recommended technique involves defining an acceptable margin of difference between two values (such as .01% of one of the values). If the absolute value of the difference between the two values is less than or equal to that margin, the difference is likely to be due to differences in precision and, therefore, the values are likely to be equal. The following example uses this technique to compare .33333 and 1/3, the two <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values that the previous code example found to be unequal.</p>System.Single.Epsilon#4<p>In this case, the values are equal.</p><p>Because <xref href=\"System.Single.Epsilon\" data-throw-if-not-resolved=\"false\"></xref> defines the minimum expression of a positive value whose range is near zero, the margin of difference must be greater than <xref href=\"System.Single.Epsilon\" data-throw-if-not-resolved=\"false\"></xref>. Typically, it is many times greater than <xref href=\"System.Single.Epsilon\" data-throw-if-not-resolved=\"false\"></xref>.</p><p>The precision of floating-point numbers beyond the documented precision is specific to the implementation and version of the .NET Framework. Consequently, a comparison of two particular numbers might change between versions of the .NET Framework because the precision of the numbers' internal representation might change.</p>"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Single.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Single#17"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with this instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> is an instance of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> and equals the value of this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  seealso:
  - type: System.Single.CompareTo(System.Object)
    commentId: M:System.Single.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Single.Equals(System.Single)
  commentId: M:System.Single.Equals(System.Single)
  id: Equals(System.Single)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: Equals(Single)
  fullName: System.Single.Equals(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1445
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether this instance and a specified <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> object represent the same value.</p>\n"
  remarks: "\n<p>This method implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> interface, and performs slightly better than <xref href=\"System.Single.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> because it does not have to convert the <em>obj</em> parameter to an object.</p>\n"
  example:
  - 
  syntax:
    content: public bool Equals(float obj)
    content.vb: Public Function Equals(obj As Single) As Boolean
    parameters:
    - id: obj
      type: System.Single
      description: "\n<p>An object to compare with this instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> is equal to this instance; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Single.Equals(System.Object)
    commentId: M:System.Single.Equals(System.Object)
  implements:
  - System.IEquatable{System.Single}.Equals(System.Single)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Single.GetHashCode
  commentId: M:System.Single.GetHashCode
  id: GetHashCode
  parent: System.Single
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Single.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1446
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Single.IsInfinity(System.Single)
  commentId: M:System.Single.IsInfinity(System.Single)
  id: IsInfinity(System.Single)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IsInfinity(Single)
  fullName: System.Single.IsInfinity(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInfinity
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1447
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether the specified number evaluates to negative or positive infinity.</p>\n"
  remarks: "\n<p>Floating-point operations return <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref> to signal an overflow condition.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Single.IsInfinity(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Single#11"
  syntax:
    content: public static bool IsInfinity(float f)
    content.vb: Public Shared Function IsInfinity(f As Single) As Boolean
    parameters:
    - id: f
      type: System.Single
      description: "\n<p>A single-precision floating-point number. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>f</em> evaluates to <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Single.IsPositiveInfinity(System.Single)
    commentId: M:System.Single.IsPositiveInfinity(System.Single)
  - type: System.Single.IsNegativeInfinity(System.Single)
    commentId: M:System.Single.IsNegativeInfinity(System.Single)
  - type: System.Single.PositiveInfinity
    commentId: F:System.Single.PositiveInfinity
  - type: System.Single.NegativeInfinity
    commentId: F:System.Single.NegativeInfinity
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.IsNaN(System.Single)
  commentId: M:System.Single.IsNaN(System.Single)
  id: IsNaN(System.Single)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IsNaN(Single)
  fullName: System.Single.IsNaN(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNaN
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1448
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether the specified value is not a number (<xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  remarks: "\n<p>Floating-point operations return <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref> to signal that that result of the operation is undefined. For example, dividing 0.0 by 0.0 results in <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Single.IsNaN(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong> if a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value is either <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. To test for these values, use the <xref href=\"System.Single.IsInfinity(System.Single)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Single.IsPositiveInfinity(System.Single)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Single.IsNegativeInfinity(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> methods. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Single.IsNaN(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Single#8"
  syntax:
    content: public static bool IsNaN(float f)
    content.vb: Public Shared Function IsNaN(f As Single) As Boolean
    parameters:
    - id: f
      type: System.Single
      description: "\n<p>A single-precision floating-point number. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>f</em> evaluates to not a number (<xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>); otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Single.NaN
    commentId: F:System.Single.NaN
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.IsNegativeInfinity(System.Single)
  commentId: M:System.Single.IsNegativeInfinity(System.Single)
  id: IsNegativeInfinity(System.Single)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IsNegativeInfinity(Single)
  fullName: System.Single.IsNegativeInfinity(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNegativeInfinity
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1449
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether the specified number evaluates to negative infinity.</p>\n"
  remarks: "\n<p>Floating-point operations return <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref> to signal an overflow condition.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Single.IsNegativeInfinity(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Single#13"
  syntax:
    content: public static bool IsNegativeInfinity(float f)
    content.vb: Public Shared Function IsNegativeInfinity(f As Single) As Boolean
    parameters:
    - id: f
      type: System.Single
      description: "\n<p>A single-precision floating-point number. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>f</em> evaluates to <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Single.IsInfinity(System.Single)
    commentId: M:System.Single.IsInfinity(System.Single)
  - type: System.Single.IsPositiveInfinity(System.Single)
    commentId: M:System.Single.IsPositiveInfinity(System.Single)
  - type: System.Single.PositiveInfinity
    commentId: F:System.Single.PositiveInfinity
  - type: System.Single.NegativeInfinity
    commentId: F:System.Single.NegativeInfinity
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.IsPositiveInfinity(System.Single)
  commentId: M:System.Single.IsPositiveInfinity(System.Single)
  id: IsPositiveInfinity(System.Single)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IsPositiveInfinity(Single)
  fullName: System.Single.IsPositiveInfinity(System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPositiveInfinity
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1450
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether the specified number evaluates to positive infinity.</p>\n"
  remarks: "\n<p>Floating-point operations return <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> to signal an overflow condition.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Single.IsPositiveInfinity(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Single#12"
  syntax:
    content: public static bool IsPositiveInfinity(float f)
    content.vb: Public Shared Function IsPositiveInfinity(f As Single) As Boolean
    parameters:
    - id: f
      type: System.Single
      description: "\n<p>A single-precision floating-point number. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>f</em> evaluates to <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Single.IsInfinity(System.Single)
    commentId: M:System.Single.IsInfinity(System.Single)
  - type: System.Single.IsNegativeInfinity(System.Single)
    commentId: M:System.Single.IsNegativeInfinity(System.Single)
  - type: System.Single.PositiveInfinity
    commentId: F:System.Single.PositiveInfinity
  - type: System.Single.NegativeInfinity
    commentId: F:System.Single.NegativeInfinity
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.op_Equality(System.Single,System.Single)
  commentId: M:System.Single.op_Equality(System.Single,System.Single)
  id: op_Equality(System.Single,System.Single)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: Equality(Single, Single)
  fullName: System.Single.Equality(System.Single, System.Single)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1451
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether two specified <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values are equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Single.op_Equality(System.Single,System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method defines the equality operator for <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator ==(float left, float right)
    content.vb: Public Shared Operator =(left As Single, right As Single) As Boolean
    parameters:
    - id: left
      type: System.Single
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Single
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.op_GreaterThan(System.Single,System.Single)
  commentId: M:System.Single.op_GreaterThan(System.Single,System.Single)
  id: op_GreaterThan(System.Single,System.Single)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: GreaterThan(Single, Single)
  fullName: System.Single.GreaterThan(System.Single, System.Single)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThan
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1452
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether a specified <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value is greater than another specified <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Single.op_GreaterThan(System.Single,System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater-than operator for <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator>(float left, float right)
    content.vb: Public Shared Operator>(left As Single, right As Single) As Boolean
    parameters:
    - id: left
      type: System.Single
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Single
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is greater than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.op_GreaterThanOrEqual(System.Single,System.Single)
  commentId: M:System.Single.op_GreaterThanOrEqual(System.Single,System.Single)
  id: op_GreaterThanOrEqual(System.Single,System.Single)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Single, Single)
  fullName: System.Single.GreaterThanOrEqual(System.Single, System.Single)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThanOrEqual
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1453
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether a specified <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value is greater than or equal to another specified <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Single.op_GreaterThanOrEqual(System.Single,System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the greater-than-or-equal operator for <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator >=(float left, float right)
    content.vb: Public Shared Operator >=(left As Single, right As Single) As Boolean
    parameters:
    - id: left
      type: System.Single
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Single
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is greater than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.op_Inequality(System.Single,System.Single)
  commentId: M:System.Single.op_Inequality(System.Single,System.Single)
  id: op_Inequality(System.Single,System.Single)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: Inequality(Single, Single)
  fullName: System.Single.Inequality(System.Single, System.Single)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1454
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether two specified <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values are not equal.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Single.op_Inequality(System.Single,System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method defines the inequality operator for <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator !=(float left, float right)
    content.vb: Public Shared Operator <>(left As Single, right As Single) As Boolean
    parameters:
    - id: left
      type: System.Single
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Single
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.op_LessThan(System.Single,System.Single)
  commentId: M:System.Single.op_LessThan(System.Single,System.Single)
  id: op_LessThan(System.Single,System.Single)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: LessThan(Single, Single)
  fullName: System.Single.LessThan(System.Single, System.Single)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThan
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1455
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether a specified <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value is less than another specified <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Single.op_LessThan(System.Single,System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less-than operator for <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator <(float left, float right)
    content.vb: Public Shared Operator <(left As Single, right As Single) As Boolean
    parameters:
    - id: left
      type: System.Single
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Single
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is less than <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.op_LessThanOrEqual(System.Single,System.Single)
  commentId: M:System.Single.op_LessThanOrEqual(System.Single,System.Single)
  id: op_LessThanOrEqual(System.Single,System.Single)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Single, Single)
  fullName: System.Single.LessThanOrEqual(System.Single, System.Single)
  type: Operator
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThanOrEqual
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1456
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether a specified <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value is less than or equal to another specified <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Single.op_LessThanOrEqual(System.Single,System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method defines the operation of the less-than-or-equal operator for <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator <=(float left, float right)
    content.vb: Public Shared Operator <=(left As Single, right As Single) As Boolean
    parameters:
    - id: left
      type: System.Single
      description: "\n<p>The first value to compare.</p>\n"
    - id: right
      type: System.Single
      description: "\n<p>The second value to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is less than or equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.Parse(System.String)
  commentId: M:System.Single.Parse(System.String)
  id: Parse(System.String)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: Parse(String)
  fullName: System.Single.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1457
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a number to its single-precision floating-point number equivalent.</p>\n"
  remarks: "\n<p>The <em>s</em> parameter can contain the current culture's <xref href=\"System.Globalization.NumberFormatInfo.PositiveInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NegativeInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NaNSymbol\" data-throw-if-not-resolved=\"false\"></xref>, or a string of the form: </p>\n<p>[ws][sign] [integral-digits[,]]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws] </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>A series of white space characters. </p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>A negative sign symbol or a positive sign symbol. Valid sign characters are determined by the <xref href=\"System.Globalization.NumberFormatInfo.NegativeSign\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberFormatInfo.PositiveSign\" data-throw-if-not-resolved=\"false\"></xref> properties of the current culture. Only a leading sign can be used.</p>\n</td></tr><tr><td>\n<p>integral-digits</p>\n</td><td>\n<p>A series of digits ranging from 0 to 9 that specify the integral part of the number. Runs of integral-digits can be partitioned by a group-separator symbol. For example, in some cultures a comma (,) separates groups of thousands. The integral-digits element can be absent if the string contains the fractional-digits element. </p>\n</td></tr><tr><td>\n<p>,</p>\n</td><td>\n<p>A culture-specific thousands separator symbol.</p>\n</td></tr><tr><td>\n<p>. </p>\n</td><td>\n<p>A culture-specific decimal point symbol. </p>\n</td></tr><tr><td>\n<p>fractional-digits</p>\n</td><td>\n<p>A series of digits ranging from 0 to 9 that specify the fractional part of the number.</p>\n</td></tr><tr><td>\n<p>E</p>\n</td><td>\n<p>The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation.</p>\n</td></tr><tr><td>\n<p>exponential-digits</p>\n</td><td>\n<p>A series of digits ranging from 0 to 9 that specify an exponent.</p>\n</td></tr></tbody></table>\n<p>The <em>s</em> parameter is interpreted using a combination of the <xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref> flags. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <em>s</em>, use the <xref href=\"System.Single.Parse(System.String,System.Globalization.NumberStyles)\" data-throw-if-not-resolved=\"false\"></xref> method overload.</p>\n<p>The <em>s</em> parameter is parsed by using the formatting information in a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is initialized for the current system culture. For more information, see <xref href=\"System.Globalization.NumberFormatInfo.CurrentInfo\" data-throw-if-not-resolved=\"false\"></xref>. To parse a string by using the formatting information of a specific culture, use the <xref href=\"System.Single.Parse(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Ordinarily, if you pass the <see cref=\"Overload:System.Single.Parse\"></see> method a string that is created by calling the <see cref=\"Overload:System.Single.ToString\"></see> method, the original <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value is returned. However, because of a loss of precision, the values may not be equal. </p>\n<p>If a separator is encountered in the <em>s</em> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref href=\"System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NumberDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.CurrencyGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.NumberFormatInfo.NumberGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Single.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to convert an array of strings to equivalent <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Single.Parse#2"
  syntax:
    content: public static float Parse(string s)
    content.vb: Public Shared Function Parse(s As String) As Single
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string that contains a number to convert. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number equivalent to the numeric value or symbol specified in <em>s</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>s</em> does not represent a number in a valid format. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>s</em> represents a number less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Single.ToString
    commentId: M:System.Single.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.Parse(System.String,System.Globalization.NumberStyles)
  commentId: M:System.Single.Parse(System.String,System.Globalization.NumberStyles)
  id: Parse(System.String,System.Globalization.NumberStyles)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: Parse(String, NumberStyles)
  fullName: System.Single.Parse(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1458
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified style to its single-precision floating-point number equivalent.</p>\n"
  remarks: "\n<p>The <em>style</em> parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the <em>s</em> parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumeration. The following <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members are not supported:</p>\n<ul><li>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The <em>s</em> parameter can contain the current culture's <xref href=\"System.Globalization.NumberFormatInfo.PositiveInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NegativeInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NaNSymbol\" data-throw-if-not-resolved=\"false\"></xref>. Depending on the value of <em>style</em>, it can also take the form: </p>\n<p>[ws][$][sign][integral-digits[,]]integral-digits[.[fractional-digits]][E[sign]exponential-digits][ws] </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>ws<p>A series of white-space characters. White space can appear at the beginning of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>$<p>A culture-specific currency symbol. Its position in the string is defined by the <xref href=\"System.Globalization.NumberFormatInfo.CurrencyNegativePattern\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberFormatInfo.CurrencyPositivePattern\" data-throw-if-not-resolved=\"false\"></xref> properties of the current culture. The current culture's currency symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>sign<p>A negative sign symbol (-) or a positive sign symbol (+). The sign can appear at the beginning of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref> flag. Parentheses can be used in <em>s</em> to indicate a negative value if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>integral-digits<p>A series of digits ranging from 0 to 9 that specify the integral part of the number. The integral-digits element can be absent if the string contains the fractional-digits element. </p>,<p>A culture-specific group separator. The current culture's group separator symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref> flag</p>. <p>A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>fractional-digits<p>A series of digits ranging from 0 to 9 that specify the fractional part of the number. Fractional digits can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>E<p>The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The <em>value</em> parameter can represent a number in exponential notation if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>exponential-digits<p>A series of digits ranging from 0 to 9 that specify an exponent.</p><p>A string with digits only (which corresponds to the <xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref> style) always parses successfully. The remaining <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> flags affect the elements that may be present in <em>s</em>.</p><p>NumberStyles value</p><p>Elements permitted in <em>s</em> in addition to digits</p><table><tbody><tr><td><p><xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>The integral-digits element only.</p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>The decimal point (.) and fractional-digits elements.</p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>The \"e\" or \"E\" character, which indicates exponential notation. This flag by itself supports values in the form digitsEdigits; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>The ws element at the beginning of <em>s</em>.  </p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>The ws element at the end of <em>s</em>.</p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>The sign element at the beginning of <em>s</em>.</p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>The sign element at the end of <em>s</em>.</p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>The sign element in the form of parentheses enclosing the numeric value.</p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>The thousands separator (,) element.</p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>The currency ($) element.</p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.Currency\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>All elements. However, <em>s</em> cannot represent a hexadecimal number or a number in exponential notation.</p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>The ws element at the beginning or end of <em>s</em>, sign at the beginning of <em>s</em>, and the decimal point (.) symbol. The <em>s</em> parameter can also use exponential notation.</p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.Number\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>The <em>ws</em>, <em>sign</em>, thousands separator (,) and decimal point (.) elements.</p></td></tr><tr><td><p><xref href=\"System.Globalization.NumberStyles.Any\" data-throw-if-not-resolved=\"false\"></xref></p></td><td><p>All elements. However, <em>s</em> cannot represent a hexadecimal number.</p></td></tr></tbody></table><p>Some examples of <em>s</em> are \"100\", \"-123,456,789\", \"123.45e+6\", \"+500\", \"5e2\", \"3.1416\", \"600.\", \"-.123\", and \"-Infinity\".</p><p>The <em>s</em> parameter is parsed using the formatting information in a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is initialized for the current system culture. To specify the culture whose formatting information is used for the parse operation, call the <xref href=\"System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> overload.</p><p>Ordinarily, if you pass the <see cref=\"Overload:System.Single.Parse\"></see> method a string that is created by calling the <see cref=\"Overload:System.Single.ToString\"></see> method, the original <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value is returned. However, because of a loss of precision, the values may not be equal. </p><p>If a separator is encountered in the <em>s</em> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref href=\"System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NumberDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.CurrencyGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.NumberFormatInfo.NumberGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Single.Parse(System.String,System.Globalization.NumberStyles)\" data-throw-if-not-resolved=\"false\"></xref> method to parse the string representations of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values. The example uses formatting information for the en-US culture.</p>System.Single.Parse#3"
  syntax:
    content: public static float Parse(string s, NumberStyles style)
    content.vb: Public Shared Function Parse(s As String, style As NumberStyles) As Single
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string that contains a number to convert. </p>\n"
    - id: style
      type: System.Globalization.NumberStyles
      description: "\n<p>A bitwise combination of enumeration values that indicates the style elements that can be present in <em>s</em>. A typical value to specify is <xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref> combined with <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number that is equivalent to the numeric value or symbol specified in <em>s</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>s</em> is not a number in a valid format. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>s</em> represents a number that is less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>style</em> is not a <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n<p>-or-</p>\n<p>\n<em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Single.ToString
    commentId: M:System.Single.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: Parse(String, NumberStyles, IFormatProvider)
  fullName: System.Single.Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1459
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent.</p>\n"
  remarks: "\n<p>The <em>style</em> parameter defines the style elements (such as white space, thousands separators, and currency symbols) that are allowed in the <em>s</em> parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumeration. The following <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members are not supported:</p>\n<ul><li>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The <em>s</em> parameter can contain <xref href=\"System.Globalization.NumberFormatInfo.PositiveInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NegativeInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Globalization.NumberFormatInfo.NaNSymbol\" data-throw-if-not-resolved=\"false\"></xref> for the culture specified by <em>provider</em>. Depending on the value of <em>style</em>, it can also take the form: </p>\n<p>[ws] [$] [sign][integral-digits,]integral-digits[.[fractional-digits]][E[sign]exponential-digits][ws] </p>\n<p>Elements framed in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>A series of white-space characters. White space can appear at the beginning of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n</td></tr><tr><td>\n<p>$</p>\n</td><td>\n<p>A culture-specific currency symbol. Its position in the string is defined by the <xref href=\"System.Globalization.NumberFormatInfo.CurrencyNegativePattern\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberFormatInfo.CurrencyPositivePattern\" data-throw-if-not-resolved=\"false\"></xref> properties of the current culture. The current culture's currency symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>A negative sign symbol (-) or a positive sign symbol (+). The sign can appear at the beginning of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref> flag. Parentheses can be used in <em>s</em> to indicate a negative value if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n</td></tr><tr><td>\n<p>integral-digits</p>\n</td><td>\n<p>A series of digits ranging from 0 to 9 that specify the integral part of the number. The integral-digits element can be absent if the string contains the fractional-digits element. </p>\n</td></tr><tr><td>\n<p>,</p>\n</td><td>\n<p>A culture-specific group separator. The current culture's group separator symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref> flag</p>\n</td></tr><tr><td>\n<p>. </p>\n</td><td>\n<p>A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>fractional-digits</p>\n</td><td>\n<p>A series of digits ranging from 0 to 9 that specify the fractional part of the number. Fractional digits can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>E </p>\n</td><td>\n<p>The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. The <em>s</em> parameter can represent a number in exponential notation if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>exponential-digits</p>\n</td><td>\n<p>A series of digits ranging from 0 to 9 that specify an exponent. </p>\n</td></tr></tbody></table>\n<p>A string with digits only (which corresponds to the <xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref> style) always parses successfully. The remaining <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members control elements that may be present, but are not required to be present, in the input string. The following table indicates how individual <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> flags affect the elements that may be present in <em>s</em>. </p>\n<p>NumberStyles value</p>\n<p>Elements permitted in <em>s</em> in addition to digits</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The integral-digits element only.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The decimal point (.) and fractional-digits elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The \"e\" or \"E\" character, which indicates exponential notation. This flag by itself supports values in the form digitsEdigits; additional flags are needed to successfully parse strings with such elements as positive or negative signs and decimal point symbols.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the beginning of <em>s</em>.  </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the end of <em>s</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element at the beginning of <em>s</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element at the end of <em>s</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element in the form of parentheses enclosing the numeric value.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The thousands separator (,) element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The currency ($) element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Currency\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All elements. However, <em>s</em> cannot represent a hexadecimal number or a number in exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the beginning or end of <em>s</em>, sign at the beginning of <em>s</em>, and the decimal point (.) symbol. The <em>s</em> parameter can also use exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Number\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The <em>ws</em>, <em>sign</em>, thousands separator (,) and decimal point (.) elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Any\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All elements. However, <em>s</em> cannot represent a hexadecimal number.</p>\n</td></tr></tbody></table>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific information about the format of <em>value</em>. Typically, <em>provider</em> can be any one of the following: </p>\n<ul><li>\n<p>A <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the culture that provides numeric formatting information. Its <xref href=\"System.Globalization.CultureInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides numeric formatting information.</p>\n</li><li>\n<p>A <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides formatting information. (Its implementation of <xref href=\"System.Globalization.NumberFormatInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> just returns itself.)</p>\n</li><li>\n<p>A custom object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> and uses the <xref href=\"System.Globalization.NumberFormatInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate and return the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides formatting information.</p>\n</li></ul>\n<p>If <em>provider</em> is <strong>null</strong>, the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the current culture is used.</p>\n<p>If a separator is encountered in the <em>s</em> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref href=\"System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NumberDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.CurrencyGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.NumberFormatInfo.NumberGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to parse the string representations of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values. Each string in an array is parsed using the formatting conventions of the en-US, nl-NL, and a custom culture. The custom culture defines its group separator symbol as the underscore (\"_\") and its group size as two.</p>System.Single.Parse#4"
  syntax:
    content: public static float Parse(string s, NumberStyles style, IFormatProvider provider)
    content.vb: Public Shared Function Parse(s As String, style As NumberStyles, provider As IFormatProvider) As Single
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string that contains a number to convert. </p>\n"
    - id: style
      type: System.Globalization.NumberStyles
      description: "\n<p>A bitwise combination of enumeration values that indicates the style elements that can be present in <em>s</em>. A typical value to specify is <xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref> combined with <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information about <em>s</em>. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number equivalent to the numeric value or symbol specified in <em>s</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>s</em> does not represent a numeric value. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>style</em> is not a <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n<p>-or-</p>\n<p>\n<em>style</em> is the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>s</em> represents a number that is less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Single.ToString
    commentId: M:System.Single.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.Parse(System.String,System.IFormatProvider)
  commentId: M:System.Single.Parse(System.String,System.IFormatProvider)
  id: Parse(System.String,System.IFormatProvider)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: Parse(String, IFormatProvider)
  fullName: System.Single.Parse(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1460
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified culture-specific format to its single-precision floating-point number equivalent.</p>\n"
  remarks: "\n<p>This overload is typically used to convert text that can be formatted in a variety of ways to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value. For example, it can be used to convert the text entered by a user into an HTML text box to a numeric value.</p>\n<p>The <em>s</em> parameter is interpreted using a combination of the <xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref> flags. The <em>s</em> parameter can contain <xref href=\"System.Globalization.NumberFormatInfo.PositiveInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NegativeInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Globalization.NumberFormatInfo.NaNSymbol\" data-throw-if-not-resolved=\"false\"></xref> for the culture specified by <em>provider</em>, or it can contain a string of the form: </p>\n<p>[ws][sign]integral-digits[.[fractional-digits]][E[sign]exponential-digits][ws] </p>\n<p>Optional elements are framed in square brackets ([ and ]). Elements that contain the term \"digits\" consist of a series of numeric characters ranging from 0 to 9.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>A series of white-space characters. </p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>A negative sign symbol (-) or a positive sign symbol (+). </p>\n</td></tr><tr><td>\n<p>integral-digits</p>\n</td><td>\n<p>A series of digits ranging from 0 to 9 that specify the integral part of the number. Runs of integral-digits can be partitioned by a group-separator symbol. For example, in some cultures a comma (,) separates groups of thousands. The integral-digits element can be absent if the string contains the fractional-digits element. </p>\n</td></tr><tr><td>\n<p>. </p>\n</td><td>\n<p>A culture-specific decimal point symbol. </p>\n</td></tr><tr><td>\n<p>fractional-digits</p>\n</td><td>\n<p>A series of digits ranging from 0 to 9 that specify the fractional part of the number. </p>\n</td></tr><tr><td>\n<p>E </p>\n</td><td>\n<p>The \"e\" or \"E\" character, which indicates that the value is represented in exponential (scientific) notation. </p>\n</td></tr><tr><td>\n<p>exponential-digits</p>\n</td><td>\n<p>A series of digits ranging from 0 to 9 that specify an exponent. </p>\n</td></tr></tbody></table>\n<p>For more information about numeric formats, see the Formatting Types in the .NET Framework topic.</p>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation whose <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information. When the <xref href=\"System.Single.Parse(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method is invoked, it calls the <em>provider</em> parameter's <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method and passes it a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> type. The <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method then returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides information about the format of the <em>s</em> parameter. There are three ways to use the <em>provider</em> parameter to supply custom formatting information to the parse operation: </p>\n<ul><li>\n<p>You can pass a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the culture that supplies formatting information. Its <xref href=\"System.Globalization.CultureInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides numeric formatting information for that culture.</p>\n</li><li>\n<p>You can pass the actual <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides numeric formatting information. (Its implementation of <xref href=\"System.Globalization.NumberFormatInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> just returns itself.)</p>\n</li><li>\n<p>You can pass a custom object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method instantiates and returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides formatting information.</p>\n</li></ul>\n<p>If <em>provider</em> is <strong>null</strong> or a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> cannot be obtained, the formatting information for the current system culture is used.</p>\n<p>If a separator is encountered in the <em>s</em> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref href=\"System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NumberDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.CurrencyGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.NumberFormatInfo.NumberGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Some examples of <em>s</em> are \"100\", \"-123,456,789\", \"123.45e+6\", \"+500\", \"5e2\", \"3.1416\", \"600.\", \"-.123\", and \"-Infinity\".</p>\n"
  example:
  - "\n<p>The following example is the button click event handler of a Web form. It uses the array returned by the <xref href=\"System.Web.HttpRequest.UserLanguages\" data-throw-if-not-resolved=\"false\"></xref> property to determine the user's locale. It then instantiates a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that corresponds to that locale. The <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that belongs to that <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object is then passed to the <xref href=\"System.Single.Parse(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method to convert the user's input to a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value. </p>ParseMethod#1"
  syntax:
    content: public static float Parse(string s, IFormatProvider provider)
    content.vb: Public Shared Function Parse(s As String, provider As IFormatProvider) As Single
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string that contains a number to convert. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information about <em>s</em>. </p>\n"
    return:
      type: System.Single
      description: "\n<p>A single-precision floating-point number equivalent to the numeric value or symbol specified in <em>s</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>s</em> does not represent a number in a valid format. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>\n<em>s</em> represents a number less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Single.ToString
    commentId: M:System.Single.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Single.System#IComparable#CompareTo(System.Object)
  commentId: M:System.Single.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  fullName: System.Single.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1461
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IComparable.CompareTo(object value)
    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: System.Single.System#IConvertible#GetTypeCode
  commentId: M:System.Single.System#IConvertible#GetTypeCode
  id: System#IConvertible#GetTypeCode
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.GetTypeCode()
  fullName: System.Single.System.IConvertible.GetTypeCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.GetTypeCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1462
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: TypeCode IConvertible.GetTypeCode()
    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode
    return:
      type: System.TypeCode
  implements:
  - System.IConvertible.GetTypeCode
  name.vb: System.IConvertible.GetTypeCode()
- uid: System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToBoolean(System.IFormatProvider)
  id: System#IConvertible#ToBoolean(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToBoolean(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToBoolean(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToBoolean
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1463
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToBoolean(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: bool IConvertible.ToBoolean(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the current instance is not zero; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.IConvertible.ToBoolean(System.IFormatProvider)
  name.vb: System.IConvertible.ToBoolean(IFormatProvider)
- uid: System.Single.System#IConvertible#ToByte(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToByte(System.IFormatProvider)
  id: System#IConvertible#ToByte(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToByte(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToByte
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1464
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToByte(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: byte IConvertible.ToByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Byte
      description: "\n<p>The value of the current instance, converted to a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToByte(IFormatProvider)
- uid: System.Single.System#IConvertible#ToChar(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToChar(System.IFormatProvider)
  id: System#IConvertible#ToChar(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToChar(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToChar(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToChar
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1465
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: char IConvertible.ToChar(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Char
      description: "\n<p>This conversion is not supported. No value is returned.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases.</p>\n"
  implements:
  - System.IConvertible.ToChar(System.IFormatProvider)
  name.vb: System.IConvertible.ToChar(IFormatProvider)
- uid: System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToDateTime(System.IFormatProvider)
  id: System#IConvertible#ToDateTime(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToDateTime(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToDateTime(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToDateTime
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1466
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>This conversion is not supported. Attempting to use this method throws an <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.DateTime
      description: "\n<p>This conversion is not supported. No value is returned.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>In all cases.</p>\n"
  implements:
  - System.IConvertible.ToDateTime(System.IFormatProvider)
  name.vb: System.IConvertible.ToDateTime(IFormatProvider)
- uid: System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToDecimal(System.IFormatProvider)
  id: System#IConvertible#ToDecimal(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToDecimal(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToDecimal(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToDecimal
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1467
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToDecimal(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToDecimal(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: decimal IConvertible.ToDecimal(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The value of the current instance, converted to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToDecimal(System.IFormatProvider)
  name.vb: System.IConvertible.ToDecimal(IFormatProvider)
- uid: System.Single.System#IConvertible#ToDouble(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToDouble(System.IFormatProvider)
  id: System#IConvertible#ToDouble(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToDouble(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToDouble(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToDouble
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1468
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToDouble(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToDouble(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: double IConvertible.ToDouble(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The value of the current instance, converted to a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToDouble(System.IFormatProvider)
  name.vb: System.IConvertible.ToDouble(IFormatProvider)
- uid: System.Single.System#IConvertible#ToInt16(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToInt16(System.IFormatProvider)
  id: System#IConvertible#ToInt16(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt16(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToInt16
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1469
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToInt16(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: short IConvertible.ToInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Int16
      description: "\n<p>The value of the current instance, converted to an <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt16(IFormatProvider)
- uid: System.Single.System#IConvertible#ToInt32(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToInt32(System.IFormatProvider)
  id: System#IConvertible#ToInt32(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt32(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToInt32
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1470
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToInt32(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: int IConvertible.ToInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The value of the current instance, converted to an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt32(IFormatProvider)
- uid: System.Single.System#IConvertible#ToInt64(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToInt64(System.IFormatProvider)
  id: System#IConvertible#ToInt64(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt64(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToInt64
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1471
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToInt64(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: long IConvertible.ToInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The value of the current instance, converted to an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt64(IFormatProvider)
- uid: System.Single.System#IConvertible#ToSByte(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToSByte(System.IFormatProvider)
  id: System#IConvertible#ToSByte(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToSByte(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToSByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToSByte
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1472
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToSByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToSByte(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: sbyte IConvertible.ToSByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.SByte
      description: "\n<p>The value of the current instance, converted to an <xref href=\"System.SByte\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToSByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToSByte(IFormatProvider)
- uid: System.Single.System#IConvertible#ToSingle(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToSingle(System.IFormatProvider)
  id: System#IConvertible#ToSingle(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToSingle(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToSingle(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToSingle
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1473
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToSingle(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: float IConvertible.ToSingle(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The value of the current instance, unchanged.</p>\n"
  implements:
  - System.IConvertible.ToSingle(System.IFormatProvider)
  name.vb: System.IConvertible.ToSingle(IFormatProvider)
- uid: System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToType(Type, IFormatProvider)
  fullName: System.Single.System.IConvertible.ToType(System.Type, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToType
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1474
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <strong>static</strong> (<strong>Shared</strong> in Visual Basic) <xref href=\"System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: object IConvertible.ToType(Type type, IFormatProvider provider)
    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type to which to convert this <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies information about the format of the returned value.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value of the current instance, converted to <em>type</em>.</p>\n"
  implements:
  - System.IConvertible.ToType(System.Type,System.IFormatProvider)
  name.vb: System.IConvertible.ToType(Type, IFormatProvider)
- uid: System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToUInt16(System.IFormatProvider)
  id: System#IConvertible#ToUInt16(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt16(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToUInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToUInt16
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1475
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToUInt16(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: ushort IConvertible.ToUInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.UInt16
      description: "\n<p>The value of the current instance, converted to a <xref href=\"System.UInt16\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToUInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt16(IFormatProvider)
- uid: System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToUInt32(System.IFormatProvider)
  id: System#IConvertible#ToUInt32(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt32(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToUInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToUInt32
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1476
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToUInt32(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: uint IConvertible.ToUInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.UInt32
      description: "\n<p>The value of the current instance, converted to a <xref href=\"System.UInt32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToUInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt32(IFormatProvider)
- uid: System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)
  commentId: M:System.Single.System#IConvertible#ToUInt64(System.IFormatProvider)
  id: System#IConvertible#ToUInt64(System.IFormatProvider)
  isEii: true
  parent: System.Single
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt64(IFormatProvider)
  fullName: System.Single.System.IConvertible.ToUInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToUInt64
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1477
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToUInt64(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: ulong IConvertible.ToUInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.UInt64
      description: "\n<p>The value of the current instance, converted to a <xref href=\"System.UInt64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToUInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt64(IFormatProvider)
- uid: System.Single.ToString
  commentId: M:System.Single.ToString
  id: ToString
  parent: System.Single
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Single.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1478
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the numeric value of this instance to its equivalent string representation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Single.ToString\" data-throw-if-not-resolved=\"false\"></xref> method formats a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value in the default (\"G\", or general) format of the current culture. If you want to specify a different format or culture, use the other overloads of the <xref href=\"System.Single.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, as follows: </p>\n<p>To use format</p>\n<p>For culture</p>\n<p>Use the overload</p>\n<p></p>\n<p>The return value can be <xref href=\"System.Globalization.NumberFormatInfo.PositiveInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NegativeInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NaNSymbol\" data-throw-if-not-resolved=\"false\"></xref>, or a string of the form: </p>\n<p>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits] </p>\n<p>Optional elements are framed in square brackets ([ and ]). Elements that contain the term \"digits\" consist of a series of numeric characters ranging from 0 to 9. The following table lists each element:</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>sign</p>\n</td><td>\n<p>A negative sign or positive sign symbol. </p>\n</td></tr><tr><td>\n<p>integral-digits</p>\n</td><td>\n<p>A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits. </p>\n</td></tr><tr><td>\n<p> '.' </p>\n</td><td>\n<p>A culture-specific decimal point symbol. </p>\n</td></tr><tr><td>\n<p>fractional-digits</p>\n</td><td>\n<p>A series of digits specifying the fractional part of the number. </p>\n</td></tr><tr><td>\n<p> 'e' </p>\n</td><td>\n<p>A lowercase character 'e', indicating exponential (scientific) notation. </p>\n</td></tr><tr><td>\n<p>exponential-digits</p>\n</td><td>\n<p>A series of digits specifying an exponent. </p>\n</td></tr></tbody></table>\n<p>Some examples of the return value are \"100\", \"-123,456,789\", \"123.45e+6\", \"500\", \"3.1416\", \"600\", \"-0.123\", and \"-Infinity\".</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example uses the default <xref href=\"System.Single.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to display the string representations of a number of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values.</p>System.Single.ToString#1<p>The following code example illustrates the use of the <xref href=\"System.Single.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method along with the <xref href=\"System.Single.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Single#3"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The string representation of the value of this instance.</p>\n"
  overridden: System.ValueType.ToString
  seealso:
  - type: System.Single.Parse(System.String)
    commentId: M:System.Single.Parse(System.String)
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Single.ToString(System.IFormatProvider)
  commentId: M:System.Single.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  fullName: System.Single.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1479
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the numeric value of this instance to its equivalent string representation using the specified culture-specific format information.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Single.ToString(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method formats a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value in the default (\"G\", or general) format of a specified culture. If you want to specify a different format or the current culture, use the other overloads of the <xref href=\"System.Single.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, as follows:</p>\n<p>To use format</p>\n<p>For culture</p>\n<p>Use the overload</p>\n<p></p>\n<p>The return value can be <xref href=\"System.Globalization.NumberFormatInfo.PositiveInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NegativeInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NaNSymbol\" data-throw-if-not-resolved=\"false\"></xref>, or a string of the form: </p>\n<p>[sign]integral-digits[.[fractional-digits]][e[sign]exponential-digits] </p>\n<p>Optional elements are framed in square brackets ([ and ]). Elements containing the term \"digits\" consist of a series of numeric characters ranging from 0 to 9. The following table lists each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p> sign</p>\n</td><td>\n<p>A negative sign or positive sign symbol. </p>\n</td></tr><tr><td>\n<p> integral-digits</p>\n</td><td>\n<p>A series of digits specifying the integral part of the number. Integral-digits can be absent if there are fractional-digits. </p>\n</td></tr><tr><td>\n<p> '.' </p>\n</td><td>\n<p>A culture-specific decimal point symbol. </p>\n</td></tr><tr><td>\n<p> fractional-digits</p>\n</td><td>\n<p>A series of digits specifying the fractional part of the number. </p>\n</td></tr><tr><td>\n<p> 'e' </p>\n</td><td>\n<p>A lowercase character 'e', indicating exponential (scientific) notation. </p>\n</td></tr><tr><td>\n<p> exponential-digits</p>\n</td><td>\n<p>A series of digits specifying an exponent. </p>\n</td></tr></tbody></table>\n<p>Some examples of the return value are \"100\", \"-123,456,789\", \"123.45e+6\", \"500\", \"3.1416\", \"600\", \"-0.123\", and \"-Infinity\".</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation whose <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. Typically, <em>provider</em> is a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object or a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <em>provider</em> parameter supplies culture-specific information used in formatting. If <em>provider</em> is <strong>null</strong>, the return value is formatted using the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> data for the current culture.</p>\n<p>To convert a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value to its string representation using a specified culture and a specific format string, call the <xref href=\"System.Single.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example displays the string representation of two <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values using <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> objects that represent several different cultures.</p>System.Single.ToString#2"
  syntax:
    content: public string ToString(IFormatProvider provider)
    content.vb: Public Function ToString(provider As IFormatProvider) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the value of this instance as specified by <em>provider</em>.</p>\n"
  seealso:
  - type: System.Single.Parse(System.String)
    commentId: M:System.Single.Parse(System.String)
  - type: System.String
    commentId: T:System.String
  implements:
  - System.IConvertible.ToString(System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Single.ToString(System.String)
  commentId: M:System.Single.ToString(System.String)
  id: ToString(System.String)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: ToString(String)
  fullName: System.Single.ToString(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1480
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the numeric value of this instance to its equivalent string representation, using the specified format.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Single.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method formats a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value in a specified format by using the conventions of the current culture. If you want to use the default (\"G\", or general) format or specify a different culture, use the other overloads of the <xref href=\"System.Single.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, as follows:</p>\n<p>To use format</p>\n<p>For culture</p>\n<p>Use the overload</p>\n<p></p>\n<p>The return value can be <xref href=\"System.Globalization.NumberFormatInfo.PositiveInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NegativeInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NaNSymbol\" data-throw-if-not-resolved=\"false\"></xref>, or the string representation of the value of the current instance, as specified by <em>format</em>.</p>\n<p>The <em>format</em> parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers. If format is <strong>null</strong> or an empty string, the return value is formatted with the general numeric format specifier (\"G\").</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>By default, the return value only contains 7 digits of precision although a maximum of 9 digits is maintained internally. If the value of this instance has greater than 7 digits, <xref href=\"System.Single.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> returns <xref href=\"System.Globalization.NumberFormatInfo.PositiveInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.NumberFormatInfo.NegativeInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref> instead of the expected number. If you require more precision, specify <em>format</em> with the \"G9\" format specification, which always returns 9 digits of precision, or \"R\", which returns 7 digits if the number can be represented with that precision or 9 digits if the number can only be represented with maximum precision.</p>\n"
  example:
  - "\n<p>The following example defines a numeric value and formats it as a currency value by using the \"C\" standard numeric format string and as a numeric value to three decimal places by using the \"N\" standard numeric format string. The result strings are formatted by using the conventions of the en-US culture. For more information on numeric format strings, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>System.Single.ToString#7"
  - "\n<p>The following example displays several <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values using each of the supported standard numeric format specifiers together with two custom numeric format strings. One of those custom format strings illustrates how to pad a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value with leading zeros. In converting the numeric values to strings, the example uses the formatting conventions of the en-US culture.</p>System.Single.ToString#3"
  syntax:
    content: public string ToString(string format)
    content.vb: Public Function ToString(format As String) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A numeric format string.</p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the value of this instance as specified by <em>format</em>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n"
  seealso:
  - type: System.Single.Parse(System.String)
    commentId: M:System.Single.Parse(System.String)
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Single.ToString(System.String,System.IFormatProvider)
  commentId: M:System.Single.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  fullName: System.Single.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1481
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the numeric value of this instance to its equivalent string representation using the specified format and culture-specific format information.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Single.ToString(System.String,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method formats a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value in a specified format of a specified culture. If you want to use default format or culture settings, use the other overloads of the <xref href=\"System.Single.ToString(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, as follows:</p>\n<p>To use format</p>\n<p>For culture</p>\n<p>Use the overload</p>\n<p></p>\n<p>The return value can be <xref href=\"System.Globalization.NumberFormatInfo.PositiveInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NegativeInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NaNSymbol\" data-throw-if-not-resolved=\"false\"></xref>, or the string representation of the value of the current instance, as specified by <em>format</em>.</p>\n<p>The <em>format</em> parameter can be any valid standard numeric format specifier except for D and X, as well as any combination of custom numeric format specifiers. If <em>format</em> is <strong>null</strong> or an empty string, the return value for this instance is formatted with the general numeric format specifier (\"G\").</p>\n<p>The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics:</p>\n<ul><li>\n<p>For more information about numeric format specifiers, see Standard Numeric Format Strings and Custom Numeric Format Strings. </p>\n</li><li>\n<p>For more information about formatting, see Formatting Types in the .NET Framework. </p>\n</li></ul>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation whose <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. Typically, <em>provider</em> is a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object or a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object. The <em>provider</em> parameter supplies culture-specific information used in formatting. If <em>provider</em> is <strong>null</strong>, the return value is formatted with the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the current culture.</p>\n<p>By default, the return value only contains 7 digits of precision although a maximum of 9 digits is maintained internally. If the value of this instance has greater than 7 digits, <see cref=\"Overload:System.Single.ToString\"></see> returns <xref href=\"System.Globalization.NumberFormatInfo.PositiveInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.NumberFormatInfo.NegativeInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref> instead of the expected number. If you require more precision, specify <em>format</em> with the \"G9\" format specification, which always returns 9 digits of precision, or \"R\", which returns 7 digits if the number can be represented with that precision or 9 digits if the number can only be represented with maximum precision.</p>\n"
  example:
  - "\n<p>The following example displays a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value using each of the supported standard numeric format specifiers for several different cultures.</p>System.Single.ToString#4"
  syntax:
    content: public string ToString(string format, IFormatProvider provider)
    content.vb: Public Function ToString(format As String, provider As IFormatProvider) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A numeric format string.</p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the value of this instance as specified by <em>format</em> and <em>provider</em>.</p>\n"
  seealso:
  - type: System.Single.Parse(System.String)
    commentId: M:System.Single.Parse(System.String)
  - type: System.String
    commentId: T:System.String
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)
  commentId: M:System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)
  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: TryParse(String, NumberStyles, IFormatProvider, out Single)
  fullName: System.Single.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, out System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1482
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a number in a specified style and culture-specific format to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</p>\n"
  remarks: "\n<p>This overload differs from the <xref href=\"System.Single.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value. It eliminates the need to use exception handling to test for a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> in the event that <em>s</em> is invalid and cannot be successfully parsed.</p>\n<p>The <em>style</em> parameter defines the allowable format of the <em>s</em> parameter for the parse operation to succeed. It must be a combination of bit flags from the <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumeration. The following <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members are not supported:</p>\n<ul><li>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>The <em>s</em> parameter can contain <xref href=\"System.Globalization.NumberFormatInfo.PositiveInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NegativeInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NaNSymbol\" data-throw-if-not-resolved=\"false\"></xref> for the culture indicated by <em>provider</em>. In addition, depending on the value of <em>style</em>, the <em>s</em> parameter may include the following elements: </p>\n<p>[ws] [$] [sign][integral-digits,]integral-digits[.fractional-digits][e[sign]exponential-digits][ws] </p>\n<p>Elements in square brackets ([ and ]) are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>Optional white space. White space can appear at the beginning of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag. It can appear at the end of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>$</p>\n</td><td>\n<p>A culture-specific currency symbol. Its position in the string is defined by the <xref href=\"System.Globalization.NumberFormatInfo.CurrencyNegativePattern\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.NumberFormatInfo.CurrencyPositivePattern\" data-throw-if-not-resolved=\"false\"></xref> properties of the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method of the <em>provider</em> parameter. The currency symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>An optional sign. The sign can appear at the beginning of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref> flag, and it can appear at the end of <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref> flag. Parentheses can be used in <em>s</em> to indicate a negative value if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>integral-digits</p>\n</td><td>\n<p>A series of digits ranging from 0 to 9 that specify the integral part of the number. Integral-digits can be absent if there are fractional-digits.</p>\n</td></tr><tr><td>\n<p>,</p>\n</td><td>\n<p>A culture-specific thousands separator symbol. The current culture's thousands separator symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>.</p>\n</td><td>\n<p>A culture-specific decimal point symbol. The current culture's decimal point symbol can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>fractional-digits</p>\n</td><td>\n<p>A series of digits ranging from 0 to 9 that specify the fractional part of the number. Fractional digits can appear in <em>s</em> if <em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>e</p>\n</td><td>\n<p>The e or E character, which indicates that <em>s</em> can represent a number using exponential notation. The <em>s</em> parameter can represent a number in exponential notation if style includes the <xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n</td></tr><tr><td>\n<p>exponential-digits</p>\n</td><td>\n<p>A series of digits ranging from 0 to 9 that specify an exponent. </p>\n</td></tr></tbody></table>\n<p>A string with digits only (which corresponds to the <xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref> style) always parses successfully. The remaining <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> members control elements that may be but are not required to be present in the input string. The following table indicates how individual <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> flags affect the elements that may be present in <em>s</em>.</p>\n<p>NumberStyles value</p>\n<p>Elements permitted in s in addition to digits</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.None\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The integral-digits element only.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowDecimalPoint\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The . and fractional-digits elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowExponent\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The <em>s</em> parameter can also use exponential notation. This flag by itself supports values in the form integral-digitsEexponential-digits; additional flags are needed to successfully parse strings in exponential notation with such elements as positive or negative signs and decimal point symbols.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the beginning of <em>s</em>.  </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingWhite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the end of <em>s</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowLeadingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element at the beginning of <em>s</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowTrailingSign\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element at the end of <em>s</em>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowParentheses\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The sign element in the form of parentheses enclosing the numeric value.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The , element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.AllowCurrencySymbol\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The $ element.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Currency\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All. The <em>s</em> parameter cannot represent a hexadecimal number or a number in exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The ws element at the beginning or end of <em>s</em>, sign at the beginning of <em>s</em>, and the . symbol. The <em>s</em> parameter can also use exponential notation.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Number\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The <em>ws</em>, <em>sign</em>, thousands separator (,), and decimal point (.) elements.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Globalization.NumberStyles.Any\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>All styles, except <em>s</em> cannot represent a hexadecimal number.</p>\n</td></tr></tbody></table>\n<p>The <em>provider</em> parameter is an <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> implementation whose <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides culture-specific formatting information. When the <xref href=\"System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)\" data-throw-if-not-resolved=\"false\"></xref> method is invoked, it calls the <em>provider</em> parameter's <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method and passes it a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> type. The <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method then returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides information about the format of the <em>s</em> parameter. There are three ways to use the <em>provider</em> parameter to supply custom formatting information to the parse operation: </p>\n<ul><li>\n<p>You can pass a <xref href=\"System.Globalization.CultureInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the culture that supplies formatting information. Its <xref href=\"System.Globalization.CultureInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides numeric formatting information for that culture.</p>\n</li><li>\n<p>You can pass the actual <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides numeric formatting information. (Its implementation of <xref href=\"System.Globalization.NumberFormatInfo.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> just returns itself.)</p>\n</li><li>\n<p>You can pass a custom object that implements <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref>. Its <xref href=\"System.IFormatProvider.GetFormat(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method instantiates and returns the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that provides formatting information.</p>\n</li></ul>\n<p>If <em>provider</em> is <strong>null</strong>, the formatting of <em>s</em> is interpreted based on the <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object of the current culture.</p>\n<p>If a separator is encountered in the <em>s</em> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref href=\"System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NumberDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.CurrencyGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.NumberFormatInfo.NumberGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the use of the <xref href=\"System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)\" data-throw-if-not-resolved=\"false\"></xref> method to parse the string representation of numbers that have a particular style and are formatted using the conventions of a particular culture.</p>System.Single.TryParse#2"
  syntax:
    content: public static bool TryParse(string s, NumberStyles style, IFormatProvider provider, out float result)
    content.vb: Public Shared Function TryParse(s As String, style As NumberStyles, provider As IFormatProvider, ByRef result As Single) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string representing a number to convert. </p>\n"
    - id: style
      type: System.Globalization.NumberStyles
      description: "\n<p>A bitwise combination of enumeration values that indicates the permitted format of <em>s</em>. A typical value to specify is <xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref> combined with <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information about <em>s</em>. </p>\n"
    - id: result
      type: System.Single
      description: "\n<p>When this method returns, contains the single-precision floating-point number equivalent to the numeric value or symbol contained in <em>s</em>, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <em>s</em> parameter is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, is not in a format compliant with <em>style</em>, represents a number less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>, or if <em>style</em> is not a valid combination of <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> enumerated constants. This parameter is passed uninitialized; any value originally supplied in <em>result</em> will be overwritten.  </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>style</em> is not a <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n<p>-or-</p>\n<p>\n<em>style</em> is the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.Single.Parse(System.String)
    commentId: M:System.Single.Parse(System.String)
  - type: System.Single.ToString
    commentId: M:System.Single.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Single.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, ByRef System.Single)
  name.vb: TryParse(String, NumberStyles, IFormatProvider, ByRef Single)
- uid: System.Single.TryParse(System.String,System.Single@)
  commentId: M:System.Single.TryParse(System.String,System.Single@)
  id: TryParse(System.String,System.Single@)
  parent: System.Single
  langs:
  - csharp
  - vb
  name: TryParse(String, out Single)
  fullName: System.Single.TryParse(System.String, out System.Single)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1483
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a number to its single-precision floating-point number equivalent. A return value indicates whether the conversion succeeded or failed.</p>\n"
  remarks: "\n<p>This overload differs from the <xref href=\"System.Single.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method by returning a Boolean value that indicates whether the parse operation succeeded instead of returning the parsed numeric value. It eliminates the need to use exception handling to test for a <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref> in the event that <em>s</em> is invalid and cannot be successfully parsed.</p>\n<p>The <em>s</em> parameter can contain <xref href=\"System.Globalization.NumberFormatInfo.PositiveInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NegativeInfinitySymbol\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NaNSymbol\" data-throw-if-not-resolved=\"false\"></xref> (the string comparison is case-sensitive), or a string of the form: </p>\n<p>[ws][sign][integral-digits,]integral-digits[.[fractional-digits]][e[sign]exponential-digits][ws]</p>\n<p>Elements in square brackets are optional. The following table describes each element.</p>\n<p>Element</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>ws</p>\n</td><td>\n<p>A series of white-space characters. </p>\n</td></tr><tr><td>\n<p>sign</p>\n</td><td>\n<p>A negative sign or positive sign symbol. </p>\n</td></tr><tr><td>\n<p>integral-digits</p>\n</td><td>\n<p>A series of numeric characters ranging from 0 to 9 that specify the integral part of the number. Integral-digits can be absent if there are fractional-digits. </p>\n</td></tr><tr><td>\n<p>,</p>\n</td><td>\n<p>A culture-specific group separator symbol.</p>\n</td></tr><tr><td>\n<p>. </p>\n</td><td>\n<p>A culture-specific decimal point symbol. </p>\n</td></tr><tr><td>\n<p>fractional-digits</p>\n</td><td>\n<p>A series of numeric characters ranging from 0 to 9 that specify the fractional part of the number. </p>\n</td></tr><tr><td>\n<p>E</p>\n</td><td>\n<p>An uppercase or lowercase character 'e', that indicates exponential (scientific) notation. </p>\n</td></tr><tr><td>\n<p>exponential-digits</p>\n</td><td>\n<p>A series of numeric characters ranging from 0 to 9 that specify an exponent. </p>\n</td></tr></tbody></table>\n<p>The <em>s</em> parameter is interpreted using a combination of the <xref href=\"System.Globalization.NumberStyles.Float\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Globalization.NumberStyles.AllowThousands\" data-throw-if-not-resolved=\"false\"></xref> flags. This means that white space and thousands separators are allowed but currency symbols are not. To explicitly define the elements (such as currency symbols, thousands separators, and white space) that can be present in <em>s</em>, use the <xref href=\"System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)\" data-throw-if-not-resolved=\"false\"></xref> method overload.</p>\n<p>The <em>s</em> parameter is parsed using the formatting information in a <xref href=\"System.Globalization.NumberFormatInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is initialized for the current system culture. For more information, see <xref href=\"System.Globalization.NumberFormatInfo.CurrentInfo\" data-throw-if-not-resolved=\"false\"></xref>. To parse a string using the formatting information of some other specified culture, use the <xref href=\"System.Single.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)\" data-throw-if-not-resolved=\"false\"></xref> method overload.</p>\n<p>Ordinarily, if you pass the <see cref=\"Overload:System.Single.TryParse\"></see> method a string that is created by calling the <see cref=\"Overload:System.Single.ToString\"></see> method, the original <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value is returned. However, because of a loss of precision, the values may not be equal. </p>\n<p>If a separator is encountered in the <em>s</em> parameter during a parse operation, and the applicable currency or number decimal and group separators are the same, the parse operation assumes that the separator is a decimal separator rather than a group separator. For more information about separators, see <xref href=\"System.Globalization.NumberFormatInfo.CurrencyDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.NumberDecimalSeparator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.NumberFormatInfo.CurrencyGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.NumberFormatInfo.NumberGroupSeparator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Single.TryParse(System.String,System.Single@)\" data-throw-if-not-resolved=\"false\"></xref> method to convert the string representations of numeric values to <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values. It assumes that en-US is the current culture. </p>System.Single.TryParse#1"
  syntax:
    content: public static bool TryParse(string s, out float result)
    content.vb: Public Shared Function TryParse(s As String, ByRef result As Single) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string representing a number to convert. </p>\n"
    - id: result
      type: System.Single
      description: "\n<p>When this method returns, contains single-precision floating-point number equivalent to the numeric value or symbol contained in <em>s</em>, if the conversion succeeded, or zero if the conversion failed. The conversion fails if the <em>s</em> parameter is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, is not a number in a valid format, or represents a number less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. This parameter is passed uninitialized; any value originally supplied in <em>result</em> will be overwritten.  </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>s</em> was converted successfully; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Single.Parse(System.String)
    commentId: M:System.Single.Parse(System.String)
  - type: System.Single.ToString
    commentId: M:System.Single.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Single.TryParse(System.String, ByRef System.Single)
  name.vb: TryParse(String, ByRef Single)
- uid: System.Single.MinValue
  commentId: F:System.Single.MinValue
  id: MinValue
  parent: System.Single
  langs:
  - csharp
  - vb
  name: MinValue
  fullName: System.Single.MinValue
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MinValue
    path: src/System.Runtime/ref/System.Runtime.Manual.cs
    startLine: 20
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the smallest possible value of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>. This field is constant.</p>\n"
  remarks: "\n<p>The value of this constant is negative 3.402823e38.</p>\n<p>The result of an operation that is less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref>  is <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>. In the following example, <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref> results from subtraction and multiplication operations when the result is less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>System.Single.MinValue#1"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref> constant.</p>System.Single#5"
  syntax:
    content: public const float MinValue = -3.40282347E+38F
    content.vb: Public Const MinValue As Single = -3.40282347E+38F
    return:
      type: System.Single
  seealso:
  - type: System.Single.MaxValue
    commentId: F:System.Single.MaxValue
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Single.Epsilon
  commentId: F:System.Single.Epsilon
  id: Epsilon
  parent: System.Single
  langs:
  - csharp
  - vb
  name: Epsilon
  fullName: System.Single.Epsilon
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Epsilon
    path: src/System.Runtime/ref/System.Runtime.Manual.cs
    startLine: 21
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the smallest positive <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value that is greater than zero. This field is constant.</p>\n"
  remarks: "\n<p>The value of the <xref href=\"System.Single.Epsilon\" data-throw-if-not-resolved=\"false\"></xref> property reflects the smallest positive <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value that is significant in numeric operations or comparisons when the value of the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instance is zero. For example, the following code shows that zero and <xref href=\"System.Single.Epsilon\" data-throw-if-not-resolved=\"false\"></xref> are considered to be unequal values, whereas zero and half the value of <xref href=\"System.Single.Epsilon\" data-throw-if-not-resolved=\"false\"></xref> are considered to be equal.</p>System.Single.Epsilon#5<p>More precisely, the single-precision floating-point format consists of a sign, a 23-bit mantissa or significand, and an 8-bit exponent. As the following example shows, zero has an exponent of -126 and a mantissa of 0. <xref href=\"System.Single.Epsilon\" data-throw-if-not-resolved=\"false\"></xref> has an exponent of -126 and a mantissa of 1. This means that <xref href=\"System.Single.Epsilon\" data-throw-if-not-resolved=\"false\"></xref> is the smallest positive <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> value that is greater than zero and represents the smallest possible value and the smallest possible increment for a <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> whose exponent is -126. </p>System.Single.Epsilon#6<p>However, the <xref href=\"System.Single.Epsilon\" data-throw-if-not-resolved=\"false\"></xref> property is not a general measure of precision of the <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> type; it applies only to <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> instances that have a value of zero. </p><p>The value of the <xref href=\"System.Single.Epsilon\" data-throw-if-not-resolved=\"false\"></xref> property is not equivalent to machine epsilon, which represents the upper bound of the relative error due to rounding in floating-point arithmetic.</p><p>The value of this constant is 1.4e-45. </p><p>Two apparently equivalent floating-point numbers might not compare equal because of differences in their least significant digits. For example, the C# expression, <code>(float)1/3 == (float)0.33333</code>, does not compare equal because the division operation on the left side has maximum precision while the constant on the right side is precise only to the specified digits. If you create a custom algorithm that determines whether two floating-point numbers can be considered equal, you must use a value that is greater than the <xref href=\"System.Single.Epsilon\" data-throw-if-not-resolved=\"false\"></xref> constant to establish the acceptable absolute margin of difference for the two values to be considered equal. (Typically, that margin of difference is many times greater than <xref href=\"System.Single.Epsilon\" data-throw-if-not-resolved=\"false\"></xref>.) </p>"
  example:
  - 
  syntax:
    content: public const float Epsilon = 1.401298E-45F
    content.vb: Public Const Epsilon As Single = 1.401298E-45F
    return:
      type: System.Single
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Single.MaxValue
  commentId: F:System.Single.MaxValue
  id: MaxValue
  parent: System.Single
  langs:
  - csharp
  - vb
  name: MaxValue
  fullName: System.Single.MaxValue
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxValue
    path: src/System.Runtime/ref/System.Runtime.Manual.cs
    startLine: 22
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the largest possible value of <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref>. This field is constant.</p>\n"
  remarks: "\n<p>The value of this constant is positive 3.40282347E+38.</p>\n<p>The result of an operation that exceeds <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>. In the following example, <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> results from addition, multiplication, and exponentiation operations when the result exceeds <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>System.Single.MaxValue#1"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> constant.</p>System.Single#4"
  syntax:
    content: public const float MaxValue = 3.40282347E+38F
    content.vb: Public Const MaxValue As Single = 3.40282347E+38F
    return:
      type: System.Single
  seealso:
  - type: System.Single.MinValue
    commentId: F:System.Single.MinValue
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Single.PositiveInfinity
  commentId: F:System.Single.PositiveInfinity
  id: PositiveInfinity
  parent: System.Single
  langs:
  - csharp
  - vb
  name: PositiveInfinity
  fullName: System.Single.PositiveInfinity
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PositiveInfinity
    path: src/System.Runtime/ref/System.Runtime.Manual.cs
    startLine: 23
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents positive infinity. This field is constant.</p>\n"
  remarks: "\n<p>The value of this constant is the result of dividing a positive number by zero.</p>\n<p>This constant is returned when the result of an operation is greater than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use <xref href=\"System.Single.IsPositiveInfinity(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> to determine whether a value evaluates to positive infinity. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> constant.</p>System.Single#10"
  syntax:
    content: public const float PositiveInfinity = InfinityF
    content.vb: Public Const PositiveInfinity As Single = InfinityF
    return:
      type: System.Single
  seealso:
  - type: System.Single.IsPositiveInfinity(System.Single)
    commentId: M:System.Single.IsPositiveInfinity(System.Single)
  - type: System.Single.IsInfinity(System.Single)
    commentId: M:System.Single.IsInfinity(System.Single)
  - type: System.Single.NegativeInfinity
    commentId: F:System.Single.NegativeInfinity
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Single.NegativeInfinity
  commentId: F:System.Single.NegativeInfinity
  id: NegativeInfinity
  parent: System.Single
  langs:
  - csharp
  - vb
  name: NegativeInfinity
  fullName: System.Single.NegativeInfinity
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NegativeInfinity
    path: src/System.Runtime/ref/System.Runtime.Manual.cs
    startLine: 24
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents negative infinity. This field is constant.</p>\n"
  remarks: "\n<p>The value of this constant is the result of dividing a negative number by zero.</p>\n<p>This constant is returned when the result of an operation is less than <xref href=\"System.Single.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use <xref href=\"System.Single.IsNegativeInfinity(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> to determine whether a value evaluates to negative infinity. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref> constant.</p>System.Single#9"
  syntax:
    content: public const float NegativeInfinity = -InfinityF
    content.vb: Public Const NegativeInfinity As Single = -InfinityF
    return:
      type: System.Single
  seealso:
  - type: System.Single.IsNegativeInfinity(System.Single)
    commentId: M:System.Single.IsNegativeInfinity(System.Single)
  - type: System.Single.IsInfinity(System.Single)
    commentId: M:System.Single.IsInfinity(System.Single)
  - type: System.Single.PositiveInfinity
    commentId: F:System.Single.PositiveInfinity
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Single.NaN
  commentId: F:System.Single.NaN
  id: NaN
  parent: System.Single
  langs:
  - csharp
  - vb
  name: NaN
  fullName: System.Single.NaN
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NaN
    path: src/System.Runtime/ref/System.Runtime.Manual.cs
    startLine: 25
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents not a number (<strong>NaN</strong>). This field is constant.</p>\n"
  remarks: "\n<p>A method or operator returns <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref> when the result of an operation is undefined. For example, the result of dividing zero by zero is <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>, as the following example shows. (But note that dividing a non-zero number by zero returns either <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>, depending on the sign of the divisor.) </p>System.Single.NaN#1<p>In addition, a method call with a <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref> value or an operation on a <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref> value returns <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>, as the following example shows.</p>System.Single.NaN#2<p>Use the <xref href=\"System.Single.IsNaN(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether a value is not a number. In general, <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> operators cannot be used to compare <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref> with other <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> values, although comparison methods (such as <xref href=\"System.Single.Equals(System.Single)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Single.CompareTo(System.Single)\" data-throw-if-not-resolved=\"false\"></xref>) can. The following example illustrates the difference in behavior between <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> comparison operators and methods. </p>System.Single.NaN#4"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref> constant.</p>System.Single#7"
  syntax:
    content: public const float NaN = NaNF
    content.vb: Public Const NaN As Single = NaNF
    return:
      type: System.Single
  seealso:
  - type: System.Single.IsNaN(System.Single)
    commentId: M:System.Single.IsNaN(System.Single)
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.IComparable{System.Single}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Single>
  fullName: System.IComparable<System.Single>
  fullname.vb: System.IComparable(Of System.Single)
  name.vb: IComparable(Of Single)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
  - name: )
    fullName: )
- uid: System.IConvertible
  parent: System
  isExternal: false
  name: IConvertible
  fullName: System.IConvertible
- uid: System.IEquatable{System.Single}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Single>
  fullName: System.IEquatable<System.Single>
  fullname.vb: System.IEquatable(Of System.Single)
  name.vb: IEquatable(Of Single)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
  - name: )
    fullName: )
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.IComparable`1
  parent: System
  isExternal: false
  name: IComparable<T>
  fullName: System.IComparable<T>
  fullname.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<>
  fullName: System.IEquatable<>
  fullname.vb: System.IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IComparable{System.Single}.CompareTo(System.Single)
  parent: System.IComparable{System.Single}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Single)
  fullName: System.IComparable<System.Single>.CompareTo(System.Single)
  fullname.vb: System.IComparable(Of System.Single).CompareTo(System.Single)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<System.Single>.CompareTo
  - name: (
    fullName: (
  - uid: System.Single
    name: Single
    fullName: System.Single
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of System.Single).CompareTo
  - name: (
    fullName: (
  - uid: System.Single
    name: Single
    fullName: System.Single
  - name: )
    fullName: )
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.IComparable`1.CompareTo(`0)
  parent: System.IComparable`1
  isExternal: false
  name: CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<T>.CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of T).CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: false
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.IEquatable{System.Single}.Equals(System.Single)
  parent: System.IEquatable{System.Single}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Single)
  fullName: System.IEquatable<System.Single>.Equals(System.Single)
  fullname.vb: System.IEquatable(Of System.Single).Equals(System.Single)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Single>.Equals
  - name: (
    fullName: (
  - uid: System.Single
    name: Single
    fullName: System.Single
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Single).Equals
  - name: (
    fullName: (
  - uid: System.Single
    name: Single
    fullName: System.Single
  - name: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Globalization.NumberStyles
  parent: System.Globalization
  isExternal: false
  name: NumberStyles
  fullName: System.Globalization.NumberStyles
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: false
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.IConvertible.GetTypeCode
  parent: System.IConvertible
  isExternal: false
  name: GetTypeCode()
  fullName: System.IConvertible.GetTypeCode()
  spec.csharp:
  - uid: System.IConvertible.GetTypeCode
    name: GetTypeCode
    fullName: System.IConvertible.GetTypeCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.GetTypeCode
    name: GetTypeCode
    fullName: System.IConvertible.GetTypeCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  fullName: System.TypeCode
- uid: System.IConvertible.ToBoolean(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToBoolean(IFormatProvider)
  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: ToBoolean
    fullName: System.IConvertible.ToBoolean
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: ToBoolean
    fullName: System.IConvertible.ToBoolean
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToByte(IFormatProvider)
  fullName: System.IConvertible.ToByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: ToByte
    fullName: System.IConvertible.ToByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: ToByte
    fullName: System.IConvertible.ToByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.IConvertible.ToChar(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToChar(IFormatProvider)
  fullName: System.IConvertible.ToChar(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: ToChar
    fullName: System.IConvertible.ToChar
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: ToChar
    fullName: System.IConvertible.ToChar
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.IConvertible.ToDateTime(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDateTime(IFormatProvider)
  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: ToDateTime
    fullName: System.IConvertible.ToDateTime
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: ToDateTime
    fullName: System.IConvertible.ToDateTime
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.IConvertible.ToDecimal(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDecimal(IFormatProvider)
  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: ToDecimal
    fullName: System.IConvertible.ToDecimal
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: ToDecimal
    fullName: System.IConvertible.ToDecimal
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.IConvertible.ToDouble(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDouble(IFormatProvider)
  fullName: System.IConvertible.ToDouble(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: ToDouble
    fullName: System.IConvertible.ToDouble
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: ToDouble
    fullName: System.IConvertible.ToDouble
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.IConvertible.ToInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt16(IFormatProvider)
  fullName: System.IConvertible.ToInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: ToInt16
    fullName: System.IConvertible.ToInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: ToInt16
    fullName: System.IConvertible.ToInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.IConvertible.ToInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt32(IFormatProvider)
  fullName: System.IConvertible.ToInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: ToInt32
    fullName: System.IConvertible.ToInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: ToInt32
    fullName: System.IConvertible.ToInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt64(IFormatProvider)
  fullName: System.IConvertible.ToInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: ToInt64
    fullName: System.IConvertible.ToInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: ToInt64
    fullName: System.IConvertible.ToInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.IConvertible.ToSByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToSByte(IFormatProvider)
  fullName: System.IConvertible.ToSByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: ToSByte
    fullName: System.IConvertible.ToSByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: ToSByte
    fullName: System.IConvertible.ToSByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.IConvertible.ToSingle(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToSingle(IFormatProvider)
  fullName: System.IConvertible.ToSingle(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: ToSingle
    fullName: System.IConvertible.ToSingle
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: ToSingle
    fullName: System.IConvertible.ToSingle
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToType(Type, IFormatProvider)
  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: ToType
    fullName: System.IConvertible.ToType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: ToType
    fullName: System.IConvertible.ToType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.IConvertible.ToUInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt16(IFormatProvider)
  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: ToUInt16
    fullName: System.IConvertible.ToUInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: ToUInt16
    fullName: System.IConvertible.ToUInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.IConvertible.ToUInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt32(IFormatProvider)
  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: ToUInt32
    fullName: System.IConvertible.ToUInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: ToUInt32
    fullName: System.IConvertible.ToUInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.IConvertible.ToUInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt64(IFormatProvider)
  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: ToUInt64
    fullName: System.IConvertible.ToUInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: ToUInt64
    fullName: System.IConvertible.ToUInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IConvertible.ToString(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToString(IFormatProvider)
  fullName: System.IConvertible.ToString(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: ToString
    fullName: System.IConvertible.ToString
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: ToString
    fullName: System.IConvertible.ToString
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: false
  name: ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    fullName: System.IFormattable.ToString
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
