items:
- uid: System.Net.DnsEndPoint
  commentId: T:System.Net.DnsEndPoint
  id: DnsEndPoint
  parent: System.Net
  children:
  - System.Net.DnsEndPoint.#ctor(System.String,System.Int32)
  - System.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)
  - System.Net.DnsEndPoint.AddressFamily
  - System.Net.DnsEndPoint.Equals(System.Object)
  - System.Net.DnsEndPoint.GetHashCode
  - System.Net.DnsEndPoint.Host
  - System.Net.DnsEndPoint.Port
  - System.Net.DnsEndPoint.ToString
  langs:
  - csharp
  - vb
  name: DnsEndPoint
  fullName: System.Net.DnsEndPoint
  type: Class
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DnsEndPoint
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 97
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Represents a network endpoint as a host name or a string representation of an IP address and a port number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> class contains a host name or an IP address and remote port information needed by an application to connect to a service on a host. By combining the host name or IP address and port number of a service, the <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> class forms a connection point to a service.</p>\n"
  example:
  - 
  syntax:
    content: 'public class DnsEndPoint : EndPoint'
    content.vb: >-
      Public Class DnsEndPoint
          Inherits EndPoint
  inheritance:
  - System.Object
  - System.Net.EndPoint
  inheritedMembers:
  - System.Net.EndPoint.Create(System.Net.SocketAddress)
  - System.Net.EndPoint.Serialize
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.DnsEndPoint.#ctor(System.String,System.Int32)
  commentId: M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Net.DnsEndPoint
  langs:
  - csharp
  - vb
  name: DnsEndPoint(String, Int32)
  fullName: System.Net.DnsEndPoint.DnsEndPoint(System.String, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 99
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> class with the host name or string representation of an IP address and a port number.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.DnsEndPoint.#ctor(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor can be used to initialize a <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> class using either a host name or a string that represents an IP address and a port. This constructor sets the <xref href=\"System.Net.DnsEndPoint.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> property to <xref href=\"System.Net.Sockets.AddressFamily.Unknown\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>When using this constructor with a host name rather than a string representation of an IP address, the address family of the <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> will remain <xref href=\"System.Net.Sockets.AddressFamily.Unknown\" data-throw-if-not-resolved=\"false\"></xref> even after use. The <xref href=\"System.Net.DnsEndPoint.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> property of any <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> that is created by calls to the <xref href=\"System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method will be the address family of the first address to which a connection can be successfully established (not necessarily the first address to be resolved).</p>\n"
  example:
  - 
  syntax:
    content: public DnsEndPoint(string host, int port)
    content.vb: Public Sub New(host As String, port As Integer)
    parameters:
    - id: host
      type: System.String
      description: "\n<p>The host name or a string representation of the IP address.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>The port number associated with the address, or 0 to specify any available port. <em>port</em> is in host order.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>host</em> parameter contains an empty string.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>host</em> parameter is a <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>port</em> is less than <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>port</em> is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)
  commentId: M:System.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)
  id: '#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)'
  parent: System.Net.DnsEndPoint
  langs:
  - csharp
  - vb
  name: DnsEndPoint(String, Int32, AddressFamily)
  fullName: System.Net.DnsEndPoint.DnsEndPoint(System.String, System.Int32, System.Net.Sockets.AddressFamily)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 100
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> class with the host name or string representation of an IP address, a port number, and an address family.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.DnsEndPoint.#ctor(System.String,System.Int32,System.Net.Sockets.AddressFamily)\" data-throw-if-not-resolved=\"false\"></xref> constructor can be used to initialize a <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> class using either a host name or a string that represents an IP address, a port, and an address family. </p>\n<p>When using the constructor with a host name rather than a string representation of an IP address, the address family restricts DNS resolution to prefer addresses of the specified address family value. When using the constructor with the address family specified as <xref href=\"System.Net.Sockets.AddressFamily.Unknown\" data-throw-if-not-resolved=\"false\"></xref>, the address family of the <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> will remain <xref href=\"System.Net.Sockets.AddressFamily.Unknown\" data-throw-if-not-resolved=\"false\"></xref> even after use. The <xref href=\"System.Net.DnsEndPoint.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> property of any <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> that is created by calls to the <xref href=\"System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method will be the address family of the first address to which a connection can be successfully established (not necessarily the first address to be resolved).</p>\n"
  example:
  - 
  syntax:
    content: public DnsEndPoint(string host, int port, AddressFamily addressFamily)
    content.vb: Public Sub New(host As String, port As Integer, addressFamily As AddressFamily)
    parameters:
    - id: host
      type: System.String
      description: "\n<p>The host name or a string representation of the IP address.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>The port number associated with the address, or 0 to specify any available port. <em>port</em> is in host order.</p>\n"
    - id: addressFamily
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>host</em> parameter contains an empty string.</p>\n<p>-or- </p>\n<p>\n<em>addressFamily</em> is <xref href=\"System.Net.Sockets.AddressFamily.Unknown\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>host</em> parameter is a <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>port</em> is less than <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>port</em> is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.DnsEndPoint.AddressFamily
  commentId: P:System.Net.DnsEndPoint.AddressFamily
  id: AddressFamily
  parent: System.Net.DnsEndPoint
  langs:
  - csharp
  - vb
  name: AddressFamily
  fullName: System.Net.DnsEndPoint.AddressFamily
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddressFamily
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 101
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets the Internet Protocol (IP) address family.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.DnsEndPoint.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> property indicates the address family for an instance of the <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - 
  syntax:
    content: public override AddressFamily AddressFamily { get; }
    content.vb: Public Overrides ReadOnly Property AddressFamily As AddressFamily
    parameters: []
    return:
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  overridden: System.Net.EndPoint.AddressFamily
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.DnsEndPoint.Host
  commentId: P:System.Net.DnsEndPoint.Host
  id: Host
  parent: System.Net.DnsEndPoint
  langs:
  - csharp
  - vb
  name: Host
  fullName: System.Net.DnsEndPoint.Host
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Host
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 102
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets the host name or string representation of the Internet Protocol (IP) address of the host.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.DnsEndPoint.Host\" data-throw-if-not-resolved=\"false\"></xref> property indicates the host name or string representation of the IP address for an instance of the <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - 
  syntax:
    content: public string Host { get; }
    content.vb: Public ReadOnly Property Host As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A host name or string representation of an IP address.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.DnsEndPoint.Port
  commentId: P:System.Net.DnsEndPoint.Port
  id: Port
  parent: System.Net.DnsEndPoint
  langs:
  - csharp
  - vb
  name: Port
  fullName: System.Net.DnsEndPoint.Port
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Port
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 103
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets the port number of the <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public int Port { get; }
    content.vb: Public ReadOnly Property Port As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An integer value in the range 0 to 0xffff indicating the port number of the <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.DnsEndPoint.Equals(System.Object)
  commentId: M:System.Net.DnsEndPoint.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.DnsEndPoint
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Net.DnsEndPoint.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 104
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Compares two <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.DnsEndPoint.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method compares the current <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> instance with the <em>comparand</em> parameter and returns <strong>true</strong> if the two instances contain the same endpoint.</p>\n"
  example:
  - 
  syntax:
    content: public override bool Equals(object comparand)
    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean
    parameters:
    - id: comparand
      type: System.Object
      description: "\n<p>A <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> instance to compare to the current instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> instances are equal; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.DnsEndPoint.GetHashCode
  commentId: M:System.Net.DnsEndPoint.GetHashCode
  id: GetHashCode
  parent: System.Net.DnsEndPoint
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Net.DnsEndPoint.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 105
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns a hash value for a <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.DnsEndPoint.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method returns a hash code of the <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref>. This value can be used as a key in hash tables.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>An integer hash value for the <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.DnsEndPoint.ToString
  commentId: M:System.Net.DnsEndPoint.ToString
  id: ToString
  parent: System.Net.DnsEndPoint
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Net.DnsEndPoint.ToString()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 106
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns the host name or string representation of the IP address and port number of the <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.DnsEndPoint.ToString\" data-throw-if-not-resolved=\"false\"></xref> method returns a string that contains the address family, the host name or IP address string, and the port number.</p>\n"
  example:
  - 
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string containing the address family, host name or IP address string, and the port number of the specified <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Net.EndPoint
  parent: System.Net
  isExternal: false
  name: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Net.EndPoint.Create(System.Net.SocketAddress)
  parent: System.Net.EndPoint
  isExternal: false
  name: Create(SocketAddress)
  fullName: System.Net.EndPoint.Create(System.Net.SocketAddress)
  spec.csharp:
  - uid: System.Net.EndPoint.Create(System.Net.SocketAddress)
    name: Create
    fullName: System.Net.EndPoint.Create
  - name: (
    fullName: (
  - uid: System.Net.SocketAddress
    name: SocketAddress
    fullName: System.Net.SocketAddress
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.EndPoint.Create(System.Net.SocketAddress)
    name: Create
    fullName: System.Net.EndPoint.Create
  - name: (
    fullName: (
  - uid: System.Net.SocketAddress
    name: SocketAddress
    fullName: System.Net.SocketAddress
  - name: )
    fullName: )
- uid: System.Net.EndPoint.Serialize
  parent: System.Net.EndPoint
  isExternal: false
  name: Serialize()
  fullName: System.Net.EndPoint.Serialize()
  spec.csharp:
  - uid: System.Net.EndPoint.Serialize
    name: Serialize
    fullName: System.Net.EndPoint.Serialize
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.EndPoint.Serialize
    name: Serialize
    fullName: System.Net.EndPoint.Serialize
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Net.EndPoint.AddressFamily
  parent: System.Net.EndPoint
  isExternal: false
  name: AddressFamily
  fullName: System.Net.EndPoint.AddressFamily
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
