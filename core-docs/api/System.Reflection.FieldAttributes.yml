items:
- uid: System.Reflection.FieldAttributes
  commentId: T:System.Reflection.FieldAttributes
  id: FieldAttributes
  parent: System.Reflection
  children:
  - System.Reflection.FieldAttributes.Assembly
  - System.Reflection.FieldAttributes.FamANDAssem
  - System.Reflection.FieldAttributes.Family
  - System.Reflection.FieldAttributes.FamORAssem
  - System.Reflection.FieldAttributes.FieldAccessMask
  - System.Reflection.FieldAttributes.HasDefault
  - System.Reflection.FieldAttributes.HasFieldMarshal
  - System.Reflection.FieldAttributes.HasFieldRVA
  - System.Reflection.FieldAttributes.InitOnly
  - System.Reflection.FieldAttributes.Literal
  - System.Reflection.FieldAttributes.NotSerialized
  - System.Reflection.FieldAttributes.PinvokeImpl
  - System.Reflection.FieldAttributes.Private
  - System.Reflection.FieldAttributes.PrivateScope
  - System.Reflection.FieldAttributes.Public
  - System.Reflection.FieldAttributes.RTSpecialName
  - System.Reflection.FieldAttributes.SpecialName
  - System.Reflection.FieldAttributes.Static
  langs:
  - csharp
  - vb
  name: FieldAttributes
  fullName: System.Reflection.FieldAttributes
  type: Enum
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FieldAttributes
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 8
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies flags that describe the attributes of a field.</p>\n"
  remarks: "\n<p>\n<strong>FieldAttributes</strong> uses the value from <strong>FieldAccessMask</strong> to mask off only the parts of the attribute value that pertain to the accessibility. For example, the following code determines if <strong>Attributes</strong> has the public bit set. </p>System.Reflection.FieldAttributes#1<p>To get the <strong>FieldAttributes</strong>, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>FieldInfo</strong>. From the <strong>FieldInfo</strong>, get the <strong>Attributes</strong>.</p><p>The enumerated value is a number representing the bitwise OR of the attributes implemented on the field.</p>"
  example:
  - "\n<p>In this example, three fields are built and the <strong>FieldAttributes</strong> values are displayed. A <strong>FieldAttributes</strong> value can contain more than one attribute, for example, both <strong>Public</strong> and <strong>Literal</strong>, as shown in the third field.</p>Classic FieldAttributes Example#1"
  syntax:
    content: >-
      [Serializable]

      [Flags]

      [ComVisible(true)]

      public enum FieldAttributes
    content.vb: >-
      <Serializable>

      <Flags>

      <ComVisible(True)>

      Public Enum FieldAttributes
  attributes:
  - type: System.FlagsAttribute
    ctor: System.FlagsAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Reflection.FieldAttributes.Assembly
  commentId: F:System.Reflection.FieldAttributes.Assembly
  id: Assembly
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: Assembly
  fullName: System.Reflection.FieldAttributes.Assembly
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Assembly
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 18
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field is accessible throughout the assembly.</p>\n"
  syntax:
    content: Assembly = 3
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.FamANDAssem
  commentId: F:System.Reflection.FieldAttributes.FamANDAssem
  id: FamANDAssem
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: FamANDAssem
  fullName: System.Reflection.FieldAttributes.FamANDAssem
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FamANDAssem
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 17
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field is accessible only by subtypes in this assembly.</p>\n"
  syntax:
    content: FamANDAssem = 2
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.Family
  commentId: F:System.Reflection.FieldAttributes.Family
  id: Family
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: Family
  fullName: System.Reflection.FieldAttributes.Family
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Family
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 19
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field is accessible only by type and subtypes.</p>\n"
  syntax:
    content: Family = 4
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.FamORAssem
  commentId: F:System.Reflection.FieldAttributes.FamORAssem
  id: FamORAssem
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: FamORAssem
  fullName: System.Reflection.FieldAttributes.FamORAssem
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FamORAssem
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 20
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field is accessible by subtypes anywhere, as well as throughout this assembly.</p>\n"
  syntax:
    content: FamORAssem = 5
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.FieldAccessMask
  commentId: F:System.Reflection.FieldAttributes.FieldAccessMask
  id: FieldAccessMask
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: FieldAccessMask
  fullName: System.Reflection.FieldAttributes.FieldAccessMask
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FieldAccessMask
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 14
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies the access level of a given field.</p>\n"
  syntax:
    content: FieldAccessMask = 7
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.HasDefault
  commentId: F:System.Reflection.FieldAttributes.HasDefault
  id: HasDefault
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: HasDefault
  fullName: System.Reflection.FieldAttributes.HasDefault
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: HasDefault
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 39
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field has a default value.</p>\n"
  syntax:
    content: HasDefault = 32768
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.HasFieldMarshal
  commentId: F:System.Reflection.FieldAttributes.HasFieldMarshal
  id: HasFieldMarshal
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: HasFieldMarshal
  fullName: System.Reflection.FieldAttributes.HasFieldMarshal
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: HasFieldMarshal
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 38
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field has marshaling information.</p>\n"
  syntax:
    content: HasFieldMarshal = 4096
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.HasFieldRVA
  commentId: F:System.Reflection.FieldAttributes.HasFieldRVA
  id: HasFieldRVA
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: HasFieldRVA
  fullName: System.Reflection.FieldAttributes.HasFieldRVA
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: HasFieldRVA
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 40
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field has a relative virtual address (RVA). The RVA is the location of the method body in the current image, as an address relative to the start of the image file in which it is located.</p>\n"
  syntax:
    content: HasFieldRVA = 256
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.InitOnly
  commentId: F:System.Reflection.FieldAttributes.InitOnly
  id: InitOnly
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: InitOnly
  fullName: System.Reflection.FieldAttributes.InitOnly
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InitOnly
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 26
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field is initialized only, and can be set only in the body of a constructor.</p>\n"
  syntax:
    content: InitOnly = 32
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.Literal
  commentId: F:System.Reflection.FieldAttributes.Literal
  id: Literal
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: Literal
  fullName: System.Reflection.FieldAttributes.Literal
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Literal
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 27
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field's value is a compile-time (static or early bound) constant. Any attempt to set it throws a <xref href=\"System.FieldAccessException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: Literal = 64
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.NotSerialized
  commentId: F:System.Reflection.FieldAttributes.NotSerialized
  id: NotSerialized
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: NotSerialized
  fullName: System.Reflection.FieldAttributes.NotSerialized
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NotSerialized
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 28
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field does not have to be serialized when the type is remoted.</p>\n"
  syntax:
    content: NotSerialized = 128
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.PinvokeImpl
  commentId: F:System.Reflection.FieldAttributes.PinvokeImpl
  id: PinvokeImpl
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: PinvokeImpl
  fullName: System.Reflection.FieldAttributes.PinvokeImpl
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PinvokeImpl
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 33
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Reserved for future use.</p>\n"
  syntax:
    content: PinvokeImpl = 8192
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.Private
  commentId: F:System.Reflection.FieldAttributes.Private
  id: Private
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: Private
  fullName: System.Reflection.FieldAttributes.Private
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Private
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 16
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field is accessible only by the parent type.</p>\n"
  syntax:
    content: Private = 1
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.PrivateScope
  commentId: F:System.Reflection.FieldAttributes.PrivateScope
  id: PrivateScope
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: PrivateScope
  fullName: System.Reflection.FieldAttributes.PrivateScope
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PrivateScope
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 15
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field cannot be referenced.</p>\n"
  syntax:
    content: PrivateScope = 0
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.Public
  commentId: F:System.Reflection.FieldAttributes.Public
  id: Public
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: Public
  fullName: System.Reflection.FieldAttributes.Public
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Public
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 21
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field is accessible by any member for whom this scope is visible.</p>\n"
  syntax:
    content: Public = 6
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.RTSpecialName
  commentId: F:System.Reflection.FieldAttributes.RTSpecialName
  id: RTSpecialName
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: RTSpecialName
  fullName: System.Reflection.FieldAttributes.RTSpecialName
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RTSpecialName
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 37
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the common language runtime (metadata internal APIs) should check the name encoding.</p>\n"
  syntax:
    content: RTSpecialName = 1024
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.SpecialName
  commentId: F:System.Reflection.FieldAttributes.SpecialName
  id: SpecialName
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: SpecialName
  fullName: System.Reflection.FieldAttributes.SpecialName
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SpecialName
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 30
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies a special method, with the name describing how the method is special.</p>\n"
  syntax:
    content: SpecialName = 512
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.FieldAttributes.Static
  commentId: F:System.Reflection.FieldAttributes.Static
  id: Static
  parent: System.Reflection.FieldAttributes
  langs:
  - csharp
  - vb
  name: Static
  fullName: System.Reflection.FieldAttributes.Static
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Static
    path: src/mscorlib/src/System/Reflection/FieldAttributes.cs
    startLine: 25
  assemblies:
  - System.Reflection.Primitives
  namespace: System.Reflection
  summary: "\n<p>Specifies that the field represents the defined type, or else it is per-instance.</p>\n"
  syntax:
    content: Static = 16
    return:
      type: System.Reflection.FieldAttributes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: false
  name: FieldAttributes
  fullName: System.Reflection.FieldAttributes
