items:
- uid: System.Reflection.Emit.MethodBuilder
  commentId: T:System.Reflection.Emit.MethodBuilder
  id: MethodBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.MethodBuilder.Attributes
  - System.Reflection.Emit.MethodBuilder.CallingConvention
  - System.Reflection.Emit.MethodBuilder.ContainsGenericParameters
  - System.Reflection.Emit.MethodBuilder.DeclaringType
  - System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
  - System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  - System.Reflection.Emit.MethodBuilder.Equals(System.Object)
  - System.Reflection.Emit.MethodBuilder.GetGenericArguments
  - System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition
  - System.Reflection.Emit.MethodBuilder.GetHashCode
  - System.Reflection.Emit.MethodBuilder.GetILGenerator
  - System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
  - System.Reflection.Emit.MethodBuilder.GetParameters
  - System.Reflection.Emit.MethodBuilder.InitLocals
  - System.Reflection.Emit.MethodBuilder.IsGenericMethod
  - System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition
  - System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
  - System.Reflection.Emit.MethodBuilder.MethodImplementationFlags
  - System.Reflection.Emit.MethodBuilder.Name
  - System.Reflection.Emit.MethodBuilder.ReturnParameter
  - System.Reflection.Emit.MethodBuilder.ReturnType
  - System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  - System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  - System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  - System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  - System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.MethodBuilder.ToString
  langs:
  - csharp
  - vb
  name: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MethodBuilder
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 20
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines and represents a method (or constructor) on a dynamic class.
  syntax:
    content: 'public sealed class MethodBuilder : MethodInfo, MethodInfo'
    content.vb: >-
      Public NotInheritable Class MethodBuilder
          Inherits MethodInfo
          Implements MethodInfo
  inheritance:
  - System.Object
  implements:
  - System.Reflection.MethodInfo
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.MethodBuilder.Attributes
  commentId: P:System.Reflection.Emit.MethodBuilder.Attributes
  id: Attributes
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.Emit.MethodBuilder.Attributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Attributes
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 584
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the attributes for this method.
  syntax:
    content: public override MethodAttributes Attributes { get; }
    content.vb: Public Overrides ReadOnly Property Attributes As MethodAttributes
    parameters: []
    return:
      type: System.Reflection.MethodAttributes
      description: Read-only. Retrieves the MethodAttributes for this method.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.CallingConvention
  commentId: P:System.Reflection.Emit.MethodBuilder.CallingConvention
  id: CallingConvention
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: CallingConvention
  fullName: System.Reflection.Emit.MethodBuilder.CallingConvention
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CallingConvention
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 589
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the calling convention of the method.
  syntax:
    content: public override CallingConventions CallingConvention { get; }
    content.vb: Public Overrides ReadOnly Property CallingConvention As CallingConventions
    parameters: []
    return:
      type: System.Reflection.CallingConventions
      description: Read-only. The calling convention of the method.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.ContainsGenericParameters
  commentId: P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: ContainsGenericParameters
  fullName: System.Reflection.Emit.MethodBuilder.ContainsGenericParameters
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContainsGenericParameters
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 678
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Not supported for this type.
  syntax:
    content: public override bool ContainsGenericParameters { get; }
    content.vb: Public Overrides ReadOnly Property ContainsGenericParameters As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: Not supported.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.DeclaringType
  commentId: P:System.Reflection.Emit.MethodBuilder.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: DeclaringType
  fullName: System.Reflection.Emit.MethodBuilder.DeclaringType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaringType
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 545
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the type that declares this method.
  syntax:
    content: public override Type DeclaringType { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: System.Type
      description: Read-only. The type that declares this method.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.InitLocals
  commentId: P:System.Reflection.Emit.MethodBuilder.InitLocals
  id: InitLocals
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: InitLocals
  fullName: System.Reflection.Emit.MethodBuilder.InitLocals
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InitLocals
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 1146
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is true.
  syntax:
    content: public bool InitLocals { get; set; }
    content.vb: Public Property InitLocals As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the local variables in this method should be zero initialized; otherwise false.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: For the current method, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" data-throw-if-not-resolved="false"></xref> property is false. (Get or set.)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethod
  commentId: P:System.Reflection.Emit.MethodBuilder.IsGenericMethod
  id: IsGenericMethod
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: IsGenericMethod
  fullName: System.Reflection.Emit.MethodBuilder.IsGenericMethod
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsGenericMethod
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 682
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets a value indicating whether the method is a generic method.
  syntax:
    content: public override bool IsGenericMethod { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericMethod As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the method is generic; otherwise, false.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition
  commentId: P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition
  id: IsGenericMethodDefinition
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: IsGenericMethodDefinition
  fullName: System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsGenericMethodDefinition
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 676
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets a value indicating whether the current <xref href="System.Reflection.Emit.MethodBuilder" data-throw-if-not-resolved="false"></xref> object represents the definition of a generic method.
  syntax:
    content: public override bool IsGenericMethodDefinition { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericMethodDefinition As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current <xref href="System.Reflection.Emit.MethodBuilder" data-throw-if-not-resolved="false"></xref> object represents the definition of a generic method; otherwise, false.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.Name
  commentId: P:System.Reflection.Emit.MethodBuilder.Name
  id: Name
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.Emit.MethodBuilder.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 521
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Retrieves the name of this method.
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: Read-only. Retrieves a string containing the simple name of this method.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.ReturnParameter
  commentId: P:System.Reflection.Emit.MethodBuilder.ReturnParameter
  id: ReturnParameter
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: ReturnParameter
  fullName: System.Reflection.Emit.MethodBuilder.ReturnParameter
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReturnParameter
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 640
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: 'Gets a <xref href="System.Reflection.ParameterInfo" data-throw-if-not-resolved="false"></xref> object that contains information about the return type of the method, such as whether the return type has custom modifiers. '
  syntax:
    content: public override ParameterInfo ReturnParameter { get; }
    content.vb: Public Overrides ReadOnly Property ReturnParameter As ParameterInfo
    parameters: []
    return:
      type: System.Reflection.ParameterInfo
      description: A <xref href="System.Reflection.ParameterInfo" data-throw-if-not-resolved="false"></xref> object that contains information about the return type.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The declaring type has not been created.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.ReturnType
  commentId: P:System.Reflection.Emit.MethodBuilder.ReturnType
  id: ReturnType
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: ReturnType
  fullName: System.Reflection.Emit.MethodBuilder.ReturnType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReturnType
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 621
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets the return type of the method represented by this <xref href="System.Reflection.Emit.MethodBuilder" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public override Type ReturnType { get; }
    content.vb: Public Overrides ReadOnly Property ReturnType As Type
    parameters: []
    return:
      type: System.Type
      description: The return type of the method.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
  commentId: M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
  id: DefineGenericParameters(System.String[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: DefineGenericParameters(String[])
  fullName: System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineGenericParameters
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 692
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <xref href="System.Reflection.Emit.GenericTypeParameterBuilder" data-throw-if-not-resolved="false"></xref> objects that can be used to define their constraints.
  syntax:
    content: public GenericTypeParameterBuilder[] DefineGenericParameters(params string[] names)
    content.vb: Public Function DefineGenericParameters(ParamArray names As String()) As GenericTypeParameterBuilder()
    parameters:
    - id: names
      type: System.String[]
      description: An array of strings that represent the names of the generic type parameters.
    return:
      type: System.Reflection.Emit.GenericTypeParameterBuilder[]
      description: An array of <xref href="System.Reflection.Emit.GenericTypeParameterBuilder" data-throw-if-not-resolved="false"></xref> objects representing the type parameters of the generic method.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Generic type parameters have already been defined for this method.-or-The method has been completed already.-or-The <xref href="System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" data-throw-if-not-resolved="false"></xref> method has been called for the current method.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>names</em> is null.-or-An element of <em>names</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>names</em> is an empty array."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String())
  name.vb: DefineGenericParameters(String())
- uid: System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  commentId: M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  id: DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: DefineParameter(Int32, ParameterAttributes, String)
  fullName: System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32, System.Reflection.ParameterAttributes, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineParameter
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 843
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.
  syntax:
    content: public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string strParamName)
    content.vb: Public Function DefineParameter(position As Integer, attributes As ParameterAttributes, strParamName As String) As ParameterBuilder
    parameters:
    - id: position
      type: System.Int32
      description: 'The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method. '
    - id: attributes
      type: System.Reflection.ParameterAttributes
      description: 'The parameter attributes of the parameter. '
    - id: strParamName
      type: System.String
      description: 'The name of the parameter. The name can be the null string. '
    return:
      type: System.Reflection.Emit.ParameterBuilder
      description: Returns a ParameterBuilder object that represents a parameter of this method or the return value of this method.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: 'The method has no parameters.-or- <em>position</em> is less than zero.-or- <em>position</em> is greater than the number of the method''s parameters. '
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The containing type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.-or-For the current method, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" data-throw-if-not-resolved="false"></xref> property is false. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.Equals(System.Object)
  commentId: M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.Emit.MethodBuilder.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 482
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Determines whether the given object is equal to this instance.
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The object to compare with this MethodBuilder instance. '
    return:
      type: System.Boolean
      description: true if <em>obj</em> is an instance of MethodBuilder and is equal to this object; otherwise, false.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.MethodBuilder.GetGenericArguments
  commentId: M:System.Reflection.Emit.MethodBuilder.GetGenericArguments
  id: GetGenericArguments
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: GetGenericArguments()
  fullName: System.Reflection.Emit.MethodBuilder.GetGenericArguments()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetGenericArguments
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 684
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns an array of <xref href="System.Reflection.Emit.GenericTypeParameterBuilder" data-throw-if-not-resolved="false"></xref> objects that represent the type parameters of the method, if it is generic.
  syntax:
    content: public override Type[] GetGenericArguments()
    content.vb: Public Overrides Function GetGenericArguments As Type()
    return:
      type: System.Type[]
      description: 'An array of <xref href="System.Reflection.Emit.GenericTypeParameterBuilder" data-throw-if-not-resolved="false"></xref> objects representing the type parameters, if the method is generic, or null if the method is not generic. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition
  commentId: M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition
  id: GetGenericMethodDefinition
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: GetGenericMethodDefinition()
  fullName: System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetGenericMethodDefinition
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 680
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns this method.
  syntax:
    content: public override MethodInfo GetGenericMethodDefinition()
    content.vb: Public Overrides Function GetGenericMethodDefinition As MethodInfo
    return:
      type: System.Reflection.MethodInfo
      description: 'The current instance of <xref href="System.Reflection.Emit.MethodBuilder" data-throw-if-not-resolved="false"></xref>. '
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current method is not generic. That is, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod" data-throw-if-not-resolved="false"></xref> property returns false.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.MethodBuilder.GetHashCode
  commentId: M:System.Reflection.Emit.MethodBuilder.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.Emit.MethodBuilder.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 502
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets the hash code for this method.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: The hash code for this method.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator
  commentId: M:System.Reflection.Emit.MethodBuilder.GetILGenerator
  id: GetILGenerator
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: GetILGenerator()
  fullName: System.Reflection.Emit.MethodBuilder.GetILGenerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetILGenerator
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 1111
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns an ILGenerator for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.
  syntax:
    content: public ILGenerator GetILGenerator()
    content.vb: Public Function GetILGenerator As ILGenerator
    return:
      type: System.Reflection.Emit.ILGenerator
      description: Returns an ILGenerator object for this method.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The method should not have a body because of its <xref href="System.Reflection.MethodAttributes" data-throw-if-not-resolved="false"></xref> or <xref href="System.Reflection.MethodImplAttributes" data-throw-if-not-resolved="false"></xref> flags, for example because it has the <xref href="System.Reflection.MethodAttributes.PinvokeImpl" data-throw-if-not-resolved="false"></xref> flag. -or-The method is a generic method, but not a generic method definition. That is, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" data-throw-if-not-resolved="false"></xref> property is false. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
  commentId: M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
  id: GetILGenerator(System.Int32)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: GetILGenerator(Int32)
  fullName: System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetILGenerator
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 1122
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns an ILGenerator for this method with the specified Microsoft intermediate language (MSIL) stream size.
  syntax:
    content: public ILGenerator GetILGenerator(int size)
    content.vb: Public Function GetILGenerator(size As Integer) As ILGenerator
    parameters:
    - id: size
      type: System.Int32
      description: 'The size of the MSIL stream, in bytes. '
    return:
      type: System.Reflection.Emit.ILGenerator
      description: Returns an ILGenerator object for this method.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The method should not have a body because of its <xref href="System.Reflection.MethodAttributes" data-throw-if-not-resolved="false"></xref> or <xref href="System.Reflection.MethodImplAttributes" data-throw-if-not-resolved="false"></xref> flags, for example because it has the <xref href="System.Reflection.MethodAttributes.PinvokeImpl" data-throw-if-not-resolved="false"></xref> flag. -or-The method is a generic method, but not a generic method definition. That is, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" data-throw-if-not-resolved="false"></xref> property is false.   '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.GetParameters
  commentId: M:System.Reflection.Emit.MethodBuilder.GetParameters
  id: GetParameters
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: GetParameters()
  fullName: System.Reflection.Emit.MethodBuilder.GetParameters()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetParameters
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 629
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns the parameters of this method.
  syntax:
    content: public override ParameterInfo[] GetParameters()
    content.vb: Public Overrides Function GetParameters As ParameterInfo()
    return:
      type: System.Reflection.ParameterInfo[]
      description: An array of ParameterInfo objects that represent the parameters of the method.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'This method is not currently supported. Retrieve the method using <xref href="System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" data-throw-if-not-resolved="false"></xref> and call GetParameters on the returned <xref href="System.Reflection.MethodInfo" data-throw-if-not-resolved="false"></xref>. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
  commentId: M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
  id: MakeGenericMethod(System.Type[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: MakeGenericMethod(Type[])
  fullName: System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MakeGenericMethod
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 686
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns a generic method constructed from the current generic method definition using the specified generic type arguments.
  syntax:
    content: public override MethodInfo MakeGenericMethod(params Type[] typeArguments)
    content.vb: Public Overrides Function MakeGenericMethod(ParamArray typeArguments As Type()) As MethodInfo
    parameters:
    - id: typeArguments
      type: System.Type[]
      description: An array of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> objects that represent the type arguments for the generic method.
    return:
      type: System.Reflection.MethodInfo
      description: A <xref href="System.Reflection.MethodInfo" data-throw-if-not-resolved="false"></xref> representing the generic method constructed from the current generic method definition using the specified generic type arguments.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type())
  name.vb: MakeGenericMethod(Type())
- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 1169
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets a custom attribute using a specified custom attribute blob.
  syntax:
    content: public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: 'The constructor for the custom attribute. '
    - id: binaryAttribute
      type: System.Byte[]
      description: 'A byte blob representing the attributes. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>con</em> or <em>binaryAttribute</em> is null. "
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: For the current method, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" data-throw-if-not-resolved="false"></xref> property is false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 1193
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets a custom attribute using a custom attribute builder.
  syntax:
    content: public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: 'An instance of a helper class to describe the custom attribute. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>customBuilder</em> is null. "
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: For the current method, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" data-throw-if-not-resolved="false"></xref> property is false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  commentId: M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  id: SetImplementationFlags(System.Reflection.MethodImplAttributes)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: SetImplementationFlags(MethodImplAttributes)
  fullName: System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetImplementationFlags
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 1097
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets the implementation flags for this method.
  syntax:
    content: public void SetImplementationFlags(MethodImplAttributes attributes)
    content.vb: Public Sub SetImplementationFlags(attributes As MethodImplAttributes)
    parameters:
    - id: attributes
      type: System.Reflection.MethodImplAttributes
      description: 'The implementation flags to set. '
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The containing type was previously created using <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref>.-or-For the current method, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" data-throw-if-not-resolved="false"></xref> property is false. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  commentId: M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  id: SetParameters(System.Type[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: SetParameters(Type[])
  fullName: System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetParameters
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 795
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: 'Sets the number and types of parameters for a method. '
  syntax:
    content: public void SetParameters(params Type[] parameterTypes)
    content.vb: Public Sub SetParameters(ParamArray parameterTypes As Type())
    parameters:
    - id: parameterTypes
      type: System.Type[]
      description: An array of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> objects representing the parameter types.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current method is generic, but is not a generic method definition. That is, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" data-throw-if-not-resolved="false"></xref> property is false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.MethodBuilder.SetParameters(System.Type())
  name.vb: SetParameters(Type())
- uid: System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  commentId: M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  id: SetReturnType(System.Type)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: SetReturnType(Type)
  fullName: System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetReturnType
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 802
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets the return type of the method.
  syntax:
    content: public void SetReturnType(Type returnType)
    content.vb: Public Sub SetReturnType(returnType As Type)
    parameters:
    - id: returnType
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents the return type of the method.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current method is generic, but is not a generic method definition. That is, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" data-throw-if-not-resolved="false"></xref> property is false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  commentId: M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: System.Reflection.Emit.MethodBuilder.SetSignature(System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetSignature
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 809
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.
  syntax:
    content: public void SetSignature(Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
    content.vb: Public Sub SetSignature(returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()())
    parameters:
    - id: returnType
      type: System.Type
      description: The return type of the method.
    - id: returnTypeRequiredCustomModifiers
      type: System.Type[]
      description: An array of types representing the required custom modifiers, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify null.
    - id: returnTypeOptionalCustomModifiers
      type: System.Type[]
      description: An array of types representing the optional custom modifiers, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify null.
    - id: parameterTypes
      type: System.Type[]
      description: The types of the parameters of the method.
    - id: parameterTypeRequiredCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>. If a particular parameter has no required custom modifiers, specify null instead of an array of types. If none of the parameters have required custom modifiers, specify null instead of an array of arrays.
    - id: parameterTypeOptionalCustomModifiers
      type: System.Type[][]
      description: An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href="System.Runtime.CompilerServices.IsConst" data-throw-if-not-resolved="false"></xref>. If a particular parameter has no optional custom modifiers, specify null instead of an array of types. If none of the parameters have optional custom modifiers, specify null instead of an array of arrays.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The current method is generic, but is not a generic method definition. That is, the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethod" data-throw-if-not-resolved="false"></xref> property is true, but the <xref href="System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" data-throw-if-not-resolved="false"></xref> property is false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.MethodBuilder.SetSignature(System.Type, System.Type(), System.Type(), System.Type(), System.Type()(), System.Type()())
  name.vb: SetSignature(Type, Type(), Type(), Type(), Type()(), Type()())
- uid: System.Reflection.Emit.MethodBuilder.ToString
  commentId: M:System.Reflection.Emit.MethodBuilder.ToString
  id: ToString
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Reflection.Emit.MethodBuilder.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Reflection/Emit/MethodBuilder.cs
    startLine: 507
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns this MethodBuilder instance as a string.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.MethodBuilder.MethodImplementationFlags
  commentId: P:System.Reflection.Emit.MethodBuilder.MethodImplementationFlags
  id: MethodImplementationFlags
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: MethodImplementationFlags
  fullName: System.Reflection.Emit.MethodBuilder.MethodImplementationFlags
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MethodImplementationFlags
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 112
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override MethodImplAttributes MethodImplementationFlags { get; }
    content.vb: Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes
    parameters: []
    return:
      type: MethodImplAttributes
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.String[]
  isExternal: false
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.GenericTypeParameterBuilder[]
  isExternal: false
  name: GenericTypeParameterBuilder[]
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder[]
  fullname.vb: System.Reflection.Emit.GenericTypeParameterBuilder()
  name.vb: GenericTypeParameterBuilder()
  spec.csharp:
  - uid: System.Reflection.Emit.GenericTypeParameterBuilder
    name: GenericTypeParameterBuilder
    fullName: System.Reflection.Emit.GenericTypeParameterBuilder
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.Emit.GenericTypeParameterBuilder
    name: GenericTypeParameterBuilder
    fullName: System.Reflection.Emit.GenericTypeParameterBuilder
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.ParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: ParameterAttributes
  fullName: System.Reflection.ParameterAttributes
- uid: System.Reflection.Emit.ParameterBuilder
  isExternal: false
  name: ParameterBuilder
  fullName: System.Reflection.Emit.ParameterBuilder
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: System.Reflection.ParameterInfo[]
  isExternal: false
  name: ParameterInfo[]
  fullName: System.Reflection.ParameterInfo[]
  fullname.vb: System.Reflection.ParameterInfo()
  name.vb: ParameterInfo()
  spec.csharp:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: ()
    fullName: ()
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Reflection.MethodImplAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodImplAttributes
  fullName: System.Reflection.MethodImplAttributes
- uid: System.Type[][]
  isExternal: true
  name: Type[][]
  fullName: System.Type[][]
  fullname.vb: System.Type()()
  name.vb: Type()()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: ()
    fullName: ()
- uid: MethodImplAttributes
  isExternal: true
  name: MethodImplAttributes
  fullName: MethodImplAttributes
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
