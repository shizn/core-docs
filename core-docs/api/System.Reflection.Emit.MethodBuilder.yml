items:
- uid: System.Reflection.Emit.MethodBuilder
  commentId: T:System.Reflection.Emit.MethodBuilder
  id: MethodBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.MethodBuilder.Attributes
  - System.Reflection.Emit.MethodBuilder.CallingConvention
  - System.Reflection.Emit.MethodBuilder.ContainsGenericParameters
  - System.Reflection.Emit.MethodBuilder.DeclaringType
  - System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
  - System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  - System.Reflection.Emit.MethodBuilder.Equals(System.Object)
  - System.Reflection.Emit.MethodBuilder.GetGenericArguments
  - System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition
  - System.Reflection.Emit.MethodBuilder.GetHashCode
  - System.Reflection.Emit.MethodBuilder.GetILGenerator
  - System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
  - System.Reflection.Emit.MethodBuilder.GetParameters
  - System.Reflection.Emit.MethodBuilder.InitLocals
  - System.Reflection.Emit.MethodBuilder.IsGenericMethod
  - System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition
  - System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
  - System.Reflection.Emit.MethodBuilder.MethodImplementationFlags
  - System.Reflection.Emit.MethodBuilder.Name
  - System.Reflection.Emit.MethodBuilder.ReturnParameter
  - System.Reflection.Emit.MethodBuilder.ReturnType
  - System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  - System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  - System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  - System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  - System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.MethodBuilder.ToString
  langs:
  - csharp
  - vb
  name: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
  type: Class
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MethodBuilder
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 110
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines and represents a method (or constructor) on a dynamic class.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref> class is used to fully describe a method in Microsoft intermediate language (MSIL), including the name, attributes, signature, and method body. It is used in conjunction with the <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> class to create classes at runtime. </p>\n"
  example:
  - <p>The following example uses the <xref href="System.Reflection.Emit.MethodBuilder" data-throw-if-not-resolved="false"></xref> class to create a method within a dynamic type.</p>System.Reflection.Emit.MethodBuilder Example#1
  syntax:
    content: 'public sealed class MethodBuilder : MethodInfo, MethodInfo'
    content.vb: >-
      Public NotInheritable Class MethodBuilder
          Inherits MethodInfo
          Implements MethodInfo
  inheritance:
  - System.Object
  implements:
  - System.Reflection.MethodInfo
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.MethodBuilder.Attributes
  commentId: P:System.Reflection.Emit.MethodBuilder.Attributes
  id: Attributes
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.Emit.MethodBuilder.Attributes
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 117
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves the attributes for this method.</p>\n"
  syntax:
    content: public override MethodAttributes Attributes { get; }
    content.vb: Public Overrides ReadOnly Property Attributes As MethodAttributes
    parameters: []
    return:
      type: System.Reflection.MethodAttributes
      description: "\n<p>Read-only. Retrieves the <strong>MethodAttributes</strong> for this method.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.CallingConvention
  commentId: P:System.Reflection.Emit.MethodBuilder.CallingConvention
  id: CallingConvention
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: CallingConvention
  fullName: System.Reflection.Emit.MethodBuilder.CallingConvention
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CallingConvention
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 118
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the calling convention of the method.</p>\n"
  syntax:
    content: public override CallingConventions CallingConvention { get; }
    content.vb: Public Overrides ReadOnly Property CallingConvention As CallingConventions
    parameters: []
    return:
      type: System.Reflection.CallingConventions
      description: "\n<p>Read-only. The calling convention of the method.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.ContainsGenericParameters
  commentId: P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: ContainsGenericParameters
  fullName: System.Reflection.Emit.MethodBuilder.ContainsGenericParameters
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsGenericParameters
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 119
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Not supported for this type.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref> always represents a generic method definition, and thus cannot be invoked.</p>\n<p>For more information, see <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodInfo.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref>. For information on generic types, see <xref href=\"System.Type.IsGenericType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override bool ContainsGenericParameters { get; }
    content.vb: Public Overrides ReadOnly Property ContainsGenericParameters As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Not supported.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The invoked method is not supported in the base class.</p>\n"
  seealso:
  - type: System.Reflection.MethodInfo
    commentId: T:System.Reflection.MethodInfo
  - type: System.Type.IsGenericType
    commentId: P:System.Type.IsGenericType
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.DeclaringType
  commentId: P:System.Reflection.Emit.MethodBuilder.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: DeclaringType
  fullName: System.Reflection.Emit.MethodBuilder.DeclaringType
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaringType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 120
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the type that declares this method.</p>\n"
  example:
  - "\n<p>The following code illustrates the use of the <strong>Type</strong> property.</p>MethodBuilderClass_TypeSample#1"
  syntax:
    content: public override Type DeclaringType { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>Read-only. The type that declares this method.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.InitLocals
  commentId: P:System.Reflection.Emit.MethodBuilder.InitLocals
  id: InitLocals
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: InitLocals
  fullName: System.Reflection.Emit.MethodBuilder.InitLocals
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InitLocals
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 121
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is <strong>true</strong>.</p>\n"
  remarks: "\n<p>If this property is set to <strong>true</strong>, the emitted MSIL includes initialization of local variables. If it is set to <strong>false</strong>, local variables are not initialized and the generated code is unverifiable.</p>\n"
  syntax:
    content: public bool InitLocals { get; set; }
    content.vb: Public Property InitLocals As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the local variables in this method should be zero initialized; otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. (Get or set.)</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethod
  commentId: P:System.Reflection.Emit.MethodBuilder.IsGenericMethod
  id: IsGenericMethod
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: IsGenericMethod
  fullName: System.Reflection.Emit.MethodBuilder.IsGenericMethod
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericMethod
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 122
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets a value indicating whether the method is a generic method.</p>\n"
  remarks: "\n<p>A method is generic if it has type parameters. You can make a method generic by calling the <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method to add type parameters. This change cannot be reversed.</p>\n"
  example:
  - "\n<p>The following code example displays the status of a method. This code is part of a larger example provided for the <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method.</p>GenericMethodBuilder#7"
  syntax:
    content: public override bool IsGenericMethod { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericMethod As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the method is generic; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition
  commentId: P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition
  id: IsGenericMethodDefinition
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: IsGenericMethodDefinition
  fullName: System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericMethodDefinition
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 123
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref> object represents the definition of a generic method.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref> can only be used to create generic method definitions; it cannot be used to create a constructed generic method directly. However, a subclass of <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref> might represent a constructed generic method.</p>\n"
  example:
  - "\n<p>The following code example displays the status of a method. This code is part of a larger example provided for the <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method.</p>GenericMethodBuilder#7"
  syntax:
    content: public override bool IsGenericMethodDefinition { get; }
    content.vb: Public Overrides ReadOnly Property IsGenericMethodDefinition As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref> object represents the definition of a generic method; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.Name
  commentId: P:System.Reflection.Emit.MethodBuilder.Name
  id: Name
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.Emit.MethodBuilder.Name
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 124
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Retrieves the name of this method.</p>\n"
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Read-only. Retrieves a string containing the simple name of this method.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.ReturnParameter
  commentId: P:System.Reflection.Emit.MethodBuilder.ReturnParameter
  id: ReturnParameter
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: ReturnParameter
  fullName: System.Reflection.Emit.MethodBuilder.ReturnParameter
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReturnParameter
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 125
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets a <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> object that contains information about the return type of the method, such as whether the return type has custom modifiers. </p>\n"
  remarks: "\n<p>Compiler designers can use the <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> object returned by this property to discover whether custom modifiers, such as <xref href=\"Microsoft.VisualC.IsConstModifier\" data-throw-if-not-resolved=\"false\"></xref>, have been applied to the return type.</p>\n"
  syntax:
    content: public override ParameterInfo ReturnParameter { get; }
    content.vb: Public Overrides ReadOnly Property ReturnParameter As ParameterInfo
    parameters: []
    return:
      type: System.Reflection.ParameterInfo
      description: "\n<p>A <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> object that contains information about the return type.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The declaring type has not been created.</p>\n"
  seealso:
  - type: System.Reflection.ParameterInfo.GetOptionalCustomModifiers
    commentId: M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers
  - type: System.Reflection.ParameterInfo.GetRequiredCustomModifiers
    commentId: M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.ReturnType
  commentId: P:System.Reflection.Emit.MethodBuilder.ReturnType
  id: ReturnType
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: ReturnType
  fullName: System.Reflection.Emit.MethodBuilder.ReturnType
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReturnType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 126
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the return type of the method represented by this <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Starting with the .NET Framework 2.0 and the .NET Compact Framework 2.0, this member is inherited from the base class, <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref>. See <xref href=\"System.Reflection.MethodInfo.ReturnType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override Type ReturnType { get; }
    content.vb: Public Overrides ReadOnly Property ReturnType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The return type of the method.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
  commentId: M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
  id: DefineGenericParameters(System.String[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: DefineGenericParameters(String[])
  fullName: System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineGenericParameters
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 127
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets the number of generic type parameters for the current method, specifies their names, and returns an array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> objects that can be used to define their constraints.</p>\n"
  remarks: "\n<p>Calling the <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method makes the current method generic. There is no way to undo this change. Calling this method a second time causes an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The type parameters of the generic method can be retrieved later by using the <xref href=\"System.Reflection.Emit.MethodBuilder.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>By convention, a type parameter name is a single uppercase letter.</p>\n<p>For more information, see <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodInfo.GetGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref>. For information on generic types, see <xref href=\"System.Type.IsGenericType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example creates a dynamic type, <code>DemoType</code>, which contains the dynamic generic method <code>DemoMethod</code>. This method has two generic type parameters, one of which is used as a parameter, and the other as the return type.</p>\n<p>When the code is executed, the dynamic assembly is saved as DemoGenericMethod1.dll, and can be examined using the Ildasm.exe (IL Disassembler). </p>\n<p>This code example generates a simple method body that merely returns a null reference. For a code example with a more fully developed method body that creates and uses generic types, see How to: Define a Generic Method with Reflection Emit. </p>GenericMethodBuilder#1"
  syntax:
    content: public GenericTypeParameterBuilder[] DefineGenericParameters(params string[] names)
    content.vb: Public Function DefineGenericParameters(ParamArray names As String()) As GenericTypeParameterBuilder()
    parameters:
    - id: names
      type: System.String[]
      description: "\n<p>An array of strings that represent the names of the generic type parameters.</p>\n"
    return:
      type: System.Reflection.Emit.GenericTypeParameterBuilder[]
      description: "\n<p>An array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> objects representing the type parameters of the generic method.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Generic type parameters have already been defined for this method.</p>\n<p>-or-</p>\n<p>The method has been completed already.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\" data-throw-if-not-resolved=\"false\"></xref> method has been called for the current method.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>names</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>names</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>names</em> is an empty array.</p>\n"
  seealso:
  - type: System.Reflection.MethodInfo
    commentId: T:System.Reflection.MethodInfo
  - type: System.Type.IsGenericType
    commentId: P:System.Type.IsGenericType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String())
  name.vb: DefineGenericParameters(String())
- uid: System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  commentId: M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  id: DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: DefineParameter(Int32, ParameterAttributes, String)
  fullName: System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32, System.Reflection.ParameterAttributes, System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefineParameter
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 128
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.Emit.ParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> object returned by this method can be used to set the default value for a parameter or to apply custom attributes. </p>\n<p>Parameter numbering begins with 1, so <em>position</em> is 1 for the first parameter. If <em>position</em> is zero, this method affects the return value.</p>\n<p>In the .NET Framework versions 1.0 and 1.1, an exception is thrown if <em>position</em> is zero, so this method cannot be used to modify attributes of the return value in those versions.</p>\n"
  syntax:
    content: public ParameterBuilder DefineParameter(int position, ParameterAttributes attributes, string strParamName)
    content.vb: Public Function DefineParameter(position As Integer, attributes As ParameterAttributes, strParamName As String) As ParameterBuilder
    parameters:
    - id: position
      type: System.Int32
      description: "\n<p>The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method. </p>\n"
    - id: attributes
      type: System.Reflection.ParameterAttributes
      description: "\n<p>The parameter attributes of the parameter. </p>\n"
    - id: strParamName
      type: System.String
      description: "\n<p>The name of the parameter. The name can be the null string. </p>\n"
    return:
      type: System.Reflection.Emit.ParameterBuilder
      description: "\n<p>Returns a <strong>ParameterBuilder</strong> object that represents a parameter of this method or the return value of this method.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The method has no parameters.</p>\n<p>-or- </p>\n<p>\n<em>position</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>position</em> is greater than the number of the method's parameters. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.Equals(System.Object)
  commentId: M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.Emit.MethodBuilder.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 129
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Determines whether the given object is equal to this instance.</p>\n"
  remarks: "\n<p>Equality is determined by having the same name, attributes, and signature.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with this <strong>MethodBuilder</strong> instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> is an instance of <strong>MethodBuilder</strong> and is equal to this object; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.MethodBuilder.GetGenericArguments
  commentId: M:System.Reflection.Emit.MethodBuilder.GetGenericArguments
  id: GetGenericArguments
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: GetGenericArguments()
  fullName: System.Reflection.Emit.MethodBuilder.GetGenericArguments()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGenericArguments
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 130
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns an array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the type parameters of the method, if it is generic.</p>\n"
  remarks: "\n<p>The type parameters of a generic method also are returned by the <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method that is used to define them.</p>\n<p>For more information, see <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodInfo.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref>. For information on generic types, see <xref href=\"System.Type.IsGenericType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override Type[] GetGenericArguments()
    content.vb: Public Overrides Function GetGenericArguments As Type()
    return:
      type: System.Type[]
      description: "\n<p>An array of <xref href=\"System.Reflection.Emit.GenericTypeParameterBuilder\" data-throw-if-not-resolved=\"false\"></xref> objects representing the type parameters, if the method is generic, or <strong>null</strong> if the method is not generic. </p>\n"
  seealso:
  - type: System.Reflection.MethodInfo
    commentId: T:System.Reflection.MethodInfo
  - type: System.Type.IsGenericType
    commentId: P:System.Type.IsGenericType
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition
  commentId: M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition
  id: GetGenericMethodDefinition
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: GetGenericMethodDefinition()
  fullName: System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGenericMethodDefinition
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 131
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns this method.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref> cannot be used to emit a constructed generic method directly. The emitted method is a generic method definition.</p>\n<p>For more information, see <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodInfo.GetGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref>. For information on generic types, see <xref href=\"System.Type.IsGenericType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override MethodInfo GetGenericMethodDefinition()
    content.vb: Public Overrides Function GetGenericMethodDefinition As MethodInfo
    return:
      type: System.Reflection.MethodInfo
      description: "\n<p>The current instance of <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current method is not generic. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.MethodInfo
    commentId: T:System.Reflection.MethodInfo
  - type: System.Type.IsGenericType
    commentId: P:System.Type.IsGenericType
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.MethodBuilder.GetHashCode
  commentId: M:System.Reflection.Emit.MethodBuilder.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.Emit.MethodBuilder.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 132
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the hash code for this method.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash code for this method.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator
  commentId: M:System.Reflection.Emit.MethodBuilder.GetILGenerator
  id: GetILGenerator
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: GetILGenerator()
  fullName: System.Reflection.Emit.MethodBuilder.GetILGenerator()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetILGenerator
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 133
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns an <strong>ILGenerator</strong> for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.</p>\n"
  example:
  - "\n<p>The code sample below demonstrates the contextual usage of the <strong>GetILGenerator</strong> method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.</p>System.Reflection.Emit ILGenerator Example#1"
  syntax:
    content: public ILGenerator GetILGenerator()
    content.vb: Public Function GetILGenerator As ILGenerator
    return:
      type: System.Reflection.Emit.ILGenerator
      description: "\n<p>Returns an <strong>ILGenerator</strong> object for this method.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The method should not have a body because of its <xref href=\"System.Reflection.MethodAttributes\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.MethodImplAttributes\" data-throw-if-not-resolved=\"false\"></xref> flags, for example because it has the <xref href=\"System.Reflection.MethodAttributes.PinvokeImpl\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n<p>-or-</p>\n<p>The method is a generic method, but not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
  commentId: M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
  id: GetILGenerator(System.Int32)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: GetILGenerator(Int32)
  fullName: System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetILGenerator
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 134
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns an <strong>ILGenerator</strong> for this method with the specified Microsoft intermediate language (MSIL) stream size.</p>\n"
  example:
  - "\n<p>The code sample below demonstrates the contextual usage of the <strong>GetILGenerator</strong> method, creating and emitting a dynamic assembly that will calculate the dot product of two points in 3D space.</p>System.Reflection.Emit ILGenerator Example#1"
  syntax:
    content: public ILGenerator GetILGenerator(int size)
    content.vb: Public Function GetILGenerator(size As Integer) As ILGenerator
    parameters:
    - id: size
      type: System.Int32
      description: "\n<p>The size of the MSIL stream, in bytes. </p>\n"
    return:
      type: System.Reflection.Emit.ILGenerator
      description: "\n<p>Returns an <strong>ILGenerator</strong> object for this method.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The method should not have a body because of its <xref href=\"System.Reflection.MethodAttributes\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.MethodImplAttributes\" data-throw-if-not-resolved=\"false\"></xref> flags, for example because it has the <xref href=\"System.Reflection.MethodAttributes.PinvokeImpl\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n<p>-or-</p>\n<p>The method is a generic method, but not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.   </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.GetParameters
  commentId: M:System.Reflection.Emit.MethodBuilder.GetParameters
  id: GetParameters
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: GetParameters()
  fullName: System.Reflection.Emit.MethodBuilder.GetParameters()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetParameters
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 135
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the parameters of this method.</p>\n"
  example:
  - "\n<p>The code sample below illustrates the use of <strong>GetParameters</strong> to discover information on the parameters passed to a dynamically-generated method.</p>System.Reflection.Emit.MethodBuilder.GetParameters Example#1"
  syntax:
    content: public override ParameterInfo[] GetParameters()
    content.vb: Public Overrides Function GetParameters As ParameterInfo()
    return:
      type: System.Reflection.ParameterInfo[]
      description: "\n<p>An array of <strong>ParameterInfo</strong> objects that represent the parameters of the method.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is not currently supported. Retrieve the method using <xref href=\"System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\" data-throw-if-not-resolved=\"false\"></xref> and call <strong>GetParameters</strong> on the returned <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
  commentId: M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
  id: MakeGenericMethod(System.Type[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: MakeGenericMethod(Type[])
  fullName: System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeGenericMethod
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 136
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a generic method constructed from the current generic method definition using the specified generic type arguments.</p>\n"
  remarks: "\n<p>When you are emitting dynamic code, you might need to emit a call to a method constructed from the generic method definition represented by a <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref>, before the enclosing type has been completed. You can use the <xref href=\"System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method to create a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> for such a constructed method, and use the <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> in the emitted call.</p>\n"
  example:
  - "\n<p>The following code example creates a constructed method from an incomplete generic method definition in an incomplete type. </p>\n<p>The example creates a transient assembly and module with a single type, adds a method <code>M</code>, and makes the method generic by adding a type parameter T using the <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method. The type parameter is used as the type of the method's parameter, and also as its return type. The generic method definition is not given a body, and the enclosing type is not completed. The <xref href=\"System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method is then used to make the constructed method <code>M<String></code> (<code>M(Of String)</code> in Visual Basic). The example code has no output, because the subclass of <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method does not allow reflection over its parameters.</p>\n<p>For another code example that uses <xref href=\"System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref>, see <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> is also used extensively when emitting code that uses generic types. See How to: Define a Generic Method with Reflection Emit.</p>MethodBuilder.MakeGenericMethod#1"
  syntax:
    content: public override MethodInfo MakeGenericMethod(params Type[] typeArguments)
    content.vb: Public Overrides Function MakeGenericMethod(ParamArray typeArguments As Type()) As MethodInfo
    parameters:
    - id: typeArguments
      type: System.Type[]
      description: "\n<p>An array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the type arguments for the generic method.</p>\n"
    return:
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> representing the generic method constructed from the current generic method definition using the specified generic type arguments.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type())
  name.vb: MakeGenericMethod(Type())
- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCustomAttribute
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 137
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets a custom attribute using a specified custom attribute blob.</p>\n"
  remarks: "\n<p>For details on how to format <em>binaryAttribute</em>, see the Common Language Infrastructure (CLI) documentation, especially \"Partition II: Metadata Definition and Semantics\". The documentation is available online; see <see href=\"http://go.microsoft.com/fwlink/?LinkID=99212\">ECMA C# and Common Language Infrastructure Standards</see> on MSDN and <see href=\"http://go.microsoft.com/fwlink/?LinkID=65552\">Standard ECMA-335 - Common Language Infrastructure (CLI)</see> on the Ecma International Web site.</p>\n<p>The <see cref=\"Overload:System.Reflection.Emit.MethodBuilder.SetCustomAttribute\"></see> method can interact with the <xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\" data-throw-if-not-resolved=\"false\"></xref> method when the two methods are used in combination. See the Remarks section of the <xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\" data-throw-if-not-resolved=\"false\"></xref> method for details.</p>\n"
  syntax:
    content: public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The constructor for the custom attribute. </p>\n"
    - id: binaryAttribute
      type: System.Byte[]
      description: "\n<p>A byte blob representing the attributes. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> or <em>binaryAttribute</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCustomAttribute
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 138
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets a custom attribute using a custom attribute builder.</p>\n"
  remarks: "\n<p>The <see cref=\"Overload:System.Reflection.Emit.MethodBuilder.SetCustomAttribute\"></see> method can interact with the <xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\" data-throw-if-not-resolved=\"false\"></xref> method when the two methods are used in combination. See the Remarks section of the <xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\" data-throw-if-not-resolved=\"false\"></xref> method for details.</p>\n"
  syntax:
    content: public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: "\n<p>An instance of a helper class to describe the custom attribute. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>customBuilder</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  commentId: M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  id: SetImplementationFlags(System.Reflection.MethodImplAttributes)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: SetImplementationFlags(MethodImplAttributes)
  fullName: System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetImplementationFlags
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 139
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets the implementation flags for this method.</p>\n"
  remarks: "\n<p>When you use the <xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\" data-throw-if-not-resolved=\"false\"></xref> method in combination with the <see cref=\"Overload:System.Reflection.Emit.MethodBuilder.SetCustomAttribute\"></see> method, be aware of potential interactions. For example, using the <see cref=\"Overload:System.Reflection.Emit.MethodBuilder.SetCustomAttribute\"></see> method to add the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute also sets the <xref href=\"System.Reflection.MethodImplAttributes.PreserveSig\" data-throw-if-not-resolved=\"false\"></xref> flag. If you subsequently call the <xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Reflection.MethodImplAttributes.PreserveSig\" data-throw-if-not-resolved=\"false\"></xref> flag is overwritten. There are two ways to avoid this:</p>\n<ul><li>\n<p>Call the <xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\" data-throw-if-not-resolved=\"false\"></xref> method before you call the <see cref=\"Overload:System.Reflection.Emit.MethodBuilder.SetCustomAttribute\"></see> method. The <see cref=\"Overload:System.Reflection.Emit.MethodBuilder.SetCustomAttribute\"></see> method always respects existing method implementation flags.</p>\n</li><li>\n<p>When you set implementation flags, call the <xref href=\"System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve the existing flags, use bitwise OR to add your flag, and then call the <xref href=\"System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li></ul>\n"
  example:
  - "\n<p>The code sample below illustrates the contextual use of the <strong>SetImplementationFlags</strong> method to describe the implementation of MSIL in a method body.</p>System.Reflection.Emit.MethodBuilder.SetImplementationFlags Example#1"
  syntax:
    content: public void SetImplementationFlags(MethodImplAttributes attributes)
    content.vb: Public Sub SetImplementationFlags(attributes As MethodImplAttributes)
    parameters:
    - id: attributes
      type: System.Reflection.MethodImplAttributes
      description: "\n<p>The implementation flags to set. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The containing type was previously created using <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>For the current method, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  commentId: M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  id: SetParameters(System.Type[])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: SetParameters(Type[])
  fullName: System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetParameters
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 140
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets the number and types of parameters for a method. </p>\n"
  remarks: "\n<p>If the number and types of the parameters are known when the method is defined, they can be set using any overload of the <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineMethod\"></see> method that accepts an array of parameter types. However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined. Use this method to set the parameter types in that case.</p>\n<p>If the return type has optional or required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref>, use the <xref href=\"System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\" data-throw-if-not-resolved=\"false\"></xref> method overload.</p>\n<p>Calling this method replaces any parameter types that were set using the <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineMethod\"></see> method.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method to make a method generic. The <xref href=\"System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method is used to give the method one parameter, whose type will be specified by the first generic type parameter. The <xref href=\"System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method is used to give the method a return type, specified by the second generic type parameter.</p>\n<p>This code is part of a larger example provided for the <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method. </p>GenericMethodBuilder#3,5"
  syntax:
    content: public void SetParameters(params Type[] parameterTypes)
    content.vb: Public Sub SetParameters(ParamArray parameterTypes As Type())
    parameters:
    - id: parameterTypes
      type: System.Type[]
      description: "\n<p>An array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects representing the parameter types.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current method is generic, but is not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
    commentId: M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.MethodBuilder.SetParameters(System.Type())
  name.vb: SetParameters(Type())
- uid: System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  commentId: M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  id: SetReturnType(System.Type)
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: SetReturnType(Type)
  fullName: System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetReturnType
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 141
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets the return type of the method.</p>\n"
  remarks: "\n<p>Use this method to set the return type of a generic method, when the return type is specified by one of the generic type parameters of the method. If the return type has optional or required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref>, use the <xref href=\"System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\" data-throw-if-not-resolved=\"false\"></xref> method overload. </p>\n<p>Calling this method replaces a return type established using the <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineMethod\"></see> method.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method to make a method generic. The <xref href=\"System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method is used to give the method one parameter, whose type will be specified by the first generic type parameter. The <xref href=\"System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method is used to give the method a return type, specified by the second generic type parameter.</p>\n<p>This code is part of a larger example provided for the <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method.</p>GenericMethodBuilder#3,5"
  syntax:
    content: public void SetReturnType(Type returnType)
    content.vb: Public Sub SetReturnType(returnType As Type)
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the return type of the method.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current method is generic, but is not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
    commentId: M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  commentId: M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: SetSignature(Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: System.Reflection.Emit.MethodBuilder.SetSignature(System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetSignature
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 142
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.</p>\n"
  remarks: "\n<p>If the return type and the number and types of the parameters are known when the method is defined, they can be established using any overload of the <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineMethod\"></see> method that accepts an array of parameter types. However, a generic method can have parameters whose types are specified by one or more of its own generic type parameters, which cannot be defined until after the method has been defined. Use this method to set the parameter types in that case.</p>\n<p>If neither the return type nor the parameter types have optional or required custom modifiers, such as <xref href=\"Microsoft.VisualC.IsConstModifier\" data-throw-if-not-resolved=\"false\"></xref>, you can use the <xref href=\"System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>Calling this method replaces the parameters and return type established using the <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineMethod\"></see> method.</p>\n"
  example:
  - "\n<p>The following code example contains source code for a generic class named Sample that has a type parameter <code>T</code>. The class has a field named <code>Field</code>, of type <code>T</code>, and a generic method <code>GM</code> with its own type parameter, <code>U</code>. Method <code>GM</code> creates an instance of Sample, substituting its own type parameter <code>U</code> for the type parameter of Sample, and stores its input parameter in <code>Field</code>. This source code is compiled but not used; you can view it with the Ildasm.exe (IL Disassembler), and compare it to the code emitted by class <code>Example</code>.</p>\n<p>The code in class <code>Example</code> demonstrates the use of the <xref href=\"System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\" data-throw-if-not-resolved=\"false\"></xref> method in emitting generic code. The <code>Main</code> method of class <code>Example</code> creates a dynamic assembly containing a class named <code>Sample</code>, and uses the <xref href=\"System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method to make it generic by adding a type parameter named <code>T</code>. A default constructor and a field named <code>Field</code>, of type <code>T</code>, are added to class <code>Sample</code>. A method <code>GM</code> is added, and turned into a generic method using the <xref href=\"System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])\" data-throw-if-not-resolved=\"false\"></xref> method. The type parameter of <code>GM</code> is named <code>U</code>. Once the type parameter is defined, the signature of <code>GM</code> is added, using the <xref href=\"System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])\" data-throw-if-not-resolved=\"false\"></xref> method. There is no return type, and no required or custom modifiers, so all the parameters of this method are <strong>null</strong> except <em>parameterTypes</em>, which sets the type of the only parameter of the method; this is set to the method's type parameter, <code>U</code>. The body of the method creates an instance of the constructed type <code>Sample<U></code> (<code>Sample(Of U)</code> in Visual Basic), assigns the method's parameter to <code>Field</code>, and then prints the value of <code>Field</code>. A dummy type is defined, to hold the entry point method <code>Main</code>. In the body of <code>Main</code>, the static <code>GM</code> method is invoked on the constructed generic type <code>Sample<int></code> (<code>Sample(Of Integer)</code> in Visual Basic), with type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> substituted for <code>U</code>. The <xref href=\"System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)\" data-throw-if-not-resolved=\"false\"></xref> method is used to create a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> for the static <code>GM</code> method of the constructed generic type <code>Sample<U></code>, and the <xref href=\"System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method is then used to create a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that can emitted in a method call.</p>\n<p>When the code example is run, it saves the emitted assembly as TypeBuilderGetFieldExample.exe. You can run TypeBuilderGetFieldExample.exe, and you can use the Ildasm.exe (IL Disassembler) to compare the emitted code with the code for the <code>Sample</code> class that is compiled into the code example itself.</p>TypeBuilder.GetField_Generic#1"
  syntax:
    content: public void SetSignature(Type returnType, Type[] returnTypeRequiredCustomModifiers, Type[] returnTypeOptionalCustomModifiers, Type[] parameterTypes, Type[][] parameterTypeRequiredCustomModifiers, Type[][] parameterTypeOptionalCustomModifiers)
    content.vb: Public Sub SetSignature(returnType As Type, returnTypeRequiredCustomModifiers As Type(), returnTypeOptionalCustomModifiers As Type(), parameterTypes As Type(), parameterTypeRequiredCustomModifiers As Type()(), parameterTypeOptionalCustomModifiers As Type()())
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The return type of the method.</p>\n"
    - id: returnTypeRequiredCustomModifiers
      type: System.Type[]
      description: "\n<p>An array of types representing the required custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref>, for the return type of the method. If the return type has no required custom modifiers, specify <strong>null</strong>.</p>\n"
    - id: returnTypeOptionalCustomModifiers
      type: System.Type[]
      description: "\n<p>An array of types representing the optional custom modifiers, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref>, for the return type of the method. If the return type has no optional custom modifiers, specify <strong>null</strong>.</p>\n"
    - id: parameterTypes
      type: System.Type[]
      description: "\n<p>The types of the parameters of the method.</p>\n"
    - id: parameterTypeRequiredCustomModifiers
      type: System.Type[][]
      description: "\n<p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref>. If a particular parameter has no required custom modifiers, specify <strong>null</strong> instead of an array of types. If none of the parameters have required custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\n"
    - id: parameterTypeOptionalCustomModifiers
      type: System.Type[][]
      description: "\n<p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref>. If a particular parameter has no optional custom modifiers, specify <strong>null</strong> instead of an array of types. If none of the parameters have optional custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current method is generic, but is not a generic method definition. That is, the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, but the <xref href=\"System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
    commentId: M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)
  - type: System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
    commentId: M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.MethodBuilder.SetSignature(System.Type, System.Type(), System.Type(), System.Type(), System.Type()(), System.Type()())
  name.vb: SetSignature(Type, Type(), Type(), Type(), Type()(), Type()())
- uid: System.Reflection.Emit.MethodBuilder.ToString
  commentId: M:System.Reflection.Emit.MethodBuilder.ToString
  id: ToString
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Reflection.Emit.MethodBuilder.ToString()
  type: Method
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.cs
    startLine: 143
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns this <strong>MethodBuilder</strong> instance as a string.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.MethodBuilder.MethodImplementationFlags
  commentId: P:System.Reflection.Emit.MethodBuilder.MethodImplementationFlags
  id: MethodImplementationFlags
  parent: System.Reflection.Emit.MethodBuilder
  langs:
  - csharp
  - vb
  name: MethodImplementationFlags
  fullName: System.Reflection.Emit.MethodBuilder.MethodImplementationFlags
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MethodImplementationFlags
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 112
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override MethodImplAttributes MethodImplementationFlags { get; }
    content.vb: Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes
    parameters: []
    return:
      type: MethodImplAttributes
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.String[]
  isExternal: false
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.GenericTypeParameterBuilder[]
  isExternal: false
  name: GenericTypeParameterBuilder[]
  fullName: System.Reflection.Emit.GenericTypeParameterBuilder[]
  fullname.vb: System.Reflection.Emit.GenericTypeParameterBuilder()
  name.vb: GenericTypeParameterBuilder()
  spec.csharp:
  - uid: System.Reflection.Emit.GenericTypeParameterBuilder
    name: GenericTypeParameterBuilder
    fullName: System.Reflection.Emit.GenericTypeParameterBuilder
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.Emit.GenericTypeParameterBuilder
    name: GenericTypeParameterBuilder
    fullName: System.Reflection.Emit.GenericTypeParameterBuilder
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.ParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: ParameterAttributes
  fullName: System.Reflection.ParameterAttributes
- uid: System.Reflection.Emit.ParameterBuilder
  isExternal: false
  name: ParameterBuilder
  fullName: System.Reflection.Emit.ParameterBuilder
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: System.Reflection.ParameterInfo[]
  isExternal: false
  name: ParameterInfo[]
  fullName: System.Reflection.ParameterInfo[]
  fullname.vb: System.Reflection.ParameterInfo()
  name.vb: ParameterInfo()
  spec.csharp:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: ()
    fullName: ()
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Reflection.MethodImplAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodImplAttributes
  fullName: System.Reflection.MethodImplAttributes
- uid: System.Type[][]
  isExternal: true
  name: Type[][]
  fullName: System.Type[][]
  fullname.vb: System.Type()()
  name.vb: Type()()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    fullName: ()
  - name: ()
    fullName: ()
- uid: MethodImplAttributes
  isExternal: true
  name: MethodImplAttributes
  fullName: MethodImplAttributes
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
