items:
- uid: System.Reflection.ReflectionContext
  commentId: T:System.Reflection.ReflectionContext
  id: ReflectionContext
  parent: System.Reflection
  children:
  - System.Reflection.ReflectionContext.#ctor
  - System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  - System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  - System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  langs:
  - csharp
  - vb
  name: ReflectionContext
  fullName: System.Reflection.ReflectionContext
  type: Class
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReflectionContext
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 247
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Represents a context that can provide reflection objects.</p>\n"
  remarks: "\n<p>The purpose of this class is to provide a way for reflection code to be made aware when reflection objects originate in a context other than the default reflection context, so that operations on those objects can use that context. For example, reflection objects that originate with a <xref href=\"System.Reflection.Context.CustomReflectionContext\" data-throw-if-not-resolved=\"false\"></xref> object should be compared only with reflection objects that have the same origin. For more information, see the <xref href=\"System.Reflection.Context.CustomReflectionContext\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  syntax:
    content: 'public abstract class ReflectionContext : object'
    content.vb: >-
      Public MustInherit Class ReflectionContext
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.ReflectionContext.#ctor
  commentId: M:System.Reflection.ReflectionContext.#ctor
  id: '#ctor'
  parent: System.Reflection.ReflectionContext
  langs:
  - csharp
  - vb
  name: ReflectionContext()
  fullName: System.Reflection.ReflectionContext.ReflectionContext()
  type: Constructor
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 249
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.ReflectionContext\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected ReflectionContext()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  commentId: M:System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  id: GetTypeForObject(System.Object)
  parent: System.Reflection.ReflectionContext
  langs:
  - csharp
  - vb
  name: GetTypeForObject(Object)
  fullName: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTypeForObject
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 250
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the representation of the type of the specified object in this reflection context.</p>\n"
  syntax:
    content: public virtual TypeInfo GetTypeForObject(object value)
    content.vb: Public Overridable Function GetTypeForObject(value As Object) As TypeInfo
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to represent.</p>\n"
    return:
      type: System.Reflection.TypeInfo
      description: "\n<p>An object that represents the type of the specified object.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  commentId: M:System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  id: MapAssembly(System.Reflection.Assembly)
  parent: System.Reflection.ReflectionContext
  langs:
  - csharp
  - vb
  name: MapAssembly(Assembly)
  fullName: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MapAssembly
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 251
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the representation, in this reflection context, of an assembly that is represented by an object from another reflection context.</p>\n"
  syntax:
    content: public abstract Assembly MapAssembly(Assembly assembly)
    content.vb: Public MustOverride Function MapAssembly(assembly As Assembly) As Assembly
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: "\n<p>The external representation of the assembly to represent in this context.</p>\n"
    return:
      type: System.Reflection.Assembly
      description: "\n<p>The representation of the assembly in this reflection context.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  commentId: M:System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  id: MapType(System.Reflection.TypeInfo)
  parent: System.Reflection.ReflectionContext
  langs:
  - csharp
  - vb
  name: MapType(TypeInfo)
  fullName: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MapType
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 252
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the representation, in this reflection context, of a type represented by an object from another reflection context.</p>\n"
  syntax:
    content: public abstract TypeInfo MapType(TypeInfo type)
    content.vb: Public MustOverride Function MapType(type As TypeInfo) As TypeInfo
    parameters:
    - id: type
      type: System.Reflection.TypeInfo
      description: "\n<p>The external representation of the type to represent in this context.</p>\n"
    return:
      type: System.Reflection.TypeInfo
      description: "\n<p>The representation of the type in this reflection context..</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  fullName: System.Reflection.Assembly
