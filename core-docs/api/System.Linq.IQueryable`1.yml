items:
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  id: IQueryable`1
  parent: System.Linq
  children: []
  langs:
  - csharp
  - vb
  name: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  type: Interface
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IQueryable
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 22
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq
  summary: "\n<p>Provides functionality to evaluate queries against a specific data source wherein the type of the data is known.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> interface is intended for implementation by query providers.</p>\n<p>This interface inherits the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface so that if it represents a query, the results of that query can be enumerated. Enumeration forces the expression tree associated with an <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> object to be executed. Queries that do not return enumerable results are executed when the <xref href=\"System.Linq.IQueryProvider.Execute``1(System.Linq.Expressions.Expression)\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n<p>The definition of \"executing an expression tree\" is specific to a query provider. For example, it may involve translating the expression tree to a query language appropriate for an underlying data source.</p>\n<p>The <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> interface enables queries to be polymorphic. That is, because a query against an IQueryable data source is represented as an expression tree, it can be executed against different types of data sources.</p>\n<p>The <strong>static</strong> (<strong>Shared</strong> in Visual Basic) methods defined in the class <xref href=\"System.Linq.Queryable\" data-throw-if-not-resolved=\"false\"></xref> (except for <see cref=\"Overload:System.Linq.Queryable.AsQueryable\"></see>, <see cref=\"Overload:System.Linq.Queryable.ThenBy\"></see>, and <see cref=\"Overload:System.Linq.Queryable.ThenByDescending\"></see>) extend objects of types that implement the <xref href=\"System.Linq.IQueryable`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>For more information about how to create your own LINQ provider, see <see href=\"http://go.microsoft.com/fwlink/?LinkID=112370\">LINQ: Building an IQueryable Provider</see> on MSDN Blogs.</p>\n"
  example:
  - 
  syntax:
    content: 'public interface IQueryable<out T> : IEnumerable<T>, IQueryable, IEnumerable'
    content.vb: >-
      Public Interface IQueryable(Of Out T)
          Inherits IEnumerable(Of T), IEnumerable, IQueryable
    typeParameters:
    - id: T
      description: "\n<p>The type of the data in the data source.</p>\n"
  seealso:
  - type: System.Linq.Queryable
    commentId: T:System.Linq.Queryable
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  - System.Linq.IQueryable.ElementType
  - System.Linq.IQueryable.Expression
  - System.Linq.IQueryable.Provider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Linq.IQueryable.ElementType
  parent: System.Linq.IQueryable
  isExternal: false
  name: ElementType
  fullName: System.Linq.IQueryable.ElementType
- uid: System.Linq.IQueryable.Expression
  parent: System.Linq.IQueryable
  isExternal: false
  name: Expression
  fullName: System.Linq.IQueryable.Expression
- uid: System.Linq.IQueryable.Provider
  parent: System.Linq.IQueryable
  isExternal: false
  name: Provider
  fullName: System.Linq.IQueryable.Provider
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Linq.IQueryable
  parent: System.Linq
  isExternal: false
  name: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
