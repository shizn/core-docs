items:
- uid: System.Security.Cryptography.CryptoStream
  commentId: T:System.Security.Cryptography.CryptoStream
  id: CryptoStream
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  - System.Security.Cryptography.CryptoStream.CanRead
  - System.Security.Cryptography.CryptoStream.CanSeek
  - System.Security.Cryptography.CryptoStream.CanWrite
  - System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  - System.Security.Cryptography.CryptoStream.Flush
  - System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  - System.Security.Cryptography.CryptoStream.FlushFinalBlock
  - System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  - System.Security.Cryptography.CryptoStream.Length
  - System.Security.Cryptography.CryptoStream.Position
  - System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  - System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: CryptoStream
  fullName: System.Security.Cryptography.CryptoStream
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CryptoStream
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 11
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Defines a stream that links data streams to cryptographic transformations.</p>\n"
  remarks: "\n<p>The common language runtime uses a stream-oriented design for cryptography. The core of this design is <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref>. Any cryptographic objects that implement <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> can be chained together with any objects that implement <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, so the streamed output from one object can be fed into the input of another object. The intermediate result (the output from the first object) does not need to be stored separately.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly by calling its <xref href=\"System.Security.Cryptography.CryptoStream.Clear\" data-throw-if-not-resolved=\"false\"></xref> method, which in turn calls its <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> implementation. To dispose of the type directly, call its <xref href=\"System.Security.Cryptography.CryptoStream.Clear\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic. </p>\n<p>You should always explicitly close your <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> object after you are done using it by calling the <xref href=\"System.Security.Cryptography.CryptoStream.Clear\" data-throw-if-not-resolved=\"false\"></xref> method.  Doing so flushes the underlying stream and causes all remaining blocks of data to be processed by the <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> object.  However, if an exception occurs before you call the <xref href=\"System.IO.Stream.Close\" data-throw-if-not-resolved=\"false\"></xref> method, the <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> object might not be closed.  To ensure that the <xref href=\"System.IO.Stream.Close\" data-throw-if-not-resolved=\"false\"></xref> method always gets called, place your call to the <xref href=\"System.Security.Cryptography.CryptoStream.Clear\" data-throw-if-not-resolved=\"false\"></xref> method within the <strong>finally</strong> block of a <strong>try</strong>/<strong>catch</strong> statement.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use a <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> to encrypt a string. This method uses <xref href=\"System.Security.Cryptography.RijndaelManaged\" data-throw-if-not-resolved=\"false\"></xref> class with the specified <xref href=\"System.Security.Cryptography.SymmetricAlgorithm.Key\" data-throw-if-not-resolved=\"false\"></xref> and initialization vector (<xref href=\"System.Security.Cryptography.SymmetricAlgorithm.IV\" data-throw-if-not-resolved=\"false\"></xref>).</p>Cryptography.Rijndael.Create.File#1"
  syntax:
    content: 'public class CryptoStream : Stream, IDisposable'
    content.vb: >-
      Public Class CryptoStream
          Inherits Stream
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  commentId: M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  id: '#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)'
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: CryptoStream(IO.Stream, ICryptoTransform, CryptoStreamMode)
  fullName: System.Security.Cryptography.CryptoStream.CryptoStream(System.IO.Stream, System.Security.Cryptography.ICryptoTransform, System.Security.Cryptography.CryptoStreamMode)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 36
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> class with a target data stream, the transformation to use, and the mode of the stream.</p>\n"
  remarks: "\n<p>Any object that derives from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> can be passed into the <em>stream</em> parameter. Any object that implements <xref href=\"System.Security.Cryptography.ICryptoTransform\" data-throw-if-not-resolved=\"false\"></xref> (such as <xref href=\"System.Security.Cryptography.HashAlgorithm\" data-throw-if-not-resolved=\"false\"></xref>) can be passed into the <em>transform</em> parameter.</p>\n"
  syntax:
    content: public CryptoStream(IO.Stream stream, ICryptoTransform transform, CryptoStreamMode mode)
    content.vb: Public Sub New(stream As IO.Stream, transform As ICryptoTransform, mode As CryptoStreamMode)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream on which to perform the cryptographic transformation. </p>\n"
    - id: transform
      type: System.Security.Cryptography.ICryptoTransform
      description: "\n<p>The cryptographic transformation that is to be performed on the stream. </p>\n"
    - id: mode
      type: System.Security.Cryptography.CryptoStreamMode
      description: "\n<p>One of the <xref href=\"System.Security.Cryptography.CryptoStreamMode\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>stream</em> is not readable.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>stream</em> is not writable.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>stream</em> is invalid.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CryptoStream.CanRead
  commentId: P:System.Security.Cryptography.CryptoStream.CanRead
  id: CanRead
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.Security.Cryptography.CryptoStream.CanRead
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanRead
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 52
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> is readable.</p>\n"
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.CryptoStream.CanSeek
  commentId: P:System.Security.Cryptography.CryptoStream.CanSeek
  id: CanSeek
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: CanSeek
  fullName: System.Security.Cryptography.CryptoStream.CanSeek
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanSeek
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 60
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value indicating whether you can seek within the current <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Seeking is not enabled in a <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref>, so this method always returns <strong>false</strong>.</p>\n"
  syntax:
    content: public override bool CanSeek { get; }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.CryptoStream.CanWrite
  commentId: P:System.Security.Cryptography.CryptoStream.CanWrite
  id: CanWrite
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.Security.Cryptography.CryptoStream.CanWrite
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanWrite
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 66
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> is writable.</p>\n"
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  commentId: P:System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  id: HasFlushedFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: HasFlushedFinalBlock
  fullName: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasFlushedFinalBlock
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 83
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a value indicating whether the final buffer block has been written to the underlying stream. </p>\n"
  remarks: "\n<p>This property is set <strong>true</strong> when the <xref href=\"System.Security.Cryptography.CryptoStream.FlushFinalBlock\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n"
  example:
  - "\n<p></p>\n"
  syntax:
    content: public bool HasFlushedFinalBlock { get; }
    content.vb: Public ReadOnly Property HasFlushedFinalBlock As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CryptoStream.Length
  commentId: P:System.Security.Cryptography.CryptoStream.Length
  id: Length
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.Security.Cryptography.CryptoStream.Length
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 72
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the length in bytes of the stream.</p>\n"
  remarks: "\n<p>This property exists only to support inheritance from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, and cannot be used.</p>\n"
  syntax:
    content: public override long Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This property is not supported. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.CryptoStream.Position
  commentId: P:System.Security.Cryptography.CryptoStream.Position
  id: Position
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.Security.Cryptography.CryptoStream.Position
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Position
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 77
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets the position within the current stream.</p>\n"
  remarks: "\n<p>This property exists only to support inheritance from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, and cannot be used.</p>\n"
  syntax:
    content: public override long Position { get; set; }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This property is not supported. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 515
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong> method and the <strong>Finalize</strong> method. <strong>Dispose()</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the disposing parameter set to <strong>true</strong>. <strong>Finalize</strong> invokes <strong>Dispose</strong> with disposing set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Security.Cryptography.CryptoStream.Flush
  commentId: M:System.Security.Cryptography.CryptoStream.Flush
  id: Flush
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.Security.Cryptography.CryptoStream.Flush()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 139
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Clears all buffers for the current stream and causes any buffered data to be written to the underlying device.</p>\n"
  remarks: "\n<p>Flushing the stream will not flush its underlying encoder unless you explicitly call <xref href=\"System.Security.Cryptography.CryptoStream.Flush\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Stream.Close\" data-throw-if-not-resolved=\"false\"></xref>. Setting <xref href=\"System.IO.StreamWriter.AutoFlush\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong> means that data will be flushed from the buffer to the stream, but the encoder state will not be flushed. This allows the encoder to keep its state (partial characters) so that it can encode the next block of characters correctly. This scenario affects UTF8 and UTF7 where certain characters can only be encoded after the encoder receives the adjacent character or characters.</p>\n<p>You should call either the <xref href=\"System.IO.Stream.Close\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Security.Cryptography.CryptoStream.FlushFinalBlock\" data-throw-if-not-resolved=\"false\"></xref> method to complete flushing the buffer.</p>\n"
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: FlushAsync(Threading.CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushAsync
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 45
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Clears all buffers for the current stream asynchronously, causes any buffered data to be written to the underlying device, and monitors cancellation requests.</p>\n"
  remarks: "\n<p>You must preface your call to <xref href=\"System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> with the <strong>await</strong> (C#) or <strong>Await</strong> (Visual Basic) operator to suspend execution of the method until the task is complete. For more information, see Asynchronous Programming with Async and Await (C# and Visual Basic).</p>\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  syntax:
    content: public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function FlushAsync(cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous flush operation.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock
  commentId: M:System.Security.Cryptography.CryptoStream.FlushFinalBlock
  id: FlushFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: FlushFinalBlock()
  fullName: System.Security.Cryptography.CryptoStream.FlushFinalBlock()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushFinalBlock
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 99
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Updates the underlying data source or repository with the current state of the buffer, then clears the buffer.</p>\n"
  remarks: "\n<p>Calling the <xref href=\"System.IO.Stream.Close\" data-throw-if-not-resolved=\"false\"></xref> method will call <xref href=\"System.Security.Cryptography.CryptoStream.FlushFinalBlock\" data-throw-if-not-resolved=\"false\"></xref>. If you do not call <xref href=\"System.IO.Stream.Close\" data-throw-if-not-resolved=\"false\"></xref>, call <xref href=\"System.Security.Cryptography.CryptoStream.FlushFinalBlock\" data-throw-if-not-resolved=\"false\"></xref> to complete flushing the buffer. Call <xref href=\"System.Security.Cryptography.CryptoStream.FlushFinalBlock\" data-throw-if-not-resolved=\"false\"></xref> only when all stream activity is complete.</p>\n"
  syntax:
    content: public void FlushFinalBlock()
    content.vb: Public Sub FlushFinalBlock
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The key is corrupt which can cause invalid padding to the stream. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The current stream is not writable.</p>\n<p>-or- </p>\n<p>The final block has already been transformed. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.CryptoStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 214
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.</p>\n"
  syntax:
    content: public override int Read(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
    return:
      type: System.Int32
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Security.Cryptography.CryptoStreamMode\" data-throw-if-not-resolved=\"false\"></xref> associated with current <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> object does not match the underlying stream.  For example, this exception is thrown when using <xref href=\"System.Security.Cryptography.CryptoStreamMode.Read\" data-throw-if-not-resolved=\"false\"></xref> with an underlying stream that is write only.  </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>offset</em> parameter is less than zero.</p>\n<p>-or- </p>\n<p>The <em>count</em> parameter is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Thesum of the <em>count</em> and <em>offset</em> parameters is longer than the length of the buffer. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.CryptoStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 48
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Reads a sequence of bytes from the current stream asynchronously, advances the position within the stream by the number of bytes read, and monitors cancellation requests.</p>\n"
  remarks: "\n<p>You must preface your call to <xref href=\"System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> with the <strong>await</strong> (C#) or <strong>Await</strong> (Visual Basic) operator to suspend execution of the method until the task is complete. For more information, see Asynchronous Programming with Async and Await (C# and Visual Basic).</p>\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer to write the data into.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The byte offset in <em>buffer</em> at which to begin writing data from the stream.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to read.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>A task that represents the asynchronous read operation. The value of the task object's <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support reading.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream is currently in use by a previous read operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, IO.SeekOrigin)
  fullName: System.Security.Cryptography.CryptoStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Seek
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 49
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Sets the position within the current stream.</p>\n"
  remarks: "\n<p>This method exists only to support inheritance from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, and cannot be used.</p>\n"
  syntax:
    content: public override long Seek(long offset, IO.SeekOrigin origin)
    content.vb: Public Overrides Function Seek(offset As Long, origin As IO.SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: "\n<p>A byte offset relative to the <em>origin</em> parameter. </p>\n"
    - id: origin
      type: System.IO.SeekOrigin
      description: "\n<p>A <xref href=\"System.IO.SeekOrigin\" data-throw-if-not-resolved=\"false\"></xref> object indicating the reference point used to obtain the new position. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>This method is not supported.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is not supported. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  commentId: M:System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  fullName: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetLength
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 149
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Sets the length of the current stream.</p>\n"
  remarks: "\n<p>This property exists only to support inheritance from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, and cannot be used.</p>\n"
  syntax:
    content: public override void SetLength(long value)
    content.vb: Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This property exists only to support inheritance from <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, and cannot be used.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.CryptoStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 397
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Writes a sequence of bytes to the current <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> and advances the current position within the stream by the number of bytes written.</p>\n"
  syntax:
    content: public override void Write(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: count
      type: System.Int32
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Security.Cryptography.CryptoStreamMode\" data-throw-if-not-resolved=\"false\"></xref> associated with current <xref href=\"System.Security.Cryptography.CryptoStream\" data-throw-if-not-resolved=\"false\"></xref> object does not match the underlying stream.  For example, this exception is thrown when using <xref href=\"System.Security.Cryptography.CryptoStreamMode.Write\" data-throw-if-not-resolved=\"false\"></xref>  with an underlying stream that is read only.  </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>offset</em> parameter is less than zero.</p>\n<p>-or- </p>\n<p>The <em>count</em> parameter is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of the <em>count</em> and <em>offset</em> parameters is longer than the length of the buffer. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.CryptoStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 52
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: "\n<p>Writes a sequence of bytes to the current stream asynchronously, advances the current position within the stream by the number of bytes written, and monitors cancellation requests.</p>\n"
  remarks: "\n<p>You must preface your call to <xref href=\"System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> with the <strong>await</strong> (C#) or <strong>Await</strong> (Visual Basic) operator to suspend execution of the method until the task is complete. For more information, see Asynchronous Programming with Async and Await (C# and Visual Basic).</p>\n<p>If the operation is canceled before it completes, the returned task contains the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> value for the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer to write data from.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The zero-based byte offset in <em>buffer</em> from which to begin writing bytes to the stream.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to write.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token to monitor for cancellation requests. The default value is <xref href=\"System.Threading.CancellationToken.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that represents the asynchronous write operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The stream does not support writing.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The stream is currently in use by a previous write operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, Threading.CancellationToken)
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Security.Cryptography.CryptoStreamMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptoStreamMode
  fullName: System.Security.Cryptography.CryptoStreamMode
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Threading.Tasks.Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  fullname.vb: System.Threading.Tasks.Task(Of )
  name.vb: Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
