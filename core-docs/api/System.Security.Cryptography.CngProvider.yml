items:
- uid: System.Security.Cryptography.CngProvider
  commentId: T:System.Security.Cryptography.CngProvider
  id: CngProvider
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.CngProvider.#ctor(System.String)
  - System.Security.Cryptography.CngProvider.Equals(System.Object)
  - System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.CngProvider.GetHashCode
  - System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider
  - System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider
  - System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)
  - System.Security.Cryptography.CngProvider.Provider
  - System.Security.Cryptography.CngProvider.ToString
  langs:
  - csharp
  - vb
  name: CngProvider
  fullName: System.Security.Cryptography.CngProvider
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CngProvider
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 221
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Encapsulates the name of a key storage provider (KSP) for use with Cryptography Next Generation (CNG) objects.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> class is a utility class. It consists of static properties, comparison methods, and a private, internally maintained string that specifies a key storage provider.</p>\n<p>The static properties return <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> objects. Each object's internal string is initialized to the provider name that corresponds to the name of the static property.</p>\n<p>You can also use this class to create objects for provider types that are not covered by the static properties.</p>\n<p>Several CNG classes (such as <xref href=\"System.Security.Cryptography.CngKey\" data-throw-if-not-resolved=\"false\"></xref>) accept <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> objects through a <em>provider</em> parameter. When the class receives the <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> object, it retrieves the embedded provider name by calling the object's <xref href=\"System.Security.Cryptography.CngProvider.Provider\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Therefore, <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> serves as an enumeration of well-known providers. It lets you identify a provider by using a strongly typed value instead of a string.</p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class CngProvider : IEquatable<CngProvider>'
    content.vb: >-
      Public NotInheritable Class CngProvider
          Implements IEquatable(Of CngProvider)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{System.Security.Cryptography.CngProvider}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.CngProvider.#ctor(System.String)
  commentId: M:System.Security.Cryptography.CngProvider.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.CngProvider
  langs:
  - csharp
  - vb
  name: CngProvider(String)
  fullName: System.Security.Cryptography.CngProvider.CngProvider(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 223
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Instances of the <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> class internally maintain the provider name specified by the <em>provider</em> parameter.</p>\n<p>The primary purpose of this constructor is to provide a method for creating <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> objects for KSPs that are not represented by the static properties of the <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> class. This capacity enables future .NET Framework releases, service packs, and third-party developers to add new providers, which can be accessed just like the providers that are currently available.</p>\n"
  example:
  - 
  syntax:
    content: public CngProvider(string provider)
    content.vb: Public Sub New(provider As String)
    parameters:
    - id: provider
      type: System.String
      description: "\n<p>The name of the key storage provider (KSP) to initialize.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>provider</em> parameter is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>provider</em> parameter length is 0 (zero).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider
  commentId: P:System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider
  id: MicrosoftSmartCardKeyStorageProvider
  parent: System.Security.Cryptography.CngProvider
  langs:
  - csharp
  - vb
  name: MicrosoftSmartCardKeyStorageProvider
  fullName: System.Security.Cryptography.CngProvider.MicrosoftSmartCardKeyStorageProvider
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MicrosoftSmartCardKeyStorageProvider
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 224
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the Microsoft Smart Card Key Storage Provider.</p>\n"
  example:
  - 
  syntax:
    content: public static CngProvider MicrosoftSmartCardKeyStorageProvider { get; }
    content.vb: Public Shared ReadOnly Property MicrosoftSmartCardKeyStorageProvider As CngProvider
    parameters: []
    return:
      type: System.Security.Cryptography.CngProvider
      description: "\n<p>An object that specifies the Microsoft Smart Card Key Storage Provider.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider
  commentId: P:System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider
  id: MicrosoftSoftwareKeyStorageProvider
  parent: System.Security.Cryptography.CngProvider
  langs:
  - csharp
  - vb
  name: MicrosoftSoftwareKeyStorageProvider
  fullName: System.Security.Cryptography.CngProvider.MicrosoftSoftwareKeyStorageProvider
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MicrosoftSoftwareKeyStorageProvider
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 225
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the Microsoft Software Key Storage Provider.</p>\n"
  example:
  - 
  syntax:
    content: public static CngProvider MicrosoftSoftwareKeyStorageProvider { get; }
    content.vb: Public Shared ReadOnly Property MicrosoftSoftwareKeyStorageProvider As CngProvider
    parameters: []
    return:
      type: System.Security.Cryptography.CngProvider
      description: "\n<p>An object that specifies the Microsoft Software Key Storage Provider.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngProvider.Provider
  commentId: P:System.Security.Cryptography.CngProvider.Provider
  id: Provider
  parent: System.Security.Cryptography.CngProvider
  langs:
  - csharp
  - vb
  name: Provider
  fullName: System.Security.Cryptography.CngProvider.Provider
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Provider
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 226
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the name of the key storage provider (KSP) that the current <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> object specifies.</p>\n"
  example:
  - 
  syntax:
    content: public string Provider { get; }
    content.vb: Public ReadOnly Property Provider As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The embedded KSP name.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CngProvider.Equals(System.Object)
  commentId: M:System.Security.Cryptography.CngProvider.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Cryptography.CngProvider
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Security.Cryptography.CngProvider.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 227
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Compares the specified object to the current <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to be compared to the current <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> that specifies the same key storage provider(KSP) as the current object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)
  commentId: M:System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)
  id: Equals(System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngProvider
  langs:
  - csharp
  - vb
  name: Equals(CngProvider)
  fullName: System.Security.Cryptography.CngProvider.Equals(System.Security.Cryptography.CngProvider)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 228
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Compares the specified <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> object to the current <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public bool Equals(CngProvider other)
    content.vb: Public Function Equals(other As CngProvider) As Boolean
    parameters:
    - id: other
      type: System.Security.Cryptography.CngProvider
      description: "\n<p>An object to be compared to the current <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>other</em> parameter specifies the same key storage provider (KSP) as the current object; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.IEquatable{System.Security.Cryptography.CngProvider}.Equals(System.Security.Cryptography.CngProvider)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CngProvider.GetHashCode
  commentId: M:System.Security.Cryptography.CngProvider.GetHashCode
  id: GetHashCode
  parent: System.Security.Cryptography.CngProvider
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Security.Cryptography.CngProvider.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 229
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Generates a hash value for the name of the key storage provider (KSP) that is embedded in the current <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash value of the embedded KSP name.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)
  commentId: M:System.Security.Cryptography.CngProvider.op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)
  id: op_Equality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngProvider
  langs:
  - csharp
  - vb
  name: Equality(CngProvider, CngProvider)
  fullName: System.Security.Cryptography.CngProvider.Equality(System.Security.Cryptography.CngProvider, System.Security.Cryptography.CngProvider)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 230
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether two <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> objects specify the same key storage provider (KSP).</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator ==(CngProvider left, CngProvider right)
    content.vb: Public Shared Operator =(left As CngProvider, right As CngProvider) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.CngProvider
      description: "\n<p>An object that specifies a KSP.</p>\n"
    - id: right
      type: System.Security.Cryptography.CngProvider
      description: "\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects represent the same KSP; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)
  commentId: M:System.Security.Cryptography.CngProvider.op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)
  id: op_Inequality(System.Security.Cryptography.CngProvider,System.Security.Cryptography.CngProvider)
  parent: System.Security.Cryptography.CngProvider
  langs:
  - csharp
  - vb
  name: Inequality(CngProvider, CngProvider)
  fullName: System.Security.Cryptography.CngProvider.Inequality(System.Security.Cryptography.CngProvider, System.Security.Cryptography.CngProvider)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 231
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether two <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> objects do not represent the same key storage provider (KSP).</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator !=(CngProvider left, CngProvider right)
    content.vb: Public Shared Operator <>(left As CngProvider, right As CngProvider) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.CngProvider
      description: "\n<p>An object that specifies a KSP.</p>\n"
    - id: right
      type: System.Security.Cryptography.CngProvider
      description: "\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects do not represent the same KSP; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.CngProvider.ToString
  commentId: M:System.Security.Cryptography.CngProvider.ToString
  id: ToString
  parent: System.Security.Cryptography.CngProvider
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Security.Cryptography.CngProvider.ToString()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 232
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the name of the key storage provider (KSP) that the current <xref href=\"System.Security.Cryptography.CngProvider\" data-throw-if-not-resolved=\"false\"></xref> object specifies.</p>\n"
  example:
  - 
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The embedded KSP name.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IEquatable{System.Security.Cryptography.CngProvider}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<CngProvider>
  fullName: System.IEquatable<System.Security.Cryptography.CngProvider>
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngProvider)
  name.vb: IEquatable(Of CngProvider)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Cryptography.CngProvider
    name: CngProvider
    fullName: System.Security.Cryptography.CngProvider
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Cryptography.CngProvider
    name: CngProvider
    fullName: System.Security.Cryptography.CngProvider
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Cryptography.CngProvider
  parent: System.Security.Cryptography
  isExternal: false
  name: CngProvider
  fullName: System.Security.Cryptography.CngProvider
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{System.Security.Cryptography.CngProvider}.Equals(System.Security.Cryptography.CngProvider)
  parent: System.IEquatable{System.Security.Cryptography.CngProvider}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(CngProvider)
  fullName: System.IEquatable<System.Security.Cryptography.CngProvider>.Equals(System.Security.Cryptography.CngProvider)
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngProvider).Equals(System.Security.Cryptography.CngProvider)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Security.Cryptography.CngProvider>.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.CngProvider
    name: CngProvider
    fullName: System.Security.Cryptography.CngProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Security.Cryptography.CngProvider).Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.CngProvider
    name: CngProvider
    fullName: System.Security.Cryptography.CngProvider
  - name: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
