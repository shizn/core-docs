items:
- uid: System.BadImageFormatException
  commentId: T:System.BadImageFormatException
  id: BadImageFormatException
  parent: System
  children:
  - System.BadImageFormatException.#ctor
  - System.BadImageFormatException.#ctor(System.String)
  - System.BadImageFormatException.#ctor(System.String,System.Exception)
  - System.BadImageFormatException.#ctor(System.String,System.String)
  - System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)
  - System.BadImageFormatException.FileName
  - System.BadImageFormatException.Message
  - System.BadImageFormatException.ToString
  langs:
  - csharp
  - vb
  name: BadImageFormatException
  fullName: System.BadImageFormatException
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BadImageFormatException
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 228
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>The exception that is thrown when the file image of a dynamic link library (DLL) or an executable program is invalid. </p>\n"
  remarks: "\n<p>This exception is thrown when the file format of a dynamic link library (.dll file) or an executable (.exe file) doesn’t conform to the format that the common language runtime expects. In particular, the exception is thrown under the following conditions:</p>\n<ul><li>\n<p>An earlier version of a .NET Framework utility, such as ILDasm.exe or installutil.exe, is used with an assembly that was developed with a later version of the .NET Framework.</p>\n<p>To address this exception, use the version of the tool that corresponds to the version of the .NET Framework that was used to develop the assembly. This may require modifying the <strong>Path</strong> environment variable or providing a fully qualified path to the correct executable.</p>\n</li><li>\n<p>You try to load an unmanaged dynamic link library or executable (such as a Windows system DLL) as if it were a .NET Framework assembly. The following example illustrates this by using the <xref href=\"System.Reflection.Assembly.LoadFile(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to load Kernel32.dll.</p>System.BadImageFormatException.Class#1<p>To address this exception, access the methods defined in the DLL by using the features provided by your development language, such as the <strong>Declare</strong> statement in Visual Basic or the <xref href=\"System.Runtime.InteropServices.DllImportAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute with the <strong>extern</strong> keyword in C#. </p></li><li>\n<p>A DLL or executable is loaded as a 64-bit assembly, but it contains 32-bit features or resources. For example, it relies on COM interop or calls methods in a 32-bit dynamic link library.</p>\n<p>To address this exception, set the project's Platform target property to x86 (instead of x64 or AnyCPU) and recompile.</p>\n</li><li>\n<p>Your application’s components were created using different versions of the .NET Framework. Typically, this exception occurs when an application or component that was developed using the .NET Framework 1.0 or the .NET Framework 1.1 tries to load an assembly that was developed using the .NET Framework 2.0 SP1 or later, or when an application that was developed using the .NET Framework 2.0 SP1 or .NET Framework 3.5 tries to load an assembly that was developed using the .NET Framework 4 or later. The <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref> may be reported as a compile-time error, or the exception may be thrown at run time. The following example defines a <code>StringLib</code> class that has a single member, <code>ToProperCase</code>, and that resides in an assembly named StringLib.dll.</p>System.BadImageFormatException.Class#2<p>The following example uses reflection to load an assembly named StringLib.dll. If the source code is compiled with a .NET Framework 1.1 compiler, a <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref> is thrown by the <xref href=\"System.Reflection.Assembly.LoadFrom(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>System.BadImageFormatException.Class#3<p>To address this exception, make sure that the assembly whose code is executing and that throws the exception, and the assembly to be loaded both target compatible versions of the .NET Framework. </p></li><li>\n<p>The components of your application target different platforms. For example, you are trying to load ARM assemblies in an x86 application. You can use the following command-line utility to determine the target platforms of individual .NET Framework assemblies. The list of files should be provided as a space-delimited list at the command line.  </p>System.BadImageFormatException.Class#4</li><li>\n<p>Reflecting on C++ executable files may throw this exception. This is most likely caused by the C++ compiler stripping the relocation addresses or the .Reloc section from the executable file. To preserve the .relocation address in a C++ executable file, specify /fixed:no when linking.</p>\n</li></ul>\n<p>\n<xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref> uses the HRESULT COR_E_BADIMAGEFORMAT, which has the value 0x8007000B.</p>\n<p>For a list of initial property values for an instance of <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref>, see the <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref> constructors.</p>\n"
  syntax:
    content: 'public class BadImageFormatException : Exception'
    content.vb: >-
      Public Class BadImageFormatException
          Inherits Exception
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  inheritance:
  - System.Object
  - System.Exception
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.GetBaseException
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.BadImageFormatException.#ctor
  commentId: M:System.BadImageFormatException.#ctor
  id: '#ctor'
  parent: System.BadImageFormatException
  langs:
  - csharp
  - vb
  name: BadImageFormatException()
  fullName: System.BadImageFormatException.BadImageFormatException()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 230
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"Format of the executable or library is invalid.\" This message takes into account the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The localized error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public BadImageFormatException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.BadImageFormatException.#ctor(System.String)
  commentId: M:System.BadImageFormatException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.BadImageFormatException
  langs:
  - csharp
  - vb
  name: BadImageFormatException(String)
  fullName: System.BadImageFormatException.BadImageFormatException(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 231
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message.</p>\n"
  remarks: "\n<p>The content of the <em>message</em> parameter is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public BadImageFormatException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The message that describes the error. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.BadImageFormatException.#ctor(System.String,System.Exception)
  commentId: M:System.BadImageFormatException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.BadImageFormatException
  langs:
  - csharp
  - vb
  name: BadImageFormatException(String, Exception)
  fullName: System.BadImageFormatException.BadImageFormatException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 232
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or <strong>null</strong> if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The inner exception reference. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public BadImageFormatException(string message, Exception inner)
    content.vb: Public Sub New(message As String, inner As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception. </p>\n"
    - id: inner
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>inner</em> parameter is not a null reference, the current exception is raised in a <strong>catch</strong> block that handles the inner exception. </p>\n"
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.BadImageFormatException.#ctor(System.String,System.String)
  commentId: M:System.BadImageFormatException.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.BadImageFormatException
  langs:
  - csharp
  - vb
  name: BadImageFormatException(String, String)
  fullName: System.BadImageFormatException.BadImageFormatException(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 233
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and file name.</p>\n"
  remarks: "\n<p>The content of the <em>message</em> parameter is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.BadImageFormatException.FileName\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The full name of the file with the invalid image. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.BadImageFormatException.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public BadImageFormatException(string message, string fileName)
    content.vb: Public Sub New(message As String, fileName As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>A message that describes the error. </p>\n"
    - id: fileName
      type: System.String
      description: "\n<p>The full name of the file with the invalid image. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)
  commentId: M:System.BadImageFormatException.#ctor(System.String,System.String,System.Exception)
  id: '#ctor(System.String,System.String,System.Exception)'
  parent: System.BadImageFormatException
  langs:
  - csharp
  - vb
  name: BadImageFormatException(String, String, Exception)
  fullName: System.BadImageFormatException.BadImageFormatException(System.String, System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 234
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  remarks: "\n<p>An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property returns the same value that is passed into the constructor, or <strong>null</strong> if the <xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref> property does not supply the inner exception value to the constructor.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.BadImageFormatException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The inner exception reference. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.BadImageFormatException.FileName\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The full name of the file with the invalid image. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.BadImageFormatException.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public BadImageFormatException(string message, string fileName, Exception inner)
    content.vb: Public Sub New(message As String, fileName As String, inner As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception. </p>\n"
    - id: fileName
      type: System.String
      description: "\n<p>The full name of the file with the invalid image. </p>\n"
    - id: inner
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>inner</em> parameter is not <strong>null</strong>, the current exception is raised in a <strong>catch</strong> block that handles the inner exception. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.BadImageFormatException.FileName
  commentId: P:System.BadImageFormatException.FileName
  id: FileName
  parent: System.BadImageFormatException
  langs:
  - csharp
  - vb
  name: FileName
  fullName: System.BadImageFormatException.FileName
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileName
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 235
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the name of the file that causes this exception.</p>\n"
  remarks: "\n<p>This property returns the name of the file supplied to the constructor for the current instance, if any. If the file name was not specified or is a null reference (<strong>Nothing</strong> in Visual Basic), this property returns a null reference.</p>\n<p>This property is read-only.</p>\n"
  syntax:
    content: public string FileName { get; }
    content.vb: Public ReadOnly Property FileName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the file with the invalid image, or a null reference if no file name was passed to the constructor for the current instance.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.BadImageFormatException.Message
  commentId: P:System.BadImageFormatException.Message
  id: Message
  parent: System.BadImageFormatException
  langs:
  - csharp
  - vb
  name: Message
  fullName: System.BadImageFormatException.Message
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Message
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 236
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the error message and the name of the file that caused this exception.</p>\n"
  remarks: "\n<p>If no message was supplied to the constructor for the current exception, this property returns a system-supplied error message. If the <xref href=\"System.BadImageFormatException.FileName\" data-throw-if-not-resolved=\"false\"></xref> property is not a null reference (<strong>Nothing</strong> in Visual Basic), the message includes the file name.</p>\n<p>This property is read-only.</p>\n"
  syntax:
    content: public override string Message { get; }
    content.vb: Public Overrides ReadOnly Property Message As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A string containing the error message and the name of the file that caused this exception.</p>\n"
  overridden: System.Exception.Message
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.BadImageFormatException.ToString
  commentId: M:System.BadImageFormatException.ToString
  id: ToString
  parent: System.BadImageFormatException
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.BadImageFormatException.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 237
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.</p>\n"
  remarks: "\n<p>The string representation returned by this method includes the name of the exception, the value of the <xref href=\"System.BadImageFormatException.Message\" data-throw-if-not-resolved=\"false\"></xref> property, the result of calling <strong>ToString</strong> on the inner exception, the value of the <xref href=\"System.BadImageFormatException.FileName\" data-throw-if-not-resolved=\"false\"></xref> property, and the result of calling <xref href=\"System.Environment.StackTrace\" data-throw-if-not-resolved=\"false\"></xref>. If any of these members is a null reference (<strong>Nothing</strong> in Visual Basic), its value is not included in the returned string.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string containing the fully qualified name of this exception and possibly the error message, the name of the inner exception, and the stack trace.</p>\n"
  overridden: System.Exception.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  fullName: System.Exception.Data
- uid: System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  fullName: System.Exception.HResult
- uid: System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  fullName: System.Exception.Source
- uid: System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception.Message
  parent: System.Exception
  isExternal: false
  name: Message
  fullName: System.Exception.Message
- uid: System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
