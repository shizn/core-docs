items:
- uid: System.Data.IDbConnection
  commentId: T:System.Data.IDbConnection
  id: IDbConnection
  parent: System.Data
  children:
  - System.Data.IDbConnection.BeginTransaction
  - System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.IDbConnection.ChangeDatabase(System.String)
  - System.Data.IDbConnection.Close
  - System.Data.IDbConnection.ConnectionString
  - System.Data.IDbConnection.ConnectionTimeout
  - System.Data.IDbConnection.CreateCommand
  - System.Data.IDbConnection.Database
  - System.Data.IDbConnection.Open
  - System.Data.IDbConnection.State
  langs:
  - csharp
  - vb
  name: IDbConnection
  fullName: System.Data.IDbConnection
  type: Interface
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IDbConnection
    path: src/System.Data.Common/src/System/Data/IDbConnection.cs
    startLine: 10
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Represents an open connection to a data source, and is implemented by .NET Framework data providers that access relational databases.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.IDbConnection\" data-throw-if-not-resolved=\"false\"></xref> interface enables an inheriting class to implement a Connection class, which represents a unique session with a data source (for example, a network connection to a server). For more information about Connection classes, see Connecting to a Data Source in ADO.NET. </p>\n<p>An application does not create an instance of the <xref href=\"System.Data.IDbConnection\" data-throw-if-not-resolved=\"false\"></xref> interface directly, but creates an instance of a class that inherits <xref href=\"System.Data.IDbConnection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Classes that inherit <xref href=\"System.Data.IDbConnection\" data-throw-if-not-resolved=\"false\"></xref> must implement all inherited members, and typically define additional members to add provider-specific functionality. For example, the <xref href=\"System.Data.IDbConnection\" data-throw-if-not-resolved=\"false\"></xref> interface defines the <xref href=\"System.Data.IDbConnection.ConnectionTimeout\" data-throw-if-not-resolved=\"false\"></xref> property. In turn, the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> class inherits this property, and also defines the <xref href=\"System.Data.SqlClient.SqlConnection.PacketSize\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example creates instances of the derived classes, <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> is opened and set as the <xref href=\"System.Data.SqlClient.SqlCommand.Connection\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref>. The example then calls <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteNonQuery\" data-throw-if-not-resolved=\"false\"></xref>, and closes the connection. To accomplish this, the <xref href=\"System.Data.SqlClient.SqlCommand.ExecuteNonQuery\" data-throw-if-not-resolved=\"false\"></xref> is passed a connection string and a query string that is a Transact-SQL INSERT statement.</p>Classic WebData SqlConnection Example#1"
  syntax:
    content: 'public interface IDbConnection : IDisposable'
    content.vb: >-
      Public Interface IDbConnection
          Inherits IDisposable
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Data.IDbConnection.ConnectionString
  commentId: P:System.Data.IDbConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.IDbConnection
  langs:
  - csharp
  - vb
  name: ConnectionString
  fullName: System.Data.IDbConnection.ConnectionString
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectionString
    path: src/System.Data.Common/src/System/Data/IDbConnection.cs
    startLine: 13
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets or sets the string used to open a database.</p>\n"
  remarks: "\n<p>The <strong>ConnectionString</strong> property can be set only while the connection is closed.</p>\n"
  example:
  - "\n<p>The following example creates an instance of a derived class, <xref href=\"System.Data.OleDb.OleDbConnection\" data-throw-if-not-resolved=\"false\"></xref>, sets its <xref href=\"System.Data.OleDb.OleDbConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref>, and displays its <xref href=\"System.Data.OleDb.OleDbConnection.State\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic WebData IDbConnection.ConnectionString Example#1"
  syntax:
    content: string ConnectionString { get; set; }
    content.vb: Property ConnectionString As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - get
  - set
- uid: System.Data.IDbConnection.ConnectionTimeout
  commentId: P:System.Data.IDbConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.IDbConnection
  langs:
  - csharp
  - vb
  name: ConnectionTimeout
  fullName: System.Data.IDbConnection.ConnectionTimeout
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectionTimeout
    path: src/System.Data.Common/src/System/Data/IDbConnection.cs
    startLine: 19
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the time to wait while trying to establish a connection before terminating the attempt and generating an error.</p>\n"
  remarks: "\n<p>A value of 0 indicates no limit to the wait time, rather than no wait time, and should be avoided in a <xref href=\"System.Data.IDbConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> because it would cause the connection attempt to wait indefinitely.</p>\n"
  syntax:
    content: int ConnectionTimeout { get; }
    content.vb: ReadOnly Property ConnectionTimeout As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Data.IDbConnection.Database
  commentId: P:System.Data.IDbConnection.Database
  id: Database
  parent: System.Data.IDbConnection
  langs:
  - csharp
  - vb
  name: Database
  fullName: System.Data.IDbConnection.Database
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Database
    path: src/System.Data.Common/src/System/Data/IDbConnection.cs
    startLine: 24
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the name of the current database or the database to be used after a connection is opened.</p>\n"
  remarks: "\n<p>The <strong>Database</strong> property can be dynamically updated by using the <xref href=\"System.Data.IDbConnection.ChangeDatabase(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method or by passing an SQL statement using one of the Execute methods. (Initially the database is set by means of the connection string.) If you change the current database using an SQL statement or the <strong>ChangeDatabase</strong> method, an informational message is sent and then the property is updated.</p>\n"
  syntax:
    content: string Database { get; }
    content.vb: ReadOnly Property Database As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.Data.IDbConnection.ChangeDatabase(System.String)
    commentId: M:System.Data.IDbConnection.ChangeDatabase(System.String)
  - type: System.Data.IDbConnection.ConnectionString
    commentId: P:System.Data.IDbConnection.ConnectionString
  - type: System.Data.IDbConnection.ConnectionTimeout
    commentId: P:System.Data.IDbConnection.ConnectionTimeout
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Data.IDbConnection.State
  commentId: P:System.Data.IDbConnection.State
  id: State
  parent: System.Data.IDbConnection
  langs:
  - csharp
  - vb
  name: State
  fullName: System.Data.IDbConnection.State
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: State
    path: src/System.Data.Common/src/System/Data/IDbConnection.cs
    startLine: 29
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Gets the current state of the connection.</p>\n"
  remarks: "\n<p>The allowed state changes are: </p>\n<ul><li>\n<p>From <strong>Closed</strong> to <strong>Open</strong>, using the <strong>Open</strong> method of the Connection object.</p>\n</li><li>\n<p>From <strong>Open</strong> to <strong>Closed</strong>, using either the <strong>Close</strong> method or the <strong>Dispose</strong> method of the Connection object.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example creates an instance of a derived class, <xref href=\"System.Data.OleDb.OleDbConnection\" data-throw-if-not-resolved=\"false\"></xref>, sets its <xref href=\"System.Data.IDbConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref>, and displays its <xref href=\"System.Data.IDbConnection.State\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic WebData IDbConnection.ConnectionString Example#1"
  syntax:
    content: ConnectionState State { get; }
    content.vb: ReadOnly Property State As ConnectionState
    parameters: []
    return:
      type: System.Data.ConnectionState
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Data.IDbConnection.BeginTransaction
  commentId: M:System.Data.IDbConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.IDbConnection
  langs:
  - csharp
  - vb
  name: BeginTransaction()
  fullName: System.Data.IDbConnection.BeginTransaction()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginTransaction
    path: src/System.Data.Common/src/System/Data/IDbConnection.cs
    startLine: 34
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Begins a database transaction.</p>\n"
  remarks: "\n<p>Once the transaction has completed, you must explicitly commit or roll back the transaction by using the <xref href=\"System.Data.IDbTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.IDbTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
  syntax:
    content: IDbTransaction BeginTransaction()
    content.vb: Function BeginTransaction As IDbTransaction
    return:
      type: System.Data.IDbTransaction
- uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  commentId: M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.IDbConnection
  langs:
  - csharp
  - vb
  name: BeginTransaction(IsolationLevel)
  fullName: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginTransaction
    path: src/System.Data.Common/src/System/Data/IDbConnection.cs
    startLine: 36
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Begins a database transaction with the specified <xref href=\"System.Data.IsolationLevel\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  remarks: "\n<p>Once the transaction has completed, you must explicitly commit or roll back the transaction using the <xref href=\"System.Data.IDbTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.IDbTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
  syntax:
    content: IDbTransaction BeginTransaction(IsolationLevel il)
    content.vb: Function BeginTransaction(il As IsolationLevel) As IDbTransaction
    parameters:
    - id: il
      type: System.Data.IsolationLevel
    return:
      type: System.Data.IDbTransaction
- uid: System.Data.IDbConnection.ChangeDatabase(System.String)
  commentId: M:System.Data.IDbConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.IDbConnection
  langs:
  - csharp
  - vb
  name: ChangeDatabase(String)
  fullName: System.Data.IDbConnection.ChangeDatabase(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChangeDatabase
    path: src/System.Data.Common/src/System/Data/IDbConnection.cs
    startLine: 40
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Changes the current database for an open <strong>Connection</strong> object.</p>\n"
  syntax:
    content: void ChangeDatabase(string databaseName)
    content.vb: Sub ChangeDatabase(databaseName As String)
    parameters:
    - id: databaseName
      type: System.String
- uid: System.Data.IDbConnection.Close
  commentId: M:System.Data.IDbConnection.Close
  id: Close
  parent: System.Data.IDbConnection
  langs:
  - csharp
  - vb
  name: Close()
  fullName: System.Data.IDbConnection.Close()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Close
    path: src/System.Data.Common/src/System/Data/IDbConnection.cs
    startLine: 38
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Closes the connection to the database.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.IDbConnection.Close\" data-throw-if-not-resolved=\"false\"></xref> method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.</p>\n<p>An application can call <strong>Close</strong> more than one time without generating an exception.</p>\n"
  syntax:
    content: void Close()
    content.vb: Sub Close
  seealso:
  - type: System.Data.OleDb.OleDbConnection.Open
    commentId: M:System.Data.OleDb.OleDbConnection.Open
- uid: System.Data.IDbConnection.CreateCommand
  commentId: M:System.Data.IDbConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.IDbConnection
  langs:
  - csharp
  - vb
  name: CreateCommand()
  fullName: System.Data.IDbConnection.CreateCommand()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateCommand
    path: src/System.Data.Common/src/System/Data/IDbConnection.cs
    startLine: 42
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Creates and returns a Command object associated with the connection.</p>\n"
  syntax:
    content: IDbCommand CreateCommand()
    content.vb: Function CreateCommand As IDbCommand
    return:
      type: System.Data.IDbCommand
- uid: System.Data.IDbConnection.Open
  commentId: M:System.Data.IDbConnection.Open
  id: Open
  parent: System.Data.IDbConnection
  langs:
  - csharp
  - vb
  name: Open()
  fullName: System.Data.IDbConnection.Open()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/IDbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Open
    path: src/System.Data.Common/src/System/Data/IDbConnection.cs
    startLine: 44
  assemblies:
  - System.Data.Common
  namespace: System.Data
  summary: "\n<p>Opens a database connection with the settings specified by the <strong>ConnectionString</strong> property of the provider-specific Connection object.</p>\n"
  syntax:
    content: void Open()
    content.vb: Sub Open
references:
- uid: System.Data
  isExternal: false
  name: System.Data
  fullName: System.Data
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.IDbTransaction
  parent: System.Data
  isExternal: false
  name: IDbTransaction
  fullName: System.Data.IDbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  fullName: System.Data.IDbCommand
