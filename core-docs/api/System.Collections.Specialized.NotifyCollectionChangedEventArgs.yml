items:
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  commentId: T:System.Collections.Specialized.NotifyCollectionChangedEventArgs
  id: NotifyCollectionChangedEventArgs
  parent: System.Collections.Specialized
  children:
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems
  - System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex
  langs:
  - csharp
  - vb
  name: NotifyCollectionChangedEventArgs
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  type: Class
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotifyCollectionChangedEventArgs
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 141
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Provides data for the <xref href=\"System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  example:
  - 
  syntax:
    content: 'public class NotifyCollectionChangedEventArgs : EventArgs'
    content.vb: >-
      Public Class NotifyCollectionChangedEventArgs
          Inherits EventArgs
  seealso:
  - type: System.Collections.Specialized.INotifyCollectionChanged
    commentId: T:System.Collections.Specialized.INotifyCollectionChanged
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)
  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)
  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction)'
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction)
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 143
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class that describes a <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\" data-throw-if-not-resolved=\"false\"></xref> change.</p>\n"
  example:
  - 
  syntax:
    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action)
    content.vb: Public Sub New(action As NotifyCollectionChangedAction)
    parameters:
    - id: action
      type: System.Collections.Specialized.NotifyCollectionChangedAction
      description: "\n<p>The action that caused the event. This must be set to <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)
  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)
  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList)'
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList)
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 144
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class that describes a multi-item change.</p>\n"
  example:
  - 
  syntax:
    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems)
    content.vb: Public Sub New(action As NotifyCollectionChangedAction, changedItems As IList)
    parameters:
    - id: action
      type: System.Collections.Specialized.NotifyCollectionChangedAction
      description: "\n<p>The action that caused the event. This can be set to <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Add\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Remove\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: changedItems
      type: System.Collections.IList
      description: "\n<p>The items that are affected by the change.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)
  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)
  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList)'
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, IList)
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Collections.IList)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 145
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class that describes a multi-item <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\" data-throw-if-not-resolved=\"false\"></xref> change.</p>\n"
  example:
  - 
  syntax:
    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems)
    content.vb: Public Sub New(action As NotifyCollectionChangedAction, newItems As IList, oldItems As IList)
    parameters:
    - id: action
      type: System.Collections.Specialized.NotifyCollectionChangedAction
      description: "\n<p>The action that caused the event. This can only be set to <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: newItems
      type: System.Collections.IList
      description: "\n<p>The new items that are replacing the original items.</p>\n"
    - id: oldItems
      type: System.Collections.IList
      description: "\n<p>The original items that are replaced.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>If <em>action</em> is not Replace.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>If <em>oldItems</em> or <em>newItems</em> is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)
  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)
  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Collections.IList,System.Int32)'
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, IList, Int32)
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Collections.IList, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 146
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class that describes a multi-item <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\" data-throw-if-not-resolved=\"false\"></xref> change.</p>\n"
  example:
  - 
  syntax:
    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList newItems, IList oldItems, int startingIndex)
    content.vb: Public Sub New(action As NotifyCollectionChangedAction, newItems As IList, oldItems As IList, startingIndex As Integer)
    parameters:
    - id: action
      type: System.Collections.Specialized.NotifyCollectionChangedAction
      description: "\n<p>The action that caused the event. This can only be set to <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: newItems
      type: System.Collections.IList
      description: "\n<p>The new items that are replacing the original items.</p>\n"
    - id: oldItems
      type: System.Collections.IList
      description: "\n<p>The original items that are replaced.</p>\n"
    - id: startingIndex
      type: System.Int32
      description: "\n<p>The index of the first item of the items that are being replaced.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>If <em>action</em> is not Replace.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>If <em>oldItems</em> or <em>newItems</em> is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)
  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)
  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32)'
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, Int32)
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 147
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class that describes a multi-item change or a <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\" data-throw-if-not-resolved=\"false\"></xref> change.</p>\n"
  example:
  - 
  syntax:
    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int startingIndex)
    content.vb: Public Sub New(action As NotifyCollectionChangedAction, changedItems As IList, startingIndex As Integer)
    parameters:
    - id: action
      type: System.Collections.Specialized.NotifyCollectionChangedAction
      description: "\n<p>The action that caused the event. This can be set to <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Add\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Remove\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: changedItems
      type: System.Collections.IList
      description: "\n<p>The items affected by the change.</p>\n"
    - id: startingIndex
      type: System.Int32
      description: "\n<p>The index where the change occurred.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>If <em>action</em> is not Reset, Add, or Remove, if <em>action</em> is Reset and either <em>changedItems</em> is not null or <em>startingIndex</em> is not -1, or if action is Add or Remove and <em>startingIndex</em> is less than -1.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>If <em>action</em> is Add or Remove and <em>changedItems</em> is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)
  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)
  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Collections.IList,System.Int32,System.Int32)'
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, IList, Int32, Int32)
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Collections.IList, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 148
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class that describes a multi-item <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Move\" data-throw-if-not-resolved=\"false\"></xref> change.</p>\n"
  example:
  - 
  syntax:
    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, IList changedItems, int index, int oldIndex)
    content.vb: Public Sub New(action As NotifyCollectionChangedAction, changedItems As IList, index As Integer, oldIndex As Integer)
    parameters:
    - id: action
      type: System.Collections.Specialized.NotifyCollectionChangedAction
      description: "\n<p>The action that caused the event. This can only be set to <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Move\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: changedItems
      type: System.Collections.IList
      description: "\n<p>The items affected by the change.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The new index for the changed items.</p>\n"
    - id: oldIndex
      type: System.Int32
      description: "\n<p>The old index for the changed items.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>If <em>action</em> is not Move or <em>index</em> is less than 0.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)
  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)
  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object)'
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object)
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 149
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class that describes a one-item change.</p>\n"
  example:
  - 
  syntax:
    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem)
    content.vb: Public Sub New(action As NotifyCollectionChangedAction, changedItem As Object)
    parameters:
    - id: action
      type: System.Collections.Specialized.NotifyCollectionChangedAction
      description: "\n<p>The action that caused the event. This can be set to <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Add\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Remove\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: changedItem
      type: System.Object
      description: "\n<p>The item that is affected by the change.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>If <em>action</em> is not Reset, Add, or Remove, or if <em>action</em> is Reset and <em>changedItem</em> is not null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)
  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)
  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32)'
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Int32)
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 150
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class that describes a one-item change.</p>\n"
  example:
  - 
  syntax:
    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index)
    content.vb: Public Sub New(action As NotifyCollectionChangedAction, changedItem As Object, index As Integer)
    parameters:
    - id: action
      type: System.Collections.Specialized.NotifyCollectionChangedAction
      description: "\n<p>The action that caused the event. This can be set to <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Reset\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Add\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Remove\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: changedItem
      type: System.Object
      description: "\n<p>The item that is affected by the change.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index where the change occurred.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>If <em>action</em> is not Reset, Add, or Remove, or if <em>action</em> is Reset and either <em>changedItems</em> is not null or <em>index</em> is not -1.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)
  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)
  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Int32,System.Int32)'
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Int32, Int32)
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 151
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class that describes a one-item <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Move\" data-throw-if-not-resolved=\"false\"></xref> change.</p>\n"
  example:
  - 
  syntax:
    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object changedItem, int index, int oldIndex)
    content.vb: Public Sub New(action As NotifyCollectionChangedAction, changedItem As Object, index As Integer, oldIndex As Integer)
    parameters:
    - id: action
      type: System.Collections.Specialized.NotifyCollectionChangedAction
      description: "\n<p>The action that caused the event. This can only be set to <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Move\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: changedItem
      type: System.Object
      description: "\n<p>The item affected by the change.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The new index for the changed item.</p>\n"
    - id: oldIndex
      type: System.Int32
      description: "\n<p>The old index for the changed item.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>If <em>action</em> is not Move or <em>index</em> is less than 0.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)
  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)
  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object)'
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Object)
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Object)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 152
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class that describes a one-item <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\" data-throw-if-not-resolved=\"false\"></xref> change.</p>\n"
  example:
  - 
  syntax:
    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem)
    content.vb: Public Sub New(action As NotifyCollectionChangedAction, newItem As Object, oldItem As Object)
    parameters:
    - id: action
      type: System.Collections.Specialized.NotifyCollectionChangedAction
      description: "\n<p>The action that caused the event. This can only be set to <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: newItem
      type: System.Object
      description: "\n<p>The new item that is replacing the original item.</p>\n"
    - id: oldItem
      type: System.Object
      description: "\n<p>The original item that is replaced.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>If <em>action</em> is not Replace.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)
  commentId: M:System.Collections.Specialized.NotifyCollectionChangedEventArgs.#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)
  id: '#ctor(System.Collections.Specialized.NotifyCollectionChangedAction,System.Object,System.Object,System.Int32)'
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction, Object, Object, Int32)
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NotifyCollectionChangedEventArgs(System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Object, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 153
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Specialized.NotifyCollectionChangedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class that describes a one-item <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\" data-throw-if-not-resolved=\"false\"></xref> change.</p>\n"
  example:
  - 
  syntax:
    content: public NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction action, object newItem, object oldItem, int index)
    content.vb: Public Sub New(action As NotifyCollectionChangedAction, newItem As Object, oldItem As Object, index As Integer)
    parameters:
    - id: action
      type: System.Collections.Specialized.NotifyCollectionChangedAction
      description: "\n<p>The action that caused the event. This can be set to <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: newItem
      type: System.Object
      description: "\n<p>The new item that is replacing the original item.</p>\n"
    - id: oldItem
      type: System.Object
      description: "\n<p>The original item that is replaced.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the item being replaced.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>If <em>action</em> is not Replace.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action
  commentId: P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action
  id: Action
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: Action
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.Action
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Action
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 154
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the action that caused the event. </p>\n"
  example:
  - 
  syntax:
    content: public NotifyCollectionChangedAction Action { get; }
    content.vb: Public ReadOnly Property Action As NotifyCollectionChangedAction
    parameters: []
    return:
      type: System.Collections.Specialized.NotifyCollectionChangedAction
      description: "\n<p>A <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction\" data-throw-if-not-resolved=\"false\"></xref> value that describes the action that caused the event.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems
  commentId: P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems
  id: NewItems
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NewItems
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewItems
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewItems
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 155
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the list of new items involved in the change.</p>\n"
  example:
  - 
  syntax:
    content: public IList NewItems { get; }
    content.vb: Public ReadOnly Property NewItems As IList
    parameters: []
    return:
      type: System.Collections.IList
      description: "\n<p>The list of new items involved in the change.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex
  commentId: P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex
  id: NewStartingIndex
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: NewStartingIndex
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.NewStartingIndex
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewStartingIndex
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 156
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the index at which the change occurred.</p>\n"
  example:
  - 
  syntax:
    content: public int NewStartingIndex { get; }
    content.vb: Public ReadOnly Property NewStartingIndex As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The zero-based index at which the change occurred.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems
  commentId: P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems
  id: OldItems
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: OldItems
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldItems
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OldItems
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 157
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the list of items affected by a <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\" data-throw-if-not-resolved=\"false\"></xref>, Remove, or Move action.</p>\n"
  example:
  - 
  syntax:
    content: public IList OldItems { get; }
    content.vb: Public ReadOnly Property OldItems As IList
    parameters: []
    return:
      type: System.Collections.IList
      description: "\n<p>The list of items affected by a <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Replace\" data-throw-if-not-resolved=\"false\"></xref>, Remove, or Move action.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex
  commentId: P:System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex
  id: OldStartingIndex
  parent: System.Collections.Specialized.NotifyCollectionChangedEventArgs
  langs:
  - csharp
  - vb
  name: OldStartingIndex
  fullName: System.Collections.Specialized.NotifyCollectionChangedEventArgs.OldStartingIndex
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/ref/System.ObjectModel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OldStartingIndex
    path: src/System.ObjectModel/ref/System.ObjectModel.cs
    startLine: 158
  assemblies:
  - System.ObjectModel
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the index at which a <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Move\" data-throw-if-not-resolved=\"false\"></xref>, Remove, or Replace action occurred.</p>\n"
  example:
  - 
  syntax:
    content: public int OldStartingIndex { get; }
    content.vb: Public ReadOnly Property OldStartingIndex As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The zero-based index at which a <xref href=\"System.Collections.Specialized.NotifyCollectionChangedAction.Move\" data-throw-if-not-resolved=\"false\"></xref>, Remove, or Replace action occurred.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Collections.Specialized
  isExternal: false
  name: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: EventArgs
  fullName: System.EventArgs
- uid: System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Specialized.NotifyCollectionChangedAction
  parent: System.Collections.Specialized
  isExternal: false
  name: NotifyCollectionChangedAction
  fullName: System.Collections.Specialized.NotifyCollectionChangedAction
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
