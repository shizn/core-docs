items:
- uid: System.IDisposable
  commentId: T:System.IDisposable
  id: IDisposable
  parent: System
  children:
  - System.IDisposable.Dispose
  langs:
  - csharp
  - vb
  name: IDisposable
  fullName: System.IDisposable
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/IDisposable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IDisposable
    path: src/mscorlib/src/System/IDisposable.cs
    startLine: 53
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Provides a mechanism for releasing unmanaged resources.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/idisposable.cs#1f55292c3174123d\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/idisposable.cs#1f55292c3174123d\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>The primary use of this interface is to release unmanaged resources. The garbage collector automatically releases the memory allocated to a managed object when that object is no longer used. However, it is not possible to predict when garbage collection will occur. Furthermore, the garbage collector has no knowledge of unmanaged resources such as window handles, or open files and streams.</p>\n<p>Use the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method of this interface to explicitly release unmanaged resources in conjunction with the garbage collector. The consumer of an object can call this method when the object is no longer needed.</p>\n<p>It is a breaking change to add the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface to an existing class. Because pre-existing consumers of your type cannot call <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref>, you cannot be certain that unmanaged resources held by your type will be released. </p>\n<p>Because the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> implementation is called by the consumer of a type when the resources owned by an instance are no longer needed, you should either wrap the managed object in a <xref href=\"System.Runtime.InteropServices.SafeHandle\" data-throw-if-not-resolved=\"false\"></xref> (the recommended alternative), or you should override <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> to free unmanaged resources in the event that the consumer forgets to call <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>In the .NET Framework, the C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>For a detailed discussion about how this interface and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method are used, see the Garbage Collection and Implementing a Dispose Method topics.</p>\n"
  example:
  - <p>The following example demonstrates how to create a resource class that implements the <xref href="System.IDisposable" data-throw-if-not-resolved="false"></xref> interface.</p>System.IDisposable.Dispose Example#1
  syntax:
    content: >-
      [ComVisible(true)]

      public interface IDisposable
    content.vb: >-
      <ComVisible(True)>

      Public Interface IDisposable
  seealso:
  - type: Microsoft.Win32.SafeHandles.SafeFileHandle
    commentId: T:Microsoft.Win32.SafeHandles.SafeFileHandle
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  id: Dispose
  parent: System.IDisposable
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IDisposable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/IDisposable.cs
    startLine: 55
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</p>\n"
  remarks: "\n<p>Use this method to close or release unmanaged resources such as files, streams, and handles held by an instance of the class that implements this interface. By convention, this method is used for all tasks associated with freeing resources held by an object, or preparing an object for reuse.</p>\n<p>If you are using a class that implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface, you should call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> implementation when you are finished using the class. For more information, see the \"Using an object that implements IDisposable\" section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> topic. </p>\n<p>When implementing this method, ensure that all held resources are freed by propagating the call through the containment hierarchy. For example, if an object A allocates an object B, and object B allocates an object C, then A's <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> implementation must call <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on B, which must in turn call <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on C. </p>\n<p>The C++ compiler supports deterministic disposal of resources and does not allow direct implementation of the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>An object must also call the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method of its base class if the base class implements <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref>. For more information about implementing <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> on a base class and its subclasses, see the \"IDisposable and the inheritance hierarchy\" section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> topic. </p>\n<p>If an object's <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method is called more than once, the object must ignore all calls after the first one. The object must not throw an exception if its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method is called multiple times. Instance methods other than <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> can throw an <xref href=\"System.ObjectDisposedException\" data-throw-if-not-resolved=\"false\"></xref> when resources are already disposed.</p>\n<p>Users might expect a resource type to use a particular convention to denote an allocated state versus a freed state. An example of this is stream classes, which are traditionally thought of as open or closed. The implementer of a class that has such a convention might choose to implement a public method with a customized name, such as <code>Close</code>, that calls the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Because the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method must be called explicitly, there is always a danger that the unmanaged resources will not be released, because the consumer of an object fails to call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method. There are two ways to avoid this: </p>\n<ul><li>\n<p>Wrap the managed resource in an object derived from <xref href=\"System.Runtime.InteropServices.SafeHandle\" data-throw-if-not-resolved=\"false\"></xref>. Your <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> implementation then calls the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Runtime.InteropServices.SafeHandle\" data-throw-if-not-resolved=\"false\"></xref> instances. For more information, see \"The SafeHandle alternative\" section in the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> topic. </p>\n</li><li>\n<p>Implement a finalizer to free resources when <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> is not called. By default, the garbage collector automatically calls an object's finalizer before reclaiming its memory. However, if the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method has been called, it is typically unnecessary for the garbage collector to call the disposed object's finalizer. To prevent automatic finalization, <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> implementations can call the <xref href=\"System.GC.SuppressFinalize(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li></ul>\n<p>When you use an object that accesses unmanaged resources, such as a <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref>, a good practice is to create the instance with a <strong>using</strong> statement. The <strong>using</strong> statement automatically closes the stream and calls <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on the object when the code that is using it has completed. For an example, see the <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example shows how you can implement the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IDisposable.Dispose Example#1"
  syntax:
    content: void Dispose()
    content.vb: Sub Dispose
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
