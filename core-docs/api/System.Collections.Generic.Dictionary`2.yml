items:
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  id: Dictionary`2
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.Dictionary`2.#ctor
  - System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  - System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.Dictionary`2.#ctor(System.Int32)
  - System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.Dictionary`2.Add(`0,`1)
  - System.Collections.Generic.Dictionary`2.Clear
  - System.Collections.Generic.Dictionary`2.Comparer
  - System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  - System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  - System.Collections.Generic.Dictionary`2.Count
  - System.Collections.Generic.Dictionary`2.GetEnumerator
  - System.Collections.Generic.Dictionary`2.Item(`0)
  - System.Collections.Generic.Dictionary`2.Keys
  - System.Collections.Generic.Dictionary`2.Remove(`0)
  - System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Generic.Dictionary`2.Values
  langs:
  - csharp
  - vb
  name: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dictionary
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 49
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Represents a collection of keys and values.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs#d3599058f8d79be0\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/generic/dictionary.cs#d3599058f8d79be0\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>The <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> generic class provides a mapping from a set of keys to a set of values. Each addition to the dictionary consists of a value and its associated key. Retrieving a value by using its key is very fast, close to O(1), because the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class is implemented as a hash table.</p>\n<p>The speed of retrieval depends on the quality of the hashing algorithm of the type specified for <em>TKey</em>. </p>\n<p>As long as an object is used as a key in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, it must not change in any way that affects its hash value. Every key in a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the dictionary's equality comparer. A key cannot be <strong>null</strong>, but a value can be, if the value type <em>TValue</em> is a reference type.</p>\n<p>\n<xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires an equality implementation to determine whether keys are equal. You can specify an implementation of the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface by using a constructor that accepts a <em>comparer</em> parameter; if you do not specify an implementation, the default generic equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used. If type <em>TKey</em> implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default equality comparer uses that implementation.</p>\n<p>For example, you can use the case-insensitive string comparers provided by the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class to create dictionaries with case-insensitive string keys.</p>\n<p>The capacity of a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>For very large <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <strong>enabled</strong> attribute of the  configuration element to <strong>true</strong> in the run-time environment.</p>\n<p>For purposes of enumeration, each item in the dictionary is treated as a <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> structure representing a value and its key. The order in which the items are returned is undefined.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) returns an object of the type of the elements in the collection. Since the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is a collection of keys and values, the element type is not the type of the key or the type of the value. Instead, the element type is a <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> of the key type and the value type. For example:</p>Generic.Dictionary#11<p>The <strong>foreach</strong> statement is a wrapper around the enumerator, which allows only reading from the collection, not writing to it.</p><p>Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref href=\"System.Type.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>"
  example:
  - "\n<p>The following code example creates an empty <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> of strings with string keys and uses the <xref href=\"System.Collections.Generic.Dictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method to add some elements. The example demonstrates that the <xref href=\"System.Collections.Generic.Dictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> when attempting to add a duplicate key. </p>\n<p>The example uses the <xref href=\"System.Collections.Generic.Dictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#) to retrieve values, demonstrating that a <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced. </p>\n<p>The example shows how to use the <xref href=\"System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary, and it shows how to use the <xref href=\"System.Collections.Generic.Dictionary`2.ContainsKey(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to test whether a key exists before calling the <xref href=\"System.Collections.Generic.Dictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The example shows how to enumerate the keys and values in the dictionary and how to enumerate the keys and values alone using the <xref href=\"System.Collections.Generic.Dictionary`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Collections.Generic.Dictionary`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Finally, the example demonstrates the <xref href=\"System.Collections.Generic.Dictionary`2.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>Generic.Dictionary#1"
  syntax:
    content: 'public class Dictionary<TKey, TValue> : ICollection<KeyValuePair<TKey, TValue>>, IDictionary<TKey, TValue>, IEnumerable<KeyValuePair<TKey, TValue>>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IReadOnlyDictionary<TKey, TValue>, ICollection, IDictionary, IEnumerable'
    content.vb: >-
      Public Class Dictionary(Of TKey, TValue)
          Inherits ICollection(Of KeyValuePair(Of TKey, TValue))
          Implements IDictionary(Of TKey, TValue), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IReadOnlyDictionary(Of TKey, TValue), ICollection, IDictionary, IEnumerable
    typeParameters:
    - id: TKey
      description: "\n<p>The type of the keys in the dictionary.</p>\n"
    - id: TValue
      description: "\n<p>The type of the values in the dictionary.</p>\n"
  seealso:
  - type: System.Collections.Generic.IDictionary`2
    commentId: T:System.Collections.Generic.IDictionary`2
  - type: System.Collections.Generic.SortedList`2
    commentId: T:System.Collections.Generic.SortedList`2
  - type: System.Collections.Generic.KeyValuePair`2
    commentId: T:System.Collections.Generic.KeyValuePair`2
  - type: System.Collections.Generic.IEqualityComparer`1
    commentId: T:System.Collections.Generic.IEqualityComparer`1
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  - System.Collections.ICollection
  - System.Collections.IDictionary
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
- uid: System.Collections.Generic.Dictionary`2.#ctor
  commentId: M:System.Collections.Generic.Dictionary`2.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Dictionary()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 51
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the default equality comparer.</p>\n<p>\n<xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>. If type <em>TKey</em> implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface by using a constructor that accepts a <em>comparer</em> parameter.</p>\n<p>If you can estimate the size of the collection, using a constructor that specifies the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates an empty <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> of strings with string keys and uses the <xref href=\"System.Collections.Generic.Dictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method to add some elements. The example demonstrates that the <xref href=\"System.Collections.Generic.Dictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> when attempting to add a duplicate key. </p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.Dictionary#2"
  syntax:
    content: public Dictionary()
    content.vb: Public Sub New
  seealso:
  - type: System.Collections.Immutable.IImmutableDictionary`2
    commentId: T:System.Collections.Immutable.IImmutableDictionary`2
  - type: System.Collections.Generic.EqualityComparer`1.Default
    commentId: P:System.Collections.Generic.EqualityComparer`1.Default
  - type: System.IEquatable`1
    commentId: T:System.IEquatable`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Dictionary()
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  commentId: M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1})'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Dictionary(IDictionary<TKey, TValue>)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 52
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> and uses the default equality comparer for the key type.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the default equality comparer; likewise, every key in the source <em>dictionary</em> must also be unique according to the default equality comparer.</p>\n<p>The initial capacity of the new <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is large enough to contain all the elements in <em>dictionary</em>.</p>\n<p>\n<xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>. If type <em>TKey</em> implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface by using a constructor that accepts a <em>comparer</em> parameter.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>dictionary</em>.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor to initialize a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> with sorted content from another dictionary. The code example creates a <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> and populates it with data in random order, then passes the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor, creating a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> that is sorted. This is useful if you need to build a sorted dictionary that at some point becomes static; copying the data from a <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> improves retrieval speed.</p>Generic.Dictionary.ctor_IDic#1"
  syntax:
    content: public Dictionary(IDictionary<TKey, TValue> dictionary)
    content.vb: Public Sub New(dictionary As IDictionary(Of TKey, TValue))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dictionary</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>dictionary</em> contains one or more duplicate keys.</p>\n"
  seealso:
  - type: System.Collections.Generic.IDictionary`2
    commentId: T:System.Collections.Generic.IDictionary`2
  - type: System.Collections.Generic.EqualityComparer`1.Default
    commentId: P:System.Collections.Generic.EqualityComparer`1.Default
  - type: System.IEquatable`1
    commentId: T:System.IEquatable`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Dictionary(System.Collections.Generic.IDictionary(Of TKey, TValue))
  name.vb: Dictionary(IDictionary(Of TKey, TValue))
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Dictionary(IDictionary<TKey, TValue>, IEqualityComparer<TKey>)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IDictionary<TKey, TValue>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 53
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Use this constructor with the case-insensitive string comparers provided by the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class to create dictionaries with case-insensitive string keys.</p>\n<p>Every key in a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the specified comparer; likewise, every key in the source <em>dictionary</em> must also be unique according to the specified comparer.</p>\n<p>For example, duplicate keys can occur if <em>comparer</em> is one of the case-insensitive string comparers provided by the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class and <em>dictionary</em> does not use a case-insensitive comparer key.</p>\n<p>The initial capacity of the new <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is large enough to contain all the elements in <em>dictionary</em>.</p>\n<p>\n<xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires an equality implementation to determine whether keys are equal. If <em>comparer</em> is <strong>null</strong>, this constructor uses the default generic equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>. If type <em>TKey</em> implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default equality comparer uses that implementation.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>dictionary</em>.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor to initialize a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> with case-insensitive sorted content from another dictionary. The code example creates a <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> with a case-insensitive comparer and populates it with data in random order, then passes the <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})\" data-throw-if-not-resolved=\"false\"></xref> constructor, along with a case-insensitive equality comparer, creating a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> that is sorted. This is useful if you need to build a sorted dictionary that at some point becomes static; copying the data from a <xref href=\"System.Collections.Generic.SortedDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> to a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> improves retrieval speed.</p>\n<p>When you create a new dictionary with a case-insensitive comparer and populate it with entries from a dictionary that uses a case-sensitive comparer, as in this example, an exception occurs if the input dictionary has keys that differ only by case.</p>Generic.Dictionary.ctor_IDicIEqC#1"
  syntax:
    content: public Dictionary(IDictionary<TKey, TValue> dictionary, IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(dictionary As IDictionary(Of TKey, TValue), comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: dictionary
      type: System.Collections.Generic.IDictionary{{TKey},{TValue}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> whose elements are copied to the new <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing keys, or <strong>null</strong> to use the default <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> for the type of the key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dictionary</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>dictionary</em> contains one or more duplicate keys.</p>\n"
  seealso:
  - type: System.Collections.Generic.IDictionary`2
    commentId: T:System.Collections.Generic.IDictionary`2
  - type: System.Collections.Generic.IEqualityComparer`1
    commentId: T:System.Collections.Generic.IEqualityComparer`1
  - type: System.Collections.Generic.EqualityComparer`1.Default
    commentId: P:System.Collections.Generic.EqualityComparer`1.Default
  - type: System.IEquatable`1
    commentId: T:System.IEquatable`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Dictionary(System.Collections.Generic.IDictionary(Of TKey, TValue), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Dictionary(IDictionary(Of TKey, TValue), IEqualityComparer(Of TKey))
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Dictionary(IEqualityComparer<TKey>)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 54
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Use this constructor with the case-insensitive string comparers provided by the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class to create dictionaries with case-insensitive string keys.</p>\n<p>Every key in a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the specified comparer.</p>\n<p>\n<xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires an equality implementation to determine whether keys are equal. If <em>comparer</em> is <strong>null</strong>, this constructor uses the default generic equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>. If type <em>TKey</em> implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default equality comparer uses that implementation.</p>\n<p>If you can estimate the size of the collection, using a constructor that specifies the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> with a case-insensitive equality comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in the dictionary.</p>Generic.Dictionary.ctor_IEqC#1"
  syntax:
    content: public Dictionary(IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing keys, or <strong>null</strong> to use the default <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> for the type of the key.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEqualityComparer`1
    commentId: T:System.Collections.Generic.IEqualityComparer`1
  - type: System.Collections.Generic.EqualityComparer`1.Default
    commentId: P:System.Collections.Generic.EqualityComparer`1.Default
  - type: System.IEquatable`1
    commentId: T:System.IEquatable`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Dictionary(System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Dictionary(IEqualityComparer(Of TKey))
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Int32)
  commentId: M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Dictionary(Int32)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 55
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.</p>\n"
  remarks: "\n<p>Every key in a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the default equality comparer.</p>\n<p>The capacity of a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that can be added to the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> before resizing is necessary. As elements are added to a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires an equality implementation to determine whether keys are equal. This constructor uses the default generic equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>. If type <em>TKey</em> implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default equality comparer uses that implementation. Alternatively, you can specify an implementation of the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface by using a constructor that accepts a <em>comparer</em> parameter.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates a dictionary with an initial capacity of 4 and populates it with 4 entries.</p>Generic.Dictionary.ctor_Int32#1"
  syntax:
    content: public Dictionary(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The initial number of elements that the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> can contain.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than 0.</p>\n"
  seealso:
  - type: System.Collections.Generic.EqualityComparer`1.Default
    commentId: P:System.Collections.Generic.EqualityComparer`1.Default
  - type: System.IEquatable`1
    commentId: T:System.IEquatable`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Dictionary(System.Int32)
- uid: System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Dictionary(Int32, IEqualityComparer<TKey>)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Dictionary(System.Int32, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 56
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Use this constructor with the case-insensitive string comparers provided by the <xref href=\"System.StringComparer\" data-throw-if-not-resolved=\"false\"></xref> class to create dictionaries with case-insensitive string keys.</p>\n<p>Every key in a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> must be unique according to the specified comparer.</p>\n<p>The capacity of a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that can be added to the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> before resizing is necessary. As elements are added to a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires an equality implementation to determine whether keys are equal. If <em>comparer</em> is <strong>null</strong>, this constructor uses the default generic equality comparer, <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref>. If type <em>TKey</em> implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface, the default equality comparer uses that implementation.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> with an initial capacity of 5 and a case-insensitive equality comparer for the current culture. The example adds four elements, some with lower-case keys and some with upper-case keys. The example then attempts to add an element with a key that differs from an existing key only by case, catches the resulting exception, and displays an error message. Finally, the example displays the elements in the dictionary.</p>Generic.Dictionary.ctor_Int32IEqC#1"
  syntax:
    content: public Dictionary(int capacity, IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(capacity As Integer, comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The initial number of elements that the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> can contain.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing keys, or <strong>null</strong> to use the default <xref href=\"System.Collections.Generic.EqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> for the type of the key.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than 0.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEqualityComparer`1
    commentId: T:System.Collections.Generic.IEqualityComparer`1
  - type: System.Collections.Generic.EqualityComparer`1.Default
    commentId: P:System.Collections.Generic.EqualityComparer`1.Default
  - type: System.IEquatable`1
    commentId: T:System.IEquatable`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Dictionary(System.Int32, System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Dictionary(Int32, IEqualityComparer(Of TKey))
- uid: System.Collections.Generic.Dictionary`2.Comparer
  commentId: P:System.Collections.Generic.Dictionary`2.Comparer
  id: Comparer
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Comparer
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Comparer
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Comparer
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 57
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> that is used to determine equality of keys for the dictionary. </p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> requires an equality implementation to determine whether keys are equal. You can specify an implementation of the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface by using a constructor that accepts a <em>comparer</em> parameter; if you do not specify one, the default generic equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n<p>Getting the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public IEqualityComparer<TKey> Comparer { get; }
    content.vb: Public ReadOnly Property Comparer As IEqualityComparer(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation that is used to determine equality of keys for the current <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> and to provide hash values for the keys.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Comparer
- uid: System.Collections.Generic.Dictionary`2.Count
  commentId: P:System.Collections.Generic.Dictionary`2.Count
  id: Count
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 58
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> can store. The <xref href=\"System.Collections.Generic.Dictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref> property is the number of elements that are actually in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity is always greater than or equal to <xref href=\"System.Collections.Generic.Dictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.Generic.Dictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds the capacity while adding elements, the capacity is increased by automatically reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>Getting the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of key/value pairs contained in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Count
- uid: System.Collections.Generic.Dictionary`2.Item(`0)
  commentId: P:System.Collections.Generic.Dictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 59
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets or sets the value associated with the specified key.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following C# syntax: <code>myCollection[key]</code> (<code>myCollection(key)</code> in Visual Basic).</p>\n<p>You can also use the <xref href=\"System.Collections.Generic.Dictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. When you set the property value, if the key is in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, the value associated with that key is replaced by the assigned value. If the key is not in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, the key and value are added to the dictionary. In contrast, the <xref href=\"System.Collections.Generic.Dictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>A key cannot be <strong>null</strong>, but a value can be, if the value type <em>TValue</em> is a reference type.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.Generic.Dictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.Generic.Dictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>Getting or setting the value of this property approaches an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Collections.Generic.Dictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#) to retrieve values, demonstrating that a <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> is thrown when a requested key is not present, and showing that the value associated with a key can be replaced. </p>\n<p>The example also shows how to use the <xref href=\"System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method as a more efficient way to retrieve values if a program often must try key values that are not in the dictionary.</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class. <code>openWith</code> is the name of the Dictionary used in this example.</p>Generic.Dictionary#2,3,4,5"
  syntax:
    content: public TValue this[TKey key] { get; set; }
    content.vb: Public Property Item(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key of the value to get or set.</p>\n"
    return:
      type: '{TValue}'
      description: "\n<p>The value associated with the specified key. If the specified key is not found, a get operation throws a <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref>, and a set operation creates a new element with the specified key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "\n<p>The property is retrieved and <em>key</em> does not exist in the collection.</p>\n"
  seealso:
  - type: System.Collections.Generic.Dictionary`2.Add(`0,`1)
    commentId: M:System.Collections.Generic.Dictionary`2.Add(`0,`1)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: System.Collections.Generic.Dictionary`2.Keys
  commentId: P:System.Collections.Generic.Dictionary`2.Keys
  id: Keys
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 60
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets a collection containing the keys in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The order of the keys in the <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> is unspecified, but it is the same order as the associated values in the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Collections.Generic.Dictionary`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The returned <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the keys in the original <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Getting the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to enumerate the keys in the dictionary using the <xref href=\"System.Collections.Generic.Dictionary`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property, and how to enumerate the keys and values in the dictionary.</p>\n<p>This code is part of a larger example that can be compiled and executed (<code>openWith</code> is the name of the Dictionary used in this example). See <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>Generic.Dictionary#9,7"
  syntax:
    content: public Dictionary<TKey, TValue>.KeyCollection Keys { get; }
    content.vb: Public ReadOnly Property Keys As Dictionary(Of TKey, TValue).KeyCollection
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary`2.KeyCollection
      description: "\n<p>A <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> containing the keys in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.Dictionary`2.KeyCollection
    commentId: T:System.Collections.Generic.Dictionary`2.KeyCollection
  - type: System.Collections.Generic.Dictionary`2.Values
    commentId: P:System.Collections.Generic.Dictionary`2.Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.Dictionary`2.Values
  commentId: P:System.Collections.Generic.Dictionary`2.Values
  id: Values
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Values
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 73
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets a collection containing the values in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The order of the values in the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is unspecified, but it is the same order as the associated keys in the <xref href=\"System.Collections.Generic.Dictionary`2.KeyCollection\" data-throw-if-not-resolved=\"false\"></xref> returned by the <xref href=\"System.Collections.Generic.Dictionary`2.Keys\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The returned <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the values in the original <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. Therefore, changes to the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Getting the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>This code example shows how to enumerate the values in the dictionary using the <xref href=\"System.Collections.Generic.Dictionary`2.Values\" data-throw-if-not-resolved=\"false\"></xref> property, and how to enumerate the keys and values in the dictionary.</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class (<code>openWith</code> is the name of the Dictionary used in this example).</p>Generic.Dictionary#8,7"
  syntax:
    content: public Dictionary<TKey, TValue>.ValueCollection Values { get; }
    content.vb: Public ReadOnly Property Values As Dictionary(Of TKey, TValue).ValueCollection
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary`2.ValueCollection
      description: "\n<p>A <xref href=\"System.Collections.Generic.Dictionary`2.ValueCollection\" data-throw-if-not-resolved=\"false\"></xref> containing the values in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.Dictionary`2.ValueCollection
    commentId: T:System.Collections.Generic.Dictionary`2.ValueCollection
  - type: System.Collections.Generic.Dictionary`2.Keys
    commentId: P:System.Collections.Generic.Dictionary`2.Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.Dictionary`2.Add(`0,`1)
  commentId: M:System.Collections.Generic.Dictionary`2.Add(`0,`1)
  id: Add(`0,`1)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Add(TKey, TValue)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 74
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds the specified key and value to the dictionary.</p>\n"
  remarks: "\n<p>You can also use the <xref href=\"System.Collections.Generic.Dictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>; for example, <code>myCollection[myKey] = myValue</code> (in Visual Basic, <code>myCollection(myKey) = myValue</code>). However, if the specified key already exists in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.Generic.Dictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.Generic.Dictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref>method throws an exception if a value with the specified key already exists.</p>\n<p>If the <xref href=\"System.Collections.Generic.Dictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref> property value already equals the capacity, the capacity of the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</p>\n<p>A key cannot be <strong>null</strong>, but a value can be, if <em>TValue</em> is a reference type.</p>\n<p>If <xref href=\"System.Collections.Generic.Dictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity, this method approaches an O(1) operation. If the capacity must be increased to accommodate the new element, this method becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Dictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example creates an empty <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> of strings with string keys and uses the <xref href=\"System.Collections.Generic.Dictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method to add some elements. The example demonstrates that the <xref href=\"System.Collections.Generic.Dictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> when attempting to add a duplicate key. </p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Generic.Dictionary#2"
  syntax:
    content: public void Add(TKey key, TValue value)
    content.vb: Public Sub Add(key As TKey, value As TValue)
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key of the element to add.</p>\n"
    - id: value
      type: '{TValue}'
      description: "\n<p>The value of the element to add. The value can be <strong>null</strong> for reference types.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element with the same key already exists in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.Dictionary`2.Remove(`0)
    commentId: M:System.Collections.Generic.Dictionary`2.Remove(`0)
  - type: System.Collections.Generic.Dictionary`2.Item(`0)
    commentId: P:System.Collections.Generic.Dictionary`2.Item(`0)
  - type: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    commentId: M:System.Collections.Generic.IDictionary`2.Add(`0,`1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Add(TKey, TValue)
- uid: System.Collections.Generic.Dictionary`2.Clear
  commentId: M:System.Collections.Generic.Dictionary`2.Clear
  id: Clear
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 75
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all keys and values from the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.Dictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref> property is set to 0, and references to other objects from elements of the collection are also released. The capacity remains unchanged.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is the capacity of the dictionary.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Clear()
- uid: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsKey
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 76
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> contains the specified key.</p>\n"
  remarks: "\n<p>This method approaches an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to use the <xref href=\"System.Collections.Generic.Dictionary`2.ContainsKey(`0)\" data-throw-if-not-resolved=\"false\"></xref> method to test whether a key exists prior to calling the <xref href=\"System.Collections.Generic.Dictionary`2.Add(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref> method. It also shows how to use the <xref href=\"System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve values, which is an efficient way to retrieve values when a program frequently tries keys that are not in the dictionary. Finally, it shows the least efficient way to test whether keys exist, by using the <xref href=\"System.Collections.Generic.Dictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#).</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class (<code>openWith</code> is the name of the Dictionary used in this example).</p>Generic.Dictionary#6,5,4"
  syntax:
    content: public bool ContainsKey(TKey key)
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified key; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
    commentId: M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  commentId: M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)
  id: ContainsValue(`1)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: ContainsValue(TValue)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ContainsValue(TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsValue
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 77
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> contains a specific value.</p>\n"
  remarks: "\n<p>This method determines equality using the default equality comparer <xref href=\"System.Collections.Generic.EqualityComparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> for <em>TValue</em>, the type of values in the dictionary.</p>\n<p>This method performs a linear search; therefore, the average execution time is proportional to <xref href=\"System.Collections.Generic.Dictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref>. That is, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.Dictionary`2.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool ContainsValue(TValue value)
    content.vb: Public Function ContainsValue(value As TValue) As Boolean
    parameters:
    - id: value
      type: '{TValue}'
      description: "\n<p>The value to locate in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong> for reference types.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified value; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
    commentId: M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  - type: System.Collections.Generic.EqualityComparer`1.Default
    commentId: P:System.Collections.Generic.EqualityComparer`1.Default
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ContainsValue(TValue)
- uid: System.Collections.Generic.Dictionary`2.GetEnumerator
  commentId: M:System.Collections.Generic.Dictionary`2.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 78
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>For purposes of enumeration, each item is a <xref href=\"System.Collections.Generic.KeyValuePair`2\" data-throw-if-not-resolved=\"false\"></xref> structure representing a value and its key.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. Therefore, you must call the <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For better performance, the enumerator returned by this property does not throw an exception if it is positioned before the first element or after the last element and the <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property is accessed; the value of the <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. </p>\n<p>The <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property returns the same element until the <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method is called. <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public Dictionary<TKey, TValue>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As Dictionary(Of TKey, TValue).Enumerator
    return:
      type: System.Collections.Generic.Dictionary`2.Enumerator
      description: "\n<p>A <xref href=\"System.Collections.Generic.Dictionary`2.Enumerator\" data-throw-if-not-resolved=\"false\"></xref> structure for the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.Generic.Dictionary`2.Enumerator
    commentId: T:System.Collections.Generic.Dictionary`2.Enumerator
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).GetEnumerator()
- uid: System.Collections.Generic.Dictionary`2.Remove(`0)
  commentId: M:System.Collections.Generic.Dictionary`2.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: Remove(TKey)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 79
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the value with the specified key from the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> does not contain an element with the specified key, the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. No exception is thrown.</p>\n<p>This method approaches an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to remove a key/value pair from a dictionary using the <xref href=\"System.Collections.Generic.Dictionary`2.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class (<code>openWith</code> is the name of the Dictionary used in this example).</p>Generic.Dictionary#10"
  syntax:
    content: public bool Remove(TKey key)
    content.vb: Public Function Remove(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key of the element to remove.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the element is successfully found and removed; otherwise, <strong>false</strong>.  This method returns <strong>false</strong> if <em>key</em> is not found in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.Dictionary`2.Add(`0,`1)
    commentId: M:System.Collections.Generic.Dictionary`2.Add(`0,`1)
  - type: System.Collections.Generic.IDictionary`2.Remove(`0)
    commentId: M:System.Collections.Generic.IDictionary`2.Remove(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).Remove(TKey)
- uid: System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Generic.Dictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetValue
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 91
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the value associated with the specified key.</p>\n"
  remarks: "\n<p>This method combines the functionality of the <xref href=\"System.Collections.Generic.Dictionary`2.ContainsKey(`0)\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Collections.Generic.Dictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the key is not found, then the <em>value</em> parameter gets the appropriate default value for the type <em>TValue</em>; for example, 0 (zero) for integer types, <strong>false</strong> for Boolean types, and <strong>null</strong> for reference types.</p>\n<p>Use the <xref href=\"System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method if your code frequently attempts to access keys that are not in the dictionary. Using this method is more efficient than catching the <xref href=\"System.Collections.Generic.KeyNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> thrown by the <xref href=\"System.Collections.Generic.Dictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>This method approaches an O(1) operation.</p>\n"
  example:
  - "\n<p>The example shows how to use the <xref href=\"System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method as a more efficient way to retrieve values in a program that frequently tries keys that are not in the dictionary. For contrast, the example also shows how the <xref href=\"System.Collections.Generic.Dictionary`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> property (the indexer in C#) throws exceptions when attempting to retrieve nonexistent keys.</p>\n<p>This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class (<code>openWith</code> is the name of the Dictionary used in this example).</p>Generic.Dictionary#5,4"
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    content.vb: Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key of the value to get.</p>\n"
    - id: value
      type: '{TValue}'
      description: "\n<p>When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the <em>value</em> parameter. This parameter is passed uninitialized.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified key; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.Dictionary`2.ContainsKey(`0)
    commentId: M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)
  - type: System.Collections.Generic.Dictionary`2.Item(`0)
    commentId: P:System.Collections.Generic.Dictionary`2.Item(`0)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2
  name: Generic.IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: Generic.IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IEnumerable(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<Generic.KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Generic.IReadOnlyCollection(Of Generic.KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: Generic.IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: Generic.IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Collections.Generic.IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  fullname.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: Collections.Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: false
  name: Generic.IReadOnlyDictionary<, >
  fullName: System.Collections.Generic.IReadOnlyDictionary<, >
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of , )
  name.vb: Generic.IReadOnlyDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: Generic.IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  definition: System.Collections.Generic.IEqualityComparer`1
  name: Collections.Generic.IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: Collections.Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  isExternal: false
  name: Collections.Generic.IEqualityComparer<>
  fullName: System.Collections.Generic.IEqualityComparer<>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of )
  name.vb: Collections.Generic.IEqualityComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.Collections.Generic.Dictionary`2.KeyCollection
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary.KeyCollection<>
  fullName: System.Collections.Generic.Dictionary.KeyCollection<>
  fullname.vb: System.Collections.Generic.Dictionary.KeyCollection(Of )
  name.vb: Dictionary.KeyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.KeyCollection
    name: Dictionary.KeyCollection
    fullName: System.Collections.Generic.Dictionary.KeyCollection
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.KeyCollection
    name: Dictionary.KeyCollection
    fullName: System.Collections.Generic.Dictionary.KeyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2.ValueCollection
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary.ValueCollection<>
  fullName: System.Collections.Generic.Dictionary.ValueCollection<>
  fullname.vb: System.Collections.Generic.Dictionary.ValueCollection(Of )
  name.vb: Dictionary.ValueCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.ValueCollection
    name: Dictionary.ValueCollection
    fullName: System.Collections.Generic.Dictionary.ValueCollection
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.ValueCollection
    name: Dictionary.ValueCollection
    fullName: System.Collections.Generic.Dictionary.ValueCollection
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.Dictionary`2.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary.Enumerator<>
  fullName: System.Collections.Generic.Dictionary.Enumerator<>
  fullname.vb: System.Collections.Generic.Dictionary.Enumerator(Of )
  name.vb: Dictionary.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2.Enumerator
    name: Dictionary.Enumerator
    fullName: System.Collections.Generic.Dictionary.Enumerator
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2.Enumerator
    name: Dictionary.Enumerator
    fullName: System.Collections.Generic.Dictionary.Enumerator
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Collections.Generic.KeyNotFoundException
  isExternal: false
  name: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
