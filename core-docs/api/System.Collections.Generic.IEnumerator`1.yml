items:
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  id: IEnumerator`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.IEnumerator`1.Current
  langs:
  - csharp
  - vb
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  type: Interface
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IEnumerator
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2390
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Supports a simple iteration over a generic collection.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> is the base interface for all generic enumerators.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator instance instead.</p>\n<p>The <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method is provided for COM interoperability. It does not necessarily need to be implemented; instead, the implementer can simply throw a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>. However, if you choose to do this, you should make sure no callers are relying on the <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> functionality.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration. To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace are not synchronized.</p>\n"
  example:
  - "\n<p>The following example shows an implementation of the <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> interface for a collection class of custom objects. The custom object is an instance of the type <code>Box</code>, and the collection class is <code>BoxCollection</code>. This code example is part of a larger example provided for the <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections.Generic.BoxExamples#3"
  syntax:
    content: 'public interface IEnumerator<out T> : IEnumerator, IDisposable'
    content.vb: >-
      Public Interface IEnumerator(Of Out T)
          Inherits IEnumerator, IDisposable
    typeParameters:
    - id: T
      description: "\n<p>The type of objects to enumerate.</p>\n"
  seealso:
  - type: System.Collections.Generic.IEnumerable`1
    commentId: T:System.Collections.Generic.IEnumerable`1
  - type: System.Collections.Generic.ICollection`1
    commentId: T:System.Collections.Generic.ICollection`1
  - type: System.Collections
    commentId: N:System.Collections
  inheritedMembers:
  - System.Collections.IEnumerator.MoveNext
  - System.Collections.IEnumerator.Reset
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
- uid: System.Collections.Generic.IEnumerator`1.Current
  commentId: P:System.Collections.Generic.IEnumerator`1.Current
  id: Current
  parent: System.Collections.Generic.IEnumerator`1
  langs:
  - csharp
  - vb
  name: Current
  fullName: System.Collections.Generic.IEnumerator<T>.Current
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Current
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2392
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the element in the collection at the current position of the enumerator.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined under any of the following conditions:</p>\n<ul><li>\n<p>The enumerator is positioned before the first element in the collection, immediately after the enumerator is created.   <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> must be called to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>The last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, which indicates the end of the collection.</p>\n</li><li>\n<p>The enumerator is invalidated due to changes made in the collection, such as adding, modifying, or deleting elements.</p>\n</li></ul>\n<p>\n<xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n"
  syntax:
    content: T Current { get; }
    content.vb: ReadOnly Property Current As T
    parameters: []
    return:
      type: '{T}'
      description: "\n<p>The element in the collection at the current position of the enumerator.</p>\n"
  seealso:
  - type: System.Collections.IEnumerator.Current
    commentId: P:System.Collections.IEnumerator.Current
  - type: System.Collections.IEnumerator.MoveNext
    commentId: M:System.Collections.IEnumerator.MoveNext
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.IEnumerator(Of T).Current
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.IEnumerator.MoveNext
  parent: System.Collections.IEnumerator
  isExternal: false
  name: MoveNext()
  fullName: System.Collections.IEnumerator.MoveNext()
  spec.csharp:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.MoveNext
    name: MoveNext
    fullName: System.Collections.IEnumerator.MoveNext
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator.Reset
  parent: System.Collections.IEnumerator
  isExternal: false
  name: Reset()
  fullName: System.Collections.IEnumerator.Reset()
  spec.csharp:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    fullName: System.Collections.IEnumerator.Reset
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerator.Reset
    name: Reset
    fullName: System.Collections.IEnumerator.Reset
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
