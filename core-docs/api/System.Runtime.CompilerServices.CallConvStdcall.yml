items:
- uid: System.Runtime.CompilerServices.CallConvStdcall
  commentId: T:System.Runtime.CompilerServices.CallConvStdcall
  id: CallConvStdcall
  parent: System.Runtime.CompilerServices
  children: []
  langs:
  - csharp
  - vb
  name: CallConvStdcall
  fullName: System.Runtime.CompilerServices.CallConvStdcall
  type: Class
  source:
    remote:
      path: src/System.Runtime.CompilerServices.VisualC/ref/System.Runtime.CompilerServices.VisualC.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CallConvStdcall
    path: src/System.Runtime.CompilerServices.VisualC/ref/System.Runtime.CompilerServices.VisualC.cs
    startLine: 21
  assemblies:
  - System.Runtime.CompilerServices.VisualC
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Indicates that a method should use the <strong>StdCall</strong> calling convention.</p>\n"
  remarks: "\n<p>The callee cleans the stack. This is the default convention for calling unmanaged functions from managed code.</p>\n<p>The classes in <xref href=\"System.Runtime.CompilerServices\" data-throw-if-not-resolved=\"false\"></xref> are for compiler writers' use only.</p>\n<p>Compilers emit custom modifiers within metadata to change the way that the just-in-time (JIT) compiler handles values when the default behavior is not appropriate.  When the JIT compiler encounters a custom modifier, it handles the value in the way that the modifier specifies.  Compilers can apply custom modifiers to methods, parameters, and return values.  The JIT compiler must respond to required modifiers but can ignore optional modifiers.  A C++ compiler could emit a custom modifier to describe how a byte should be treated in cases where the JIT compiler treats bytes in a manner that is not compatible with C++ by default. </p>\n<p>You can emit custom modifiers into metadata using one of the following techniques:</p>\n<ul><li>\n<p>Using methods in the <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> class such as <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineMethod\"></see>, <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineField\"></see>, <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineConstructor\"></see>, and <see cref=\"Overload:System.Reflection.Emit.TypeBuilder.DefineProperty\"></see>.</p>\n</li><li>\n<p>Generating a Microsoft intermediate language (MSIL) instruction file that contains calls to <strong>modopt</strong> and <strong>modreq</strong>, and assembling the file with the Ilasm.exe (IL Assembler).</p>\n</li><li>\n<p>Using the unmanaged reflection API.</p>\n</li></ul>\n"
  syntax:
    content: 'public class CallConvStdcall : object'
    content.vb: >-
      Public Class CallConvStdcall
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
references:
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
