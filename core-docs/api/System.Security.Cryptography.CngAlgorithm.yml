items:
- uid: System.Security.Cryptography.CngAlgorithm
  commentId: T:System.Security.Cryptography.CngAlgorithm
  id: CngAlgorithm
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.CngAlgorithm.#ctor(System.String)
  - System.Security.Cryptography.CngAlgorithm.Algorithm
  - System.Security.Cryptography.CngAlgorithm.ECDiffieHellman
  - System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256
  - System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384
  - System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521
  - System.Security.Cryptography.CngAlgorithm.ECDsa
  - System.Security.Cryptography.CngAlgorithm.ECDsaP256
  - System.Security.Cryptography.CngAlgorithm.ECDsaP384
  - System.Security.Cryptography.CngAlgorithm.ECDsaP521
  - System.Security.Cryptography.CngAlgorithm.Equals(System.Object)
  - System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)
  - System.Security.Cryptography.CngAlgorithm.GetHashCode
  - System.Security.Cryptography.CngAlgorithm.MD5
  - System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  - System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  - System.Security.Cryptography.CngAlgorithm.Rsa
  - System.Security.Cryptography.CngAlgorithm.Sha1
  - System.Security.Cryptography.CngAlgorithm.Sha256
  - System.Security.Cryptography.CngAlgorithm.Sha384
  - System.Security.Cryptography.CngAlgorithm.Sha512
  - System.Security.Cryptography.CngAlgorithm.ToString
  langs:
  - csharp
  - vb
  name: CngAlgorithm
  fullName: System.Security.Cryptography.CngAlgorithm
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CngAlgorithm
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 51
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Encapsulates the name of an encryption algorithm. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class is a utility class. It consists of static properties, comparison methods, and a private, internally maintained, algorithm name string.</p>\n<p>The static properties return <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> objects. Each object's internal string is initialized to the algorithm name that corresponds to the name of the static property.</p>\n<p>You can also use this class to create objects for algorithm types that are not covered by the static properties.</p>\n<p>Several Cryptography Next Generation (CNG) classes (such as <xref href=\"System.Security.Cryptography.CngKey\" data-throw-if-not-resolved=\"false\"></xref>) accept <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> objects through an <em>algorithm</em> parameter. When the class receives the <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object, it retrieves the embedded algorithm name by calling the object's <xref href=\"System.Security.Cryptography.CngAlgorithm.Algorithm\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Therefore, <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> serves as an enumeration of well-known algorithms. It lets you specify a well-known algorithm by using a strongly typed value instead of a string. </p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class CngAlgorithm : IEquatable<CngAlgorithm>'
    content.vb: >-
      Public NotInheritable Class CngAlgorithm
          Implements IEquatable(Of CngAlgorithm)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{System.Security.Cryptography.CngAlgorithm}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.CngAlgorithm.#ctor(System.String)
  commentId: M:System.Security.Cryptography.CngAlgorithm.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: CngAlgorithm(String)
  fullName: System.Security.Cryptography.CngAlgorithm.CngAlgorithm(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 53
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Instances of the <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class internally maintain the algorithm name that is specified by the <em>algorithm</em> parameter.</p>\n<p>The primary purpose of this constructor is to provide a method for creating <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> objects for algorithm types that are not represented by the static properties of the <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> class. This capacity enables future .NET Framework releases, service packs, and third-party developers to add new algorithms, which can be accessed just like the algorithms that are currently available.</p>\n"
  example:
  - 
  syntax:
    content: public CngAlgorithm(string algorithm)
    content.vb: Public Sub New(algorithm As String)
    parameters:
    - id: algorithm
      type: System.String
      description: "\n<p>The name of the algorithm to initialize.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>algorithm</em> parameter is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>algorithm</em> parameter length is 0 (zero).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CngAlgorithm.Algorithm
  commentId: P:System.Security.Cryptography.CngAlgorithm.Algorithm
  id: Algorithm
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: Algorithm
  fullName: System.Security.Cryptography.CngAlgorithm.Algorithm
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Algorithm
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 54
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the algorithm name that the current <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object specifies.</p>\n"
  example:
  - 
  syntax:
    content: public string Algorithm { get; }
    content.vb: Public ReadOnly Property Algorithm As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The embedded algorithm name.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellman
  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellman
  id: ECDiffieHellman
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: ECDiffieHellman
  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellman
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECDiffieHellman
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 55
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  syntax:
    content: public static CngAlgorithm ECDiffieHellman { get; }
    content.vb: Public Shared ReadOnly Property ECDiffieHellman As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256
  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256
  id: ECDiffieHellmanP256
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: ECDiffieHellmanP256
  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP256
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECDiffieHellmanP256
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 56
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-256 curve.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithm ECDiffieHellmanP256 { get; }
    content.vb: Public Shared ReadOnly Property ECDiffieHellmanP256 As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies an ECDH algorithm that uses the P-256 curve.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384
  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384
  id: ECDiffieHellmanP384
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: ECDiffieHellmanP384
  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP384
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECDiffieHellmanP384
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 57
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-384 curve.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithm ECDiffieHellmanP384 { get; }
    content.vb: Public Shared ReadOnly Property ECDiffieHellmanP384 As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies an ECDH algorithm that uses the P-384 curve.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521
  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521
  id: ECDiffieHellmanP521
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: ECDiffieHellmanP521
  fullName: System.Security.Cryptography.CngAlgorithm.ECDiffieHellmanP521
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECDiffieHellmanP521
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 58
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object that specifies an Elliptic Curve Diffie-Hellman (ECDH) key exchange algorithm that uses the P-521 curve.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithm ECDiffieHellmanP521 { get; }
    content.vb: Public Shared ReadOnly Property ECDiffieHellmanP521 As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies an ECDH algorithm that uses the P-521 curve.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.ECDsa
  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDsa
  id: ECDsa
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: ECDsa
  fullName: System.Security.Cryptography.CngAlgorithm.ECDsa
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECDsa
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 59
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  syntax:
    content: public static CngAlgorithm ECDsa { get; }
    content.vb: Public Shared ReadOnly Property ECDsa As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP256
  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDsaP256
  id: ECDsaP256
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: ECDsaP256
  fullName: System.Security.Cryptography.CngAlgorithm.ECDsaP256
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECDsaP256
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 60
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-256 curve.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithm ECDsaP256 { get; }
    content.vb: Public Shared ReadOnly Property ECDsaP256 As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies an ECDSA algorithm that uses the P-256 curve.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP384
  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDsaP384
  id: ECDsaP384
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: ECDsaP384
  fullName: System.Security.Cryptography.CngAlgorithm.ECDsaP384
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECDsaP384
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 61
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-384 curve.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithm ECDsaP384 { get; }
    content.vb: Public Shared ReadOnly Property ECDsaP384 As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies an ECDSA algorithm that uses the P-384 curve.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.ECDsaP521
  commentId: P:System.Security.Cryptography.CngAlgorithm.ECDsaP521
  id: ECDsaP521
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: ECDsaP521
  fullName: System.Security.Cryptography.CngAlgorithm.ECDsaP521
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECDsaP521
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 62
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a new <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object that specifies an Elliptic Curve Digital Signature Algorithm (ECDSA) that uses the P-521 curve.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithm ECDsaP521 { get; }
    content.vb: Public Shared ReadOnly Property ECDsaP521 As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies an ECDSA algorithm that uses the P-521 curve.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.MD5
  commentId: P:System.Security.Cryptography.CngAlgorithm.MD5
  id: MD5
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: MD5
  fullName: System.Security.Cryptography.CngAlgorithm.MD5
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MD5
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 63
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a new <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the Message Digest 5 (MD5) hash algorithm.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithm MD5 { get; }
    content.vb: Public Shared ReadOnly Property MD5 As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies the MD5 algorithm.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.Rsa
  commentId: P:System.Security.Cryptography.CngAlgorithm.Rsa
  id: Rsa
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: Rsa
  fullName: System.Security.Cryptography.CngAlgorithm.Rsa
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rsa
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 64
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a new <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the RSA hash algorithm.</p>\n"
  syntax:
    content: public static CngAlgorithm Rsa { get; }
    content.vb: Public Shared ReadOnly Property Rsa As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies the RSA algorithm.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.Sha1
  commentId: P:System.Security.Cryptography.CngAlgorithm.Sha1
  id: Sha1
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: Sha1
  fullName: System.Security.Cryptography.CngAlgorithm.Sha1
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sha1
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 65
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a new <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the Secure Hash Algorithm 1 (SHA-1) algorithm.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithm Sha1 { get; }
    content.vb: Public Shared ReadOnly Property Sha1 As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies the SHA-1 algorithm.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.Sha256
  commentId: P:System.Security.Cryptography.CngAlgorithm.Sha256
  id: Sha256
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: Sha256
  fullName: System.Security.Cryptography.CngAlgorithm.Sha256
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sha256
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 66
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a new <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the Secure Hash Algorithm 256 (SHA-256) algorithm.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithm Sha256 { get; }
    content.vb: Public Shared ReadOnly Property Sha256 As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies the SHA-256 algorithm.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.Sha384
  commentId: P:System.Security.Cryptography.CngAlgorithm.Sha384
  id: Sha384
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: Sha384
  fullName: System.Security.Cryptography.CngAlgorithm.Sha384
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sha384
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 67
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a new <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the Secure Hash Algorithm 384 (SHA-384) algorithm.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithm Sha384 { get; }
    content.vb: Public Shared ReadOnly Property Sha384 As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies the SHA-384 algorithm.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.Sha512
  commentId: P:System.Security.Cryptography.CngAlgorithm.Sha512
  id: Sha512
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: Sha512
  fullName: System.Security.Cryptography.CngAlgorithm.Sha512
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sha512
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 68
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets a new <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object that specifies the Secure Hash Algorithm 512 (SHA-512) algorithm.</p>\n"
  example:
  - 
  syntax:
    content: public static CngAlgorithm Sha512 { get; }
    content.vb: Public Shared ReadOnly Property Sha512 As CngAlgorithm
    parameters: []
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies the SHA-512 algorithm.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.CngAlgorithm.Equals(System.Object)
  commentId: M:System.Security.Cryptography.CngAlgorithm.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Security.Cryptography.CngAlgorithm.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 69
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Compares the specified object to the current <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to be compared to the current <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>obj</em> parameter is a <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> that specifies the same algorithm as the current object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)
  commentId: M:System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)
  id: Equals(System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: Equals(CngAlgorithm)
  fullName: System.Security.Cryptography.CngAlgorithm.Equals(System.Security.Cryptography.CngAlgorithm)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 70
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Compares the specified <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object to the current <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  example:
  - 
  syntax:
    content: public bool Equals(CngAlgorithm other)
    content.vb: Public Function Equals(other As CngAlgorithm) As Boolean
    parameters:
    - id: other
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object to be compared to the current <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>other</em> parameter specifies the same algorithm as the current object; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.IEquatable{System.Security.Cryptography.CngAlgorithm}.Equals(System.Security.Cryptography.CngAlgorithm)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CngAlgorithm.GetHashCode
  commentId: M:System.Security.Cryptography.CngAlgorithm.GetHashCode
  id: GetHashCode
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Security.Cryptography.CngAlgorithm.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 71
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Generates a hash value for the algorithm name that is embedded in the current <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash value of the embedded algorithm name.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  commentId: M:System.Security.Cryptography.CngAlgorithm.op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  id: op_Equality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: Equality(CngAlgorithm, CngAlgorithm)
  fullName: System.Security.Cryptography.CngAlgorithm.Equality(System.Security.Cryptography.CngAlgorithm, System.Security.Cryptography.CngAlgorithm)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 72
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether two <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> objects specify the same algorithm name.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator ==(CngAlgorithm left, CngAlgorithm right)
    content.vb: Public Shared Operator =(left As CngAlgorithm, right As CngAlgorithm) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies an algorithm name.</p>\n"
    - id: right
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects specify the same algorithm name; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  commentId: M:System.Security.Cryptography.CngAlgorithm.op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  id: op_Inequality(System.Security.Cryptography.CngAlgorithm,System.Security.Cryptography.CngAlgorithm)
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: Inequality(CngAlgorithm, CngAlgorithm)
  fullName: System.Security.Cryptography.CngAlgorithm.Inequality(System.Security.Cryptography.CngAlgorithm, System.Security.Cryptography.CngAlgorithm)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 73
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Determines whether two <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> objects do not specify the same algorithm.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator !=(CngAlgorithm left, CngAlgorithm right)
    content.vb: Public Shared Operator <>(left As CngAlgorithm, right As CngAlgorithm) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>An object that specifies an algorithm name.</p>\n"
    - id: right
      type: System.Security.Cryptography.CngAlgorithm
      description: "\n<p>A second object, to be compared to the object that is identified by the <em>left</em> parameter.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects do not specify the same algorithm name; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.CngAlgorithm.ToString
  commentId: M:System.Security.Cryptography.CngAlgorithm.ToString
  id: ToString
  parent: System.Security.Cryptography.CngAlgorithm
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Security.Cryptography.CngAlgorithm.ToString()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Cryptography.Cng/ref/System.Security.Cryptography.Cng.cs
    startLine: 74
  assemblies:
  - System.Security.Cryptography.Cng
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets the name of the algorithm that the current <xref href=\"System.Security.Cryptography.CngAlgorithm\" data-throw-if-not-resolved=\"false\"></xref> object specifies.</p>\n"
  example:
  - 
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The embedded algorithm name.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IEquatable{System.Security.Cryptography.CngAlgorithm}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<CngAlgorithm>
  fullName: System.IEquatable<System.Security.Cryptography.CngAlgorithm>
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngAlgorithm)
  name.vb: IEquatable(Of CngAlgorithm)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Cryptography.CngAlgorithm
    name: CngAlgorithm
    fullName: System.Security.Cryptography.CngAlgorithm
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Cryptography.CngAlgorithm
    name: CngAlgorithm
    fullName: System.Security.Cryptography.CngAlgorithm
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Cryptography.CngAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithm
  fullName: System.Security.Cryptography.CngAlgorithm
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{System.Security.Cryptography.CngAlgorithm}.Equals(System.Security.Cryptography.CngAlgorithm)
  parent: System.IEquatable{System.Security.Cryptography.CngAlgorithm}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(CngAlgorithm)
  fullName: System.IEquatable<System.Security.Cryptography.CngAlgorithm>.Equals(System.Security.Cryptography.CngAlgorithm)
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.CngAlgorithm).Equals(System.Security.Cryptography.CngAlgorithm)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Security.Cryptography.CngAlgorithm>.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.CngAlgorithm
    name: CngAlgorithm
    fullName: System.Security.Cryptography.CngAlgorithm
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Security.Cryptography.CngAlgorithm).Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Security.Cryptography.CngAlgorithm
    name: CngAlgorithm
    fullName: System.Security.Cryptography.CngAlgorithm
  - name: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
