items:
- uid: System.ComponentModel.TypeConverter
  commentId: T:System.ComponentModel.TypeConverter
  id: TypeConverter
  parent: System.ComponentModel
  children:
  - System.ComponentModel.TypeConverter.#ctor
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  - System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  - System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  - System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  - System.ComponentModel.TypeConverter.GetProperties(System.Object)
  - System.ComponentModel.TypeConverter.GetPropertiesSupported
  - System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValues
  - System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.IsValid(System.Object)
  - System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  langs:
  - csharp
  - vb
  name: TypeConverter
  fullName: System.ComponentModel.TypeConverter
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeConverter
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 13
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.
  syntax:
    content: 'public class TypeConverter : object'
    content.vb: >-
      Public Class TypeConverter
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ComponentModel.TypeConverter.#ctor
  commentId: M:System.ComponentModel.TypeConverter.#ctor
  id: '#ctor'
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: TypeConverter()
  fullName: System.ComponentModel.TypeConverter.TypeConverter()
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 461
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: 'Initializes a new instance of the <xref href="System.ComponentModel.TypeConverter" data-throw-if-not-resolved="false"></xref> class. '
  syntax:
    content: public TypeConverter()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  id: CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: CanConvertFrom(ITypeDescriptorContext, Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanConvertFrom
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 462
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
  syntax:
    content: public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
    content.vb: Public Overridable Function CanConvertFrom(context As ITypeDescriptorContext, sourceType As Type) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: sourceType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> that represents the type you want to convert from. '
    return:
      type: System.Boolean
      description: true if this converter can perform the conversion; otherwise, false.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  commentId: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  id: CanConvertFrom(System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: CanConvertFrom(Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanConvertFrom
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 463
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether this converter can convert an object of the given type to the type of this converter.
  syntax:
    content: public bool CanConvertFrom(Type sourceType)
    content.vb: Public Function CanConvertFrom(sourceType As Type) As Boolean
    parameters:
    - id: sourceType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> that represents the type you want to convert from. '
    return:
      type: System.Boolean
      description: true if this converter can perform the conversion; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  id: CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: CanConvertTo(ITypeDescriptorContext, Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanConvertTo
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 464
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether this converter can convert the object to the specified type, using the specified context.
  syntax:
    content: public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
    content.vb: Public Overridable Function CanConvertTo(context As ITypeDescriptorContext, destinationType As Type) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: destinationType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> that represents the type you want to convert to. '
    return:
      type: System.Boolean
      description: true if this converter can perform the conversion; otherwise, false.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  commentId: M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  id: CanConvertTo(System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: CanConvertTo(Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanConvertTo
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 465
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether this converter can convert the object to the specified type.
  syntax:
    content: public bool CanConvertTo(Type destinationType)
    content.vb: Public Function CanConvertTo(destinationType As Type) As Boolean
    parameters:
    - id: destinationType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> that represents the type you want to convert to. '
    return:
      type: System.Boolean
      description: true if this converter can perform the conversion; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFrom(ITypeDescriptorContext, Globalization.CultureInfo, Object)
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFrom
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 466
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the given object to the type of this converter, using the specified context and culture information.
  syntax:
    content: public virtual object ConvertFrom(ITypeDescriptorContext context, Globalization.CultureInfo culture, object value)
    content.vb: Public Overridable Function ConvertFrom(context As ITypeDescriptorContext, culture As Globalization.CultureInfo, value As Object) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: culture
      type: System.Globalization.CultureInfo
      description: 'The <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref> to use as the current culture. '
    - id: value
      type: System.Object
      description: 'The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to convert. '
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the converted value.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  id: ConvertFrom(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFrom(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFrom
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 56
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the given value to the type of this converter.
  syntax:
    content: public object ConvertFrom(object value)
    content.vb: Public Function ConvertFrom(value As Object) As Object
    parameters:
    - id: value
      type: System.Object
      description: 'The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to convert. '
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the converted value.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  id: ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFromInvariantString(ITypeDescriptorContext, String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromInvariantString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 80
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the given string to the type of this converter, using the invariant culture and the specified context.
  syntax:
    content: public object ConvertFromInvariantString(ITypeDescriptorContext context, string text)
    content.vb: Public Function ConvertFromInvariantString(context As ITypeDescriptorContext, text As String) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: text
      type: System.String
      description: 'The <xref href="System.String" data-throw-if-not-resolved="false"></xref> to convert. '
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the converted text.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  id: ConvertFromInvariantString(System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFromInvariantString(String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromInvariantString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 72
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the given string to the type of this converter, using the invariant culture.
  syntax:
    content: public object ConvertFromInvariantString(string text)
    content.vb: Public Function ConvertFromInvariantString(text As String) As Object
    parameters:
    - id: text
      type: System.String
      description: 'The <xref href="System.String" data-throw-if-not-resolved="false"></xref> to convert. '
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the converted text.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  id: ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFromString(ITypeDescriptorContext, Globalization.CultureInfo, String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromString
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 470
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the given text to an object, using the specified context and culture information.
  syntax:
    content: public object ConvertFromString(ITypeDescriptorContext context, Globalization.CultureInfo culture, string text)
    content.vb: Public Function ConvertFromString(context As ITypeDescriptorContext, culture As Globalization.CultureInfo, text As String) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: culture
      type: System.Globalization.CultureInfo
      description: 'A <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref>. If null is passed, the current culture is assumed. '
    - id: text
      type: System.String
      description: 'The <xref href="System.String" data-throw-if-not-resolved="false"></xref> to convert. '
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the converted text.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  id: ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFromString(ITypeDescriptorContext, String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 96
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the given text to an object, using the specified context.
  syntax:
    content: public object ConvertFromString(ITypeDescriptorContext context, string text)
    content.vb: Public Function ConvertFromString(context As ITypeDescriptorContext, text As String) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: text
      type: System.String
      description: 'The <xref href="System.String" data-throw-if-not-resolved="false"></xref> to convert. '
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the converted text.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  id: ConvertFromString(System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFromString(String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 88
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the specified text to an object.
  syntax:
    content: public object ConvertFromString(string text)
    content.vb: Public Function ConvertFromString(text As String) As Object
    parameters:
    - id: text
      type: System.String
      description: 'The text representation of the object to convert. '
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the converted text.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The string cannot be converted into the appropriate object. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  id: ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertTo(ITypeDescriptorContext, Globalization.CultureInfo, Object, Type)
  fullName: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertTo
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 473
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the given value object to the specified type, using the specified context and culture information.
  syntax:
    content: public virtual object ConvertTo(ITypeDescriptorContext context, Globalization.CultureInfo culture, object value, Type destinationType)
    content.vb: Public Overridable Function ConvertTo(context As ITypeDescriptorContext, culture As Globalization.CultureInfo, value As Object, destinationType As Type) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: culture
      type: System.Globalization.CultureInfo
      description: 'A <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref>. If null is passed, the current culture is assumed. '
    - id: value
      type: System.Object
      description: 'The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to convert. '
    - id: destinationType
      type: System.Type
      description: 'The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> to convert the <em>value</em> parameter to. '
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the converted value.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>destinationType</em> parameter is null. '
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  id: ConvertTo(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertTo(Object, Type)
  fullName: System.ComponentModel.TypeConverter.ConvertTo(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertTo
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 474
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the given value object to the specified type, using the arguments.
  syntax:
    content: public object ConvertTo(object value, Type destinationType)
    content.vb: Public Function ConvertTo(value As Object, destinationType As Type) As Object
    parameters:
    - id: value
      type: System.Object
      description: 'The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to convert. '
    - id: destinationType
      type: System.Type
      description: 'The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> to convert the <em>value</em> parameter to. '
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the converted value.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>destinationType</em> parameter is null. '
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertToInvariantString(ITypeDescriptorContext, Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToInvariantString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 160
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the specified value to a culture-invariant string representation, using the specified context.
  syntax:
    content: public string ConvertToInvariantString(ITypeDescriptorContext context, object value)
    content.vb: Public Function ConvertToInvariantString(context As ITypeDescriptorContext, value As Object) As String
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: value
      type: System.Object
      description: 'The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to convert. '
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the converted value.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  id: ConvertToInvariantString(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertToInvariantString(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToInvariantString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 152
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the specified value to a culture-invariant string representation.
  syntax:
    content: public string ConvertToInvariantString(object value)
    content.vb: Public Function ConvertToInvariantString(value As Object) As String
    parameters:
    - id: value
      type: System.Object
      description: 'The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to convert. '
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> that represents the converted value.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertToString(ITypeDescriptorContext, Globalization.CultureInfo, Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToString
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 477
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the given value to a string representation, using the specified context and culture information.
  syntax:
    content: public string ConvertToString(ITypeDescriptorContext context, Globalization.CultureInfo culture, object value)
    content.vb: Public Function ConvertToString(context As ITypeDescriptorContext, culture As Globalization.CultureInfo, value As Object) As String
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: culture
      type: System.Globalization.CultureInfo
      description: 'A <xref href="System.Globalization.CultureInfo" data-throw-if-not-resolved="false"></xref>. If null is passed, the current culture is assumed. '
    - id: value
      type: System.Object
      description: 'The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to convert. '
    return:
      type: System.String
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the converted value.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertToString(ITypeDescriptorContext, Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 177
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the given value to a string representation, using the given context.
  syntax:
    content: public string ConvertToString(ITypeDescriptorContext context, object value)
    content.vb: Public Function ConvertToString(context As ITypeDescriptorContext, value As Object) As String
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: value
      type: System.Object
      description: 'The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to convert. '
    return:
      type: System.String
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the converted value.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  id: ConvertToString(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertToString(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 169
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Converts the specified value to a string representation.
  syntax:
    content: public string ConvertToString(object value)
    content.vb: Public Function ConvertToString(value As Object) As String
    parameters:
    - id: value
      type: System.Object
      description: 'The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to convert. '
    return:
      type: System.String
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the converted value.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The conversion cannot be performed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  id: CreateInstance(System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: CreateInstance(Collections.IDictionary)
  fullName: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 480
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Re-creates an <xref href="System.Object" data-throw-if-not-resolved="false"></xref> given a set of property values for the object.
  syntax:
    content: public object CreateInstance(Collections.IDictionary propertyValues)
    content.vb: Public Function CreateInstance(propertyValues As Collections.IDictionary) As Object
    parameters:
    - id: propertyValues
      type: System.Collections.IDictionary
      description: 'An <xref href="System.Collections.IDictionary" data-throw-if-not-resolved="false"></xref> that represents a dictionary of new property values. '
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> representing the given <xref href="System.Collections.IDictionary" data-throw-if-not-resolved="false"></xref>, or null if the object cannot be created. This method always returns null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  id: CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: CreateInstance(ITypeDescriptorContext, Collections.IDictionary)
  fullName: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 481
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Creates an instance of the type that this <xref href="System.ComponentModel.TypeConverter" data-throw-if-not-resolved="false"></xref> is associated with, using the specified context, given a set of property values for the object.
  syntax:
    content: public virtual object CreateInstance(ITypeDescriptorContext context, Collections.IDictionary propertyValues)
    content.vb: Public Overridable Function CreateInstance(context As ITypeDescriptorContext, propertyValues As Collections.IDictionary) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: propertyValues
      type: System.Collections.IDictionary
      description: 'An <xref href="System.Collections.IDictionary" data-throw-if-not-resolved="false"></xref> of new property values. '
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> representing the given <xref href="System.Collections.IDictionary" data-throw-if-not-resolved="false"></xref>, or null if the object cannot be created. This method always returns null.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  id: GetConvertFromException(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetConvertFromException(Object)
  fullName: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConvertFromException
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 209
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns an exception to throw when a conversion cannot be performed.
  syntax:
    content: protected Exception GetConvertFromException(object value)
    content.vb: Protected Function GetConvertFromException(value As Object) As Exception
    parameters:
    - id: value
      type: System.Object
      description: 'The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to convert, or null if the object is not available. '
    return:
      type: System.Exception
      description: An <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> that represents the exception to throw when a conversion cannot be performed.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'Automatically thrown by this method. '
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  id: GetConvertToException(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetConvertToException(Object, Type)
  fullName: System.ComponentModel.TypeConverter.GetConvertToException(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConvertToException
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 483
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns an exception to throw when a conversion cannot be performed.
  syntax:
    content: protected Exception GetConvertToException(object value, Type destinationType)
    content.vb: Protected Function GetConvertToException(value As Object, destinationType As Type) As Exception
    parameters:
    - id: value
      type: System.Object
      description: 'The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to convert, or null if the object is not available. '
    - id: destinationType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> that represents the type the conversion was trying to convert to. '
    return:
      type: System.Exception
      description: An <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> that represents the exception to throw when a conversion cannot be performed.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'Automatically thrown by this method. '
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  id: GetCreateInstanceSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetCreateInstanceSupported()
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCreateInstanceSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 251
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether changing a value on this object requires a call to the <xref href="System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" data-throw-if-not-resolved="false"></xref> method to create a new value.
  syntax:
    content: public bool GetCreateInstanceSupported()
    content.vb: Public Function GetCreateInstanceSupported As Boolean
    return:
      type: System.Boolean
      description: true if changing a property on this object requires a call to <xref href="System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" data-throw-if-not-resolved="false"></xref> to create a new value; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetCreateInstanceSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCreateInstanceSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 263
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether changing a value on this object requires a call to <xref href="System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" data-throw-if-not-resolved="false"></xref> to create a new value, using the specified context.
  syntax:
    content: public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetCreateInstanceSupported(context As ITypeDescriptorContext) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    return:
      type: System.Boolean
      description: true if changing a property on this object requires a call to <xref href="System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" data-throw-if-not-resolved="false"></xref> to create a new value; otherwise, false.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetProperties(ITypeDescriptorContext, Object)
  fullName: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 283
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns a collection of properties for the type of array specified by the value parameter, using the specified context.
  syntax:
    content: public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value)
    content.vb: Public Function GetProperties(context As ITypeDescriptorContext, value As Object) As PropertyDescriptorCollection
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: value
      type: System.Object
      description: 'An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that specifies the type of array for which to get properties. '
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: A <xref href="System.ComponentModel.PropertyDescriptorCollection" data-throw-if-not-resolved="false"></xref> with the properties that are exposed for this data type, or null if there are no properties.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetProperties(ITypeDescriptorContext, Object, Attribute[])
  fullName: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 487
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.
  syntax:
    content: public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
    content.vb: Public Overridable Function GetProperties(context As ITypeDescriptorContext, value As Object, attributes As Attribute()) As PropertyDescriptorCollection
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: value
      type: System.Object
      description: 'An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that specifies the type of array for which to get properties. '
    - id: attributes
      type: System.Attribute[]
      description: 'An array of type <xref href="System.Attribute" data-throw-if-not-resolved="false"></xref> that is used as a filter. '
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: A <xref href="System.ComponentModel.PropertyDescriptorCollection" data-throw-if-not-resolved="false"></xref> with the properties that are exposed for this data type, or null if there are no properties.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute())
  name.vb: GetProperties(ITypeDescriptorContext, Object, Attribute())
- uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.Object)
  id: GetProperties(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetProperties(Object)
  fullName: System.ComponentModel.TypeConverter.GetProperties(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 272
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns a collection of properties for the type of array specified by the value parameter.
  syntax:
    content: public PropertyDescriptorCollection GetProperties(object value)
    content.vb: Public Function GetProperties(value As Object) As PropertyDescriptorCollection
    parameters:
    - id: value
      type: System.Object
      description: 'An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that specifies the type of array for which to get properties. '
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: A <xref href="System.ComponentModel.PropertyDescriptorCollection" data-throw-if-not-resolved="false"></xref> with the properties that are exposed for this data type, or null if there are no properties.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported
  commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported
  id: GetPropertiesSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetPropertiesSupported()
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetPropertiesSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 303
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether this object supports properties.
  syntax:
    content: public bool GetPropertiesSupported()
    content.vb: Public Function GetPropertiesSupported As Boolean
    return:
      type: System.Boolean
      description: true if <xref href="System.ComponentModel.TypeConverter.GetProperties(System.Object)" data-throw-if-not-resolved="false"></xref> should be called to find the properties of this object; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetPropertiesSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetPropertiesSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 311
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether this object supports properties, using the specified context.
  syntax:
    content: public virtual bool GetPropertiesSupported(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetPropertiesSupported(context As ITypeDescriptorContext) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    return:
      type: System.Boolean
      description: true if <xref href="System.ComponentModel.TypeConverter.GetProperties(System.Object)" data-throw-if-not-resolved="false"></xref> should be called to find the properties of this object; otherwise, false.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.GetStandardValues
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValues
  id: GetStandardValues
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetStandardValues()
  fullName: System.ComponentModel.TypeConverter.GetStandardValues()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValues
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 319
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns a collection of standard values from the default context for the data type this type converter is designed for.
  syntax:
    content: public Collections.ICollection GetStandardValues()
    content.vb: Public Function GetStandardValues As Collections.ICollection
    return:
      type: System.Collections.ICollection
      description: A <xref href="System.ComponentModel.TypeConverter.StandardValuesCollection" data-throw-if-not-resolved="false"></xref> containing a standard set of valid values, or null if the data type does not support a standard set of values.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetStandardValues(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValues
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 327
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.
  syntax:
    content: public virtual TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetStandardValues(context As ITypeDescriptorContext) As TypeConverter.StandardValuesCollection
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null. '
    return:
      type: System.ComponentModel.TypeConverter.StandardValuesCollection
      description: A <xref href="System.ComponentModel.TypeConverter.StandardValuesCollection" data-throw-if-not-resolved="false"></xref> that holds a standard set of valid values, or null if the data type does not support a standard set of values.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  id: GetStandardValuesExclusive
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetStandardValuesExclusive()
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValuesExclusive
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 338
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether the collection of standard values returned from <xref href="System.ComponentModel.TypeConverter.GetStandardValues" data-throw-if-not-resolved="false"></xref> is an exclusive list.
  syntax:
    content: public bool GetStandardValuesExclusive()
    content.vb: Public Function GetStandardValuesExclusive As Boolean
    return:
      type: System.Boolean
      description: true if the <xref href="System.ComponentModel.TypeConverter.StandardValuesCollection" data-throw-if-not-resolved="false"></xref> returned from <xref href="System.ComponentModel.TypeConverter.GetStandardValues" data-throw-if-not-resolved="false"></xref> is an exhaustive list of possible values; false if other values are possible.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetStandardValuesExclusive(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValuesExclusive
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 350
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether the collection of standard values returned from <xref href="System.ComponentModel.TypeConverter.GetStandardValues" data-throw-if-not-resolved="false"></xref> is an exclusive list of possible values, using the specified context.
  syntax:
    content: public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetStandardValuesExclusive(context As ITypeDescriptorContext) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    return:
      type: System.Boolean
      description: true if the <xref href="System.ComponentModel.TypeConverter.StandardValuesCollection" data-throw-if-not-resolved="false"></xref> returned from <xref href="System.ComponentModel.TypeConverter.GetStandardValues" data-throw-if-not-resolved="false"></xref> is an exhaustive list of possible values; false if other values are possible.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported
  id: GetStandardValuesSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetStandardValuesSupported()
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValuesSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 361
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether this object supports a standard set of values that can be picked from a list.
  syntax:
    content: public bool GetStandardValuesSupported()
    content.vb: Public Function GetStandardValuesSupported As Boolean
    return:
      type: System.Boolean
      description: true if <xref href="System.ComponentModel.TypeConverter.GetStandardValues" data-throw-if-not-resolved="false"></xref> should be called to find a common set of values the object supports; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetStandardValuesSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValuesSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 372
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.
  syntax:
    content: public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetStandardValuesSupported(context As ITypeDescriptorContext) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    return:
      type: System.Boolean
      description: true if <xref href="System.ComponentModel.TypeConverter.GetStandardValues" data-throw-if-not-resolved="false"></xref> should be called to find a common set of values the object supports; otherwise, false.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: IsValid(ITypeDescriptorContext, Object)
  fullName: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsValid
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 388
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether the given value object is valid for this type and for the specified context.
  syntax:
    content: public virtual bool IsValid(ITypeDescriptorContext context, object value)
    content.vb: Public Overridable Function IsValid(context As ITypeDescriptorContext, value As Object) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
      description: 'An <xref href="System.ComponentModel.ITypeDescriptorContext" data-throw-if-not-resolved="false"></xref> that provides a format context. '
    - id: value
      type: System.Object
      description: 'The <xref href="System.Object" data-throw-if-not-resolved="false"></xref> to test for validity. '
    return:
      type: System.Boolean
      description: true if the specified value is valid for this object; otherwise, false.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.IsValid(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.IsValid(System.Object)
  id: IsValid(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: IsValid(Object)
  fullName: System.ComponentModel.TypeConverter.IsValid(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsValid
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 380
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Returns whether the given value object is valid for this type.
  syntax:
    content: public bool IsValid(object value)
    content.vb: Public Function IsValid(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: 'The object to test for validity. '
    return:
      type: System.Boolean
      description: true if the specified value is valid for this object; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  commentId: M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  id: SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: SortProperties(PropertyDescriptorCollection, String[])
  fullName: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SortProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 417
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: Sorts a collection of properties.
  syntax:
    content: protected PropertyDescriptorCollection SortProperties(PropertyDescriptorCollection props, string[] names)
    content.vb: Protected Function SortProperties(props As PropertyDescriptorCollection, names As String()) As PropertyDescriptorCollection
    parameters:
    - id: props
      type: System.ComponentModel.PropertyDescriptorCollection
      description: 'A <xref href="System.ComponentModel.PropertyDescriptorCollection" data-throw-if-not-resolved="false"></xref> that has the properties to sort. '
    - id: names
      type: System.String[]
      description: 'An array of names in the order you want the properties to appear in the collection. '
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: A <xref href="System.ComponentModel.PropertyDescriptorCollection" data-throw-if-not-resolved="false"></xref> that contains the sorted properties.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String())
  name.vb: SortProperties(PropertyDescriptorCollection, String())
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.ComponentModel.ITypeDescriptorContext
  parent: System.ComponentModel
  isExternal: false
  name: ITypeDescriptorContext
  fullName: System.ComponentModel.ITypeDescriptorContext
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: Globalization.CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.Attribute[]
  isExternal: true
  name: Attribute[]
  fullName: System.Attribute[]
  fullname.vb: System.Attribute()
  name.vb: Attribute()
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    fullName: System.Attribute
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Attribute
    name: Attribute
    fullName: System.Attribute
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.ComponentModel.TypeConverter.StandardValuesCollection
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter.StandardValuesCollection
  fullName: System.ComponentModel.TypeConverter.StandardValuesCollection
- uid: System.String[]
  isExternal: false
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
  - name: ()
    fullName: ()
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
