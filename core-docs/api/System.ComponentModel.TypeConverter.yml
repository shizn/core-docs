items:
- uid: System.ComponentModel.TypeConverter
  commentId: T:System.ComponentModel.TypeConverter
  id: TypeConverter
  parent: System.ComponentModel
  children:
  - System.ComponentModel.TypeConverter.#ctor
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  - System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  - System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  - System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  - System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  - System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  - System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  - System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  - System.ComponentModel.TypeConverter.GetProperties(System.Object)
  - System.ComponentModel.TypeConverter.GetPropertiesSupported
  - System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValues
  - System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  - System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported
  - System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  - System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  - System.ComponentModel.TypeConverter.IsValid(System.Object)
  - System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  langs:
  - csharp
  - vb
  name: TypeConverter
  fullName: System.ComponentModel.TypeConverter
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeConverter
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 13
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.</p>\n"
  remarks: "\n<p>The most common type of converter is one that converts to and from a text representation. The type converter for a class is bound to the class with a <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref>. Unless this attribute is overridden, all classes that inherit from this class use the same type converter as the base class.</p>\n<p>For general type system purposes, do not access a type converter directly. Instead, access the appropriate converter by using <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref>. For more information, see the code examples provided.</p>\n<p>Note   For XAML purposes, a XAML processor searches for the <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref> directly, instead of going through <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref>. For cases where you do want a <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> instance from code, or where you create a shared instance in WPF resources, it is acceptable to construct it directly without referencing <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> or other reflection and type system support.</p>\n<p>Classes derived from <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> are often referenced as part of how a XAML processor converts an attribute or initialization text value from markup (which is inherently a string) and generates an object for a run-time representation. Custom type authors that intend to support a type conversion behavior for XAML typically implement a <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> class that supports their own unique <strong>ConvertFrom</strong> behavior from a string. This behavior enables type conversion from the string provided as a XAML attribute value and provides a XAML processor with the support needed to create an object from the string, so that the object can be produced in a parsed object graph. Custom types or members of custom types are indicated by applying <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref> to the definitions, with the attribute referencing the custom <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> implementation. For more information, see Type Converters for XAML Overview.</p>\n"
  example:
  - "\n<p>The following code example shows how to create an instance of a type converter and bind it to a class. The class implementing the converter, <code>MyClassConverter</code>, must inherit from the <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>Classic TypeConverter Example#1<p>When you have a property that has an enumeration, check to see whether an enumeration value is valid before setting the property. The next code example requires that an enumeration called <code>MyPropertyEnum</code> has been declared.</p>Classic TypeConverter Example#2<p>Another common type converter usage is to convert an object to a string. The following code example prints out the name of the <xref href=\"System.Drawing.Color\" data-throw-if-not-resolved=\"false\"></xref> stored in the variable <code>c</code>.</p>Classic TypeConverter Example#3<p>You can also use a type converter to convert a value from its name, as shown in the next code example.</p>Classic TypeConverter Example#4<p>In the following code example, you can use a type converter to print out the set of standard values that the object supports.</p>Classic TypeConverter Example#5"
  syntax:
    content: public class TypeConverter
    content.vb: Public Class TypeConverter
  seealso:
  - type: System.ComponentModel.TypeConverterAttribute
    commentId: T:System.ComponentModel.TypeConverterAttribute
  - type: System.ComponentModel.PropertyDescriptorCollection
    commentId: T:System.ComponentModel.PropertyDescriptorCollection
  - type: System.ComponentModel.TypeConverter.SimplePropertyDescriptor
    commentId: T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor
  - type: System.ComponentModel.TypeConverter.StandardValuesCollection
    commentId: T:System.ComponentModel.TypeConverter.StandardValuesCollection
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ComponentModel.TypeConverter.#ctor
  commentId: M:System.ComponentModel.TypeConverter.#ctor
  id: '#ctor'
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: TypeConverter()
  fullName: System.ComponentModel.TypeConverter.TypeConverter()
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/ref/System.ComponentModel.TypeConverter.cs
    startLine: 461
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: public TypeConverter()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  id: CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: CanConvertFrom(ITypeDescriptorContext, Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanConvertFrom
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 29
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.</p>\n"
  remarks: "\n<p>As implemented in this class, this method returns <strong>false</strong>, unless <em>sourceType</em> is an <xref href=\"System.ComponentModel.Design.Serialization.InstanceDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
    content.vb: Public Overridable Function CanConvertFrom(context As ITypeDescriptorContext, sourceType As Type) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: sourceType
      type: System.Type
    return:
      type: System.Boolean
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  commentId: M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  id: CanConvertFrom(System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: CanConvertFrom(Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanConvertFrom
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 19
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this converter can convert an object of the given type to the type of this converter.</p>\n"
  remarks: "\n<p>As implemented in this class, this method always returns <strong>false</strong>. It never returns <strong>true</strong>.</p>\n"
  syntax:
    content: public bool CanConvertFrom(Type sourceType)
    content.vb: Public Function CanConvertFrom(sourceType As Type) As Boolean
    parameters:
    - id: sourceType
      type: System.Type
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  id: CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: CanConvertTo(ITypeDescriptorContext, Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanConvertTo
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 47
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this converter can convert the object to the specified type, using the specified context.</p>\n"
  remarks: "\n<p>Use the <em>context</em> parameter to extract additional information about the environment from which this converter is invoked. This parameter can be <strong>null</strong>, so always check it. Also, properties on the context object can return <strong>null</strong>.</p>\n<p>If <em>destinationType</em> is a string, the default implementation of <see cref=\"Overload:System.ComponentModel.TypeConverter.CanConvertTo\"></see> always returns <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
    content.vb: Public Overridable Function CanConvertTo(context As ITypeDescriptorContext, destinationType As Type) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: destinationType
      type: System.Type
    return:
      type: System.Boolean
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  commentId: M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  id: CanConvertTo(System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: CanConvertTo(Type)
  fullName: System.ComponentModel.TypeConverter.CanConvertTo(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanConvertTo
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 38
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this converter can convert the object to the specified type.</p>\n"
  remarks: "\n<p>If <em>destinationType</em> is a string, the default implementation of <see cref=\"Overload:System.ComponentModel.TypeConverter.CanConvertTo\"></see> always returns <strong>true</strong>.</p>\n"
  syntax:
    content: public bool CanConvertTo(Type destinationType)
    content.vb: Public Function CanConvertTo(destinationType As Type) As Boolean
    parameters:
    - id: destinationType
      type: System.Type
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFrom(ITypeDescriptorContext, CultureInfo, Object)
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFrom
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 64
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given object to the type of this converter, using the specified context and culture information.</p>\n"
  remarks: "\n<p>Custom type authors that intend to support a type conversion behavior for XAML typically implement a <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> class that supports <xref href=\"System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> behavior from a string. This behavior enables type conversion from the string provided as a XAML attribute value and provides a XAML processor with the support needed to create an object from the string, so that the object can be produced in a parsed object graph. Custom types or members of custom types are indicated by applying <xref href=\"System.ComponentModel.TypeConverterAttribute\" data-throw-if-not-resolved=\"false\"></xref> to the definitions, with the attribute referencing the custom <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> implementation. </p>\n<p>For XAML purposes, you do not typically provide branching implementations based on <em>culture</em>. This is because XAML is precompiled in a development environment context, and culture-specific information for runtime XAML is not relevant for XAML type conversion. For more information, see Type Converters for XAML Overview.</p>\n"
  syntax:
    content: public virtual object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
    content.vb: Public Overridable Function ConvertFrom(context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: culture
      type: System.Globalization.CultureInfo
    - id: value
      type: System.Object
    return:
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  id: ConvertFrom(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFrom(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertFrom(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFrom
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 56
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given value to the type of this converter.</p>\n"
  syntax:
    content: public object ConvertFrom(object value)
    content.vb: Public Function ConvertFrom(value As Object) As Object
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  id: ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFromInvariantString(ITypeDescriptorContext, String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext, System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromInvariantString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 80
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given string to the type of this converter, using the invariant culture and the specified context.</p>\n"
  remarks: "\n<p>An exception is raised if the string cannot be converted into the appropriate object. The default implementation always returns <strong>null</strong>.</p>\n<p>Use the <em>context</em> parameter to extract additional information about the environment from which this converter is invoked. This parameter can be <strong>null</strong>, so always check it. Also, properties on the context object can return <strong>null</strong>.</p>\n"
  syntax:
    content: public object ConvertFromInvariantString(ITypeDescriptorContext context, string text)
    content.vb: Public Function ConvertFromInvariantString(context As ITypeDescriptorContext, text As String) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: text
      type: System.String
    return:
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  id: ConvertFromInvariantString(System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFromInvariantString(String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromInvariantString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 72
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given string to the type of this converter, using the invariant culture.</p>\n"
  remarks: "\n<p>The default implementation always returns <strong>null</strong>.</p>\n"
  syntax:
    content: public object ConvertFromInvariantString(string text)
    content.vb: Public Function ConvertFromInvariantString(text As String) As Object
    parameters:
    - id: text
      type: System.String
    return:
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  id: ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFromString(ITypeDescriptorContext, CultureInfo, String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 104
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given text to an object, using the specified context and culture information.</p>\n"
  remarks: "\n<p>An exception is raised if the string cannot be converted into the appropriate object. The default implementation always returns <strong>null</strong>.</p>\n<p>Use the <em>context</em> parameter to extract additional information about the environment from which this converter is invoked. This parameter can be <strong>null</strong>, so always check it. Also, properties on the context object can return <strong>null</strong>.</p>\n"
  syntax:
    content: public object ConvertFromString(ITypeDescriptorContext context, CultureInfo culture, string text)
    content.vb: Public Function ConvertFromString(context As ITypeDescriptorContext, culture As CultureInfo, text As String) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: culture
      type: System.Globalization.CultureInfo
    - id: text
      type: System.String
    return:
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  id: ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFromString(ITypeDescriptorContext, String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext, System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 96
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given text to an object, using the specified context.</p>\n"
  remarks: "\n<p>An exception is raised if the string cannot be converted into the appropriate object. The default implementation always returns <strong>null</strong>.</p>\n<p>Use the <em>context</em> parameter to extract additional information about the environment from which this converter is invoked. This parameter can be <strong>null</strong>, so always check it. Also, properties on the context object can return <strong>null</strong>.</p>\n"
  syntax:
    content: public object ConvertFromString(ITypeDescriptorContext context, string text)
    content.vb: Public Function ConvertFromString(context As ITypeDescriptorContext, text As String) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: text
      type: System.String
    return:
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  commentId: M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  id: ConvertFromString(System.String)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertFromString(String)
  fullName: System.ComponentModel.TypeConverter.ConvertFromString(System.String)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 88
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the specified text to an object.</p>\n"
  remarks: "\n<p>The default implementation always returns <strong>null</strong>.</p>\n"
  example:
  - "\n<p>For an example of this function, see the <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public object ConvertFromString(string text)
    content.vb: Public Function ConvertFromString(text As String) As Object
    parameters:
    - id: text
      type: System.String
    return:
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The string cannot be converted into the appropriate object. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  id: ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertTo(ITypeDescriptorContext, CultureInfo, Object, Type)
  fullName: System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertTo
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 122
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given value object to the specified type, using the specified context and culture information.</p>\n"
  remarks: "\n<p>The most common types to convert are to and from a string object. This implementation calls <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> on the object if the object is valid and if the destination type is a string.</p>\n<p>Use the <em>context</em> parameter to extract additional information about the environment from which this converter is invoked. This parameter can be <strong>null</strong>, so always check it. Also, properties on the context object can return <strong>null</strong>.</p>\n<p>Custom type authors that intend to support a type conversion behavior for XAML typically implement a <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> class that supports <xref href=\"System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> behavior from a string. These type converters might also implement <xref href=\"System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> to support serialization back to XAML.</p>\n<p>Some XAML serialization scenarios cannot be adequately addressed with <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> alone. In these cases, it may be necessary to also define a <xref href=\"System.Windows.Markup.ValueSerializer\" data-throw-if-not-resolved=\"false\"></xref> that handles the serialization cases that would otherwise be handled by <xref href=\"System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)\" data-throw-if-not-resolved=\"false\"></xref>. For more information, see <xref href=\"System.Windows.Markup.ValueSerializer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
    content.vb: Public Overridable Function ConvertTo(context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: culture
      type: System.Globalization.CultureInfo
    - id: value
      type: System.Object
    - id: destinationType
      type: System.Type
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>destinationType</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)
  id: ConvertTo(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertTo(Object, Type)
  fullName: System.ComponentModel.TypeConverter.ConvertTo(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertTo
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 113
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given value object to the specified type, using the arguments.</p>\n"
  remarks: "\n<p>The most common type to convert to and from is a string object. This implementation calls <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> on the object, if the object is valid and if the destination type is a string.</p>\n"
  syntax:
    content: public object ConvertTo(object value, Type destinationType)
    content.vb: Public Function ConvertTo(value As Object, destinationType As Type) As Object
    parameters:
    - id: value
      type: System.Object
    - id: destinationType
      type: System.Type
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>destinationType</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertToInvariantString(ITypeDescriptorContext, Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToInvariantString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 160
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the specified value to a culture-invariant string representation, using the specified context.</p>\n"
  remarks: "\n<p>Use the <em>context</em> parameter to extract additional information about the environment from which this converter is invoked. This parameter can be <strong>null</strong>, so always check it. Also, properties on the context object can return <strong>null</strong>.</p>\n<p>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Security", "CA2122:DoNotIndirectlyExposeMethodsWithLinkDemands")]

      public string ConvertToInvariantString(ITypeDescriptorContext context, object value)
    content.vb: >-
      <SuppressMessage("Microsoft.Security", "CA2122:DoNotIndirectlyExposeMethodsWithLinkDemands")>

      Public Function ConvertToInvariantString(context As ITypeDescriptorContext, value As Object) As String
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: value
      type: System.Object
    return:
      type: System.String
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  id: ConvertToInvariantString(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertToInvariantString(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToInvariantString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 152
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the specified value to a culture-invariant string representation.</p>\n"
  remarks: "\n<p>The <em>context</em> parameter can be used to extract additional information about the environment from which this converter is being invoked. This can be <strong>null</strong>, so always check. Also, properties on the context object can return <strong>null</strong>.</p>\n<p>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</p>\n"
  syntax:
    content: public string ConvertToInvariantString(object value)
    content.vb: Public Function ConvertToInvariantString(value As Object) As String
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.String
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  id: ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertToString(ITypeDescriptorContext, CultureInfo, Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 185
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given value to a string representation, using the specified context and culture information.</p>\n"
  remarks: "\n<p>Use the <em>context</em> parameter to extract additional information about the environment from which this converter is invoked. This parameter can be <strong>null</strong>, so always check it. Also, properties on the context object can return <strong>null</strong>.</p>\n<p>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</p>\n"
  syntax:
    content: public string ConvertToString(ITypeDescriptorContext context, CultureInfo culture, object value)
    content.vb: Public Function ConvertToString(context As ITypeDescriptorContext, culture As CultureInfo, value As Object) As String
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: culture
      type: System.Globalization.CultureInfo
    - id: value
      type: System.Object
    return:
      type: System.String
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertToString(ITypeDescriptorContext, Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 177
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the given value to a string representation, using the given context.</p>\n"
  remarks: "\n<p>Use the <em>context</em> parameter to extract additional information about the environment from which this converter is invoked. This parameter can be <strong>null</strong>, so always check it. Also, properties on the context object can return <strong>null</strong>.</p>\n<p>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</p>\n"
  syntax:
    content: public string ConvertToString(ITypeDescriptorContext context, object value)
    content.vb: Public Function ConvertToString(context As ITypeDescriptorContext, value As Object) As String
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: value
      type: System.Object
    return:
      type: System.String
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  id: ConvertToString(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: ConvertToString(Object)
  fullName: System.ComponentModel.TypeConverter.ConvertToString(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToString
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 169
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts the specified value to a string representation.</p>\n"
  remarks: "\n<p>Depending on the implementation of the value formatter, it might be possible to pass the returned string back into the value formatter to re-create an instance of the object.</p>\n"
  example:
  - "\n<p>For an example on this function, see the <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public string ConvertToString(object value)
    content.vb: Public Function ConvertToString(value As Object) As String
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.String
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The conversion cannot be performed. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  id: CreateInstance(System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: CreateInstance(IDictionary)
  fullName: System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 193
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Re-creates an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> given a set of property values for the object.</p>\n"
  remarks: "\n<p>Use this method for objects that are immutable, but for which you want to provide changeable properties.</p>\n<p>The dictionary provided by the <em>propertyValues</em> parameter has a series of name/value pairs, one for each property returned from <xref href=\"System.ComponentModel.TypeConverter.GetProperties(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public object CreateInstance(IDictionary propertyValues)
    content.vb: Public Function CreateInstance(propertyValues As IDictionary) As Object
    parameters:
    - id: propertyValues
      type: System.Collections.IDictionary
    return:
      type: System.Object
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  commentId: M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  id: CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: CreateInstance(ITypeDescriptorContext, IDictionary)
  fullName: System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext, System.Collections.IDictionary)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 201
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Creates an instance of the type that this <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> is associated with, using the specified context, given a set of property values for the object.</p>\n"
  remarks: "\n<p>Use this method for objects that are immutable, but for which you want to provide changeable properties.</p>\n"
  syntax:
    content: public virtual object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)
    content.vb: Public Overridable Function CreateInstance(context As ITypeDescriptorContext, propertyValues As IDictionary) As Object
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: propertyValues
      type: System.Collections.IDictionary
    return:
      type: System.Object
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  id: GetConvertFromException(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetConvertFromException(Object)
  fullName: System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConvertFromException
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 209
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns an exception to throw when a conversion cannot be performed.</p>\n"
  syntax:
    content: protected Exception GetConvertFromException(object value)
    content.vb: Protected Function GetConvertFromException(value As Object) As Exception
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Exception
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Automatically thrown by this method. </p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  commentId: M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)
  id: GetConvertToException(System.Object,System.Type)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetConvertToException(Object, Type)
  fullName: System.ComponentModel.TypeConverter.GetConvertToException(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConvertToException
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 229
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns an exception to throw when a conversion cannot be performed.</p>\n"
  syntax:
    content: protected Exception GetConvertToException(object value, Type destinationType)
    content.vb: Protected Function GetConvertToException(value As Object, destinationType As Type) As Exception
    parameters:
    - id: value
      type: System.Object
    - id: destinationType
      type: System.Type
    return:
      type: System.Exception
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Automatically thrown by this method. </p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported
  id: GetCreateInstanceSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetCreateInstanceSupported()
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCreateInstanceSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 251
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether changing a value on this object requires a call to the <xref href=\"System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\" data-throw-if-not-resolved=\"false\"></xref> method to create a new value.</p>\n"
  syntax:
    content: public bool GetCreateInstanceSupported()
    content.vb: Public Function GetCreateInstanceSupported As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetCreateInstanceSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCreateInstanceSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 263
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether changing a value on this object requires a call to <xref href=\"System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)\" data-throw-if-not-resolved=\"false\"></xref> to create a new value, using the specified context.</p>\n"
  remarks: "\n<p>As implemented in this class, this method always returns <strong>false</strong>.</p>\n"
  syntax:
    content: public virtual bool GetCreateInstanceSupported(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetCreateInstanceSupported(context As ITypeDescriptorContext) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    return:
      type: System.Boolean
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetProperties(ITypeDescriptorContext, Object)
  fullName: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 283
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a collection of properties for the type of array specified by the value parameter, using the specified context.</p>\n"
  remarks: "\n<p>Use the <em>context</em> parameter to extract additional information about the environment from which this converter is invoked. This parameter can be <strong>null</strong>, so always check it. Also, properties on the context object can return <strong>null</strong>.</p>\n<p>As implemented in this class, this method always returns <strong>null</strong>.</p>\n<p>By default, a type does not return properties. An easy implementation of this method can call <xref href=\"System.ComponentModel.TypeDescriptor.GetProperties(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> for the correct data type.</p>\n"
  syntax:
    content: public PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value)
    content.vb: Public Function GetProperties(context As ITypeDescriptorContext, value As Object) As PropertyDescriptorCollection
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: value
      type: System.Object
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  id: GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetProperties(ITypeDescriptorContext, Object, Attribute[])
  fullName: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 294
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.</p>\n"
  remarks: "\n<p>As implemented in this class, this method always returns <strong>null</strong>.</p>\n"
  syntax:
    content: public virtual PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
    content.vb: Public Overridable Function GetProperties(context As ITypeDescriptorContext, value As Object, attributes As Attribute()) As PropertyDescriptorCollection
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: value
      type: System.Object
    - id: attributes
      type: System.Attribute[]
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  - type: System.Attribute
    commentId: T:System.Attribute
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext, System.Object, System.Attribute())
  name.vb: GetProperties(ITypeDescriptorContext, Object, Attribute())
- uid: System.ComponentModel.TypeConverter.GetProperties(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.GetProperties(System.Object)
  id: GetProperties(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetProperties(Object)
  fullName: System.ComponentModel.TypeConverter.GetProperties(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 272
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a collection of properties for the type of array specified by the value parameter.</p>\n"
  remarks: "\n<p>As implemented in this class, this method always returns <strong>null</strong>.</p>\n<p>By default, a type does not return properties. An easy implementation of this method can call <xref href=\"System.ComponentModel.TypeDescriptor.GetProperties(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> for the correct data type.</p>\n"
  syntax:
    content: public PropertyDescriptorCollection GetProperties(object value)
    content.vb: Public Function GetProperties(value As Object) As PropertyDescriptorCollection
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported
  commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported
  id: GetPropertiesSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetPropertiesSupported()
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetPropertiesSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 303
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this object supports properties.</p>\n"
  remarks: "\n<p>As implemented in this class, this method always returns <strong>false</strong>.</p>\n"
  syntax:
    content: public bool GetPropertiesSupported()
    content.vb: Public Function GetPropertiesSupported As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetPropertiesSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetPropertiesSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 311
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this object supports properties, using the specified context.</p>\n"
  remarks: "\n<p>As implemented in this class, this method always returns <strong>false</strong>.</p>\n"
  syntax:
    content: public virtual bool GetPropertiesSupported(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetPropertiesSupported(context As ITypeDescriptorContext) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    return:
      type: System.Boolean
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.GetStandardValues
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValues
  id: GetStandardValues
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetStandardValues()
  fullName: System.ComponentModel.TypeConverter.GetStandardValues()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValues
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 319
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a collection of standard values from the default context for the data type this type converter is designed for.</p>\n"
  remarks: "\n<p>As implemented in this class, this method always returns <strong>null</strong>.</p>\n"
  syntax:
    content: public ICollection GetStandardValues()
    content.vb: Public Function GetStandardValues As ICollection
    return:
      type: System.Collections.ICollection
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetStandardValues(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValues
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 327
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.</p>\n"
  remarks: "\n<p>As implemented in <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref>, this method always returns <strong>null</strong>.</p>\n"
  example:
  - "\n<p>For an example on this function, see the <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public virtual TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetStandardValues(context As ITypeDescriptorContext) As TypeConverter.StandardValuesCollection
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    return:
      type: System.ComponentModel.TypeConverter.StandardValuesCollection
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive
  id: GetStandardValuesExclusive
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetStandardValuesExclusive()
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValuesExclusive
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 338
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the collection of standard values returned from <xref href=\"System.ComponentModel.TypeConverter.GetStandardValues\" data-throw-if-not-resolved=\"false\"></xref> is an exclusive list.</p>\n"
  remarks: "\n<p>As implemented in this class, this method always returns <strong>false</strong>.</p>\n<p>If the list is exclusive, such as in an enumeration data type, then no other values are valid. If the list is not exclusive, then other valid values might exist in addition to the list of standard values that the <see cref=\"Overload:System.ComponentModel.TypeConverter.GetStandardValues\"></see> method provides. If the values are exclusive, the list returned by <see cref=\"Overload:System.ComponentModel.TypeConverter.GetStandardValues\"></see> should not allow these values to be edited.</p>\n"
  syntax:
    content: public bool GetStandardValuesExclusive()
    content.vb: Public Function GetStandardValuesExclusive As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetStandardValuesExclusive(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValuesExclusive
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 350
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the collection of standard values returned from <xref href=\"System.ComponentModel.TypeConverter.GetStandardValues\" data-throw-if-not-resolved=\"false\"></xref> is an exclusive list of possible values, using the specified context.</p>\n"
  remarks: "\n<p>As implemented in this class, this method always returns <strong>false</strong>.</p>\n<p>If the list is exclusive, such as in an enumeration data type, then no other values are valid. If the list is not exclusive, then other valid values might exist in addition to the list of standard values that the <see cref=\"Overload:System.ComponentModel.TypeConverter.GetStandardValues\"></see> method provides. If the values are exclusive, the list returned by <see cref=\"Overload:System.ComponentModel.TypeConverter.GetStandardValues\"></see> should not allow these values to be edited.</p>\n"
  syntax:
    content: public virtual bool GetStandardValuesExclusive(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetStandardValuesExclusive(context As ITypeDescriptorContext) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    return:
      type: System.Boolean
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported
  id: GetStandardValuesSupported
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetStandardValuesSupported()
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValuesSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 361
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this object supports a standard set of values that can be picked from a list.</p>\n"
  syntax:
    content: public bool GetStandardValuesSupported()
    content.vb: Public Function GetStandardValuesSupported As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  commentId: M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  id: GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: GetStandardValuesSupported(ITypeDescriptorContext)
  fullName: System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStandardValuesSupported
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 372
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.</p>\n"
  remarks: "\n<p>As implemented in this class, this method always returns <strong>false</strong>.</p>\n<p>Use the <em>context</em> parameter to extract additional information about the environment from which this converter is invoked. This parameter can be <strong>null</strong>, so always check it. Also, properties on the context object can return <strong>null</strong>.</p>\n"
  syntax:
    content: public virtual bool GetStandardValuesSupported(ITypeDescriptorContext context)
    content.vb: Public Overridable Function GetStandardValuesSupported(context As ITypeDescriptorContext) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    return:
      type: System.Boolean
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  commentId: M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  id: IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: IsValid(ITypeDescriptorContext, Object)
  fullName: System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsValid
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 388
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the given value object is valid for this type and for the specified context.</p>\n"
  remarks: "\n<p>Use the <em>context</em> parameter to extract additional information about the environment from which this converter is invoked. This parameter can be <strong>null</strong>, so always check it. Also, properties on the context object can return <strong>null</strong>. </p>\n<p>Starting in .NET Framework 4, the <xref href=\"System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method catches exceptions from the <see cref=\"Overload:System.ComponentModel.TypeConverter.CanConvertFrom\"></see> and <see cref=\"Overload:System.ComponentModel.TypeConverter.ConvertFrom\"></see> methods. If the input value type causes <see cref=\"Overload:System.ComponentModel.TypeConverter.CanConvertFrom\"></see> to return <strong>false</strong>, or if the input value causes <see cref=\"Overload:System.ComponentModel.TypeConverter.ConvertFrom\"></see> to raise an exception, the <xref href=\"System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>false</strong>. </p>\n<p>To enable the legacy behavior, insert the following lines into the configuration file of the application, for example, application1.exe.config. </p>\n<pre><code class=\"xml\"><configuration>\n<appSettings>\n<add key=\"UseCompatibleTypeConverterBehavior\" value=\"true\" />\n</appSettings>\n</configuration></code></pre>\n<p></p>\n"
  example:
  - "\n<p>For an example of this function, see the <xref href=\"System.ComponentModel.TypeConverter\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public virtual bool IsValid(ITypeDescriptorContext context, object value)
    content.vb: Public Overridable Function IsValid(context As ITypeDescriptorContext, value As Object) As Boolean
    parameters:
    - id: context
      type: System.ComponentModel.ITypeDescriptorContext
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  seealso:
  - type: System.ComponentModel.ITypeDescriptorContext
    commentId: T:System.ComponentModel.ITypeDescriptorContext
  - type: System.ComponentModel.EnumConverter
    commentId: T:System.ComponentModel.EnumConverter
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeConverter.IsValid(System.Object)
  commentId: M:System.ComponentModel.TypeConverter.IsValid(System.Object)
  id: IsValid(System.Object)
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: IsValid(Object)
  fullName: System.ComponentModel.TypeConverter.IsValid(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsValid
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 380
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the given value object is valid for this type.</p>\n"
  remarks: "\n<p>Starting in .NET Framework 4, the <xref href=\"System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method catches exceptions from the <see cref=\"Overload:System.ComponentModel.TypeConverter.CanConvertFrom\"></see> and <see cref=\"Overload:System.ComponentModel.TypeConverter.ConvertFrom\"></see> methods. If the input value type causes <see cref=\"Overload:System.ComponentModel.TypeConverter.CanConvertFrom\"></see> to return <strong>false</strong>, or if the input value causes <see cref=\"Overload:System.ComponentModel.TypeConverter.ConvertFrom\"></see> to raise an exception, the <xref href=\"System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>false</strong>. </p>\n<p>To enable the legacy behavior, insert the following lines into the configuration file of the application, for example, application1.exe.config. </p>\n<pre><code class=\"xml\"><configuration>\n<appSettings>\n<add key=\"UseCompatibleTypeConverterBehavior\" value=\"true\" />\n</appSettings>\n</configuration></code></pre>\n<p></p>\n"
  syntax:
    content: public bool IsValid(object value)
    content.vb: Public Function IsValid(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  seealso:
  - type: System.ComponentModel.EnumConverter
    commentId: T:System.ComponentModel.EnumConverter
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  commentId: M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  id: SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])
  parent: System.ComponentModel.TypeConverter
  langs:
  - csharp
  - vb
  name: SortProperties(PropertyDescriptorCollection, String[])
  fullName: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SortProperties
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeConverter.cs
    startLine: 417
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts a collection of properties.</p>\n"
  remarks: "\n<p>All properties in the collection that are not already in the array of names are added alphabetically to the end. If the <em>names</em> parameter is an empty array or <strong>null</strong>, all the properties in the collection are sorted alphabetically.</p>\n"
  syntax:
    content: protected PropertyDescriptorCollection SortProperties(PropertyDescriptorCollection props, string[] names)
    content.vb: Protected Function SortProperties(props As PropertyDescriptorCollection, names As String()) As PropertyDescriptorCollection
    parameters:
    - id: props
      type: System.ComponentModel.PropertyDescriptorCollection
    - id: names
      type: System.String[]
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  seealso:
  - type: System.ComponentModel.PropertyDescriptorCollection
    commentId: T:System.ComponentModel.PropertyDescriptorCollection
  - type: System.ComponentModel.TypeConverter
    commentId: T:System.ComponentModel.TypeConverter
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection, System.String())
  name.vb: SortProperties(PropertyDescriptorCollection, String())
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.ComponentModel.ITypeDescriptorContext
  parent: System.ComponentModel
  isExternal: false
  name: ITypeDescriptorContext
  fullName: System.ComponentModel.ITypeDescriptorContext
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: false
  name: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.Attribute[]
  isExternal: true
  name: Attribute[]
  fullName: System.Attribute[]
  fullname.vb: System.Attribute()
  name.vb: Attribute()
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    fullName: System.Attribute
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Attribute
    name: Attribute
    fullName: System.Attribute
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.ComponentModel.TypeConverter.StandardValuesCollection
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter.StandardValuesCollection
  fullName: System.ComponentModel.TypeConverter.StandardValuesCollection
- uid: System.String[]
  isExternal: true
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
