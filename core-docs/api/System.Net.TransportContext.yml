items:
- uid: System.Net.TransportContext
  commentId: T:System.Net.TransportContext
  id: TransportContext
  parent: System.Net
  children:
  - System.Net.TransportContext.#ctor
  - System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)
  langs:
  - csharp
  - vb
  name: TransportContext
  fullName: System.Net.TransportContext
  type: Class
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TransportContext
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 251
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>The <xref href=\"System.Net.TransportContext\" data-throw-if-not-resolved=\"false\"></xref> class provides additional context about the underlying transport layer.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Net.TransportContext\" data-throw-if-not-resolved=\"false\"></xref> class is used with classes in the <xref href=\"System.Security.Authentication.ExtendedProtection\" data-throw-if-not-resolved=\"false\"></xref> namespace to provide support for authentication using extended protection for applications.</p>\n<p>The design of integrated Windows authentication allows for some credential challenge responses to be universal, meaning they can be re-used or forwarded. If this particular design feature is not needed then the challenge responses should be constructed with, at minimum, target specific information and, at best, also some channel specific information. Services can then provide extended protection to ensure that credential challenge responses contain service specific information (a Service Provider Name or SPN) and, if necessary, channel specific information (a channel binding token or CBT). With this information in the credential exchanges, services are able to better protect against malicious use of credential challenge responses that might have been improperly obtained.</p>\n<p>\n<xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> is the only class derived from <xref href=\"System.Net.WebRequest\" data-throw-if-not-resolved=\"false\"></xref> class that can potentially use IWA. The <xref href=\"System.Net.FtpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class does only FTP clear text authentication. The <xref href=\"System.Net.FileWebRequest\" data-throw-if-not-resolved=\"false\"></xref> class doesn't perform any authentication.</p>\n<p>There are several ways an application may get a <xref href=\"System.Net.TransportContext\" data-throw-if-not-resolved=\"false\"></xref> instance. An application that uses <xref href=\"System.Net.Security.SslStream\" data-throw-if-not-resolved=\"false\"></xref> can get the <xref href=\"System.Net.TransportContext\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Net.Security.SslStream.TransportContext\" data-throw-if-not-resolved=\"false\"></xref> property. An application that uses <xref href=\"System.Net.HttpWebRequest\" data-throw-if-not-resolved=\"false\"></xref> can get a <xref href=\"System.Net.TransportContext\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Net.HttpWebRequest.GetRequestStream(System.Net.TransportContext@)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.HttpWebRequest.EndGetRequestStream(System.IAsyncResult,System.Net.TransportContext@)\" data-throw-if-not-resolved=\"false\"></xref> methods. </p>\n"
  example:
  - 
  syntax:
    content: public abstract class TransportContext
    content.vb: Public MustInherit Class TransportContext
  seealso:
  - type: System.Net.Security.SslStream.TransportContext
    commentId: P:System.Net.Security.SslStream.TransportContext
  - type: System.Security.Authentication.ExtendedProtection
    commentId: N:System.Security.Authentication.ExtendedProtection
  - type: System.Security.Authentication.ExtendedProtection.ChannelBinding
    commentId: T:System.Security.Authentication.ExtendedProtection.ChannelBinding
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Net.TransportContext.#ctor
  commentId: M:System.Net.TransportContext.#ctor
  id: '#ctor'
  parent: System.Net.TransportContext
  langs:
  - csharp
  - vb
  name: TransportContext()
  fullName: System.Net.TransportContext.TransportContext()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 253
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Net.TransportContext\" data-throw-if-not-resolved=\"false\"></xref> class</p>\n"
  example:
  - 
  syntax:
    content: protected TransportContext()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)
  commentId: M:System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)
  id: GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)
  parent: System.Net.TransportContext
  langs:
  - csharp
  - vb
  name: GetChannelBinding(ChannelBindingKind)
  fullName: System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChannelBinding
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 254
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Retrieves the requested channel binding. </p>\n"
  remarks: "\n<p>The possible values for the <em>kind</em> parameter are <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Endpoint\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Unique\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>If an application attempts to retrieve the channel binding token (CBT) from the <xref href=\"System.Net.HttpListenerRequest.TransportContext\" data-throw-if-not-resolved=\"false\"></xref> property using the <xref href=\"System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBindingKind\" data-throw-if-not-resolved=\"false\"></xref> is not <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Endpoint\" data-throw-if-not-resolved=\"false\"></xref>, then the <xref href=\"System.Net.HttpListenerRequest\" data-throw-if-not-resolved=\"false\"></xref> will throw <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Net.HttpListenerRequest\" data-throw-if-not-resolved=\"false\"></xref> overrides the <xref href=\"System.Net.TransportContext.GetChannelBinding(System.Security.Authentication.ExtendedProtection.ChannelBindingKind)\" data-throw-if-not-resolved=\"false\"></xref> method with an internal implementation</p>\n"
  example:
  - 
  syntax:
    content: public abstract ChannelBinding GetChannelBinding(ChannelBindingKind kind)
    content.vb: Public MustOverride Function GetChannelBinding(kind As ChannelBindingKind) As ChannelBinding
    parameters:
    - id: kind
      type: System.Security.Authentication.ExtendedProtection.ChannelBindingKind
      description: "\n<p>The type of channel binding to retrieve.</p>\n"
    return:
      type: System.Security.Authentication.ExtendedProtection.ChannelBinding
      description: "\n<p>The requested <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBinding\" data-throw-if-not-resolved=\"false\"></xref>, or <strong>null</strong> if the channel binding is not supported by the current transport or by the operating system.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>kind</em> is must be <xref href=\"System.Security.Authentication.ExtendedProtection.ChannelBindingKind.Endpoint\" data-throw-if-not-resolved=\"false\"></xref> for use with the <xref href=\"System.Net.TransportContext\" data-throw-if-not-resolved=\"false\"></xref> retrieved from the <xref href=\"System.Net.HttpListenerRequest.TransportContext\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  seealso:
  - type: System.Net.Security.SslStream.TransportContext
    commentId: P:System.Net.Security.SslStream.TransportContext
  - type: System.Security.Authentication.ExtendedProtection
    commentId: N:System.Security.Authentication.ExtendedProtection
  - type: System.Security.Authentication.ExtendedProtection.ChannelBinding
    commentId: T:System.Security.Authentication.ExtendedProtection.ChannelBinding
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Authentication.ExtendedProtection.ChannelBindingKind
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ChannelBindingKind
  fullName: System.Security.Authentication.ExtendedProtection.ChannelBindingKind
- uid: System.Security.Authentication.ExtendedProtection.ChannelBinding
  parent: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: ChannelBinding
  fullName: System.Security.Authentication.ExtendedProtection.ChannelBinding
- uid: System.Security.Authentication.ExtendedProtection
  isExternal: false
  name: System.Security.Authentication.ExtendedProtection
  fullName: System.Security.Authentication.ExtendedProtection
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
