items:
- uid: System.Linq.Lookup`2
  commentId: T:System.Linq.Lookup`2
  id: Lookup`2
  parent: System.Linq
  children:
  - System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
  - System.Linq.Lookup`2.Contains(`0)
  - System.Linq.Lookup`2.Count
  - System.Linq.Lookup`2.GetEnumerator
  - System.Linq.Lookup`2.Item(`0)
  - System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: Lookup<TKey, TElement>
  fullName: System.Linq.Lookup<TKey, TElement>
  type: Class
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lookup
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 204
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Represents a collection of keys each mapped to one or more values.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> resembles a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. The difference is that a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> maps keys to single values, whereas a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> maps keys to collections of values.</p>\n<p>You can create an instance of a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> by calling <xref href=\"System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})\" data-throw-if-not-resolved=\"false\"></xref> on an object that implements <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>There is no public constructor to create a new instance of a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>. Additionally, <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> objects are immutable, that is, you cannot add or remove elements or keys from a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> object after it has been created.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> from a collection of objects. It then enumerates the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> and outputs each key and each value in the key's associated collection of values. It also demonstrates how to use the properties <xref href=\"System.Linq.Lookup`2.Count\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Lookup`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> and the methods <xref href=\"System.Linq.Lookup`2.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Linq.Lookup`2.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Linq.Lookup#1"
  syntax:
    content: 'public class Lookup<TKey, TElement> : ILookup<TKey, TElement>, IEnumerable<IGrouping<TKey, TElement>>, IEnumerable'
    content.vb: >-
      Public Class Lookup(Of TKey, TElement)
          Implements ILookup(Of TKey, TElement), IEnumerable(Of IGrouping(Of TKey, TElement)), IEnumerable
    typeParameters:
    - id: TKey
      description: "\n<p>The type of the keys in the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements of each <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> value in the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  inheritance:
  - System.Object
  implements:
  - System.Linq.ILookup{{TKey},{TElement}}
  - System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Linq.Lookup(Of TKey, TElement)
  name.vb: Lookup(Of TKey, TElement)
- uid: System.Linq.Lookup`2.Count
  commentId: P:System.Linq.Lookup`2.Count
  id: Count
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Linq.Lookup<TKey, TElement>.Count
  type: Property
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 207
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Gets the number of key/value collection pairs in the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The value of the <xref href=\"System.Linq.Lookup`2.Count\" data-throw-if-not-resolved=\"false\"></xref> property does not change because items cannot be added to or removed from a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> object after it has been created.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use <xref href=\"System.Linq.Lookup`2.Count\" data-throw-if-not-resolved=\"false\"></xref> to determine the number of key/value collection pairs in a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>. This code example is part of a larger example provided for the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Linq.Lookup#2"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of key/value collection pairs in the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Linq.ILookup{{TKey},{TElement}}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Linq.Lookup(Of TKey, TElement).Count
- uid: System.Linq.Lookup`2.Item(`0)
  commentId: P:System.Linq.Lookup`2.Item(`0)
  id: Item(`0)
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  fullName: System.Linq.Lookup<TKey, TElement>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 208
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Gets the collection of values indexed by the specified key.</p>\n"
  remarks: "\n<p>This indexed property provides the ability to index a specific collection of values in the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> by using the following syntax: <code>myLookup[key]</code> in Visual C# or <code>myLookup(key)</code> in Visual Basic. If the <em>key</em> is not found in the collection, an empty sequence is returned.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use <xref href=\"System.Linq.Lookup`2.Item(`0)\" data-throw-if-not-resolved=\"false\"></xref> to index directly into a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>. This code example is part of a larger example provided for the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Linq.Lookup#3"
  syntax:
    content: public IEnumerable<TElement> this[TKey key] { get; }
    content.vb: Public ReadOnly Property Item(key As TKey) As IEnumerable(Of TElement)
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key of the desired collection of values.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TElement}}
      description: "\n<p>The collection of values indexed by the specified key.</p>\n"
  implements:
  - System.Linq.ILookup{{TKey},{TElement}}.Item({TKey})
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Linq.Lookup(Of TKey, TElement).Item(TKey)
  name.vb: Item(TKey)
- uid: System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
  commentId: M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
  id: ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: ApplyResultSelector<TResult>(Func<TKey, IEnumerable<TElement>, TResult>)
  fullName: System.Linq.Lookup<TKey, TElement>.ApplyResultSelector<TResult>(System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ApplyResultSelector
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 209
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Applies a transform function to each key and its associated values and returns the results.</p>\n"
  example:
  - 
  syntax:
    content: public IEnumerable<TResult> ApplyResultSelector<TResult>(Func<TKey, IEnumerable<TElement>, TResult> resultSelector)
    content.vb: Public Function ApplyResultSelector(Of TResult)(resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As IEnumerable(Of TResult)
    parameters:
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
      description: "\n<p>A function to project a result value from each key and its associated values.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result values produced by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: "\n<p>A collection that contains one value for each key/value collection pair in the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Linq.Lookup(Of TKey, TElement).ApplyResultSelector(Of TResult)(System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  name.vb: ApplyResultSelector(Of TResult)(Func(Of TKey, IEnumerable(Of TElement), TResult))
- uid: System.Linq.Lookup`2.Contains(`0)
  commentId: M:System.Linq.Lookup`2.Contains(`0)
  id: Contains(`0)
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: Contains(TKey)
  fullName: System.Linq.Lookup<TKey, TElement>.Contains(TKey)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 210
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Determines whether a specified key is in the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use <xref href=\"System.Linq.Lookup`2.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> to determine whether a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> contains a specified key. This code example is part of a larger example provided for the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Linq.Lookup#4"
  syntax:
    content: public bool Contains(TKey key)
    content.vb: Public Function Contains(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: "\n<p>The key to find in the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>key</em> is in the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Linq.ILookup{{TKey},{TElement}}.Contains({TKey})
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Linq.Lookup(Of TKey, TElement).Contains(TKey)
- uid: System.Linq.Lookup`2.GetEnumerator
  commentId: M:System.Linq.Lookup`2.GetEnumerator
  id: GetEnumerator
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Linq.Lookup<TKey, TElement>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 211
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns a generic enumerator that iterates through the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use <xref href=\"System.Linq.Lookup`2.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> to iterate through the keys and values of a <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>. This code example is part of a larger example provided for the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Linq.Lookup#5"
  syntax:
    content: public IEnumerator<IGrouping<TKey, TElement>> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of IGrouping(Of TKey, TElement))
    return:
      type: System.Collections.Generic.IEnumerator{System.Linq.IGrouping{{TKey},{TElement}}}
      description: "\n<p>An enumerator for the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Linq.Lookup(Of TKey, TElement).GetEnumerator()
- uid: System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Linq.Lookup`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Linq.Lookup<TKey, TElement>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 212
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>. This class cannot be inherited.</p>\n"
  example:
  - 
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An enumerator for the <xref href=\"System.Linq.Lookup`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  fullName.vb: System.Linq.Lookup(Of TKey, TElement).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Linq.ILookup{{TKey},{TElement}}
  parent: System.Linq
  definition: System.Linq.ILookup`2
  name: ILookup<TKey, TElement>
  fullName: System.Linq.ILookup<TKey, TElement>
  fullname.vb: System.Linq.ILookup(Of TKey, TElement)
  name.vb: ILookup(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<IGrouping<TKey, TElement>>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TElement))
  name.vb: IEnumerable(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Linq.ILookup`2
  parent: System.Linq
  isExternal: false
  name: ILookup<, >
  fullName: System.Linq.ILookup<, >
  fullname.vb: System.Linq.ILookup(Of , )
  name.vb: ILookup(Of , )
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Linq.ILookup{{TKey},{TElement}}.Count
  parent: System.Linq.ILookup{{TKey},{TElement}}
  definition: System.Linq.ILookup`2.Count
  name: Count
  fullName: System.Linq.ILookup<TKey, TElement>.Count
  fullname.vb: System.Linq.ILookup(Of TKey, TElement).Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Linq.ILookup`2.Count
  parent: System.Linq.ILookup`2
  isExternal: false
  name: Count
  fullName: System.Linq.ILookup<TKey, TElement>.Count
  fullname.vb: System.Linq.ILookup(Of TKey, TElement).Count
- uid: System.Linq.ILookup{{TKey},{TElement}}.Item({TKey})
  parent: System.Linq.ILookup{{TKey},{TElement}}
  definition: System.Linq.ILookup`2.Item(`0)
  name: Item[TKey]
  fullName: System.Linq.ILookup<TKey, TElement>.Item[TKey]
  fullname.vb: System.Linq.ILookup(Of TKey, TElement).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Linq.ILookup`2.Item(`0)
    name: Item
    fullName: System.Linq.ILookup<TKey, TElement>.Item
  - name: '['
    fullName: '['
  - name: TKey
    fullName: TKey
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Linq.ILookup`2.Item(`0)
    name: Item
    fullName: System.Linq.ILookup(Of TKey, TElement).Item
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: System.Collections.Generic.IEnumerable{{TElement}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement)
  name.vb: IEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Linq.ILookup`2.Item(`0)
  parent: System.Linq.ILookup`2
  isExternal: false
  name: Item[TKey]
  fullName: System.Linq.ILookup<TKey, TElement>.Item[TKey]
  fullname.vb: System.Linq.ILookup(Of TKey, TElement).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Linq.ILookup`2.Item(`0)
    name: Item
    fullName: System.Linq.ILookup<TKey, TElement>.Item
  - name: '['
    fullName: '['
  - name: TKey
    fullName: TKey
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Linq.ILookup`2.Item(`0)
    name: Item
    fullName: System.Linq.ILookup(Of TKey, TElement).Item
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TKey, IEnumerable<TElement>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>
  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)
  name.vb: Func(Of TKey, IEnumerable(Of TElement), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`3
  parent: System
  isExternal: false
  name: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Linq.ILookup{{TKey},{TElement}}.Contains({TKey})
  parent: System.Linq.ILookup{{TKey},{TElement}}
  definition: System.Linq.ILookup`2.Contains(`0)
  name: Contains(TKey)
  fullName: System.Linq.ILookup<TKey, TElement>.Contains(TKey)
  fullname.vb: System.Linq.ILookup(Of TKey, TElement).Contains(TKey)
  spec.csharp:
  - uid: System.Linq.ILookup`2.Contains(`0)
    name: Contains
    fullName: System.Linq.ILookup<TKey, TElement>.Contains
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ILookup`2.Contains(`0)
    name: Contains
    fullName: System.Linq.ILookup(Of TKey, TElement).Contains
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Linq.ILookup`2.Contains(`0)
  parent: System.Linq.ILookup`2
  isExternal: false
  name: Contains(TKey)
  fullName: System.Linq.ILookup<TKey, TElement>.Contains(TKey)
  fullname.vb: System.Linq.ILookup(Of TKey, TElement).Contains(TKey)
  spec.csharp:
  - uid: System.Linq.ILookup`2.Contains(`0)
    name: Contains
    fullName: System.Linq.ILookup<TKey, TElement>.Contains
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ILookup`2.Contains(`0)
    name: Contains
    fullName: System.Linq.ILookup(Of TKey, TElement).Contains
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TElement)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TElement)).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Linq.IGrouping{{TKey},{TElement}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<IGrouping<TKey, TElement>>
  fullName: System.Collections.Generic.IEnumerator<System.Linq.IGrouping<TKey, TElement>>
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Linq.IGrouping(Of TKey, TElement))
  name.vb: IEnumerator(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
