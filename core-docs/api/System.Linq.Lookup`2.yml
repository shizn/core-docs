items:
- uid: System.Linq.Lookup`2
  commentId: T:System.Linq.Lookup`2
  id: Lookup`2
  parent: System.Linq
  children:
  - System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
  - System.Linq.Lookup`2.Contains(`0)
  - System.Linq.Lookup`2.Count
  - System.Linq.Lookup`2.GetEnumerator
  - System.Linq.Lookup`2.Item(`0)
  langs:
  - csharp
  - vb
  name: Lookup<TKey, TElement>
  fullName: System.Linq.Lookup<TKey, TElement>
  type: Class
  source:
    remote:
      path: src/System.Linq/src/System/Linq/Lookup.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lookup
    path: src/System.Linq/src/System/Linq/Lookup.cs
    startLine: 67
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Represents a collection of keys each mapped to one or more values.
  syntax:
    content: 'public class Lookup<TKey, TElement> : Collections.Generic.IEnumerable<IGrouping<TKey, TElement>>, ILookup<TKey, TElement>, Collections.Generic.IEnumerable<IGrouping<TKey, TElement>>, Collections.IEnumerable'
    content.vb: >-
      Public Class Lookup(Of TKey, TElement)
          Inherits Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TElement))
          Implements ILookup(Of TKey, TElement), Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TElement)), Collections.IEnumerable
    typeParameters:
    - id: TKey
      description: The type of the keys in the <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref>.
    - id: TElement
      description: The type of the elements of each <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> value in the <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref>.
  inheritance:
  - System.Object
  implements:
  - System.Linq.ILookup{{TKey},{TElement}}
  - System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Linq.Lookup(Of TKey, TElement)
  name.vb: Lookup(Of TKey, TElement)
- uid: System.Linq.Lookup`2.Count
  commentId: P:System.Linq.Lookup`2.Count
  id: Count
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Linq.Lookup<TKey, TElement>.Count
  type: Property
  source:
    remote:
      path: src/System.Linq/src/System/Linq/Lookup.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq/src/System/Linq/Lookup.cs
    startLine: 124
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Gets the number of key/value collection pairs in the <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of key/value collection pairs in the <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Linq.ILookup{{TKey},{TElement}}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Linq.Lookup(Of TKey, TElement).Count
- uid: System.Linq.Lookup`2.Item(`0)
  commentId: P:System.Linq.Lookup`2.Item(`0)
  id: Item(`0)
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  fullName: System.Linq.Lookup<TKey, TElement>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/System.Linq/src/System/Linq/Lookup.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Linq/src/System/Linq/Lookup.cs
    startLine: 129
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Gets the collection of values indexed by the specified key.
  syntax:
    content: public Collections.Generic.IEnumerable<TElement> this[TKey key] { get; }
    content.vb: Public ReadOnly Property Item(key As TKey) As Collections.Generic.IEnumerable(Of TElement)
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the desired collection of values.
    return:
      type: System.Collections.Generic.IEnumerable{{TElement}}
      description: The collection of values indexed by the specified key.
  implements:
  - System.Linq.ILookup{{TKey},{TElement}}.Item({TKey})
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Linq.Lookup(Of TKey, TElement).Item(TKey)
  name.vb: Item(TKey)
- uid: System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
  commentId: M:System.Linq.Lookup`2.ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
  id: ApplyResultSelector``1(System.Func{`0,System.Collections.Generic.IEnumerable{`1},``0})
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: ApplyResultSelector<TResult>(Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>)
  fullName: System.Linq.Lookup<TKey, TElement>.ApplyResultSelector<TResult>(System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq/ref/System.Linq.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ApplyResultSelector
    path: src/System.Linq/ref/System.Linq.cs
    startLine: 209
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Applies a transform function to each key and its associated values and returns the results.
  syntax:
    content: public Collections.Generic.IEnumerable<TResult> ApplyResultSelector<TResult>(Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult> resultSelector)
    content.vb: Public Function ApplyResultSelector(Of TResult)(resultSelector As Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult)) As Collections.Generic.IEnumerable(Of TResult)
    parameters:
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
      description: A function to project a result value from each key and its associated values.
    typeParameters:
    - id: TResult
      description: The type of the result values produced by <em>resultSelector</em>.
    return:
      type: System.Collections.Generic.IEnumerable{{TResult}}
      description: A collection that contains one value for each key/value collection pair in the <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Linq.Lookup(Of TKey, TElement).ApplyResultSelector(Of TResult)(System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  name.vb: ApplyResultSelector(Of TResult)(Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult))
- uid: System.Linq.Lookup`2.Contains(`0)
  commentId: M:System.Linq.Lookup`2.Contains(`0)
  id: Contains(`0)
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: Contains(TKey)
  fullName: System.Linq.Lookup<TKey, TElement>.Contains(TKey)
  type: Method
  source:
    remote:
      path: src/System.Linq/src/System/Linq/Lookup.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq/src/System/Linq/Lookup.cs
    startLine: 143
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Determines whether a specified key is in the <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool Contains(TKey key)
    content.vb: Public Function Contains(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to find in the <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: true if <em>key</em> is in the <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  implements:
  - System.Linq.ILookup{{TKey},{TElement}}.Contains({TKey})
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Linq.Lookup(Of TKey, TElement).Contains(TKey)
- uid: System.Linq.Lookup`2.GetEnumerator
  commentId: M:System.Linq.Lookup`2.GetEnumerator
  id: GetEnumerator
  parent: System.Linq.Lookup`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Linq.Lookup<TKey, TElement>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Linq/src/System/Linq/Lookup.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Linq/src/System/Linq/Lookup.cs
    startLine: 148
  assemblies:
  - System.Linq
  namespace: System.Linq
  summary: Returns a generic enumerator that iterates through the <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Collections.Generic.IEnumerator<IGrouping<TKey, TElement>> GetEnumerator()
    content.vb: Public Function GetEnumerator As Collections.Generic.IEnumerator(Of IGrouping(Of TKey, TElement))
    return:
      type: System.Collections.Generic.IEnumerator{System.Linq.IGrouping{{TKey},{TElement}}}
      description: An enumerator for the <xref href="System.Linq.Lookup`2" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Linq.Lookup(Of TKey, TElement).GetEnumerator()
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Linq.ILookup{{TKey},{TElement}}
  parent: System.Linq
  definition: System.Linq.ILookup`2
  name: ILookup<TKey, TElement>
  fullName: System.Linq.ILookup<TKey, TElement>
  fullname.vb: System.Linq.ILookup(Of TKey, TElement)
  name.vb: ILookup(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Linq.IGrouping{{TKey},{TElement}}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<IGrouping<TKey, TElement>>
  fullName: System.Collections.Generic.IEnumerable<System.Linq.IGrouping<TKey, TElement>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Linq.IGrouping(Of TKey, TElement))
  name.vb: Collections.Generic.IEnumerable(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Linq.ILookup`2
  parent: System.Linq
  isExternal: false
  name: ILookup<TKey, TElement>
  fullName: System.Linq.ILookup<TKey, TElement>
  fullname.vb: System.Linq.ILookup(Of TKey, TElement)
  name.vb: ILookup(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Linq.ILookup{{TKey},{TElement}}.Count
  parent: System.Linq.ILookup{{TKey},{TElement}}
  definition: System.Linq.ILookup`2.Count
  name: Count
  fullName: System.Linq.ILookup<TKey, TElement>.Count
  fullname.vb: System.Linq.ILookup(Of TKey, TElement).Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Linq.ILookup`2.Count
  parent: System.Linq.ILookup`2
  isExternal: false
  name: Count
  fullName: System.Linq.ILookup<TKey, TElement>.Count
  fullname.vb: System.Linq.ILookup(Of TKey, TElement).Count
- uid: System.Linq.ILookup{{TKey},{TElement}}.Item({TKey})
  parent: System.Linq.ILookup{{TKey},{TElement}}
  definition: System.Linq.ILookup`2.Item(`0)
  name: Item[TKey]
  fullName: System.Linq.ILookup<TKey, TElement>.Item[TKey]
  fullname.vb: System.Linq.ILookup(Of TKey, TElement).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Linq.ILookup`2.Item(`0)
    name: Item
    fullName: System.Linq.ILookup<TKey, TElement>.Item
  - name: '['
    fullName: '['
  - name: TKey
    fullName: TKey
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Linq.ILookup`2.Item(`0)
    name: Item
    fullName: System.Linq.ILookup(Of TKey, TElement).Item
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: System.Collections.Generic.IEnumerable{{TElement}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement)
  name.vb: Collections.Generic.IEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Linq.ILookup`2.Item(`0)
  parent: System.Linq.ILookup`2
  isExternal: false
  name: Item[TKey]
  fullName: System.Linq.ILookup<TKey, TElement>.Item[TKey]
  fullname.vb: System.Linq.ILookup(Of TKey, TElement).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Linq.ILookup`2.Item(`0)
    name: Item
    fullName: System.Linq.ILookup<TKey, TElement>.Item
  - name: '['
    fullName: '['
  - name: TKey
    fullName: TKey
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Linq.ILookup`2.Item(`0)
    name: Item
    fullName: System.Linq.ILookup(Of TKey, TElement).Item
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
  definition: System.Func`3
  name: Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>
  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)
  name.vb: Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TResult}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TResult>
  fullName: System.Collections.Generic.IEnumerable<TResult>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TResult)
  name.vb: Collections.Generic.IEnumerable(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`3
  isExternal: false
  name: Func<, , >
  fullName: System.Func<, , >
  fullname.vb: System.Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Linq.ILookup{{TKey},{TElement}}.Contains({TKey})
  parent: System.Linq.ILookup{{TKey},{TElement}}
  definition: System.Linq.ILookup`2.Contains(`0)
  name: Contains(TKey)
  fullName: System.Linq.ILookup<TKey, TElement>.Contains(TKey)
  fullname.vb: System.Linq.ILookup(Of TKey, TElement).Contains(TKey)
  spec.csharp:
  - uid: System.Linq.ILookup`2.Contains(`0)
    name: Contains
    fullName: System.Linq.ILookup<TKey, TElement>.Contains
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ILookup`2.Contains(`0)
    name: Contains
    fullName: System.Linq.ILookup(Of TKey, TElement).Contains
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Linq.ILookup`2.Contains(`0)
  parent: System.Linq.ILookup`2
  isExternal: false
  name: Contains(TKey)
  fullName: System.Linq.ILookup<TKey, TElement>.Contains(TKey)
  fullname.vb: System.Linq.ILookup(Of TKey, TElement).Contains(TKey)
  spec.csharp:
  - uid: System.Linq.ILookup`2.Contains(`0)
    name: Contains
    fullName: System.Linq.ILookup<TKey, TElement>.Contains
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ILookup`2.Contains(`0)
    name: Contains
    fullName: System.Linq.ILookup(Of TKey, TElement).Contains
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Linq.IGrouping{{TKey},{TElement}}}
  definition: System.Collections.Generic.IEnumerator`1
  name: Collections.Generic.IEnumerator<IGrouping<TKey, TElement>>
  fullName: System.Collections.Generic.IEnumerator<System.Linq.IGrouping<TKey, TElement>>
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Linq.IGrouping(Of TKey, TElement))
  name.vb: Collections.Generic.IEnumerator(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Collections.Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  fullname.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
