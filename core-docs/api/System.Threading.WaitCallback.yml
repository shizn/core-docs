items:
- uid: System.Threading.WaitCallback
  commentId: T:System.Threading.WaitCallback
  id: WaitCallback
  parent: System.Threading
  children: []
  langs:
  - csharp
  - vb
  name: WaitCallback
  fullName: System.Threading.WaitCallback
  type: Delegate
  source:
    remote:
      path: src/System.Threading.ThreadPool/ref/System.Threading.ThreadPool.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WaitCallback
    path: src/System.Threading.ThreadPool/ref/System.Threading.ThreadPool.cs
    startLine: 27
  assemblies:
  - System.Threading.ThreadPool
  namespace: System.Threading
  summary: "\n<p>Represents a callback method to be executed by a thread pool thread.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Threading.WaitCallback\" data-throw-if-not-resolved=\"false\"></xref> represents a callback method that you want to execute on a <xref href=\"System.Threading.ThreadPool\" data-throw-if-not-resolved=\"false\"></xref> thread. Create the delegate by passing your callback method to the <xref href=\"System.Threading.WaitCallback\" data-throw-if-not-resolved=\"false\"></xref> constructor. Your method must have the signature shown here.</p>\n<p>Queue your task for execution by passing the <xref href=\"System.Threading.WaitCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate to <xref href=\"System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. Your callback method executes when a thread pool thread becomes available.</p>\n<p>Visual Basic users can omit the <xref href=\"System.Threading.WaitCallback\" data-throw-if-not-resolved=\"false\"></xref> constructor, and simply use the <strong>AddressOf</strong> operator when passing the callback method to <xref href=\"System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. Visual Basic automatically calls the correct delegate constructor.</p>\n<p>If you want to pass information to your callback method, create an object that contains the necessary information and pass it to <xref href=\"System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> when you queue your task for execution. Each time your callback method executes, the <em>state</em> parameter contains this object.</p>\n<p>For more information about using callbacks to synchronize thread pool threads, see The Managed Thread Pool.</p>\n"
  example:
  - "\n<p>This section contains two examples. The first example demonstrates how you can queue a simple task for execution by the thread pool. </p>\n<p>The second example demonstrates how you can queue a task and pass information to it. </p>\n<p>Example 1</p>\n<p>This example shows how to use the <xref href=\"System.Threading.WaitCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate to queue a task for execution by the thread pool. The code example uses the <xref href=\"System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)\" data-throw-if-not-resolved=\"false\"></xref> method overload to queue a task, which is represented by a <xref href=\"System.Threading.WaitCallback\" data-throw-if-not-resolved=\"false\"></xref> that wraps the <code>ThreadProc</code> method, to execute when a thread becomes available. No task information is supplied with this overload. Therefore, the information that is available to the <code>ThreadProc</code> method is limited to the object the method belongs to.</p>System.Threading.ThreadPool QueueUserWorkItem0#1<p>Example 2</p><p>This example shows how to create an object that contains task information. It also demonstrates how to pass that object to a task that is queued for execution by the thread pool.</p>System.Threading.ThreadPool QueueUserWorkItem1#1"
  syntax:
    content: public delegate void WaitCallback(object state);
    content.vb: Public Delegate Sub WaitCallback(state As Object)
    parameters:
    - id: state
      type: System.Object
      description: "\n<p>An object containing information to be used by the callback method. </p>\n"
  seealso:
  - type: System.Threading.ThreadPool
    commentId: T:System.Threading.ThreadPool
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
