items:
- uid: System.Xml.XmlAttributeCollection
  commentId: T:System.Xml.XmlAttributeCollection
  id: XmlAttributeCollection
  parent: System.Xml
  children:
  - System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)
  - System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)
  - System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)
  - System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)
  - System.Xml.XmlAttributeCollection.ItemOf(System.Int32)
  - System.Xml.XmlAttributeCollection.ItemOf(System.String)
  - System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)
  - System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)
  - System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)
  - System.Xml.XmlAttributeCollection.RemoveAll
  - System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)
  - System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)
  - System.Xml.XmlAttributeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count
  - System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized
  - System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  - vb
  name: XmlAttributeCollection
  fullName: System.Xml.XmlAttributeCollection
  type: Class
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlAttributeCollection
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 36
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Represents a collection of attributes that can be accessed by name or index.</p>\n"
  remarks: "\n<p>\n<strong>XmlAttributeCollection</strong> extends the <xref href=\"System.Xml.XmlNamedNodeMap\" data-throw-if-not-resolved=\"false\"></xref> class by adding strongly typed helper methods. You can use this class to add, remove, or modify attributes in the collection. <strong>XmlAttributeCollection</strong> is returned by the <xref href=\"System.Xml.XmlElement.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: 'public sealed class XmlAttributeCollection : XmlNamedNodeMap, ICollection, IEnumerable'
    content.vb: >-
      Public NotInheritable Class XmlAttributeCollection
          Inherits XmlNamedNodeMap
          Implements ICollection, IEnumerable
  seealso:
  - type: System.Xml.XmlAttribute
    commentId: T:System.Xml.XmlAttribute
  - type: System.Xml.XmlElement
    commentId: T:System.Xml.XmlElement
  inheritance:
  - System.Object
  - System.Xml.XmlNamedNodeMap
  implements:
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Xml.XmlNamedNodeMap.Count
  - System.Xml.XmlNamedNodeMap.GetEnumerator
  - System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)
  - System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)
  - System.Xml.XmlNamedNodeMap.Item(System.Int32)
  - System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)
  - System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Xml.XmlAttributeCollection.ItemOf(System.Int32)
  commentId: P:System.Xml.XmlAttributeCollection.ItemOf(System.Int32)
  id: ItemOf(System.Int32)
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: ItemOf[Int32]
  fullName: System.Xml.XmlAttributeCollection.ItemOf[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 39
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the attribute with the specified index.</p>\n"
  remarks: "\n<p>This property is a Microsoft extension to the Document Object Model (DOM). It is equivalent to calling <xref href=\"System.Xml.XmlNamedNodeMap.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example displays all the attributes in the collection.</p>Classic WebData XmlAttributeCollection.this Example#1"
  syntax:
    content: >-
      [IndexerName("ItemOf")]

      public XmlAttribute this[int i] { get; }
    content.vb: >-
      <IndexerName("ItemOf")>

      Public ReadOnly Property ItemOf(i As Integer) As XmlAttribute
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the attribute. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index being passed in is out of range. </p>\n"
  seealso:
  - type: System.Xml.XmlNamedNodeMap.Item(System.Int32)
    commentId: M:System.Xml.XmlNamedNodeMap.Item(System.Int32)
  attributes:
  - type: System.Runtime.CompilerServices.IndexerNameAttribute
    ctor: System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ItemOf
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Xml.XmlAttributeCollection.ItemOf(System.Int32)
  name.vb: ItemOf(Int32)
- uid: System.Xml.XmlAttributeCollection.ItemOf(System.String)
  commentId: P:System.Xml.XmlAttributeCollection.ItemOf(System.String)
  id: ItemOf(System.String)
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: ItemOf[String]
  fullName: System.Xml.XmlAttributeCollection.ItemOf[System.String]
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 41
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the attribute with the specified name.</p>\n"
  remarks: "\n<p>This property is a Microsoft extension to the Document Object Model (DOM). It is equivalent to calling <xref href=\"System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example removes an attribute from the document.</p>Classic WebData XmlAttributeCollection.Remove Example#1"
  syntax:
    content: >-
      [IndexerName("ItemOf")]

      public XmlAttribute this[string name] { get; }
    content.vb: >-
      <IndexerName("ItemOf")>

      Public ReadOnly Property ItemOf(name As String) As XmlAttribute
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the attribute. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> with the specified name. If the attribute does not exist, this property returns <strong>null</strong>.</p>\n"
  attributes:
  - type: System.Runtime.CompilerServices.IndexerNameAttribute
    ctor: System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ItemOf
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Xml.XmlAttributeCollection.ItemOf(System.String)
  name.vb: ItemOf(String)
- uid: System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)
  commentId: P:System.Xml.XmlAttributeCollection.ItemOf(System.String,System.String)
  id: ItemOf(System.String,System.String)
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: ItemOf[String, String]
  fullName: System.Xml.XmlAttributeCollection.ItemOf[System.String, System.String]
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 43
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the attribute with the specified local name and namespace Uniform Resource Identifier (URI).</p>\n"
  remarks: "\n<p>This property is a Microsoft extension to the Document Object Model (DOM). It is equivalent to calling <xref href=\"System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [IndexerName("ItemOf")]

      public XmlAttribute this[string localName, string namespaceURI] { get; }
    content.vb: >-
      <IndexerName("ItemOf")>

      Public ReadOnly Property ItemOf(localName As String, namespaceURI As String) As XmlAttribute
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> with the specified local name and namespace URI. If the attribute does not exist, this property returns <strong>null</strong>.</p>\n"
  attributes:
  - type: System.Runtime.CompilerServices.IndexerNameAttribute
    ctor: System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ItemOf
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Xml.XmlAttributeCollection.ItemOf(System.String, System.String)
  name.vb: ItemOf(String, String)
- uid: System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count
  commentId: P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: ICollection.Count
  fullName: System.Xml.XmlAttributeCollection.System.Collections.ICollection.Count
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.Count
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 45
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>For a description of this member, see <xref href=\"System.Xml.XmlAttributeCollection.System#Collections#ICollection#Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Xml.XmlAttributeCollection\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - 
  syntax:
    content: int ICollection.Count { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.Count As Integer Implements ICollection.Count
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>Returns an <strong>int</strong> that contains the count of the attributes.</p>\n"
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.Count
- uid: System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Xml.XmlAttributeCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 46
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>For a description of this member, see <xref href=\"System.Xml.XmlAttributeCollection.System#Collections#ICollection#IsSynchronized\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Xml.XmlAttributeCollection\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - 
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the collection is synchronized.</p>\n"
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot
  commentId: P:System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Xml.XmlAttributeCollection.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 47
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>For a description of this member, see <xref href=\"System.Xml.XmlAttributeCollection.System#Collections#ICollection#SyncRoot\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Xml.XmlAttributeCollection\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - 
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
      description: "\n<p>Returns the <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that is the root of the collection.</p>\n"
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)
  commentId: M:System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)
  id: Append(System.Xml.XmlAttribute)
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: Append(XmlAttribute)
  fullName: System.Xml.XmlAttributeCollection.Append(System.Xml.XmlAttribute)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Append
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 48
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Inserts the specified attribute as the last node in the collection.</p>\n"
  remarks: "\n<p>If an attribute with the same name is already present in the collection, the original attribute is removed from the collection and <em>node</em> is added to the end of the collection.</p>\n<p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example adds a new attribute to a document.</p>Classic WebData XmlAttributeCollection.Append Example#1"
  syntax:
    content: public XmlAttribute Append(XmlAttribute node)
    content.vb: Public Function Append(node As XmlAttribute) As XmlAttribute
    parameters:
    - id: node
      type: System.Xml.XmlAttribute
      description: "\n<p>The <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> to insert. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The <strong>XmlAttribute</strong> to append to the collection.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>node</em> was created from a document different from the one that created this collection. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)
  commentId: M:System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)
  id: CopyTo(System.Xml.XmlAttribute[],System.Int32)
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: CopyTo(XmlAttribute[], Int32)
  fullName: System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 49
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Copies all the <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> objects from this collection into the given array.</p>\n"
  remarks: "\n<p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example uses <strong>CopyTo</strong> to copy all the attributes in the collection into an array.</p>Classic WebData XmlAttributeCollection.CopyTo Example#1"
  syntax:
    content: public void CopyTo(XmlAttribute[] array, int index)
    content.vb: Public Sub CopyTo(array As XmlAttribute(), index As Integer)
    parameters:
    - id: array
      type: System.Xml.XmlAttribute[]
      description: "\n<p>The array that is the destination of the objects copied from this collection. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index in the array where copying begins. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute(), System.Int32)
  name.vb: CopyTo(XmlAttribute(), Int32)
- uid: System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)
  commentId: M:System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)
  id: InsertAfter(System.Xml.XmlAttribute,System.Xml.XmlAttribute)
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: InsertAfter(XmlAttribute, XmlAttribute)
  fullName: System.Xml.XmlAttributeCollection.InsertAfter(System.Xml.XmlAttribute, System.Xml.XmlAttribute)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InsertAfter
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 50
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Inserts the specified attribute immediately after the specified reference attribute.</p>\n"
  remarks: "\n<p>If an attribute with the same name is already present in the collection, the original attribute is removed from the collection and <em>newNode</em> is inserted into the collection. If <em>refNode</em> is <strong>null</strong>, <em>newNode</em> is inserted at the beginning of the collection.</p>\n<p>This method is a Microsoft extension to the Document Object Model (DOM). </p>\n"
  example:
  - "\n<p>The following example adds a new attribute to a document.</p>Classic WebData XmlAttributeCollection.InsertAfter Example#1"
  syntax:
    content: public XmlAttribute InsertAfter(XmlAttribute newNode, XmlAttribute refNode)
    content.vb: Public Function InsertAfter(newNode As XmlAttribute, refNode As XmlAttribute) As XmlAttribute
    parameters:
    - id: newNode
      type: System.Xml.XmlAttribute
      description: "\n<p>The <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> to insert. </p>\n"
    - id: refNode
      type: System.Xml.XmlAttribute
      description: "\n<p>The <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> that is the reference attribute. <em>newNode</em> is placed after the <em>refNode</em>. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The <strong>XmlAttribute</strong> to insert into the collection.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>newNode</em> was created from a document different from the one that created this collection. Or the <em>refNode</em> is not a member of this collection. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)
  commentId: M:System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)
  id: InsertBefore(System.Xml.XmlAttribute,System.Xml.XmlAttribute)
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: InsertBefore(XmlAttribute, XmlAttribute)
  fullName: System.Xml.XmlAttributeCollection.InsertBefore(System.Xml.XmlAttribute, System.Xml.XmlAttribute)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InsertBefore
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 51
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Inserts the specified attribute immediately before the specified reference attribute.</p>\n"
  remarks: "\n<p>If an attribute with the same name is already present in the collection, the original attribute is removed from the collection and <em>newNode</em> is inserted into the collection. If <em>refNode</em> is <strong>null</strong>, <em>newNode</em> is inserted at the end of the collection.</p>\n<p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example adds a new attribute to a document.</p>Classic WebData XmlAttributeCollection.InsertBefore Example#1"
  syntax:
    content: public XmlAttribute InsertBefore(XmlAttribute newNode, XmlAttribute refNode)
    content.vb: Public Function InsertBefore(newNode As XmlAttribute, refNode As XmlAttribute) As XmlAttribute
    parameters:
    - id: newNode
      type: System.Xml.XmlAttribute
      description: "\n<p>The <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> to insert. </p>\n"
    - id: refNode
      type: System.Xml.XmlAttribute
      description: "\n<p>The <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> that is the reference attribute. <em>newNode</em> is placed before the <em>refNode</em>. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The <strong>XmlAttribute</strong> to insert into the collection.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>newNode</em> was created from a document different from the one that created this collection. Or the <em>refNode</em> is not a member of this collection. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)
  commentId: M:System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)
  id: Prepend(System.Xml.XmlAttribute)
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: Prepend(XmlAttribute)
  fullName: System.Xml.XmlAttributeCollection.Prepend(System.Xml.XmlAttribute)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Prepend
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 52
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Inserts the specified attribute as the first node in the collection.</p>\n"
  remarks: "\n<p>If an attribute with the same name is already present in the collection, the original attribute is removed from the collection and <em>node</em> is added to the beginning of the collection.</p>\n<p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example adds a new attribute to a document.</p>Classic WebData XmlAttributeCollection.Prepend Example#1"
  syntax:
    content: public XmlAttribute Prepend(XmlAttribute node)
    content.vb: Public Function Prepend(node As XmlAttribute) As XmlAttribute
    parameters:
    - id: node
      type: System.Xml.XmlAttribute
      description: "\n<p>The <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> to insert. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The <strong>XmlAttribute</strong> added to the collection.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)
  commentId: M:System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)
  id: Remove(System.Xml.XmlAttribute)
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: Remove(XmlAttribute)
  fullName: System.Xml.XmlAttributeCollection.Remove(System.Xml.XmlAttribute)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 53
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Removes the specified attribute from the collection.</p>\n"
  remarks: "\n<p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example removes an attribute from the document.</p>Classic WebData XmlAttributeCollection.Remove Example#1"
  syntax:
    content: public XmlAttribute Remove(XmlAttribute node)
    content.vb: Public Function Remove(node As XmlAttribute) As XmlAttribute
    parameters:
    - id: node
      type: System.Xml.XmlAttribute
      description: "\n<p>The <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> to remove. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The node removed or <strong>null</strong> if it is not found in the collection.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlAttributeCollection.RemoveAll
  commentId: M:System.Xml.XmlAttributeCollection.RemoveAll
  id: RemoveAll
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: RemoveAll()
  fullName: System.Xml.XmlAttributeCollection.RemoveAll()
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAll
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 54
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Removes all attributes from the collection.</p>\n"
  remarks: "\n<p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example removes all attributes from the document.</p>Classic WebData XmlAttributeCollection.RemoveAll Example#1"
  syntax:
    content: public void RemoveAll()
    content.vb: Public Sub RemoveAll
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)
  commentId: M:System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Xml.XmlAttributeCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 55
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Removes the attribute corresponding to the specified index from the collection.</p>\n"
  remarks: "\n<p>This method is a Microsoft extension to the Document Object Model (DOM).</p>\n"
  example:
  - "\n<p>The following example removes an attribute from the document.</p>Classic WebData XmlAttributeCollection.RemoveAt Example#1"
  syntax:
    content: public XmlAttribute RemoveAt(int i)
    content.vb: Public Function RemoveAt(i As Integer) As XmlAttribute
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the node to remove. The first node has index 0. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>Returns <strong>null</strong> if there is no attribute at the specified index.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)
  commentId: M:System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)
  id: SetNamedItem(System.Xml.XmlNode)
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: SetNamedItem(XmlNode)
  fullName: System.Xml.XmlAttributeCollection.SetNamedItem(System.Xml.XmlNode)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetNamedItem
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 56
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Adds a <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> using its <xref href=\"System.Xml.XmlNode.Name\" data-throw-if-not-resolved=\"false\"></xref> property </p>\n"
  example:
  - "\n<p>The following example adds a new attribute to a document.</p>Classic WebData XmlAttributeCollection.SetNamedItem Example#1"
  syntax:
    content: public override XmlNode SetNamedItem(XmlNode node)
    content.vb: Public Overrides Function SetNamedItem(node As XmlNode) As XmlNode
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "\n<p>An attribute node to store in this collection. The node will later be accessible using the name of the node. If a node with that name is already present in the collection, it is replaced by the new one; otherwise, the node is appended to the end of the collection. </p>\n"
    return:
      type: System.Xml.XmlNode
      description: "\n<p>If the <em>node</em> replaces an existing node with the same name, the old node is returned; otherwise, the added node is returned.</p>\n"
  overridden: System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>node</em> was created from a different <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref> than the one that created this collection.</p>\n<p>This <strong>XmlAttributeCollection</strong> is read-only. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>node</em> is an <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> that is already an attribute of another <xref href=\"System.Xml.XmlElement\" data-throw-if-not-resolved=\"false\"></xref> object. To re-use attributes in other elements, you must clone the <strong>XmlAttribute</strong> objects you want to re-use. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlAttributeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Xml.XmlAttributeCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Xml.XmlAttributeCollection
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  fullName: System.Xml.XmlAttributeCollection.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.CopyTo
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 57
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>For a description of this member, see <xref href=\"System.Xml.XmlAttributeCollection.CopyTo(System.Xml.XmlAttribute[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Xml.XmlAttributeCollection\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - 
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The array that is the destination of the objects copied from this collection. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index in the array where copying begins. </p>\n"
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Xml.XmlNamedNodeMap
  parent: System.Xml
  isExternal: false
  name: XmlNamedNodeMap
  fullName: System.Xml.XmlNamedNodeMap
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Xml.XmlNamedNodeMap.Count
  parent: System.Xml.XmlNamedNodeMap
  isExternal: false
  name: Count
  fullName: System.Xml.XmlNamedNodeMap.Count
- uid: System.Xml.XmlNamedNodeMap.GetEnumerator
  parent: System.Xml.XmlNamedNodeMap
  isExternal: false
  name: GetEnumerator()
  fullName: System.Xml.XmlNamedNodeMap.GetEnumerator()
  spec.csharp:
  - uid: System.Xml.XmlNamedNodeMap.GetEnumerator
    name: GetEnumerator
    fullName: System.Xml.XmlNamedNodeMap.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNamedNodeMap.GetEnumerator
    name: GetEnumerator
    fullName: System.Xml.XmlNamedNodeMap.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)
  parent: System.Xml.XmlNamedNodeMap
  isExternal: true
  name: GetNamedItem(String)
  fullName: System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)
  spec.csharp:
  - uid: System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)
    name: GetNamedItem
    fullName: System.Xml.XmlNamedNodeMap.GetNamedItem
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNamedNodeMap.GetNamedItem(System.String)
    name: GetNamedItem
    fullName: System.Xml.XmlNamedNodeMap.GetNamedItem
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)
  parent: System.Xml.XmlNamedNodeMap
  isExternal: true
  name: GetNamedItem(String, String)
  fullName: System.Xml.XmlNamedNodeMap.GetNamedItem(System.String, System.String)
  spec.csharp:
  - uid: System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)
    name: GetNamedItem
    fullName: System.Xml.XmlNamedNodeMap.GetNamedItem
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNamedNodeMap.GetNamedItem(System.String,System.String)
    name: GetNamedItem
    fullName: System.Xml.XmlNamedNodeMap.GetNamedItem
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlNamedNodeMap.Item(System.Int32)
  parent: System.Xml.XmlNamedNodeMap
  isExternal: true
  name: Item(Int32)
  fullName: System.Xml.XmlNamedNodeMap.Item(System.Int32)
  spec.csharp:
  - uid: System.Xml.XmlNamedNodeMap.Item(System.Int32)
    name: Item
    fullName: System.Xml.XmlNamedNodeMap.Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNamedNodeMap.Item(System.Int32)
    name: Item
    fullName: System.Xml.XmlNamedNodeMap.Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)
  parent: System.Xml.XmlNamedNodeMap
  isExternal: true
  name: RemoveNamedItem(String)
  fullName: System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)
  spec.csharp:
  - uid: System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)
    name: RemoveNamedItem
    fullName: System.Xml.XmlNamedNodeMap.RemoveNamedItem
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String)
    name: RemoveNamedItem
    fullName: System.Xml.XmlNamedNodeMap.RemoveNamedItem
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)
  parent: System.Xml.XmlNamedNodeMap
  isExternal: true
  name: RemoveNamedItem(String, String)
  fullName: System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String, System.String)
  spec.csharp:
  - uid: System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)
    name: RemoveNamedItem
    fullName: System.Xml.XmlNamedNodeMap.RemoveNamedItem
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNamedNodeMap.RemoveNamedItem(System.String,System.String)
    name: RemoveNamedItem
    fullName: System.Xml.XmlNamedNodeMap.RemoveNamedItem
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Xml.XmlAttribute
  parent: System.Xml
  isExternal: false
  name: XmlAttribute
  fullName: System.Xml.XmlAttribute
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Xml.XmlAttribute[]
  isExternal: false
  name: XmlAttribute[]
  fullName: System.Xml.XmlAttribute[]
  fullname.vb: System.Xml.XmlAttribute()
  name.vb: XmlAttribute()
  spec.csharp:
  - uid: System.Xml.XmlAttribute
    name: XmlAttribute
    fullName: System.Xml.XmlAttribute
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Xml.XmlAttribute
    name: XmlAttribute
    fullName: System.Xml.XmlAttribute
  - name: ()
    fullName: ()
- uid: System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)
  parent: System.Xml.XmlNamedNodeMap
  isExternal: false
  name: SetNamedItem(XmlNode)
  fullName: System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)
    name: SetNamedItem
    fullName: System.Xml.XmlNamedNodeMap.SetNamedItem
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNamedNodeMap.SetNamedItem(System.Xml.XmlNode)
    name: SetNamedItem
    fullName: System.Xml.XmlNamedNodeMap.SetNamedItem
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
