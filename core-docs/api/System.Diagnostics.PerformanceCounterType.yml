items:
- uid: System.Diagnostics.PerformanceCounterType
  commentId: T:System.Diagnostics.PerformanceCounterType
  id: PerformanceCounterType
  parent: System.Diagnostics
  children:
  - System.Diagnostics.PerformanceCounterType.AverageBase
  - System.Diagnostics.PerformanceCounterType.AverageCount64
  - System.Diagnostics.PerformanceCounterType.AverageTimer32
  - System.Diagnostics.PerformanceCounterType.CounterDelta32
  - System.Diagnostics.PerformanceCounterType.CounterDelta64
  - System.Diagnostics.PerformanceCounterType.CounterMultiBase
  - System.Diagnostics.PerformanceCounterType.CounterMultiTimer
  - System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns
  - System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse
  - System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse
  - System.Diagnostics.PerformanceCounterType.CounterTimer
  - System.Diagnostics.PerformanceCounterType.CounterTimerInverse
  - System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32
  - System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64
  - System.Diagnostics.PerformanceCounterType.ElapsedTime
  - System.Diagnostics.PerformanceCounterType.NumberOfItems32
  - System.Diagnostics.PerformanceCounterType.NumberOfItems64
  - System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32
  - System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64
  - System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32
  - System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64
  - System.Diagnostics.PerformanceCounterType.RawBase
  - System.Diagnostics.PerformanceCounterType.RawFraction
  - System.Diagnostics.PerformanceCounterType.SampleBase
  - System.Diagnostics.PerformanceCounterType.SampleCounter
  - System.Diagnostics.PerformanceCounterType.SampleFraction
  - System.Diagnostics.PerformanceCounterType.Timer100Ns
  - System.Diagnostics.PerformanceCounterType.Timer100NsInverse
  langs:
  - csharp
  - vb
  name: PerformanceCounterType
  fullName: System.Diagnostics.PerformanceCounterType
  type: Enum
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PerformanceCounterType
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 71
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Specifies the formula used to calculate the <xref href=\"System.Diagnostics.PerformanceCounter.NextValue\" data-throw-if-not-resolved=\"false\"></xref> method for a <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>Some counter types represent raw data, while others represent calculated values that are based on one or more counter samples. The following categories classify the types of counters available.</p>\n<ul><li>\n<p>Average: measure a value over time and display the average of the last two measurements. Associated with each average counter is a base counter that tracks the number of samples involved.</p>\n</li><li>\n<p>Difference: subtract the last measurement from the previous one and display the difference, if it is positive; if negative, they display a zero.</p>\n</li><li>\n<p>Instantaneous: display the most recent measurement.</p>\n</li><li>\n<p>Percentage: display calculated values as a percentage.</p>\n</li><li>\n<p>Rate: sample an increasing count of events over time and divide the change in count values by the change in time to display a rate of activity.</p>\n</li></ul>\n<p>When sampling performance counter data, using a counter type that represents an average can make raw data values meaningful for your use. For example, the raw data counter <strong>NumberOfItems64</strong> can expose data that is fairly random from sample to sample. The formula for an average calculation of the values that the counter returns would be (X 0 +X 1 +â€¦+X n)/n, where each X i is a raw counter sample.</p>\n<p>Rate counters are similar to average counters, but more useful for situations in which the rate increases as a resource is used. A formula that quickly calculates the average is ((X n -X 0)/(T n -T 0)) / frequency, where each X i is a counter sample and each T i is the time that the corresponding sample was taken. The result is the average usage per second.</p>\n<p>Unless otherwise indicated, the time base is seconds.</p>\n<p>When instrumenting applications (creating and writing custom performance counters), you might be working with performance counter types that rely on an accompanying base counter that is used in the calculations. The base counter must be immediately after its associated counter in the <xref href=\"System.Diagnostics.CounterCreationDataCollection\" data-throw-if-not-resolved=\"false\"></xref> collection your application uses. The following table lists the base counter types with their corresponding performance counter types.</p>\n<p>Base counter type </p>\n<p>Performance counter types </p>\n<table><tbody><tr><td>\n<p>\n<strong>AverageBase</strong>\n</p>\n</td><td>\n<p>\n<strong>AverageTimer32</strong>\n</p>\n<p>\n<strong>AverageCount64</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<strong>CounterMultiBase</strong>\n</p>\n</td><td>\n<p>\n<strong>CounterMultiTimer</strong>\n</p>\n<p>\n<strong>CounterMultiTimerInverse</strong>\n</p>\n<p>\n<strong>CounterMultiTimer100Ns</strong>\n</p>\n<p>\n<strong>CounterMultiTimer100NsInverse</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<strong>RawBase</strong>\n</p>\n</td><td>\n<p>\n<strong>RawFraction</strong>\n</p>\n</td></tr><tr><td>\n<p>\n<strong>SampleBase</strong>\n</p>\n</td><td>\n<p>\n<strong>SampleFraction</strong>\n</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following examples demonstrate several of the counter types in the <xref href=\"System.Diagnostics.PerformanceCounterType\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n<p>\n<strong>AverageCount64</strong>\n</p>PerformanceCounterType.AverageCounter64#1<p><strong>AverageTimer32</strong></p>PerformanceCounterType.AverageTimer32#2<p><strong>ElapsedTime</strong></p>PerformanceCounterType.ElapsedTime#2<p><strong>NumberOfItems32</strong></p>PerformanceCounterType.NumberOfItems32#1<p><strong>NumberOfItems64</strong></p>PerformanceCounterType.NumberOfItems64#1<p><strong>SampleFraction</strong></p>PerformanceCounterType.SampleFraction#1<p><strong>RateOfCountsPerSecond32</strong></p>PerformanceCounterType.RateOfCountsPerSecond#1<p><strong>RateOfCountsPerSecond64</strong></p>PerformanceCounterType.RateOfCountsPerSecond64#1<p><strong>RawFraction</strong></p>PerformanceCounterType.RawFraction#1"
  syntax:
    content: public enum PerformanceCounterType
    content.vb: Public Enum PerformanceCounterType
  seealso:
  - type: System.Diagnostics.PerformanceCounter
    commentId: T:System.Diagnostics.PerformanceCounter
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Diagnostics.PerformanceCounterType.AverageBase
  commentId: F:System.Diagnostics.PerformanceCounterType.AverageBase
  id: AverageBase
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: AverageBase
  fullName: System.Diagnostics.PerformanceCounterType.AverageBase
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AverageBase
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 73
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A base counter that is used in the calculation of time or count averages, such as <strong>AverageTimer32</strong> and <strong>AverageCount64</strong>. Stores the denominator for calculating a counter to present \"time per operation\" or \"count per operation\".</p>\n"
  syntax:
    content: AverageBase = 1073939458
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.AverageCount64
  commentId: F:System.Diagnostics.PerformanceCounterType.AverageCount64
  id: AverageCount64
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: AverageCount64
  fullName: System.Diagnostics.PerformanceCounterType.AverageCount64
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AverageCount64
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 74
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>An average counter that shows how many items are processed, on average, during an operation. Counters of this type display a ratio of the items processed to the number of operations completed. The ratio is calculated by comparing the number of items processed during the last interval to the number of operations completed during the last interval.</p>\n"
  remarks: "\n<p>Formula: (N 1 -N 0)/(B 1 -B 0), where N 1 and N 0 are performance counter readings, and the B 1 and B 0 are their corresponding <strong>AverageBase</strong> values. Thus, the numerator represents the numbers of items processed during the sample interval, and the denominator represents the number of operations completed during the sample interval.</p>\n<p>Counters of this type include PhysicalDisk\\ Avg. Disk Bytes/Transfer.</p>\n"
  syntax:
    content: AverageCount64 = 1073874176
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.AverageTimer32
  commentId: F:System.Diagnostics.PerformanceCounterType.AverageTimer32
  id: AverageTimer32
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: AverageTimer32
  fullName: System.Diagnostics.PerformanceCounterType.AverageTimer32
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AverageTimer32
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 75
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>An average counter that measures the time it takes, on average, to complete a process or operation. Counters of this type display a ratio of the total elapsed time of the sample interval to the number of processes or operations completed during that time. This counter type measures time in ticks of the system clock.</p>\n"
  remarks: "\n<p>Formula: ((N 1 -N 0)/F)/(B 1 -B 0), where N 1 and N 0 are performance counter readings, B 1 and B 0 are their corresponding <strong>AverageBase</strong> values, and F is the number of ticks per second. The value of F is factored into the equation so that the result can be displayed in seconds. Thus, the numerator represents the numbers of ticks counted during the last sample interval, F represents the frequency of the ticks, and the denominator represents the number of operations completed during the last sample interval.</p>\n<p>Counters of this type include PhysicalDisk\\ Avg. Disk sec/Transfer.</p>\n"
  syntax:
    content: AverageTimer32 = 805438464
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.CounterDelta32
  commentId: F:System.Diagnostics.PerformanceCounterType.CounterDelta32
  id: CounterDelta32
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: CounterDelta32
  fullName: System.Diagnostics.PerformanceCounterType.CounterDelta32
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CounterDelta32
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 76
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A difference counter that shows the change in the measured attribute between the two most recent sample intervals.</p>\n"
  remarks: "\n<p>Formula: N 1 -N 0, where N 1 and N 0 are performance counter readings.</p>\n"
  syntax:
    content: CounterDelta32 = 4195328
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.CounterDelta64
  commentId: F:System.Diagnostics.PerformanceCounterType.CounterDelta64
  id: CounterDelta64
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: CounterDelta64
  fullName: System.Diagnostics.PerformanceCounterType.CounterDelta64
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CounterDelta64
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 77
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A difference counter that shows the change in the measured attribute between the two most recent sample intervals. It is the same as the <strong>CounterDelta32</strong> counter type except that is uses larger fields to accomodate larger values.</p>\n"
  remarks: "\n<p>Formula: N 1 -N 0, where N 1 and N 0 are performance counter readings.</p>\n"
  syntax:
    content: CounterDelta64 = 4195584
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.CounterMultiBase
  commentId: F:System.Diagnostics.PerformanceCounterType.CounterMultiBase
  id: CounterMultiBase
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: CounterMultiBase
  fullName: System.Diagnostics.PerformanceCounterType.CounterMultiBase
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CounterMultiBase
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 78
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A base counter that indicates the number of items sampled. It is used as the denominator in the calculations to get an average among the items sampled when taking timings of multiple, but similar items. Used with <strong>CounterMultiTimer</strong>, <strong>CounterMultiTimerInverse</strong>, <strong>CounterMultiTimer100Ns</strong>, and <strong>CounterMultiTimer100NsInverse</strong>.</p>\n"
  syntax:
    content: CounterMultiBase = 1107494144
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.CounterMultiTimer
  commentId: F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer
  id: CounterMultiTimer
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: CounterMultiTimer
  fullName: System.Diagnostics.PerformanceCounterType.CounterMultiTimer
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CounterMultiTimer
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 79
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A percentage counter that displays the active time of one or more components as a percentage of the total time of the sample interval. Because the numerator records the active time of components operating simultaneously, the resulting percentage can exceed 100 percent.</p>\n"
  remarks: "\n<p>This counter is a multitimer. Multitimers collect data from more than one instance of a component, such as a processor or disk. This counter type differs from <strong>CounterMultiTimer100Ns</strong> in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units.</p>\n<p>Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100 / B, where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings in ticks of the system performance timer, and the variable B denotes the base count for the monitored components (using a base counter of type <strong>CounterMultiBase</strong>). Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.</p>\n"
  syntax:
    content: CounterMultiTimer = 574686464
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns
  commentId: F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns
  id: CounterMultiTimer100Ns
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: CounterMultiTimer100Ns
  fullName: System.Diagnostics.PerformanceCounterType.CounterMultiTimer100Ns
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CounterMultiTimer100Ns
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 80
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It measures time in 100 nanosecond (ns) units.</p>\n"
  remarks: "\n<p>This counter type is a multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk.</p>\n<p>Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100 / B, where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings in 100-nanosecond units, and the variable B denotes the base count for the monitored components (using a base counter of type <strong>CounterMultiBase</strong>). Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.</p>\n"
  syntax:
    content: CounterMultiTimer100Ns = 575735040
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse
  commentId: F:System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse
  id: CounterMultiTimer100NsInverse
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: CounterMultiTimer100NsInverse
  fullName: System.Diagnostics.PerformanceCounterType.CounterMultiTimer100NsInverse
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CounterMultiTimer100NsInverse
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 81
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. Counters of this type measure time in 100 nanosecond (ns) units. They derive the active time by measuring the time that the components were not active and subtracting the result from multiplying 100 percent by the number of objects monitored.</p>\n"
  remarks: "\n<p>This counter type is an inverse multitimer. Multitimers are designed to monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive its active time from the measurement of inactive time </p>\n<p>Formula: (B - ((N 1 - N 0) / (D 1 - D 0))) x 100, where the denominator represents the total elapsed time of the sample interval, the numerator represents the time during the interval when monitored components were inactive, and B represents the number of components being monitored, using a base counter of type <strong>CounterMultiBase</strong>.</p>\n"
  syntax:
    content: CounterMultiTimer100NsInverse = 592512256
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse
  commentId: F:System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse
  id: CounterMultiTimerInverse
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: CounterMultiTimerInverse
  fullName: System.Diagnostics.PerformanceCounterType.CounterMultiTimerInverse
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CounterMultiTimerInverse
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 82
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A percentage counter that shows the active time of one or more components as a percentage of the total time of the sample interval. It derives the active time by measuring the time that the components were not active and subtracting the result from 100 percent by the number of objects monitored.</p>\n"
  remarks: "\n<p>This counter type is an inverse multitimer. Multitimers monitor more than one instance of a component, such as a processor or disk. Inverse counters measure the time that a component is not active and derive its active time from that measurement.</p>\n<p>This counter differs from <strong>CounterMultiTimer100NsInverse</strong> in that it measures time in units of ticks of the system performance timer, rather than in 100 nanosecond units.</p>\n<p>Formula: (B- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the denominator represents the total elapsed time of the sample interval, the numerator represents the time during the interval when monitored components were inactive, and B represents the number of components being monitored, using a base counter of type <strong>CounterMultiBase</strong>.</p>\n"
  syntax:
    content: CounterMultiTimerInverse = 591463680
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.CounterTimer
  commentId: F:System.Diagnostics.PerformanceCounterType.CounterTimer
  id: CounterTimer
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: CounterTimer
  fullName: System.Diagnostics.PerformanceCounterType.CounterTimer
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CounterTimer
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 83
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A percentage counter that shows the average time that a component is active as a percentage of the total sample time.</p>\n"
  remarks: "\n<p>Formula: (N 1 - N 0) / (D 1 - D 0), where N 1 and N 0 are performance counter readings, and D 1 and D 0 are their corresponding time readings. Thus, the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.</p>\n"
  syntax:
    content: CounterTimer = 541132032
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.CounterTimerInverse
  commentId: F:System.Diagnostics.PerformanceCounterType.CounterTimerInverse
  id: CounterTimerInverse
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: CounterTimerInverse
  fullName: System.Diagnostics.PerformanceCounterType.CounterTimerInverse
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CounterTimerInverse
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 84
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A percentage counter that displays the average percentage of active time observed during sample interval. The value of these counters is calculated by monitoring the percentage of time that the service was inactive and then subtracting that value from 100 percent.</p>\n"
  remarks: "\n<p>This is an inverse counter type. Inverse counters measure the time that a component is note active and derive the active time from that measurement. This counter type is the same as <strong>CounterTimer100NsInv</strong> except that it measures time in units of ticks of the system performance timer rather than in 100 nanosecond units.</p>\n<p>Formula: (1- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the numerator represents the time during the interval when the monitored components were inactive, and the denominator represents the total elapsed time of the sample interval.</p>\n"
  syntax:
    content: CounterTimerInverse = 557909248
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32
  commentId: F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32
  id: CountPerTimeInterval32
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: CountPerTimeInterval32
  fullName: System.Diagnostics.PerformanceCounterType.CountPerTimeInterval32
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CountPerTimeInterval32
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 85
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>An average counter designed to monitor the average length of a queue to a resource over time. It shows the difference between the queue lengths observed during the last two sample intervals divided by the duration of the interval. This type of counter is typically used to track the number of items that are queued or waiting.</p>\n"
  remarks: "\n<p>Formula: (N 1 - N 0) / (D 1 - D 0), where the numerator represents the number of items in the queue and the denominator represents the time elapsed during the last sample interval.</p>\n"
  syntax:
    content: CountPerTimeInterval32 = 4523008
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64
  commentId: F:System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64
  id: CountPerTimeInterval64
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: CountPerTimeInterval64
  fullName: System.Diagnostics.PerformanceCounterType.CountPerTimeInterval64
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CountPerTimeInterval64
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 86
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>An average counter that monitors the average length of a queue to a resource over time. Counters of this type display the difference between the queue lengths observed during the last two sample intervals, divided by the duration of the interval. This counter type is the same as <strong>CountPerTimeInterval32</strong> except that it uses larger fields to accommodate larger values. This type of counter is typically used to track a high-volume or very large number of items that are queued or waiting.</p>\n"
  remarks: "\n<p>Formula: (N 1 - N 0) / (D 1 - D 0), where the numerator represents the number of items in a queue and the denominator represents the time elapsed during the sample interval.</p>\n"
  syntax:
    content: CountPerTimeInterval64 = 4523264
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.ElapsedTime
  commentId: F:System.Diagnostics.PerformanceCounterType.ElapsedTime
  id: ElapsedTime
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: ElapsedTime
  fullName: System.Diagnostics.PerformanceCounterType.ElapsedTime
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElapsedTime
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 87
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A difference timer that shows the total time between when the component or process started and the time when this value is calculated.</p>\n"
  remarks: "\n<p>Formula: (D 0 - N 0) / F, where D 0 represents the current time, N 0 represents the time the object was started, and F represents the number of time units that elapse in one second. The value of F is factored into the equation so that the result can be displayed in seconds.</p>\n<p>Counters of this type include System\\ System Up Time.</p>\n"
  syntax:
    content: ElapsedTime = 807666944
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.NumberOfItems32
  commentId: F:System.Diagnostics.PerformanceCounterType.NumberOfItems32
  id: NumberOfItems32
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: NumberOfItems32
  fullName: System.Diagnostics.PerformanceCounterType.NumberOfItems32
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NumberOfItems32
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 88
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of items or operations.</p>\n"
  remarks: "\n<p>Formula: None. Does not display an average, but shows the raw data as it is collected.</p>\n<p>Counters of this type include Memory\\Available Bytes.</p>\n"
  syntax:
    content: NumberOfItems32 = 65536
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.NumberOfItems64
  commentId: F:System.Diagnostics.PerformanceCounterType.NumberOfItems64
  id: NumberOfItems64
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: NumberOfItems64
  fullName: System.Diagnostics.PerformanceCounterType.NumberOfItems64
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NumberOfItems64
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 89
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as <strong>NumberOfItems32</strong> except that it uses larger fields to accommodate larger values.</p>\n"
  remarks: "\n<p>Formula: None. Does not display an average, but shows the raw data as it is collected.</p>\n"
  syntax:
    content: NumberOfItems64 = 65792
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32
  commentId: F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32
  id: NumberOfItemsHEX32
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: NumberOfItemsHEX32
  fullName: System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX32
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NumberOfItemsHEX32
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 90
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>An instantaneous counter that shows the most recently observed value in hexadecimal format. Used, for example, to maintain a simple count of items or operations.</p>\n"
  remarks: "\n<p>Formula: None. Does not display an average, but shows the raw data as it is collected.</p>\n"
  syntax:
    content: NumberOfItemsHEX32 = 0
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64
  commentId: F:System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64
  id: NumberOfItemsHEX64
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: NumberOfItemsHEX64
  fullName: System.Diagnostics.PerformanceCounterType.NumberOfItemsHEX64
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NumberOfItemsHEX64
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 91
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>An instantaneous counter that shows the most recently observed value. Used, for example, to maintain a simple count of a very large number of items or operations. It is the same as <strong>NumberOfItemsHEX32</strong> except that it uses larger fields to accommodate larger values.</p>\n"
  remarks: "\n<p>Formula: None. Does not display an average, but shows the raw data as it is collected </p>\n"
  syntax:
    content: NumberOfItemsHEX64 = 256
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32
  commentId: F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32
  id: RateOfCountsPerSecond32
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: RateOfCountsPerSecond32
  fullName: System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond32
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RateOfCountsPerSecond32
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 92
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock.</p>\n"
  remarks: "\n<p>Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings, and F represents the number of ticks per second. Thus, the numerator represents the number of operations performed during the last sample interval, the denominator represents the number of ticks elapsed during the last sample interval, and F is the frequency of the ticks. The value of F is factored into the equation so that the result can be displayed in seconds.</p>\n<p>Counters of this type include System\\ File Read Operations/sec.</p>\n"
  syntax:
    content: RateOfCountsPerSecond32 = 272696320
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64
  commentId: F:System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64
  id: RateOfCountsPerSecond64
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: RateOfCountsPerSecond64
  fullName: System.Diagnostics.PerformanceCounterType.RateOfCountsPerSecond64
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RateOfCountsPerSecond64
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 93
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A difference counter that shows the average number of operations completed during each second of the sample interval. Counters of this type measure time in ticks of the system clock. This counter type is the same as the <strong>RateOfCountsPerSecond32</strong> type, but it uses larger fields to accommodate larger values to track a high-volume number of items or operations per second, such as a byte-transmission rate.</p>\n"
  remarks: "\n<p>Formula: (N 1 - N 0) / ((D 1 -D 0) / F), where N 1 and N 0 are performance counter readings, D 1 and D 0 are their corresponding time readings, and F represents the number of ticks per second. Thus, the numerator represents the number of operations performed during the last sample interval, the denominator represents the number of ticks elapsed during the last sample interval, and F is the frequency of the ticks. The value of F is factored into the equation so that the result can be displayed in seconds.</p>\n<p>Counters of this type include System\\ File Read Bytes/sec.</p>\n"
  syntax:
    content: RateOfCountsPerSecond64 = 272696576
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.RawBase
  commentId: F:System.Diagnostics.PerformanceCounterType.RawBase
  id: RawBase
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: RawBase
  fullName: System.Diagnostics.PerformanceCounterType.RawBase
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RawBase
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 94
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A base counter that stores the denominator of a counter that presents a general arithmetic fraction. Check that this value is greater than zero before using it as the denominator in a <strong>RawFraction</strong> value calculation.</p>\n"
  syntax:
    content: RawBase = 1073939459
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.RawFraction
  commentId: F:System.Diagnostics.PerformanceCounterType.RawFraction
  id: RawFraction
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: RawFraction
  fullName: System.Diagnostics.PerformanceCounterType.RawFraction
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RawFraction
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 95
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>An instantaneous percentage counter that shows the ratio of a subset to its set as a percentage. For example, it compares the number of bytes in use on a disk to the total number of bytes on the disk. Counters of this type display the current percentage only, not an average over time.</p>\n"
  remarks: "\n<p>Formula: (N 0 / D 0) x 100, where D 0 represents a measured attribute (using a base counter of type <strong>RawBase</strong>) and N 0 represents one component of that attribute.</p>\n<p>Counters of this type include Paging File\\% Usage Peak.</p>\n"
  syntax:
    content: RawFraction = 537003008
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.SampleBase
  commentId: F:System.Diagnostics.PerformanceCounterType.SampleBase
  id: SampleBase
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: SampleBase
  fullName: System.Diagnostics.PerformanceCounterType.SampleBase
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SampleBase
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 96
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A base counter that stores the number of sampling interrupts taken and is used as a denominator in the sampling fraction. The sampling fraction is the number of samples that were 1 (or <strong>true</strong>) for a sample interrupt. Check that this value is greater than zero before using it as the denominator in a calculation of <strong>SampleFraction</strong>.</p>\n"
  syntax:
    content: SampleBase = 1073939457
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.SampleCounter
  commentId: F:System.Diagnostics.PerformanceCounterType.SampleCounter
  id: SampleCounter
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: SampleCounter
  fullName: System.Diagnostics.PerformanceCounterType.SampleCounter
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SampleCounter
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 97
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>An average counter that shows the average number of operations completed in one second. When a counter of this type samples the data, each sampling interrupt returns one or zero. The counter data is the number of ones that were sampled. It measures time in units of ticks of the system performance timer.</p>\n"
  remarks: "\n<p>Formula: (N 1 â€“ N 0) / ((D 1 â€“ D 0) / F), where the numerator (N) represents the number of operations completed, the denominator (D) represents elapsed time in units of ticks of the system performance timer, and F represents the number of ticks that elapse in one second. F is factored into the equation so that the result can be displayed in seconds.</p>\n"
  syntax:
    content: SampleCounter = 4260864
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.SampleFraction
  commentId: F:System.Diagnostics.PerformanceCounterType.SampleFraction
  id: SampleFraction
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: SampleFraction
  fullName: System.Diagnostics.PerformanceCounterType.SampleFraction
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SampleFraction
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 98
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A percentage counter that shows the average ratio of hits to all operations during the last two sample intervals.</p>\n"
  remarks: "\n<p>Formula: ((N 1 - N 0) / (D 1 - D 0)) x 100, where the numerator represents the number of successful operations during the last sample interval, and the denominator represents the change in the number of all operations (of the type measured) completed during the sample interval, using counters of type <strong>SampleBase</strong>.</p>\n<p>Counters of this type include Cache\\Pin Read Hits %.</p>\n"
  syntax:
    content: SampleFraction = 549585920
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.Timer100Ns
  commentId: F:System.Diagnostics.PerformanceCounterType.Timer100Ns
  id: Timer100Ns
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: Timer100Ns
  fullName: System.Diagnostics.PerformanceCounterType.Timer100Ns
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Timer100Ns
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 99
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A percentage counter that shows the active time of a component as a percentage of the total elapsed time of the sample interval. It measures time in units of 100 nanoseconds (ns). Counters of this type are designed to measure the activity of one component at a time.</p>\n"
  remarks: "\n<p>Formula: (N 1 - N 0) / (D 1 - D 0) x 100, where the numerator represents the portions of the sample interval during which the monitored components were active, and the denominator represents the total elapsed time of the sample interval.</p>\n<p>Counters of this type include Processor\\ % User Time.</p>\n"
  syntax:
    content: Timer100Ns = 542180608
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.PerformanceCounterType.Timer100NsInverse
  commentId: F:System.Diagnostics.PerformanceCounterType.Timer100NsInverse
  id: Timer100NsInverse
  parent: System.Diagnostics.PerformanceCounterType
  langs:
  - csharp
  - vb
  name: Timer100NsInverse
  fullName: System.Diagnostics.PerformanceCounterType.Timer100NsInverse
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Timer100NsInverse
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 100
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>A percentage counter that shows the average percentage of active time observed during the sample interval.</p>\n"
  remarks: "\n<p>This is an inverse counter. Counters of this type calculate active time by measuring the time that the service was inactive and then subtracting the percentage of active time from 100 percent.</p>\n<p>Formula: (1- ((N 1 - N 0) / (D 1 - D 0))) x 100, where the numerator represents the time during the interval when the monitored components were inactive, and the denominator represents the total elapsed time of the sample interval.</p>\n<p>Counters of this type include Processor\\ % Processor Time.</p>\n"
  syntax:
    content: Timer100NsInverse = 558957824
    return:
      type: System.Diagnostics.PerformanceCounterType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Diagnostics.PerformanceCounterType
  parent: System.Diagnostics
  isExternal: false
  name: PerformanceCounterType
  fullName: System.Diagnostics.PerformanceCounterType
