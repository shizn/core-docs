items:
- uid: System.Threading.ThreadStart
  commentId: T:System.Threading.ThreadStart
  id: ThreadStart
  parent: System.Threading
  children: []
  langs:
  - csharp
  - vb
  name: ThreadStart
  fullName: System.Threading.ThreadStart
  type: Delegate
  source:
    remote:
      path: src/System.Threading.Thread/ref/System.Threading.Thread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThreadStart
    path: src/System.Threading.Thread/ref/System.Threading.Thread.cs
    startLine: 29
  assemblies:
  - System.Threading.Thread
  namespace: System.Threading
  summary: "\n<p>Represents the method that executes on a <xref href=\"System.Threading.Thread\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>When a managed thread is created, the method that executes on the thread is represented by a <xref href=\"System.Threading.ThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate or a <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate that is passed to the <see cref=\"Overload:System.Threading.Thread.#ctor\"></see> constructor. The thread does not begin executing until the <see cref=\"Overload:System.Threading.Thread.Start\"></see> method is called. Execution begins at the first line of the method represented by the <xref href=\"System.Threading.ThreadStart\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate.</p>\n<p>Visual Basic and C# users can omit the <xref href=\"System.Threading.ThreadStart\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.ParameterizedThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate constructor when creating a thread. In Visual Basic, use the <strong>AddressOf</strong> operator when passing your method to the <see cref=\"Overload:System.Threading.Thread.#ctor\"></see> constructor; for example, <code>Dim t As New Thread(AddressOf ThreadProc)</code>. In C#, simply specify the name of the thread procedure. The compiler selects the correct delegate constructor.</p>\n<p>[C++]</p>\n<p>In version 2.0 of the .NET Framework, creating a <xref href=\"System.Threading.ThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate for a static method in C++ requires only one parameter: the address of the callback method, qualified by the class name. In earlier versions two parameters were required when creating a delegate for a static method: zero (null) and the method address. For an instance method, all versions require two parameters: the instance variable and the method address.</p>\n"
  example:
  - "\n<p>The following code example shows the syntax for creating and using a <xref href=\"System.Threading.ThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate with an instance method and with a static method.</p>\n<p>For another simple example that demonstrates how to create a <xref href=\"System.Threading.ThreadStart\" data-throw-if-not-resolved=\"false\"></xref> delegate, see the <xref href=\"System.Threading.Thread.Start\" data-throw-if-not-resolved=\"false\"></xref> method overload. For more information about thread creation, see Creating Threads and Passing Data at Start Time.</p>System.Threading.ThreadStart2#1"
  syntax:
    content: public delegate void ThreadStart();
    content.vb: Public Delegate Sub ThreadStart
  seealso:
  - type: System.Threading.ParameterizedThreadStart
    commentId: T:System.Threading.ParameterizedThreadStart
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  - type: System.AppDomain
    commentId: T:System.AppDomain
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
