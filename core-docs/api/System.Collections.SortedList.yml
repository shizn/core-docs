items:
- uid: System.Collections.SortedList
  commentId: T:System.Collections.SortedList
  id: SortedList
  parent: System.Collections
  children:
  - System.Collections.SortedList.#ctor
  - System.Collections.SortedList.#ctor(System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  - System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  - System.Collections.SortedList.#ctor(System.Int32)
  - System.Collections.SortedList.Add(System.Object,System.Object)
  - System.Collections.SortedList.Capacity
  - System.Collections.SortedList.Clear
  - System.Collections.SortedList.Clone
  - System.Collections.SortedList.Contains(System.Object)
  - System.Collections.SortedList.ContainsKey(System.Object)
  - System.Collections.SortedList.ContainsValue(System.Object)
  - System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  - System.Collections.SortedList.Count
  - System.Collections.SortedList.GetByIndex(System.Int32)
  - System.Collections.SortedList.GetEnumerator
  - System.Collections.SortedList.GetKey(System.Int32)
  - System.Collections.SortedList.GetKeyList
  - System.Collections.SortedList.GetValueList
  - System.Collections.SortedList.IndexOfKey(System.Object)
  - System.Collections.SortedList.IndexOfValue(System.Object)
  - System.Collections.SortedList.IsFixedSize
  - System.Collections.SortedList.IsReadOnly
  - System.Collections.SortedList.IsSynchronized
  - System.Collections.SortedList.Item(System.Object)
  - System.Collections.SortedList.Keys
  - System.Collections.SortedList.Remove(System.Object)
  - System.Collections.SortedList.RemoveAt(System.Int32)
  - System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  - System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  - System.Collections.SortedList.SyncRoot
  - System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.SortedList.TrimToSize
  - System.Collections.SortedList.Values
  langs:
  - csharp
  - vb
  name: SortedList
  fullName: System.Collections.SortedList
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SortedList
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 60
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Represents a collection of key/value pairs that are sorted by the keys and are accessible by key and by index.</p>\n"
  remarks: "\n<p>For the generic version of this collection, see <xref href=\"System.Collections.Generic.SortedList`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> element can be accessed by its key, like an element in any <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> implementation, or by its index, like an element in any <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n<p>A <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object internally maintains two arrays to store the elements of the list; that is, one array for the keys and another array for the associated values. Each element is a key/value pair that can be accessed as a <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> object. A key cannot be <strong>null</strong>, but a value can be.</p>\n<p>The capacity of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by calling <xref href=\"System.Collections.SortedList.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref> or by setting the <xref href=\"System.Collections.SortedList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly.</p>\n<p>For very large <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <strong>enabled</strong> attribute of the  configuration element to <strong>true</strong> in the run-time environment.</p>\n<p>The elements of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object are sorted by the keys either according to a specific <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation specified when the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is created or according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation provided by the keys themselves. In either case, a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> does not allow duplicate keys.</p>\n<p>The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Operations on a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object tend to be slower than operations on a <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object because of the sorting. However, the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> offers more flexibility by allowing access to the values either through the associated keys or through the indexes.</p>\n<p>Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is a key/value pair, the element type is not the type of the key or the type of the value. Rather, the element type is <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref>. For example: </p>Classic SortedList Example#2<p>The <strong>foreach</strong> statement is a wrapper around the enumerator, which allows only reading from, not writing to, the collection.</p>"
  example:
  - "\n<p>The following code example shows how to create and initialize a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object and how to print out its keys and values.</p>Classic SortedList Example#1"
  syntax:
    content: >-
      [DebuggerTypeProxy(typeof (SortedList.SortedListDebugView))]

      [DebuggerDisplay("Count = {Count}")]

      [ComVisible(true)]

      [Obsolete("Non-generic collections have been deprecated. Please use collections in System.Collections.Generic.")]

      [Serializable]

      public class SortedList : IDictionary, ICollection, IEnumerable, ICloneable
    content.vb: >-
      <DebuggerTypeProxy(GetType(SortedList.SortedListDebugView))>

      <DebuggerDisplay("Count = {Count}")>

      <ComVisible(True)>

      <Obsolete("Non-generic collections have been deprecated. Please use collections in System.Collections.Generic.")>

      <Serializable>

      Public Class SortedList
          Implements IDictionary, ICollection, IEnumerable, ICloneable
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - type: System.Collections.Generic.SortedList`2
    commentId: T:System.Collections.Generic.SortedList`2
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.SortedList.#ctor
  commentId: M:System.Collections.SortedList.#ctor
  id: '#ctor'
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SortedList()
  fullName: System.Collections.SortedList.SortedList()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 89
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default initial capacity, and is sorted according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface implemented by each key added to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Each key must implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface to be capable of comparisons with every other key in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. The elements are sorted according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each key added to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates collections using different <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the collections.</p>System.Collections.SortedList_ctor#1"
  syntax:
    content: public SortedList()
    content.vb: Public Sub New
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer)
  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IComparer)
  id: '#ctor(System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SortedList(IComparer)
  fullName: System.Collections.SortedList.SortedList(System.Collections.IComparer)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 126
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default initial capacity, and is sorted according to the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  remarks: "\n<p>The elements are sorted according to the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation. If the <em>comparer</em> parameter is <strong>null</strong>, the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each key is used; therefore, each key must implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface to be capable of comparisons with every other key in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The capacity of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example creates collections using different <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the collections.</p>System.Collections.SortedList_ctor#1"
  syntax:
    content: public SortedList(IComparer comparer)
    content.vb: Public Sub New(comparer As IComparer)
    parameters:
    - id: comparer
      type: System.Collections.IComparer
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IComparer,System.Int32)
  id: '#ctor(System.Collections.IComparer,System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SortedList(IComparer, Int32)
  fullName: System.Collections.SortedList.SortedList(System.Collections.IComparer, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 140
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified initial capacity, and is sorted according to the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  remarks: "\n<p>The elements are sorted according to the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation. If the <em>comparer</em> parameter is <strong>null</strong>, the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each key is used; therefore, each key must implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface to be capable of comparisons with every other key in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The capacity of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  example:
  - "\n<p>The following code example creates collections using different <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the collections.</p>System.Collections.SortedList_ctorInt#1"
  syntax:
    content: public SortedList(IComparer comparer, int capacity)
    content.vb: Public Sub New(comparer As IComparer, capacity As Integer)
    parameters:
    - id: comparer
      type: System.Collections.IComparer
    - id: capacity
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough available memory to create a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object with the specified <em>capacity</em>.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IDictionary)
  id: '#ctor(System.Collections.IDictionary)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SortedList(IDictionary)
  fullName: System.Collections.SortedList.SortedList(System.Collections.IDictionary)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 151
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface implemented by each key.</p>\n"
  remarks: "\n<p>Each key must implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface to be capable of comparisons with every other key in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. The elements are sorted according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each key added to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object is an example of an <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> implementation that can be passed to this constructor. The new <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains a copy of the keys and values stored in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>d</em>.</p>\n"
  example:
  - "\n<p>The following code example creates collections using different <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the collections.</p>System.Collections.SortedList_ctorDictionary#1"
  syntax:
    content: public SortedList(IDictionary d)
    content.vb: Public Sub New(d As IDictionary)
    parameters:
    - id: d
      type: System.Collections.IDictionary
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>d</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>One or more elements in <em>d</em> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - type: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  commentId: M:System.Collections.SortedList.#ctor(System.Collections.IDictionary,System.Collections.IComparer)
  id: '#ctor(System.Collections.IDictionary,System.Collections.IComparer)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SortedList(IDictionary, IComparer)
  fullName: System.Collections.SortedList.SortedList(System.Collections.IDictionary, System.Collections.IComparer)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 163
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified dictionary, has the same initial capacity as the number of elements copied, and is sorted according to the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  remarks: "\n<p>The elements are sorted according to the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation. If the <em>comparer</em> parameter is <strong>null</strong>, the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each key is used; therefore, each key must implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface to be capable of comparisons with every other key in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>A <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> object is an example of an <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> implementation that can be passed to this constructor. The new <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains a copy of the keys and values stored in the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>d</em>.</p>\n"
  example:
  - "\n<p>The following code example creates collections using different <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the collections.</p>System.Collections.SortedList_ctorDictionary#1"
  syntax:
    content: public SortedList(IDictionary d, IComparer comparer)
    content.vb: Public Sub New(d As IDictionary, comparer As IComparer)
    parameters:
    - id: d
      type: System.Collections.IDictionary
    - id: comparer
      type: System.Collections.IComparer
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>d</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and one or more elements in <em>d</em> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - type: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.SortedList.#ctor(System.Int32)
  commentId: M:System.Collections.SortedList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SortedList(Int32)
  fullName: System.Collections.SortedList.SortedList(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 107
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified initial capacity, and is sorted according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface implemented by each key added to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Each key must implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface to be capable of comparisons with every other key in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. The elements are sorted according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each key added to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>initialCapacity</em>.</p>\n"
  example:
  - "\n<p>The following code example creates collections using different <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> constructors and demonstrates the differences in the behavior of the collections.</p>System.Collections.SortedList_ctorInt#1"
  syntax:
    content: public SortedList(int initialCapacity)
    content.vb: Public Sub New(initialCapacity As Integer)
    parameters:
    - id: initialCapacity
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>initialCapacity</em> is less than zero. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough available memory to create a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object with the specified <em>initialCapacity</em>.</p>\n"
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.SortedList.Capacity
  commentId: P:System.Collections.SortedList.Capacity
  id: Capacity
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Capacity
  fullName: System.Collections.SortedList.Capacity
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Capacity
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 192
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets or sets the capacity of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.SortedList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object can store. <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.SortedList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is always greater than or equal to <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds <xref href=\"System.Collections.SortedList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>The capacity can be decreased by calling <xref href=\"System.Collections.SortedList.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref> or by setting the <xref href=\"System.Collections.SortedList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly. When the value of <xref href=\"System.Collections.SortedList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is an O(<em>n</em>) operation, where <em>n</em> is the new capacity.</p>\n"
  syntax:
    content: public virtual int Capacity { get; set; }
    content.vb: Public Overridable Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value assigned is less than the current number of elements in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough memory available on the system.</p>\n"
  seealso:
  - type: System.Collections.SortedList.TrimToSize
    commentId: M:System.Collections.SortedList.TrimToSize
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.Count
  commentId: P:System.Collections.SortedList.Count
  id: Count
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.SortedList.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 225
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the number of elements contained in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Each element is a key/value pair that can be accessed as a <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>\n<xref href=\"System.Collections.SortedList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object can store. <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.SortedList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is always greater than or equal to <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds <xref href=\"System.Collections.SortedList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public virtual int Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  seealso:
  - type: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.IsFixedSize
  commentId: P:System.Collections.SortedList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: IsFixedSize
  fullName: System.Collections.SortedList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFixedSize
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 256
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object has a fixed size.</p>\n"
  remarks: "\n<p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</p>\n<p>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    content.vb: Public Overridable ReadOnly Property IsFixedSize As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IDictionary.IsFixedSize
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.IsReadOnly
  commentId: P:System.Collections.SortedList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Collections.SortedList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsReadOnly
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 252
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n"
  remarks: "\n<p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n<p>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    content.vb: Public Overridable ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IDictionary.IsReadOnly
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.IsSynchronized
  commentId: P:System.Collections.SortedList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: IsSynchronized
  fullName: System.Collections.SortedList.IsSynchronized
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSynchronized
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 261
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether access to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is synchronized (thread safe).</p>\n"
  remarks: "\n<p>To guarantee the thread safety of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object, all operations must be done through the wrapper returned by the <xref href=\"System.Collections.SortedList.Synchronized(System.Collections.SortedList)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock a collection using the <xref href=\"System.Collections.SortedList.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property during the entire enumeration. </p>Classic SortedList.IsSynchronized Example#2<p>Retrieving the value of this property is an O(1) operation.</p><p>The following code example shows how to synchronize a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object, determine whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is synchronized, and use a synchronized <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic SortedList.IsSynchronized Example#1"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.SortedList.SyncRoot
    commentId: P:System.Collections.SortedList.SyncRoot
  - type: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
    commentId: M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.Item(System.Object)
  commentId: P:System.Collections.SortedList.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Item[Object]
  fullName: System.Collections.SortedList.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: this[]
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 437
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets and sets the value associated with a specific key in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Collections.SortedList.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property to access a specific element in a collection by specifying the following syntax: <code>myCollection[key]</code>.</p>\n<p>You can also use this property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object (for example, <code>myCollection[\"myNonexistentKey\"] = myValue)</code>. However, if the specified key already exists in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.SortedList.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.SortedList.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>A key cannot be <strong>null</strong>, but a value can be. To distinguish between <strong>null</strong> that is returned because the specified key is not found and <strong>null</strong> that is returned because the value of the specified key is <strong>null</strong>, use the <xref href=\"System.Collections.SortedList.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method or the <xref href=\"System.Collections.SortedList.ContainsKey(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to determine if the key exists in the list.</p>\n<p>The elements of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> are sorted by the keys either according to a specific <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation specified when the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is created or according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation provided by the keys themselves.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.SortedList.Keys\" data-throw-if-not-resolved=\"false\"></xref>property. Visual Basic implements <xref href=\"System.Collections.SortedList.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>Retrieving the value of this property is an O(log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>. Setting the property is an O(log <em>n</em>) operation if the key is already in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>. If the key is not in the list, setting the property is an O(<em>n</em>) operation for unsorted data, or O(log <em>n</em>) if the new element is added at the end of the list. If insertion causes a resize, the operation is O(<em>n</em>).</p>\n"
  syntax:
    content: public virtual object this[object key] { get; set; }
    content.vb: Public Overridable Property Item(key As Object) As Object
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is set and the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n<p>-or- </p>\n<p>The property is set, <em>key</em> does not exist in the collection, and the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough available memory to add the element to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The comparer throws an exception. </p>\n"
  seealso:
  - type: System.Collections.SortedList.Add(System.Object,System.Object)
    commentId: M:System.Collections.SortedList.Add(System.Object,System.Object)
  - type: System.Collections.SortedList.Contains(System.Object)
    commentId: M:System.Collections.SortedList.Contains(System.Object)
  - type: System.Collections.SortedList.ContainsKey(System.Object)
    commentId: M:System.Collections.SortedList.ContainsKey(System.Object)
  implements:
  - System.Collections.IDictionary.Item(System.Object)
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Collections.SortedList.Item(System.Object)
  name.vb: Item(Object)
- uid: System.Collections.SortedList.Keys
  commentId: P:System.Collections.SortedList.Keys
  id: Keys
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Keys
  fullName: System.Collections.SortedList.Keys
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Keys
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 235
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the keys in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object is a read-only view of the keys of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. Modifications made to the underlying <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> are immediately reflected in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The elements of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> are sorted in the same order as the keys of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This property is similar to the <xref href=\"System.Collections.SortedList.GetKeyList\" data-throw-if-not-resolved=\"false\"></xref> method, but returns an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object instead of an <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public virtual ICollection Keys { get; }
    content.vb: Public Overridable ReadOnly Property Keys As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.SortedList.Values
    commentId: P:System.Collections.SortedList.Values
  - type: System.Collections.SortedList.GetKeyList
    commentId: M:System.Collections.SortedList.GetKeyList
  implements:
  - System.Collections.IDictionary.Keys
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.SyncRoot
  commentId: P:System.Collections.SortedList.SyncRoot
  id: SyncRoot
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SyncRoot
  fullName: System.Collections.SortedList.SyncRoot
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SyncRoot
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 266
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an object that can be used to synchronize access to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>To create a synchronized version of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object, use the <xref href=\"System.Collections.SortedList.Synchronized(System.Collections.SortedList)\" data-throw-if-not-resolved=\"false\"></xref> method. However, derived classes can provide their own synchronized version of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Collections.SortedList.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property. The synchronizing code must perform operations on the <xref href=\"System.Collections.SortedList.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, not directly on the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.SortedList.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property during the entire enumeration. </p>Classic SortedList.IsSynchronized Example#2<p>Retrieving the value of this property is an O(1) operation.</p>"
  syntax:
    content: public virtual object SyncRoot { get; }
    content.vb: Public Overridable ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: System.Object
  seealso:
  - type: System.Collections.SortedList.IsSynchronized
    commentId: P:System.Collections.SortedList.IsSynchronized
  - type: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
    commentId: M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.Values
  commentId: P:System.Collections.SortedList.Values
  id: Values
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Values
  fullName: System.Collections.SortedList.Values
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Values
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 245
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the values in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object is a read-only view of the values of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. Modifications made to the underlying <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> are immediately reflected in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The elements of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> are sorted in the same order as the values of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This property is similar to the <xref href=\"System.Collections.SortedList.GetValueList\" data-throw-if-not-resolved=\"false\"></xref> method, but returns an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object instead of an <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public virtual ICollection Values { get; }
    content.vb: Public Overridable ReadOnly Property Values As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.SortedList.Keys
    commentId: P:System.Collections.SortedList.Keys
  - type: System.Collections.SortedList.GetValueList
    commentId: M:System.Collections.SortedList.GetValueList
  implements:
  - System.Collections.IDictionary.Values
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.SortedList.Add(System.Object,System.Object)
  commentId: M:System.Collections.SortedList.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Add(Object, Object)
  fullName: System.Collections.SortedList.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Add
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 177
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Adds an element with the specified key and value to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The insertion point is determined based on the comparer selected, either explicitly or by default, when the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object was created.</p>\n<p>If <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals <xref href=\"System.Collections.SortedList.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, the capacity of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</p>\n<p>You can also use the <xref href=\"System.Collections.SortedList.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object (for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>). However, if the specified key already exists in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.SortedList.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.SortedList.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>The elements of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object are sorted by the keys either according to a specific <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation specified when the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is created or according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation provided by the keys themselves.</p>\n<p>A key cannot be <strong>null</strong>, but a value can be.</p>\n<p>This method is an O(<em>n</em>) operation for unsorted data, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>. It is an O(log <em>n</em>) operation if the new element is added at the end of the list. If insertion causes a resize, the operation is O(<em>n</em>).</p>\n"
  example:
  - "\n<p>The following code example shows how to add elements to a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic SortedList.Add Example#1"
  syntax:
    content: public virtual void Add(object key, object value)
    content.vb: Public Overridable Sub Add(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
    - id: value
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element with the specified <em>key</em> already exists in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is set to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface, and <em>key</em> does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough available memory to add the element to the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The comparer throws an exception. </p>\n"
  seealso:
  - type: System.Collections.SortedList.Item(System.Object)
    commentId: P:System.Collections.SortedList.Item(System.Object)
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  implements:
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.Clear
  commentId: M:System.Collections.SortedList.Clear
  id: Clear
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.SortedList.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clear
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 276
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes all elements from a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero and references to other objects from elements of the collection are also released.</p>\n<p>\n<xref href=\"System.Collections.SortedList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. To reset the capacity of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object, call <xref href=\"System.Collections.SortedList.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref> or set the <xref href=\"System.Collections.SortedList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property directly. Trimming an empty <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to trim the unused portions of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object and how to clear the values of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic SortedList.Clear Example#1"
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.SortedList.TrimToSize
    commentId: M:System.Collections.SortedList.TrimToSize
  - type: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  - type: System.Collections.SortedList.Count
    commentId: P:System.Collections.SortedList.Count
  implements:
  - System.Collections.IDictionary.Clear
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.Clone
  commentId: M:System.Collections.SortedList.Clone
  id: Clone
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Collections.SortedList.Clone()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clone
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 288
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Creates a shallow copy of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.</p>\n<p>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual object Clone()
    content.vb: Public Overridable Function Clone As Object
    return:
      type: System.Object
  seealso:
  - type: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
    commentId: M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.Contains(System.Object)
  commentId: M:System.Collections.SortedList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Contains(Object)
  fullName: System.Collections.SortedList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Contains
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 303
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains a specific key.</p>\n"
  remarks: "\n<p>The elements of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object are sorted by the keys either according to a specific <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation specified when the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is created or according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation provided by the keys themselves.</p>\n<p>\n<xref href=\"System.Collections.SortedList.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implements <xref href=\"System.Collections.IDictionary.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. It behaves exactly as <xref href=\"System.Collections.SortedList.ContainsKey(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method uses a binary search algorithm; therefore, this method is an O(log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example shows how to determine whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains a specific element.</p>Classic SortedList.Contains Example#1"
  syntax:
    content: public virtual bool Contains(object key)
    content.vb: Public Overridable Function Contains(key As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The comparer throws an exception. </p>\n"
  seealso:
  - type: System.Collections.SortedList.ContainsKey(System.Object)
    commentId: M:System.Collections.SortedList.ContainsKey(System.Object)
  - type: System.Collections.SortedList.IndexOfKey(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)
  implements:
  - System.Collections.IDictionary.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.ContainsKey(System.Object)
  commentId: M:System.Collections.SortedList.ContainsKey(System.Object)
  id: ContainsKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: ContainsKey(Object)
  fullName: System.Collections.SortedList.ContainsKey(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContainsKey
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 309
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains a specific key.</p>\n"
  remarks: "\n<p>The elements of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object are sorted by the keys either according to a specific <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation specified when the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is created or according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation provided by the keys themselves.</p>\n<p>This method behaves exactly as the <xref href=\"System.Collections.SortedList.Contains(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method uses a binary search algorithm; therefore, this method is an O(log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example shows how to determine whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains a specific element.</p>Classic SortedList.Contains Example#1"
  syntax:
    content: public virtual bool ContainsKey(object key)
    content.vb: Public Overridable Function ContainsKey(key As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The comparer throws an exception. </p>\n"
  seealso:
  - type: System.Collections.SortedList.Contains(System.Object)
    commentId: M:System.Collections.SortedList.Contains(System.Object)
  - type: System.Collections.SortedList.ContainsValue(System.Object)
    commentId: M:System.Collections.SortedList.ContainsValue(System.Object)
  - type: System.Collections.SortedList.IndexOfKey(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.ContainsValue(System.Object)
  commentId: M:System.Collections.SortedList.ContainsValue(System.Object)
  id: ContainsValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: ContainsValue(Object)
  fullName: System.Collections.SortedList.ContainsValue(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContainsValue
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 320
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains a specific value.</p>\n"
  remarks: "\n<p>The values of the elements of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object are compared to the specified value using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method performs a linear search; therefore, the average execution time is proportional to <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>. That is, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example shows how to determine whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object contains a specific element.</p>Classic SortedList.Contains Example#1"
  syntax:
    content: public virtual bool ContainsValue(object value)
    content.vb: Public Overridable Function ContainsValue(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.SortedList.ContainsKey(System.Object)
    commentId: M:System.Collections.SortedList.ContainsKey(System.Object)
  - type: System.Collections.SortedList.IndexOfValue(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.SortedList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Collections.SortedList.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 325
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> elements to a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> object, starting at the specified index in the array.</p>\n"
  remarks: "\n<p>The key/value pairs are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> object in the same order in which the enumerator iterates through the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>To copy only the keys in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, use <code>SortedList.Keys.CopyTo</code>.</p>\n<p>To copy only the values in the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>, use <code>SortedList.Values.CopyTo</code>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to copy the values in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object into a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic SortedList.CopyTo Example#1"
  syntax:
    content: public virtual void CopyTo(Array array, int arrayIndex)
    content.vb: Public Overridable Sub CopyTo(array As Array, arrayIndex As Integer)
    parameters:
    - id: array
      type: System.Array
    - id: arrayIndex
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  seealso:
  - type: System.Array
    commentId: T:System.Array
  - type: System.Collections.DictionaryEntry
    commentId: T:System.Collections.DictionaryEntry
  - type: System.Collections.SortedList.GetEnumerator
    commentId: M:System.Collections.SortedList.GetEnumerator
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.GetByIndex(System.Int32)
  commentId: M:System.Collections.SortedList.GetByIndex(System.Int32)
  id: GetByIndex(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: GetByIndex(Int32)
  fullName: System.Collections.SortedList.GetByIndex(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByIndex
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 368
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the value at the specified index of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to get one or all the keys or values in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic SortedList.GetByIndex Example#1"
  syntax:
    content: public virtual object GetByIndex(int index)
    content.vb: Public Overridable Function GetByIndex(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  seealso:
  - type: System.Collections.SortedList.IndexOfKey(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)
  - type: System.Collections.SortedList.IndexOfValue(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.GetEnumerator
  commentId: M:System.Collections.SortedList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.SortedList.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 389
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> object that iterates through a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public virtual IDictionaryEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IDictionaryEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
  seealso:
  - type: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IDictionary.GetEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.GetKey(System.Int32)
  commentId: M:System.Collections.SortedList.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: GetKey(Int32)
  fullName: System.Collections.SortedList.GetKey(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetKey
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 395
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the key at the specified index of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to get one or all the keys or values in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic SortedList.GetByIndex Example#1"
  syntax:
    content: public virtual object GetKey(int index)
    content.vb: Public Overridable Function GetKey(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.GetKeyList
  commentId: M:System.Collections.SortedList.GetKeyList
  id: GetKeyList
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: GetKeyList()
  fullName: System.Collections.SortedList.GetKeyList()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetKeyList
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 413
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the keys in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The returned <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> object is a read-only view of the keys of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. Modifications made to the underlying <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> are immediately reflected in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The elements of the returned <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> are sorted in the same order as the keys of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is similar to the <xref href=\"System.Collections.SortedList.Keys\" data-throw-if-not-resolved=\"false\"></xref> property, but returns an <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> object instead of an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to get one or all the keys or values in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic SortedList.GetByIndex Example#1"
  syntax:
    content: public virtual IList GetKeyList()
    content.vb: Public Overridable Function GetKeyList As IList
    return:
      type: System.Collections.IList
  seealso:
  - type: System.Collections.IList
    commentId: T:System.Collections.IList
  - type: System.Collections.SortedList.GetValueList
    commentId: M:System.Collections.SortedList.GetValueList
  - type: System.Collections.SortedList.Keys
    commentId: P:System.Collections.SortedList.Keys
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.GetValueList
  commentId: M:System.Collections.SortedList.GetValueList
  id: GetValueList
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: GetValueList()
  fullName: System.Collections.SortedList.GetValueList()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValueList
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 429
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the values in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The returned <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> object is a read-only view of the values of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. Modifications made to the underlying <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> are immediately reflected in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The elements of the returned <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> are sorted in the same order as the values of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is similar to the <xref href=\"System.Collections.SortedList.Values\" data-throw-if-not-resolved=\"false\"></xref> property, but returns an <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> object instead of an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to get one or all the keys or values in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic SortedList.GetByIndex Example#1"
  syntax:
    content: public virtual IList GetValueList()
    content.vb: Public Overridable Function GetValueList As IList
    return:
      type: System.Collections.IList
  seealso:
  - type: System.Collections.IList
    commentId: T:System.Collections.IList
  - type: System.Collections.SortedList.GetKeyList
    commentId: M:System.Collections.SortedList.GetKeyList
  - type: System.Collections.SortedList.Values
    commentId: P:System.Collections.SortedList.Values
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.IndexOfKey(System.Object)
  commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)
  id: IndexOfKey(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: IndexOfKey(Object)
  fullName: System.Collections.SortedList.IndexOfKey(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOfKey
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 463
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns the zero-based index of the specified key in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The elements of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object are sorted by the keys either according to a specific <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation specified when the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is created, or according to the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation provided by the keys themselves.</p>\n<p>The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method uses a binary search algorithm; therefore, this method is an O(log <em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example shows how to determine the index of a key or a value in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic SortedList.IndexOfKey Example#1"
  syntax:
    content: public virtual int IndexOfKey(object key)
    content.vb: Public Overridable Function IndexOfKey(key As Object) As Integer
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The comparer throws an exception. </p>\n"
  seealso:
  - type: System.Collections.SortedList.ContainsKey(System.Object)
    commentId: M:System.Collections.SortedList.ContainsKey(System.Object)
  - type: System.Collections.SortedList.IndexOfValue(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.IndexOfValue(System.Object)
  commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)
  id: IndexOfValue(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: IndexOfValue(Object)
  fullName: System.Collections.SortedList.IndexOfValue(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOfValue
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 477
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns the zero-based index of the first occurrence of the specified value in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The values of the elements of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> are compared to the specified value using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method uses a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example shows how to determine the index of a key or a value in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic SortedList.IndexOfKey Example#1"
  syntax:
    content: public virtual int IndexOfValue(object value)
    content.vb: Public Overridable Function IndexOfValue(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  seealso:
  - type: System.Collections.SortedList.ContainsValue(System.Object)
    commentId: M:System.Collections.SortedList.ContainsValue(System.Object)
  - type: System.Collections.SortedList.IndexOfKey(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.Remove(System.Object)
  commentId: M:System.Collections.SortedList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Remove(Object)
  fullName: System.Collections.SortedList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remove
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 514
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the element with the specified key from a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object does not contain an element with the specified key, the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. No exception is thrown.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to remove elements from a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic SortedList.RemoveAt Example#1"
  syntax:
    content: public virtual void Remove(object key)
    content.vb: Public Overridable Sub Remove(key As Object)
    parameters:
    - id: key
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.SortedList.RemoveAt(System.Int32)
    commentId: M:System.Collections.SortedList.RemoveAt(System.Int32)
  implements:
  - System.Collections.IDictionary.Remove(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.RemoveAt(System.Int32)
  commentId: M:System.Collections.SortedList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Collections.SortedList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RemoveAt
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 497
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the element at the specified index of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to remove elements from a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic SortedList.RemoveAt Example#1"
  syntax:
    content: public virtual void RemoveAt(int index)
    content.vb: Public Overridable Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.SortedList.Remove(System.Object)
    commentId: M:System.Collections.SortedList.Remove(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  commentId: M:System.Collections.SortedList.SetByIndex(System.Int32,System.Object)
  id: SetByIndex(System.Int32,System.Object)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: SetByIndex(Int32, Object)
  fullName: System.Collections.SortedList.SetByIndex(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetByIndex
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 523
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Replaces the value at a specific index in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The index sequence is based on the sort sequence. When an element is added, it is inserted into <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> in the correct sort order, and the indexing adjusts accordingly. When an element is removed, the indexing also adjusts accordingly. Therefore, the index of a specific key/value pair might change as elements are added or removed from the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to replace the value of an existing element in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Classic SortedList.SetByIndex Example#1"
  syntax:
    content: public virtual void SetByIndex(int index, object value)
    content.vb: Public Overridable Sub SetByIndex(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  seealso:
  - type: System.Collections.SortedList.IndexOfKey(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfKey(System.Object)
  - type: System.Collections.SortedList.IndexOfValue(System.Object)
    commentId: M:System.Collections.SortedList.IndexOfValue(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  commentId: M:System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  id: Synchronized(System.Collections.SortedList)
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: Synchronized(SortedList)
  fullName: System.Collections.SortedList.Synchronized(System.Collections.SortedList)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Synchronized
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 532
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns a synchronized (thread-safe) wrapper for a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>To guarantee the thread safety of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object, all operations must be done through this wrapper only.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.SortedList.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property during the entire enumeration. </p>Classic SortedList.IsSynchronized Example#2<p>This method is an O(1) operation.</p><p>The following code example shows how to synchronize a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object, determine whether a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> is synchronized, and use a synchronized <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic SortedList.IsSynchronized Example#1"
  syntax:
    content: >-
      [HostProtection(Synchronization = true)]

      public static SortedList Synchronized(SortedList list)
    content.vb: >-
      <HostProtection(Synchronization:=True)>

      Public Shared Function Synchronized(list As SortedList) As SortedList
    parameters:
    - id: list
      type: System.Collections.SortedList
    return:
      type: System.Collections.SortedList
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.SortedList.IsSynchronized
    commentId: P:System.Collections.SortedList.IsSynchronized
  - type: System.Collections.SortedList.SyncRoot
    commentId: P:System.Collections.SortedList.SyncRoot
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.SortedList.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.SortedList.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 380
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>[Visual Basic, C#]</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position. At this position, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  seealso:
  - type: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.SortedList.TrimToSize
  commentId: M:System.Collections.SortedList.TrimToSize
  id: TrimToSize
  parent: System.Collections.SortedList
  langs:
  - csharp
  - vb
  name: TrimToSize()
  fullName: System.Collections.SortedList.TrimToSize()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/SortedList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TrimToSize
    path: src/mscorlib/src/System/Collections/SortedList.cs
    startLine: 549
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Sets the capacity to the actual number of elements in a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method can be used to minimize a collection's memory overhead if no new elements will be added to the collection.</p>\n<p>To reset a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object to its initial state, call the <xref href=\"System.Collections.SortedList.Clear\" data-throw-if-not-resolved=\"false\"></xref> method before calling <xref href=\"System.Collections.SortedList.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref>. Trimming an empty <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.SortedList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to trim the unused portions of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object and how to clear its values.</p>Classic SortedList.Clear Example#1"
  syntax:
    content: public virtual void TrimToSize()
    content.vb: Public Overridable Sub TrimToSize
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.SortedList.Clear
    commentId: M:System.Collections.SortedList.Clear
  - type: System.Collections.SortedList.Capacity
    commentId: P:System.Collections.SortedList.Capacity
  - type: System.Collections.SortedList.Count
    commentId: P:System.Collections.SortedList.Count
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  fullName: System.Collections.IComparer
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.IDictionary.IsFixedSize
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsFixedSize
  fullName: System.Collections.IDictionary.IsFixedSize
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.IDictionary.IsReadOnly
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsReadOnly
  fullName: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.IDictionary.Item(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Item[Object]
  fullName: System.Collections.IDictionary.Item[System.Object]
  fullname.vb: System.Collections.IDictionary.Item(System.Object)
  name.vb: Item(Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    fullName: '['
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Keys
  parent: System.Collections.IDictionary
  isExternal: true
  name: Keys
  fullName: System.Collections.IDictionary.Keys
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IDictionary.Values
  parent: System.Collections.IDictionary
  isExternal: true
  name: Values
  fullName: System.Collections.IDictionary.Values
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Add(Object, Object)
  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: true
  name: Clear()
  fullName: System.Collections.IDictionary.Clear()
  spec.csharp:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Contains(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Contains(Object)
  fullName: System.Collections.IDictionary.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IDictionary.GetEnumerator
  parent: System.Collections.IDictionary
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System.Collections.IDictionary.Remove(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Remove(Object)
  fullName: System.Collections.IDictionary.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.SortedList
  parent: System.Collections
  isExternal: false
  name: SortedList
  fullName: System.Collections.SortedList
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
