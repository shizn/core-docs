items:
- uid: System.IO.StreamReader
  commentId: T:System.IO.StreamReader
  id: StreamReader
  parent: System.IO
  children:
  - System.IO.StreamReader.#ctor(System.IO.Stream)
  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)
  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)
  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)
  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)
  - System.IO.StreamReader.BaseStream
  - System.IO.StreamReader.CurrentEncoding
  - System.IO.StreamReader.DiscardBufferedData
  - System.IO.StreamReader.Dispose(System.Boolean)
  - System.IO.StreamReader.EndOfStream
  - System.IO.StreamReader.Null
  - System.IO.StreamReader.Peek
  - System.IO.StreamReader.Read
  - System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)
  - System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  - System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.StreamReader.ReadLine
  - System.IO.StreamReader.ReadLineAsync
  - System.IO.StreamReader.ReadToEnd
  - System.IO.StreamReader.ReadToEndAsync
  langs:
  - csharp
  - vb
  name: StreamReader
  fullName: System.IO.StreamReader
  type: Class
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StreamReader
    path: src/System.IO/ref/System.IO.cs
    startLine: 185
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Implements a <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref> that reads characters from a byte stream in a particular encoding.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/streamreader.cs#b5fe1efcec14de32\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/streamreader.cs#b5fe1efcec14de32\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>\n<xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> is designed for character input in a particular encoding, whereas the <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> class is designed for byte input and output. Use <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> for reading lines of information from a standard text file.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref>  method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic. </p>\n<p>\n<xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> defaults to UTF-8 encoding unless specified otherwise, instead of defaulting to the ANSI code page for the current system. UTF-8 handles Unicode characters correctly and provides consistent results on localized versions of the operating system. If you get the current character encoding using the <xref href=\"System.IO.StreamReader.CurrentEncoding\" data-throw-if-not-resolved=\"false\"></xref> property, the value is not reliable until after the first <xref href=\"System.IO.StreamReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method, since encoding auto detection is not done until the first call to a <xref href=\"System.IO.StreamReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>By default, a <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> is not thread safe. See <xref href=\"System.IO.TextReader.Synchronized(System.IO.TextReader)\" data-throw-if-not-resolved=\"false\"></xref> for a thread-safe wrapper.</p>\n<p>The <xref href=\"System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>  and <xref href=\"System.IO.StreamWriter.Write(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>  method overloads read and write the number of characters specified by the <em>count</em> parameter. These are to be distinguished from <xref href=\"System.IO.BufferedStream.Read(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO.BufferedStream.Write(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, which read and write the number of bytes specified by the <em>count</em> parameter. Use the <xref href=\"System.IO.BufferedStream\" data-throw-if-not-resolved=\"false\"></xref> methods only for reading and writing an integral number of byte array elements.</p>\n<p>When reading from a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, it is more efficient to use a buffer that is the same size as the internal buffer of the stream.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example uses an instance of <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> to read text from a file. The constructor used in this example is not supported for use in Windows Store Apps.</p>readtextfile#1"
  - "\n<p>The following example instantiates a <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object and calls its <xref href=\"System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to read a file asynchronously. </p>System.IO.StreamReader#51"
  syntax:
    content: 'public class StreamReader : TextReader'
    content.vb: >-
      Public Class StreamReader
          Inherits TextReader
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  - type: System.IO.Stream
    commentId: T:System.IO.Stream
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  inheritance:
  - System.Object
  - System.IO.TextReader
  inheritedMembers:
  - System.IO.TextReader.Dispose
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.StreamReader.Null
  commentId: F:System.IO.StreamReader.Null
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  fullName: System.IO.StreamReader.Null
  type: Field
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.IO/ref/System.IO.cs
    startLine: 187
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>A <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object around an empty stream.</p>\n"
  remarks: "\n<p>When read methods are invoked on <xref href=\"System.IO.StreamReader.Null\" data-throw-if-not-resolved=\"false\"></xref>, zero is always returned. When <xref href=\"System.IO.StreamReader.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> is invoked on <xref href=\"System.IO.StreamReader.Null\" data-throw-if-not-resolved=\"false\"></xref>, <strong>null</strong> is returned.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public static readonly StreamReader Null
    content.vb: Public Shared ReadOnly Null As StreamReader
    return:
      type: System.IO.StreamReader
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.IO.StreamReader.#ctor(System.IO.Stream)
  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: StreamReader(Stream)
  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 188
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> class for the specified stream.</p>\n"
  remarks: "\n<p>This constructor initializes the encoding to <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.IO.StreamReader.BaseStream\" data-throw-if-not-resolved=\"false\"></xref> property using the <em>stream</em> parameter, and the internal buffer size to 1024 bytes.</p>\n<p>The <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object calls <xref href=\"System.IO.Stream.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on the provided <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object when <xref href=\"System.IO.StreamReader.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called. </p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates this <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>strmreader ctor1#1"
  syntax:
    content: public StreamReader(Stream stream)
    content.vb: Public Sub New(stream As Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream to be read. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>stream</em> does not support reading. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)
  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: StreamReader(Stream, Boolean)
  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 189
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> class for the specified stream, with the specified byte order mark detection option.</p>\n"
  remarks: "\n<p>This constructor initializes the encoding to <xref href=\"System.Text.UTF8Encoding\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.IO.StreamReader.BaseStream\" data-throw-if-not-resolved=\"false\"></xref> property using the <em>stream</em> parameter, and the internal buffer size to 1024 bytes.</p>\n<p>The <em>detectEncodingFromByteOrderMarks</em> parameter detects the encoding by looking at the first three bytes of the stream. It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte order marks. See the <xref href=\"System.Text.Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method for more information.</p>\n<p>The <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object calls <xref href=\"System.IO.Stream.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on the provided <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object when <xref href=\"System.IO.StreamReader.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates this <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>System.IO.StreamReader#2"
  syntax:
    content: public StreamReader(Stream stream, bool detectEncodingFromByteOrderMarks)
    content.vb: Public Sub New(stream As Stream, detectEncodingFromByteOrderMarks As Boolean)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream to be read. </p>\n"
    - id: detectEncodingFromByteOrderMarks
      type: System.Boolean
      description: "\n<p>Indicates whether to look for byte order marks at the beginning of the file. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>stream</em> does not support reading. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)
  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)
  id: '#ctor(System.IO.Stream,System.Text.Encoding)'
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: StreamReader(Stream, Text.Encoding)
  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 190
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> class for the specified stream, with the specified character encoding.</p>\n"
  remarks: "\n<p>The character encoding is set by the <em>encoding</em> parameter, and the buffer size is set to 1024 bytes. The <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object attempts to  detect the encoding by looking at the first three bytes of the stream. It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte order marks. Otherwise, the user-provided encoding is used. See the <xref href=\"System.Text.Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method for more information.</p>\n<p>The <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object calls <xref href=\"System.IO.Stream.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on the provided <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object when <xref href=\"System.IO.StreamReader.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates this <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>System.IO.StreamReader#2"
  syntax:
    content: public StreamReader(Stream stream, Text.Encoding encoding)
    content.vb: Public Sub New(stream As Stream, encoding As Text.Encoding)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream to be read. </p>\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\n<p>The character encoding to use. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>stream</em> does not support reading. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> or <em>encoding</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)'
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: StreamReader(Stream, Text.Encoding, Boolean)
  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 191
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> class for the specified stream, with the specified character encoding and byte order mark detection option.</p>\n"
  remarks: "\n<p>This constructor initializes the encoding as specified by the <em>encoding</em> parameter, the <xref href=\"System.IO.StreamReader.BaseStream\" data-throw-if-not-resolved=\"false\"></xref> property using the <em>stream</em> parameter, and the internal buffer size to 1024 bytes.</p>\n<p>The <em>detectEncodingFromByteOrderMarks</em> parameter detects the encoding by looking at the first three bytes of the stream. It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte order marks. Otherwise, the user-provided encoding is used. See the <xref href=\"System.Text.Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method for more information.</p>\n<p>The <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object calls <xref href=\"System.IO.Stream.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on the provided <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object when <xref href=\"System.IO.StreamReader.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates this <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>System.IO.StreamReader#2"
  syntax:
    content: public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks)
    content.vb: Public Sub New(stream As Stream, encoding As Text.Encoding, detectEncodingFromByteOrderMarks As Boolean)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream to be read. </p>\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\n<p>The character encoding to use. </p>\n"
    - id: detectEncodingFromByteOrderMarks
      type: System.Boolean
      description: "\n<p>Indicates whether to look for byte order marks at the beginning of the file. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>stream</em> does not support reading. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> or <em>encoding</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)
  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)'
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: StreamReader(Stream, Text.Encoding, Boolean, Int32)
  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding, System.Boolean, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 192
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> class for the specified stream, with the specified character encoding, byte order mark detection option, and buffer size.</p>\n"
  remarks: "\n<p>The buffer size, in number of 16-bit characters, is set by the <em>bufferSize</em> parameter. If <em>bufferSize</em> is less than the minimum allowable size (128 characters), the minimum allowable size is used.</p>\n<p>This constructor allows you to change the encoding the first time you read from the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object. The <em>detectEncodingFromByteOrderMarks</em> parameter detects the encoding by looking at the first three bytes of the stream. It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte order marks. Otherwise, the user-provided encoding is used. See the <xref href=\"System.Text.Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method for more information.</p>\n<p>The <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object calls <xref href=\"System.IO.Stream.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on the provided <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object when <xref href=\"System.IO.StreamReader.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>When reading from a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, it is more efficient to use a buffer that is the same size as the internal buffer of the stream.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpretable, and could cause an exception to be thrown.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates this <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>System.IO.StreamReader#2"
  syntax:
    content: public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize)
    content.vb: Public Sub New(stream As Stream, encoding As Text.Encoding, detectEncodingFromByteOrderMarks As Boolean, bufferSize As Integer)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream to be read. </p>\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\n<p>The character encoding to use. </p>\n"
    - id: detectEncodingFromByteOrderMarks
      type: System.Boolean
      description: "\n<p>Indicates whether to look for byte order marks at the beginning of the file. </p>\n"
    - id: bufferSize
      type: System.Int32
      description: "\n<p>The minimum buffer size. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream does not support reading. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> or <em>encoding</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>bufferSize</em> is less than or equal to zero. </p>\n"
  seealso:
  - type: System.Text.Encoding
    commentId: T:System.Text.Encoding
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)
  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)'
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: StreamReader(Stream, Text.Encoding, Boolean, Int32, Boolean)
  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding, System.Boolean, System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO/ref/System.IO.cs
    startLine: 193
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> class for the specified stream based on the specified character encoding, byte order mark detection option, and buffer size, and optionally leaves the stream open.</p>\n"
  remarks: "\n<p>Unless you set the <em>leaveOpen</em> parameter to <strong>true</strong>, the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object calls <xref href=\"System.IO.Stream.Dispose\" data-throw-if-not-resolved=\"false\"></xref> on the provided <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object when <xref href=\"System.IO.StreamReader.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>The buffer size, in number of 16-bit characters, is set by the <em>bufferSize</em> parameter. If <em>bufferSize</em> is less than the minimum allowable size (128 characters), the minimum allowable size is used.</p>\n<p>This constructor enables you to change the encoding the first time you read from the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object. If the <em>detectEncodingFromByteOrderMarks</em> parameter is <strong>true</strong>, the constructor detects the encoding by looking at the first three bytes of the stream. It automatically recognizes UTF-8, little-endian Unicode, and big-endian Unicode text if the file starts with the appropriate byte order marks. Otherwise, the user-provided encoding is used. See the <xref href=\"System.Text.Encoding.GetPreamble\" data-throw-if-not-resolved=\"false\"></xref> method for more information.</p>\n<p>When reading from a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>, it is more efficient to use a buffer that is the same size as the internal buffer of the stream.</p>\n<p>When you compile a set of characters with a particular cultural setting and retrieve those same characters with a different cultural setting, the characters might not be interpreted correctly, and could cause an exception to be thrown.</p>\n"
  syntax:
    content: public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen)
    content.vb: Public Sub New(stream As Stream, encoding As Text.Encoding, detectEncodingFromByteOrderMarks As Boolean, bufferSize As Integer, leaveOpen As Boolean)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream to read.</p>\n"
    - id: encoding
      type: System.Text.Encoding
      description: "\n<p>The character encoding to use.</p>\n"
    - id: detectEncodingFromByteOrderMarks
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to look for byte order marks at the beginning of the file; otherwise, <strong>false</strong>.</p>\n"
    - id: bufferSize
      type: System.Int32
      description: "\n<p>The minimum buffer size.</p>\n"
    - id: leaveOpen
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to leave the stream open after the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object is disposed; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.BaseStream
  commentId: P:System.IO.StreamReader.BaseStream
  id: BaseStream
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: BaseStream
  fullName: System.IO.StreamReader.BaseStream
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseStream
    path: src/System.IO/ref/System.IO.cs
    startLine: 194
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Returns the underlying stream.</p>\n"
  remarks: "\n<p>You use this property to access the underlying stream. The <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> class buffers input from the underlying stream when you call one of the <xref href=\"System.IO.StreamReader.Read\" data-throw-if-not-resolved=\"false\"></xref> methods. If you manipulate the position of the underlying stream after reading data into the buffer, the position of the underlying stream might not match the position of the internal buffer. To reset the internal buffer, call the <xref href=\"System.IO.StreamReader.DiscardBufferedData\" data-throw-if-not-resolved=\"false\"></xref> method; however, this method slows performance and should be called only when absolutely necessary. The <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> constructors that have the <em>detectEncodingFromByteOrderMarks</em> parameter can change the encoding the first time you read from the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  syntax:
    content: public virtual Stream BaseStream { get; }
    content.vb: Public Overridable ReadOnly Property BaseStream As Stream
    parameters: []
    return:
      type: System.IO.Stream
      description: "\n<p>The underlying stream.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.StreamReader.CurrentEncoding
  commentId: P:System.IO.StreamReader.CurrentEncoding
  id: CurrentEncoding
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: CurrentEncoding
  fullName: System.IO.StreamReader.CurrentEncoding
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CurrentEncoding
    path: src/System.IO/ref/System.IO.cs
    startLine: 195
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets the current character encoding that the current <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object is using.</p>\n"
  remarks: "\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example gets the encoding of the specified <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>strmreader currentencoding#1"
  syntax:
    content: public virtual Text.Encoding CurrentEncoding { get; }
    content.vb: Public Overridable ReadOnly Property CurrentEncoding As Text.Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\n<p>The current character encoding used by the current reader. The value can be different after the first call to any <see cref=\"Overload:System.IO.StreamReader.Read\"></see> method of <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref>, since encoding autodetection is not done until the first call to a <see cref=\"Overload:System.IO.StreamReader.Read\"></see> method.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.StreamReader.EndOfStream
  commentId: P:System.IO.StreamReader.EndOfStream
  id: EndOfStream
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: EndOfStream
  fullName: System.IO.StreamReader.EndOfStream
  type: Property
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EndOfStream
    path: src/System.IO/ref/System.IO.cs
    startLine: 196
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Gets a value that indicates whether the current stream position is at the end of the stream.</p>\n"
  example:
  - 
  syntax:
    content: public bool EndOfStream { get; }
    content.vb: Public ReadOnly Property EndOfStream As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current stream position is at the end of the stream; otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying stream has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.StreamReader.DiscardBufferedData
  commentId: M:System.IO.StreamReader.DiscardBufferedData
  id: DiscardBufferedData
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: DiscardBufferedData()
  fullName: System.IO.StreamReader.DiscardBufferedData()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DiscardBufferedData
    path: src/System.IO/ref/System.IO.cs
    startLine: 197
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Clears the internal buffer.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.StreamReader.DiscardBufferedData\" data-throw-if-not-resolved=\"false\"></xref> method to reset the internal buffer for the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object. You need to call this method only when the position of the internal buffer and the <xref href=\"System.IO.StreamReader.BaseStream\" data-throw-if-not-resolved=\"false\"></xref> do not match. These positions can become mismatched when you read data into the buffer and then seek a new position in the underlying stream. This method slows performance and should be used only when absolutely necessary, such as when you want to read a portion of the contents of a <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object more than once. </p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following example shows a scenario where the <xref href=\"System.IO.StreamReader.DiscardBufferedData\" data-throw-if-not-resolved=\"false\"></xref> method must be called to synchronize the internal buffer and the underlying stream. The file in the example is used to illustrate position and consists of the text <code>abcdefghijklmnopqrstuvwxyz</code>. By calling <xref href=\"System.IO.StreamReader.DiscardBufferedData\" data-throw-if-not-resolved=\"false\"></xref> after the data is read, the example works as expected. After the first 15 characters are read, the position is reset to the offset value of 2 and all the remaining characters are read. If you remove the call to <xref href=\"System.IO.StreamReader.DiscardBufferedData\" data-throw-if-not-resolved=\"false\"></xref>, the example does not work as expected. The first 15 characters are read, but only the position of the underlying stream is reset. The internal buffer of the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object is still on the 16th character. Therefore, <xref href=\"System.IO.StreamReader.ReadToEnd\" data-throw-if-not-resolved=\"false\"></xref> returns all the characters in the buffer plus the characters in the underlying stream starting from the reset position.</p>System.IO.StreamReader#30"
  syntax:
    content: public void DiscardBufferedData()
    content.vb: Public Sub DiscardBufferedData
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.Dispose(System.Boolean)
  commentId: M:System.IO.StreamReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.StreamReader.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO/ref/System.IO.cs
    startLine: 198
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Closes the underlying stream, releases the unmanaged resources used by the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref>, and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> method. <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> invokes the protected <xref href=\"System.IO.StreamReader.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method with the <em>disposing</em> parameter set to true. <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> invokes <xref href=\"System.IO.StreamReader.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with <em>disposing</em> set to false.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object references. This method invokes the <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method of each referenced object.</p>\n<p>.</p>\n"
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  overridden: System.IO.TextReader.Dispose(System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.IO.StreamReader.Peek
  commentId: M:System.IO.StreamReader.Peek
  id: Peek
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: Peek()
  fullName: System.IO.StreamReader.Peek()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Peek
    path: src/System.IO/ref/System.IO.cs
    startLine: 199
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Returns the next available character but does not consume it.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.StreamReader.Peek\" data-throw-if-not-resolved=\"false\"></xref> method returns an integer value in order to determine whether the end of the file, or another error has occurred. This allows a user to first check if the returned value is -1 before casting it to a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n<p>This method overrides <xref href=\"System.IO.TextReader.Peek\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The current position of the <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> object is not changed by <xref href=\"System.IO.StreamReader.Peek\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  example:
  - "\n<p>The following code example reads lines from a file until the end of the file is reached.</p>strmreader peek#1"
  syntax:
    content: public override int Peek()
    content.vb: Public Overrides Function Peek As Integer
    return:
      type: System.Int32
      description: "\n<p>An integer representing the next character to be read, or -1 if there are no characters to be read or if the stream does not support seeking.</p>\n"
  overridden: System.IO.TextReader.Peek
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamReader.Read
  commentId: M:System.IO.StreamReader.Read
  id: Read
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: Read()
  fullName: System.IO.StreamReader.Read()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.IO/ref/System.IO.cs
    startLine: 200
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads the next character from the input stream and advances the character position by one character.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.TextReader.Read\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method returns an integer so that it can return -1 if the end of the stream has been reached. If you manipulate the position of the underlying stream after reading data into the buffer, the position of the underlying stream might not match the position of the internal buffer. To reset the internal buffer, call the <xref href=\"System.IO.StreamReader.DiscardBufferedData\" data-throw-if-not-resolved=\"false\"></xref> method; however, this method slows performance and should be called only when absolutely necessary.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example demonstrates a simple use of the <see cref=\"Overload:System.IO.StreamReader.Read\"></see> method.</p>strmreader read1#1<p>The following code example demonstrates reading a single character using the <xref href=\"System.IO.StreamReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method overload, formatting the ASCII integer output as decimal and hexadecimal.</p>StrmRdrRead#1"
  syntax:
    content: public override int Read()
    content.vb: Public Overrides Function Read As Integer
    return:
      type: System.Int32
      description: "\n<p>The next character from the input stream represented as an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> object, or -1 if no more characters are available.</p>\n"
  overridden: System.IO.TextReader.Read
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)
  id: Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: Read(Char[], Int32, Int32)
  fullName: System.IO.StreamReader.Read(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.IO/ref/System.IO.cs
    startLine: 201
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a specified maximum of characters from the current stream into a buffer, beginning at the specified index.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.TextReader.Read\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method returns an integer so that it can return 0 if the end of the stream has been reached.</p>\n<p>When using the <xref href=\"System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method, it is more efficient to use a buffer that is the same size as the internal buffer of the stream, where the internal buffer is set to your desired block size, and to always read less than the block size. If the size of the internal buffer was unspecified when the stream was constructed, its default size is 4 kilobytes (4096 bytes). If you manipulate the position of the underlying stream after reading data into the buffer, the position of the underlying stream might not match the position of the internal buffer. To reset the internal buffer, call the <xref href=\"System.IO.StreamReader.DiscardBufferedData\" data-throw-if-not-resolved=\"false\"></xref> method; however, this method slows performance and should be called only when absolutely necessary.</p>\n<p>This method returns after either the number of characters specified by the <em>count</em> parameter are read, or the end of the file is reached. <xref href=\"System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is a blocking version of <see cref=\"Overload:System.IO.StreamReader.Read\"></see>.</p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example reads five characters at a time until the end of the file is reached.</p>strmreader read2#1"
  syntax:
    content: public override int Read(char[] buffer, int index, int count)
    content.vb: Public Overrides Function Read(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index + count - 1</em>) replaced by the characters read from the current source. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of <em>buffer</em> at which to begin writing. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to read. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters that have been read, or 0 if at the end of the stream and no data was read. The number will be less than or equal to the <em>count</em> parameter, depending on whether the data is available within the stream.</p>\n"
  overridden: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs, such as the stream is closed. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StreamReader.Read(System.Char(), System.Int32, System.Int32)
  name.vb: Read(Char(), Int32, Int32)
- uid: System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  id: ReadAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadAsync(Char[], Int32, Int32)
  fullName: System.IO.StreamReader.ReadAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 202
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a specified maximum number of characters from the current stream asynchronously and writes the data to a buffer, beginning at the specified index. </p>\n"
  remarks: "\n<p>The task completes after either the number of characters specified by the <em>count</em> parameter are read or the end of the stream is reached.</p>\n"
  example:
  - "\n<p>The following example shows how to read all the characters in a file by using the <xref href=\"System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. It checks whether each character is a letter, digit, or white space before adding the character to an instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.IO.StreamReader#42"
  syntax:
    content: public override Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count)
    content.vb: Public Overrides Function ReadAsync(buffer As Char(), index As Integer, count As Integer) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position in <em>buffer</em> at which to begin writing.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to read. If the end of the stream is reached before the specified number of characters is written into the buffer, the current method returns.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</p>\n"
  overridden: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The reader is currently in use by a previous read operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StreamReader.ReadAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadAsync(Char(), Int32, Int32)
- uid: System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  id: ReadBlock(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadBlock(Char[], Int32, Int32)
  fullName: System.IO.StreamReader.ReadBlock(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadBlock
    path: src/System.IO/ref/System.IO.cs
    startLine: 203
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a specified maximum number of characters from the current stream and writes the data to a buffer, beginning at the specified index.</p>\n"
  remarks: "\n<p>The position of the underlying stream is advanced by the number of characters that were read into <em>buffer</em>.</p>\n<p>The method blocks until either <em>count</em> characters are read, or the end of the stream has been reached. This is a blocking version of <xref href=\"System.IO.StreamReader.Read\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override int ReadBlock(char[] buffer, int index, int count)
    content.vb: Public Overrides Function ReadBlock(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index + count - 1</em>) replaced by the characters read from the current source.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position in <em>buffer</em> at which to begin writing.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to read.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters that have been read. The number will be less than or equal to <em>count</em>, depending on whether all input characters have been read.</p>\n"
  overridden: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The buffer length minus <em>index</em> is less than <em>count</em>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StreamReader.ReadBlock(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlock(Char(), Int32, Int32)
- uid: System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  id: ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadBlockAsync(Char[], Int32, Int32)
  fullName: System.IO.StreamReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadBlockAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 204
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a specified maximum number of characters from the current stream asynchronously and writes the data to a buffer, beginning at the specified index.</p>\n"
  remarks: "\n<p>The task does not complete until either the number of characters specified by the <em>count</em> parameter are read, or the end of the stream has been reached.</p>\n"
  syntax:
    content: public override Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count)
    content.vb: Public Overrides Function ReadBlockAsync(buffer As Char(), index As Integer, count As Integer) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position in <em>buffer</em> at which to begin writing.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to read. If the end of the stream is reached before the specified number of characters is written into the buffer, the method returns.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.</p>\n"
  overridden: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is negative.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The sum of <em>index</em> and <em>count</em> is larger than the buffer length.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The reader is currently in use by a previous read operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StreamReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlockAsync(Char(), Int32, Int32)
- uid: System.IO.StreamReader.ReadLine
  commentId: M:System.IO.StreamReader.ReadLine
  id: ReadLine
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadLine()
  fullName: System.IO.StreamReader.ReadLine()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadLine
    path: src/System.IO/ref/System.IO.cs
    startLine: 205
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a line of characters from the current stream and returns the data as a string.</p>\n"
  remarks: "\n<p>A line is defined as a sequence of characters followed by a line feed (\"\\n\"), a carriage return (\"\\r\"), or a carriage return immediately followed by a line feed (\"\\r\\n\"). The string that is returned does not contain the terminating carriage return or line feed. The returned value is <strong>null</strong> if the end of the input stream is reached.</p>\n<p>This method overrides <xref href=\"System.IO.TextReader.ReadLine\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the current method throws an <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref>, the reader's position in the underlying <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref href=\"System.IO.StreamReader.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> buffer are discarded. If you manipulate the position of the underlying stream after reading data into the buffer, the position of the underlying stream might not match the position of the internal buffer. To reset the internal buffer, call the <xref href=\"System.IO.StreamReader.DiscardBufferedData\" data-throw-if-not-resolved=\"false\"></xref> method; however, this method slows performance and should be called only when absolutely necessary. </p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example reads lines from a file until the end of the file is reached.</p>strmreader readline#1"
  syntax:
    content: public override string ReadLine()
    content.vb: Public Overrides Function ReadLine As String
    return:
      type: System.String
      description: "\n<p>The next line from the input stream, or <strong>null</strong> if the end of the input stream is reached.</p>\n"
  overridden: System.IO.TextReader.ReadLine
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory to allocate a buffer for the returned string. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamReader.ReadLineAsync
  commentId: M:System.IO.StreamReader.ReadLineAsync
  id: ReadLineAsync
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadLineAsync()
  fullName: System.IO.StreamReader.ReadLineAsync()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadLineAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 206
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads a line of characters asynchronously from the current stream and returns the data as a string.</p>\n"
  example:
  - "\n<p>The following example shows how to read the first line of a file by using the <xref href=\"System.IO.StreamReader.ReadLineAsync\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StreamReader#41"
  syntax:
    content: public override Threading.Tasks.Task<string> ReadLineAsync()
    content.vb: Public Overrides Function ReadLineAsync As Threading.Tasks.Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the next line from the stream, or is <strong>null</strong> if all the characters have been read.</p>\n"
  overridden: System.IO.TextReader.ReadLineAsync
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The number of characters in the next line is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The reader is currently in use by a previous read operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamReader.ReadToEnd
  commentId: M:System.IO.StreamReader.ReadToEnd
  id: ReadToEnd
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadToEnd()
  fullName: System.IO.StreamReader.ReadToEnd()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToEnd
    path: src/System.IO/ref/System.IO.cs
    startLine: 207
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads all characters from the current position to the end of the stream.</p>\n"
  remarks: "\n<p>This method overrides <xref href=\"System.IO.TextReader.ReadToEnd\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.IO.StreamReader.ReadToEnd\" data-throw-if-not-resolved=\"false\"></xref> works best when you need to read all the input from the current position to the end of the stream. If more control is needed over how many characters are read from the stream, use the <xref href=\"System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method overload, which generally results in better performance.</p>\n<p>\n<xref href=\"System.IO.StreamReader.ReadToEnd\" data-throw-if-not-resolved=\"false\"></xref> assumes that the stream knows when it has reached an end. For interactive protocols in which the server sends data only when you ask for it and does not close the connection, <xref href=\"System.IO.StreamReader.ReadToEnd\" data-throw-if-not-resolved=\"false\"></xref> might block indefinitely because it does not reach an end, and should be avoided. </p>\n<p>Note that when using the <xref href=\"System.IO.StreamReader.Read\" data-throw-if-not-resolved=\"false\"></xref>  method, it is more efficient to use a buffer that is the same size as the internal buffer of the stream. If the size of the buffer was unspecified when the stream was constructed, its default size is 4 kilobytes (4096 bytes).</p>\n<p>If the current method throws an <xref href=\"System.OutOfMemoryException\" data-throw-if-not-resolved=\"false\"></xref>, the reader's position in the underlying <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> object is advanced by the number of characters the method was able to read, but the characters already read into the internal <xref href=\"System.IO.StreamReader.ReadLine\" data-throw-if-not-resolved=\"false\"></xref> buffer are discarded. If you manipulate the position of the underlying stream after reading data into the buffer, the position of the underlying stream might not match the position of the internal buffer. To reset the internal buffer, call the <xref href=\"System.IO.StreamReader.DiscardBufferedData\" data-throw-if-not-resolved=\"false\"></xref> method; however, this method slows performance and should be called only when absolutely necessary. </p>\n<p>For a list of common I/O tasks, see Common I/O Tasks.</p>\n"
  example:
  - "\n<p>The following code example reads all the way to the end of a file in one operation.</p>strmreader readtoend#1"
  syntax:
    content: public override string ReadToEnd()
    content.vb: Public Overrides Function ReadToEnd As String
    return:
      type: System.String
      description: "\n<p>The rest of the stream as a string, from the current position to the end. If the current position is at the end of the stream, returns an empty string (\"\").</p>\n"
  overridden: System.IO.TextReader.ReadToEnd
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory to allocate a buffer for the returned string. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamReader.ReadToEndAsync
  commentId: M:System.IO.StreamReader.ReadToEndAsync
  id: ReadToEndAsync
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadToEndAsync()
  fullName: System.IO.StreamReader.ReadToEndAsync()
  type: Method
  source:
    remote:
      path: src/System.IO/ref/System.IO.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToEndAsync
    path: src/System.IO/ref/System.IO.cs
    startLine: 208
  assemblies:
  - System.IO
  namespace: System.IO
  summary: "\n<p>Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.</p>\n"
  example:
  - "\n<p>The following example shows how to read the contents of a file by using the <xref href=\"System.IO.StreamReader.ReadToEndAsync\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.IO.StreamReader#40"
  syntax:
    content: public override Threading.Tasks.Task<string> ReadToEndAsync()
    content.vb: Public Overrides Function ReadToEndAsync As Threading.Tasks.Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains a string with the characters from the current position to the end of the stream.</p>\n"
  overridden: System.IO.TextReader.ReadToEndAsync
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The number of characters is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The stream has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The reader is currently in use by a previous read operation. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: false
  name: IO.TextReader
  fullName: System.IO.TextReader
- uid: System.IO.TextReader.Dispose
  parent: System.IO.TextReader
  isExternal: false
  name: Dispose()
  fullName: System.IO.TextReader.Dispose()
  spec.csharp:
  - uid: System.IO.TextReader.Dispose
    name: Dispose
    fullName: System.IO.TextReader.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Dispose
    name: Dispose
    fullName: System.IO.TextReader.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.StreamReader
  parent: System.IO
  isExternal: false
  name: StreamReader
  fullName: System.IO.StreamReader
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Text.Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.IO.TextReader.Dispose(System.Boolean)
  parent: System.IO.TextReader
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.IO.TextReader.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.IO.TextReader.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.TextReader.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.TextReader.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextReader.Peek
  parent: System.IO.TextReader
  isExternal: false
  name: Peek()
  fullName: System.IO.TextReader.Peek()
  spec.csharp:
  - uid: System.IO.TextReader.Peek
    name: Peek
    fullName: System.IO.TextReader.Peek
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Peek
    name: Peek
    fullName: System.IO.TextReader.Peek
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextReader.Read
  parent: System.IO.TextReader
  isExternal: false
  name: Read()
  fullName: System.IO.TextReader.Read()
  spec.csharp:
  - uid: System.IO.TextReader.Read
    name: Read
    fullName: System.IO.TextReader.Read
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Read
    name: Read
    fullName: System.IO.TextReader.Read
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  isExternal: true
  name: Read(Char[], Int32, Int32)
  fullName: System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextReader.Read(System.Char(), System.Int32, System.Int32)
  name.vb: Read(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
    name: Read
    fullName: System.IO.TextReader.Read
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
    name: Read
    fullName: System.IO.TextReader.Read
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Char[]
  isExternal: false
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: ()
    fullName: ()
- uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  isExternal: true
  name: ReadAsync(Char[], Int32, Int32)
  fullName: System.IO.TextReader.ReadAsync(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextReader.ReadAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadAsync(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
    name: ReadAsync
    fullName: System.IO.TextReader.ReadAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
    name: ReadAsync
    fullName: System.IO.TextReader.ReadAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Threading.Tasks.Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  fullname.vb: System.Threading.Tasks.Task(Of )
  name.vb: Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  isExternal: true
  name: ReadBlock(Char[], Int32, Int32)
  fullName: System.IO.TextReader.ReadBlock(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextReader.ReadBlock(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlock(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
    name: ReadBlock
    fullName: System.IO.TextReader.ReadBlock
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
    name: ReadBlock
    fullName: System.IO.TextReader.ReadBlock
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  isExternal: true
  name: ReadBlockAsync(Char[], Int32, Int32)
  fullName: System.IO.TextReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlockAsync(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
    name: ReadBlockAsync
    fullName: System.IO.TextReader.ReadBlockAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
    name: ReadBlockAsync
    fullName: System.IO.TextReader.ReadBlockAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextReader.ReadLine
  parent: System.IO.TextReader
  isExternal: false
  name: ReadLine()
  fullName: System.IO.TextReader.ReadLine()
  spec.csharp:
  - uid: System.IO.TextReader.ReadLine
    name: ReadLine
    fullName: System.IO.TextReader.ReadLine
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadLine
    name: ReadLine
    fullName: System.IO.TextReader.ReadLine
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.TextReader.ReadLineAsync
  parent: System.IO.TextReader
  isExternal: false
  name: ReadLineAsync()
  fullName: System.IO.TextReader.ReadLineAsync()
  spec.csharp:
  - uid: System.IO.TextReader.ReadLineAsync
    name: ReadLineAsync
    fullName: System.IO.TextReader.ReadLineAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadLineAsync
    name: ReadLineAsync
    fullName: System.IO.TextReader.ReadLineAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Threading.Tasks.Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextReader.ReadToEnd
  parent: System.IO.TextReader
  isExternal: false
  name: ReadToEnd()
  fullName: System.IO.TextReader.ReadToEnd()
  spec.csharp:
  - uid: System.IO.TextReader.ReadToEnd
    name: ReadToEnd
    fullName: System.IO.TextReader.ReadToEnd
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadToEnd
    name: ReadToEnd
    fullName: System.IO.TextReader.ReadToEnd
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextReader.ReadToEndAsync
  parent: System.IO.TextReader
  isExternal: false
  name: ReadToEndAsync()
  fullName: System.IO.TextReader.ReadToEndAsync()
  spec.csharp:
  - uid: System.IO.TextReader.ReadToEndAsync
    name: ReadToEndAsync
    fullName: System.IO.TextReader.ReadToEndAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadToEndAsync
    name: ReadToEndAsync
    fullName: System.IO.TextReader.ReadToEndAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
