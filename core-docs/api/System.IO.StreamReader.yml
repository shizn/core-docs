items:
- uid: System.IO.StreamReader
  commentId: T:System.IO.StreamReader
  id: StreamReader
  parent: System.IO
  children:
  - System.IO.StreamReader.#ctor(System.IO.Stream)
  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)
  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)
  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)
  - System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)
  - System.IO.StreamReader.BaseStream
  - System.IO.StreamReader.CurrentEncoding
  - System.IO.StreamReader.DiscardBufferedData
  - System.IO.StreamReader.Dispose(System.Boolean)
  - System.IO.StreamReader.EndOfStream
  - System.IO.StreamReader.Null
  - System.IO.StreamReader.Peek
  - System.IO.StreamReader.Read
  - System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)
  - System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  - System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  - System.IO.StreamReader.ReadLine
  - System.IO.StreamReader.ReadLineAsync
  - System.IO.StreamReader.ReadToEnd
  - System.IO.StreamReader.ReadToEndAsync
  langs:
  - csharp
  - vb
  name: StreamReader
  fullName: System.IO.StreamReader
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StreamReader
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 31
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Implements a <xref href="System.IO.TextReader" data-throw-if-not-resolved="false"></xref> that reads characters from a byte stream in a particular encoding.To browse the .NET Framework source code for this type, see the Reference Source.
  syntax:
    content: 'public class StreamReader : TextReader'
    content.vb: >-
      Public Class StreamReader
          Inherits TextReader
  inheritance:
  - System.Object
  - System.IO.TextReader
  inheritedMembers:
  - System.IO.TextReader.Dispose
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.StreamReader.Null
  commentId: F:System.IO.StreamReader.Null
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  fullName: System.IO.StreamReader.Null
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 36
  assemblies:
  - System.IO
  namespace: System.IO
  summary: A <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref> object around an empty stream.
  syntax:
    content: public static readonly StreamReader Null
    content.vb: Public Shared ReadOnly Null As StreamReader
    return:
      type: System.IO.StreamReader
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.IO.StreamReader.#ctor(System.IO.Stream)
  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: StreamReader(Stream)
  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 130
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref> class for the specified stream.
  syntax:
    content: public StreamReader(Stream stream)
    content.vb: Public Sub New(stream As Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: 'The stream to be read. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>stream</em> does not support reading. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>stream</em> is null. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)
  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: StreamReader(Stream, Boolean)
  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 134
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref> class for the specified stream, with the specified byte order mark detection option.
  syntax:
    content: public StreamReader(Stream stream, bool detectEncodingFromByteOrderMarks)
    content.vb: Public Sub New(stream As Stream, detectEncodingFromByteOrderMarks As Boolean)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: 'The stream to be read. '
    - id: detectEncodingFromByteOrderMarks
      type: System.Boolean
      description: 'Indicates whether to look for byte order marks at the beginning of the file. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>stream</em> does not support reading. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>stream</em> is null. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)
  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding)
  id: '#ctor(System.IO.Stream,System.Text.Encoding)'
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: StreamReader(Stream, Text.Encoding)
  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 138
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref> class for the specified stream, with the specified character encoding.
  syntax:
    content: public StreamReader(Stream stream, Text.Encoding encoding)
    content.vb: Public Sub New(stream As Stream, encoding As Text.Encoding)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: 'The stream to be read. '
    - id: encoding
      type: System.Text.Encoding
      description: 'The character encoding to use. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>stream</em> does not support reading. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>stream</em> or <em>encoding</em> is null. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean)'
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: StreamReader(Stream, Text.Encoding, Boolean)
  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 142
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref> class for the specified stream, with the specified character encoding and byte order mark detection option.
  syntax:
    content: public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks)
    content.vb: Public Sub New(stream As Stream, encoding As Text.Encoding, detectEncodingFromByteOrderMarks As Boolean)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: 'The stream to be read. '
    - id: encoding
      type: System.Text.Encoding
      description: 'The character encoding to use. '
    - id: detectEncodingFromByteOrderMarks
      type: System.Boolean
      description: 'Indicates whether to look for byte order marks at the beginning of the file. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>stream</em> does not support reading. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>stream</em> or <em>encoding</em> is null. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)
  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32)'
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: StreamReader(Stream, Text.Encoding, Boolean, Int32)
  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding, System.Boolean, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 156
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref> class for the specified stream, with the specified character encoding, byte order mark detection option, and buffer size.
  syntax:
    content: public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize)
    content.vb: Public Sub New(stream As Stream, encoding As Text.Encoding, detectEncodingFromByteOrderMarks As Boolean, bufferSize As Integer)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: 'The stream to be read. '
    - id: encoding
      type: System.Text.Encoding
      description: 'The character encoding to use. '
    - id: detectEncodingFromByteOrderMarks
      type: System.Boolean
      description: 'Indicates whether to look for byte order marks at the beginning of the file. '
    - id: bufferSize
      type: System.Int32
      description: 'The minimum buffer size. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The stream does not support reading. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>stream</em> or <em>encoding</em> is null. "
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>bufferSize</em> is less than or equal to zero. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)
  commentId: M:System.IO.StreamReader.#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Text.Encoding,System.Boolean,System.Int32,System.Boolean)'
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: StreamReader(Stream, Text.Encoding, Boolean, Int32, Boolean)
  fullName: System.IO.StreamReader.StreamReader(System.IO.Stream, System.Text.Encoding, System.Boolean, System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 160
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref> class for the specified stream based on the specified character encoding, byte order mark detection option, and buffer size, and optionally leaves the stream open.
  syntax:
    content: public StreamReader(Stream stream, Text.Encoding encoding, bool detectEncodingFromByteOrderMarks, int bufferSize, bool leaveOpen)
    content.vb: Public Sub New(stream As Stream, encoding As Text.Encoding, detectEncodingFromByteOrderMarks As Boolean, bufferSize As Integer, leaveOpen As Boolean)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: The stream to read.
    - id: encoding
      type: System.Text.Encoding
      description: The character encoding to use.
    - id: detectEncodingFromByteOrderMarks
      type: System.Boolean
      description: true to look for byte order marks at the beginning of the file; otherwise, false.
    - id: bufferSize
      type: System.Int32
      description: The minimum buffer size.
    - id: leaveOpen
      type: System.Boolean
      description: true to leave the stream open after the <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref> object is disposed; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.BaseStream
  commentId: P:System.IO.StreamReader.BaseStream
  id: BaseStream
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: BaseStream
  fullName: System.IO.StreamReader.BaseStream
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BaseStream
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 283
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Returns the underlying stream.
  syntax:
    content: public virtual Stream BaseStream { get; }
    content.vb: Public Overridable ReadOnly Property BaseStream As Stream
    parameters: []
    return:
      type: System.IO.Stream
      description: The underlying stream.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.StreamReader.CurrentEncoding
  commentId: P:System.IO.StreamReader.CurrentEncoding
  id: CurrentEncoding
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: CurrentEncoding
  fullName: System.IO.StreamReader.CurrentEncoding
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentEncoding
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 279
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Gets the current character encoding that the current <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref> object is using.
  syntax:
    content: public virtual Text.Encoding CurrentEncoding { get; }
    content.vb: Public Overridable ReadOnly Property CurrentEncoding As Text.Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: The current character encoding used by the current reader. The value can be different after the first call to any <see cref="Overload:System.IO.StreamReader.Read"></see> method of <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref>, since encoding autodetection is not done until the first call to a <see cref="Overload:System.IO.StreamReader.Read"></see> method.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.IO.StreamReader.EndOfStream
  commentId: P:System.IO.StreamReader.EndOfStream
  id: EndOfStream
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: EndOfStream
  fullName: System.IO.StreamReader.EndOfStream
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EndOfStream
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 313
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Gets a value that indicates whether the current stream position is at the end of the stream.
  syntax:
    content: public bool EndOfStream { get; }
    content.vb: Public ReadOnly Property EndOfStream As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current stream position is at the end of the stream; otherwise false.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The underlying stream has been disposed.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.StreamReader.DiscardBufferedData
  commentId: M:System.IO.StreamReader.DiscardBufferedData
  id: DiscardBufferedData
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: DiscardBufferedData()
  fullName: System.IO.StreamReader.DiscardBufferedData()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DiscardBufferedData
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 298
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Clears the internal buffer.
  syntax:
    content: public void DiscardBufferedData()
    content.vb: Public Sub DiscardBufferedData
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.StreamReader.Dispose(System.Boolean)
  commentId: M:System.IO.StreamReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.StreamReader.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 254
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Closes the underlying stream, releases the unmanaged resources used by the <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref>, and optionally releases the managed resources.
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: 'true to release both managed and unmanaged resources; false to release only unmanaged resources. '
  overridden: System.IO.TextReader.Dispose(System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.IO.StreamReader.Peek
  commentId: M:System.IO.StreamReader.Peek
  id: Peek
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: Peek()
  fullName: System.IO.StreamReader.Peek()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Peek
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 329
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Returns the next available character but does not consume it.
  syntax:
    content: public override int Peek()
    content.vb: Public Overrides Function Peek As Integer
    return:
      type: System.Int32
      description: An integer representing the next character to be read, or -1 if there are no characters to be read or if the stream does not support seeking.
  overridden: System.IO.TextReader.Peek
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: 'An I/O error occurs. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamReader.Read
  commentId: M:System.IO.StreamReader.Read
  id: Read
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: Read()
  fullName: System.IO.StreamReader.Read()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 343
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads the next character from the input stream and advances the character position by one character.
  syntax:
    content: public override int Read()
    content.vb: Public Overrides Function Read As Integer
    return:
      type: System.Int32
      description: The next character from the input stream represented as an <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> object, or -1 if no more characters are available.
  overridden: System.IO.TextReader.Read
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: 'An I/O error occurs. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StreamReader.Read(System.Char[],System.Int32,System.Int32)
  id: Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: Read(Char[], Int32, Int32)
  fullName: System.IO.StreamReader.Read(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 357
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a specified maximum of characters from the current stream into a buffer, beginning at the specified index.
  syntax:
    content: public override int Read(char[] buffer, int index, int count)
    content.vb: Public Overrides Function Read(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
      description: 'When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index + count - 1</em>) replaced by the characters read from the current source. '
    - id: index
      type: System.Int32
      description: 'The index of <em>buffer</em> at which to begin writing. '
    - id: count
      type: System.Int32
      description: 'The maximum number of characters to read. '
    return:
      type: System.Int32
      description: The number of characters that have been read, or 0 if at the end of the stream and no data was read. The number will be less than or equal to the <em>count</em> parameter, depending on whether the data is available within the stream.
  overridden: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The buffer length minus <em>index</em> is less than <em>count</em>. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>buffer</em> is null. "
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> or <em>count</em> is negative. "
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: 'An I/O error occurs, such as the stream is closed. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StreamReader.Read(System.Char(), System.Int32, System.Int32)
  name.vb: Read(Char(), Int32, Int32)
- uid: System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StreamReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  id: ReadAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadAsync(Char[], Int32, Int32)
  fullName: System.IO.StreamReader.ReadAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadAsync
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 895
  assemblies:
  - System.IO
  namespace: System.IO
  summary: 'Reads a specified maximum number of characters from the current stream asynchronously and writes the data to a buffer, beginning at the specified index. '
  syntax:
    content: public override Threading.Tasks.Task<int> ReadAsync(char[] buffer, int index, int count)
    content.vb: Public Overrides Function ReadAsync(buffer As Char(), index As Integer, count As Integer) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.
    - id: index
      type: System.Int32
      description: The position in <em>buffer</em> at which to begin writing.
    - id: count
      type: System.Int32
      description: The maximum number of characters to read. If the end of the stream is reached before the specified number of characters is written into the buffer, the current method returns.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.
  overridden: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>buffer</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> or <em>count</em> is negative."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The sum of <em>index</em> and <em>count</em> is larger than the buffer length.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The reader is currently in use by a previous read operation. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StreamReader.ReadAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadAsync(Char(), Int32, Int32)
- uid: System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StreamReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  id: ReadBlock(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadBlock(Char[], Int32, Int32)
  fullName: System.IO.StreamReader.ReadBlock(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadBlock
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 415
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a specified maximum number of characters from the current stream and writes the data to a buffer, beginning at the specified index.
  syntax:
    content: public override int ReadBlock(char[] buffer, int index, int count)
    content.vb: Public Overrides Function ReadBlock(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
      description: When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index + count - 1</em>) replaced by the characters read from the current source.
    - id: index
      type: System.Int32
      description: The position in <em>buffer</em> at which to begin writing.
    - id: count
      type: System.Int32
      description: The maximum number of characters to read.
    return:
      type: System.Int32
      description: The number of characters that have been read. The number will be less than or equal to <em>count</em>, depending on whether all input characters have been read.
  overridden: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>buffer</em> is null. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The buffer length minus <em>index</em> is less than <em>count</em>. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> or <em>count</em> is negative. "
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: 'The <xref href="System.IO.StreamReader" data-throw-if-not-resolved="false"></xref> is closed. '
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: 'An I/O error occurred. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StreamReader.ReadBlock(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlock(Char(), Int32, Int32)
- uid: System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.IO.StreamReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  id: ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadBlockAsync(Char[], Int32, Int32)
  fullName: System.IO.StreamReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadBlockAsync
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 1083
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a specified maximum number of characters from the current stream asynchronously and writes the data to a buffer, beginning at the specified index.
  syntax:
    content: public override Threading.Tasks.Task<int> ReadBlockAsync(char[] buffer, int index, int count)
    content.vb: Public Overrides Function ReadBlockAsync(buffer As Char(), index As Integer, count As Integer) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: When this method returns, contains the specified character array with the values between <em>index</em> and (<em>index</em> + <em>count</em> - 1) replaced by the characters read from the current source.
    - id: index
      type: System.Int32
      description: The position in <em>buffer</em> at which to begin writing.
    - id: count
      type: System.Int32
      description: The maximum number of characters to read. If the end of the stream is reached before the specified number of characters is written into the buffer, the method returns.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.
  overridden: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>buffer</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> or <em>count</em> is negative."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The sum of <em>index</em> and <em>count</em> is larger than the buffer length.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The reader is currently in use by a previous read operation. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.StreamReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlockAsync(Char(), Int32, Int32)
- uid: System.IO.StreamReader.ReadLine
  commentId: M:System.IO.StreamReader.ReadLine
  id: ReadLine
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadLine()
  fullName: System.IO.StreamReader.ReadLine()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadLine
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 733
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a line of characters from the current stream and returns the data as a string.
  syntax:
    content: public override string ReadLine()
    content.vb: Public Overrides Function ReadLine As String
    return:
      type: System.String
      description: The next line from the input stream, or null if the end of the input stream is reached.
  overridden: System.IO.TextReader.ReadLine
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: 'There is insufficient memory to allocate a buffer for the returned string. '
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: 'An I/O error occurs. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamReader.ReadLineAsync
  commentId: M:System.IO.StreamReader.ReadLineAsync
  id: ReadLineAsync
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadLineAsync()
  fullName: System.IO.StreamReader.ReadLineAsync()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadLineAsync
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 777
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads a line of characters asynchronously from the current stream and returns the data as a string.
  syntax:
    content: public override Threading.Tasks.Task<string> ReadLineAsync()
    content.vb: Public Overrides Function ReadLineAsync As Threading.Tasks.Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the next line from the stream, or is null if all the characters have been read.
  overridden: System.IO.TextReader.ReadLineAsync
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The number of characters in the next line is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The reader is currently in use by a previous read operation. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamReader.ReadToEnd
  commentId: M:System.IO.StreamReader.ReadToEnd
  id: ReadToEnd
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadToEnd()
  fullName: System.IO.StreamReader.ReadToEnd()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadToEnd
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 397
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads all characters from the current position to the end of the stream.
  syntax:
    content: public override string ReadToEnd()
    content.vb: Public Overrides Function ReadToEnd As String
    return:
      type: System.String
      description: The rest of the stream as a string, from the current position to the end. If the current position is at the end of the stream, returns an empty string ("").
  overridden: System.IO.TextReader.ReadToEnd
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: 'There is insufficient memory to allocate a buffer for the returned string. '
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: 'An I/O error occurs. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.StreamReader.ReadToEndAsync
  commentId: M:System.IO.StreamReader.ReadToEndAsync
  id: ReadToEndAsync
  parent: System.IO.StreamReader
  langs:
  - csharp
  - vb
  name: ReadToEndAsync()
  fullName: System.IO.StreamReader.ReadToEndAsync()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/StreamReader.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadToEndAsync
    path: src/mscorlib/src/System/IO/StreamReader.cs
    startLine: 858
  assemblies:
  - System.IO
  namespace: System.IO
  summary: Reads all characters from the current position to the end of the stream asynchronously and returns them as one string.
  syntax:
    content: public override Threading.Tasks.Task<string> ReadToEndAsync()
    content.vb: Public Overrides Function ReadToEndAsync As Threading.Tasks.Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains a string with the characters from the current position to the end of the stream.
  overridden: System.IO.TextReader.ReadToEndAsync
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The number of characters is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The reader is currently in use by a previous read operation. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: false
  name: IO.TextReader
  fullName: System.IO.TextReader
- uid: System.IO.TextReader.Dispose
  parent: System.IO.TextReader
  isExternal: false
  name: Dispose()
  fullName: System.IO.TextReader.Dispose()
  spec.csharp:
  - uid: System.IO.TextReader.Dispose
    name: Dispose
    fullName: System.IO.TextReader.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Dispose
    name: Dispose
    fullName: System.IO.TextReader.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.StreamReader
  parent: System.IO
  isExternal: false
  name: StreamReader
  fullName: System.IO.StreamReader
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Text.Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.IO.TextReader.Dispose(System.Boolean)
  parent: System.IO.TextReader
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.IO.TextReader.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.IO.TextReader.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.TextReader.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Dispose(System.Boolean)
    name: Dispose
    fullName: System.IO.TextReader.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextReader.Peek
  parent: System.IO.TextReader
  isExternal: false
  name: Peek()
  fullName: System.IO.TextReader.Peek()
  spec.csharp:
  - uid: System.IO.TextReader.Peek
    name: Peek
    fullName: System.IO.TextReader.Peek
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Peek
    name: Peek
    fullName: System.IO.TextReader.Peek
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextReader.Read
  parent: System.IO.TextReader
  isExternal: false
  name: Read()
  fullName: System.IO.TextReader.Read()
  spec.csharp:
  - uid: System.IO.TextReader.Read
    name: Read
    fullName: System.IO.TextReader.Read
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Read
    name: Read
    fullName: System.IO.TextReader.Read
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  isExternal: true
  name: Read(Char[], Int32, Int32)
  fullName: System.IO.TextReader.Read(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextReader.Read(System.Char(), System.Int32, System.Int32)
  name.vb: Read(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
    name: Read
    fullName: System.IO.TextReader.Read
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.Read(System.Char[],System.Int32,System.Int32)
    name: Read
    fullName: System.IO.TextReader.Read
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Char[]
  isExternal: false
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: ()
    fullName: ()
- uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  isExternal: true
  name: ReadAsync(Char[], Int32, Int32)
  fullName: System.IO.TextReader.ReadAsync(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextReader.ReadAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadAsync(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
    name: ReadAsync
    fullName: System.IO.TextReader.ReadAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadAsync(System.Char[],System.Int32,System.Int32)
    name: ReadAsync
    fullName: System.IO.TextReader.ReadAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Threading.Tasks.Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  isExternal: true
  name: ReadBlock(Char[], Int32, Int32)
  fullName: System.IO.TextReader.ReadBlock(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextReader.ReadBlock(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlock(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
    name: ReadBlock
    fullName: System.IO.TextReader.ReadBlock
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadBlock(System.Char[],System.Int32,System.Int32)
    name: ReadBlock
    fullName: System.IO.TextReader.ReadBlock
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
  parent: System.IO.TextReader
  isExternal: true
  name: ReadBlockAsync(Char[], Int32, Int32)
  fullName: System.IO.TextReader.ReadBlockAsync(System.Char[], System.Int32, System.Int32)
  fullname.vb: System.IO.TextReader.ReadBlockAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadBlockAsync(Char(), Int32, Int32)
  spec.csharp:
  - uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
    name: ReadBlockAsync
    fullName: System.IO.TextReader.ReadBlockAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadBlockAsync(System.Char[],System.Int32,System.Int32)
    name: ReadBlockAsync
    fullName: System.IO.TextReader.ReadBlockAsync
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextReader.ReadLine
  parent: System.IO.TextReader
  isExternal: false
  name: ReadLine()
  fullName: System.IO.TextReader.ReadLine()
  spec.csharp:
  - uid: System.IO.TextReader.ReadLine
    name: ReadLine
    fullName: System.IO.TextReader.ReadLine
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadLine
    name: ReadLine
    fullName: System.IO.TextReader.ReadLine
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.TextReader.ReadLineAsync
  parent: System.IO.TextReader
  isExternal: false
  name: ReadLineAsync()
  fullName: System.IO.TextReader.ReadLineAsync()
  spec.csharp:
  - uid: System.IO.TextReader.ReadLineAsync
    name: ReadLineAsync
    fullName: System.IO.TextReader.ReadLineAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadLineAsync
    name: ReadLineAsync
    fullName: System.IO.TextReader.ReadLineAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Threading.Tasks.Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.IO.TextReader.ReadToEnd
  parent: System.IO.TextReader
  isExternal: false
  name: ReadToEnd()
  fullName: System.IO.TextReader.ReadToEnd()
  spec.csharp:
  - uid: System.IO.TextReader.ReadToEnd
    name: ReadToEnd
    fullName: System.IO.TextReader.ReadToEnd
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadToEnd
    name: ReadToEnd
    fullName: System.IO.TextReader.ReadToEnd
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.TextReader.ReadToEndAsync
  parent: System.IO.TextReader
  isExternal: false
  name: ReadToEndAsync()
  fullName: System.IO.TextReader.ReadToEndAsync()
  spec.csharp:
  - uid: System.IO.TextReader.ReadToEndAsync
    name: ReadToEndAsync
    fullName: System.IO.TextReader.ReadToEndAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.TextReader.ReadToEndAsync
    name: ReadToEndAsync
    fullName: System.IO.TextReader.ReadToEndAsync
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
