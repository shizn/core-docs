items:
- uid: System.Collections.Concurrent.EnumerablePartitionerOptions
  commentId: T:System.Collections.Concurrent.EnumerablePartitionerOptions
  id: EnumerablePartitionerOptions
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering
  - System.Collections.Concurrent.EnumerablePartitionerOptions.None
  langs:
  - csharp
  - vb
  name: EnumerablePartitionerOptions
  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions
  type: Enum
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnumerablePartitionerOptions
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 24
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Specifies options to control the buffering behavior of a partitioner</p>\n"
  remarks: "\n<p>Out-of-the-box partitioners are created with a set of default behaviors. For example, by default, some form of buffering and chunking will be used to achieve optimal performance in the common scenario where an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation is fast and non-blocking. These behaviors can be overridden by this enumeration by using the <xref href=\"System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: 'public enum EnumerablePartitionerOptions : int'
    content.vb: Public Enum EnumerablePartitionerOptions As Integer
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering
  commentId: F:System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering
  id: NoBuffering
  parent: System.Collections.Concurrent.EnumerablePartitionerOptions
  langs:
  - csharp
  - vb
  name: NoBuffering
  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering
  type: Field
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NoBuffering
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 39
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Create a partitioner that takes items from the source enumerable one at a time and does not use intermediate storage that can be accessed more efficiently by multiple threads. This option provides support for low latency (items will be processed as soon as they are available from the source) and provides partial support for dependencies between items (a thread cannot deadlock waiting for an item that the thread itself is responsible for processing).</p>\n"
  syntax:
    content: NoBuffering = null
    content.vb: NoBuffering = Nothing
    return:
      type: System.Collections.Concurrent.EnumerablePartitionerOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Collections.Concurrent.EnumerablePartitionerOptions.None
  commentId: F:System.Collections.Concurrent.EnumerablePartitionerOptions.None
  id: None
  parent: System.Collections.Concurrent.EnumerablePartitionerOptions
  langs:
  - csharp
  - vb
  name: None
  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions.None
  type: Field
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: None
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 30
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Use the default behavior, which is to use buffering to achieve optimal performance.</p>\n"
  syntax:
    content: None = null
    content.vb: None = Nothing
    return:
      type: System.Collections.Concurrent.EnumerablePartitionerOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Collections.Concurrent.EnumerablePartitionerOptions
  parent: System.Collections.Concurrent
  isExternal: false
  name: EnumerablePartitionerOptions
  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions
