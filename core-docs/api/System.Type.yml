items:
- uid: System.Type
  commentId: T:System.Type
  id: Type
  parent: System
  children:
  - System.Type.AssemblyQualifiedName
  - System.Type.DeclaringType
  - System.Type.Delimiter
  - System.Type.EmptyTypes
  - System.Type.Equals(System.Object)
  - System.Type.Equals(System.Type)
  - System.Type.FullName
  - System.Type.GenericParameterPosition
  - System.Type.GenericTypeArguments
  - System.Type.GetArrayRank
  - System.Type.GetElementType
  - System.Type.GetGenericTypeDefinition
  - System.Type.GetHashCode
  - System.Type.GetType(System.String)
  - System.Type.GetType(System.String,System.Boolean)
  - System.Type.GetType(System.String,System.Boolean,System.Boolean)
  - System.Type.GetTypeCode(System.Type)
  - System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  - System.Type.HasElementType
  - System.Type.IsArray
  - System.Type.IsByRef
  - System.Type.IsConstructedGenericType
  - System.Type.IsGenericParameter
  - System.Type.IsNested
  - System.Type.IsPointer
  - System.Type.MakeArrayType
  - System.Type.MakeArrayType(System.Int32)
  - System.Type.MakeByRefType
  - System.Type.MakeGenericType(System.Type[])
  - System.Type.MakePointerType
  - System.Type.Missing
  - System.Type.Name
  - System.Type.Namespace
  - System.Type.ToString
  - System.Type.TypeHandle
  langs:
  - csharp
  - vb
  name: Type
  fullName: System.Type
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Type
    path: src/mscorlib/src/System/Type.cs
    startLine: 30
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/type.cs#3d00eeab9feb80f3\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/type.cs#3d00eeab9feb80f3\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>\n<strong>Type</strong> is the root of the <xref href=\"System.Reflection\" data-throw-if-not-resolved=\"false\"></xref> functionality and is the primary way to access metadata. Use the members of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to get information about a type declaration, about the members of a type (such as the constructors, methods, fields, properties, and events of a class), as well as the module and the assembly in which the class is deployed.</p>\n<p>No permissions are required for code to use reflection to get information about types and their members, regardless of their access levels. No permissions are required for code to use reflection to access public members, or other members whose access levels would make them visible during normal compilation. However, in order for your code to use reflection to access members that would normally be inaccessible, such as private or internal methods, or protected fields of a type your class does not inherit, your code must have <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref>. See Security Considerations for Reflection.</p>\n<p>\n<strong>Type</strong> is an abstract base class that allows multiple implementations. The system will always provide the derived class <strong>RuntimeType</strong>. In reflection, all classes beginning with the word Runtime are created only once per object in the system and support comparison operations.</p>\n<p>In multithreading scenarios, do not lock <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects in order to synchronize access to <strong>static</strong> data. Other code, over which you have no control, might also lock your class type. This might result in a deadlock. Instead, synchronize access to static data by locking a private <strong>static</strong> object.</p>\n<p>A derived class can access protected members of the calling code's base classes. Also, access is allowed to assembly members of the calling code's assembly. As a rule, if you are allowed access in early-bound code, then you are also allowed access in late-bound code.</p>\n<p>Interfaces that extend other interfaces do not inherit the methods defined in the extended interfaces.</p>\n<p>In this section:</p>\n<p>What types does a Type object represent?Retrieving a Type objectComparing type objects for equality</p>\n"
  example:
  - >-
    <p>The following  example shows a few representative features of <xref href="System.Type" data-throw-if-not-resolved="false"></xref>. The C# <strong>typeof</strong> operator (<strong>GetType</strong> operator in Visual Basic, <strong>typeid</strong> operator in Visual C++) is used to get a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object representing <xref href="System.String" data-throw-if-not-resolved="false"></xref>. From this <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object, the <see cref="Overload:System.Type.GetMethod"></see> method is used to get a <xref href="System.Reflection.MethodInfo" data-throw-if-not-resolved="false"></xref> representing the <xref href="System.String.Substring(System.Int32,System.Int32)" data-throw-if-not-resolved="false"></xref> overload that takes a starting location and a length. </p>

    <p>To identify the overload signature, the code example creates a temporary array containing two <xref href="System.Type" data-throw-if-not-resolved="false"></xref> objects representing <strong>int</strong> (<strong>Integer</strong> in Visual Basic). </p>

    <p>To be precise, the array contains two references to the instance of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> that represents <strong>int</strong> in the current application domain. For any type, there is only one instance of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> per application domain.</p>

    <p>The code example uses the <xref href="System.Reflection.MethodInfo" data-throw-if-not-resolved="false"></xref> to invoke the <xref href="System.String.Substring(System.Int32,System.Int32)" data-throw-if-not-resolved="false"></xref> method on the string "Hello, World!", and displays the result. </p>System.Type#1
  syntax:
    content: >-
      [Serializable]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_Type))]

      [ComVisible(true)]

      public abstract class Type : MemberInfo, ICustomAttributeProvider, _MemberInfo, _Type, IReflect
    content.vb: >-
      <Serializable>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_Type))>

      <ComVisible(True)>

      Public MustInherit Class Type
          Inherits MemberInfo
          Implements ICustomAttributeProvider, _MemberInfo, _Type, IReflect
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.Reflection
    commentId: N:System.Reflection
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Type.EmptyTypes
  commentId: F:System.Type.EmptyTypes
  id: EmptyTypes
  parent: System.Type
  langs:
  - csharp
  - vb
  name: EmptyTypes
  fullName: System.Type.EmptyTypes
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EmptyTypes
    path: src/mscorlib/src/System/Type.cs
    startLine: 49
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents an empty array of type <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>. This field is read-only.</p>\n"
  example:
  - "\n<p>The following code example shows the <strong>EmptyTypes</strong> field used in one of the <strong>GetConstructor</strong> methods to get a constructor that takes no parameters.</p>Classic Type.EmptyTypes Example#1"
  syntax:
    content: public static readonly Type[] EmptyTypes
    content.vb: Public Shared ReadOnly EmptyTypes As Type()
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Type.Missing
  commentId: F:System.Type.Missing
  id: Missing
  parent: System.Type
  langs:
  - csharp
  - vb
  name: Missing
  fullName: System.Type.Missing
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Missing
    path: src/mscorlib/src/System/Type.cs
    startLine: 44
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a missing value in the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> information. This field is read-only.</p>\n"
  remarks: "\n<p>Use the <strong>Missing</strong> field for invocation through reflection to obtain the default value of a parameter. If the <strong>Missing</strong> field is passed in for a parameter value and there is no default value for that parameter, an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  example:
  - "\n<p>The following code example shows the use of the <strong>Missing</strong> field to invoke a method with its default arguments.</p>Classic Type.Missing Example#1<p>This code produces the following output: </p><p>a = 10 b = 55.3 c = 12 </p><p>a = 10 b = 1.3 c = 1 </p><p>a = 10 b = 1.2 c = 1 </p>"
  syntax:
    content: public static readonly object Missing
    content.vb: Public Shared ReadOnly Missing As Object
    return:
      type: System.Object
  seealso:
  - type: System.Reflection.Missing
    commentId: T:System.Reflection.Missing
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Type.Delimiter
  commentId: F:System.Type.Delimiter
  id: Delimiter
  parent: System.Type
  langs:
  - csharp
  - vb
  name: Delimiter
  fullName: System.Type.Delimiter
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delimiter
    path: src/mscorlib/src/System/Type.cs
    startLine: 46
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Separates names in the namespace of the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>. This field is read-only.</p>\n"
  syntax:
    content: public static readonly char Delimiter
    content.vb: Public Shared ReadOnly Delimiter As Char
    return:
      type: System.Char
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Type.AssemblyQualifiedName
  commentId: P:System.Type.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Type
  langs:
  - csharp
  - vb
  name: AssemblyQualifiedName
  fullName: System.Type.AssemblyQualifiedName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AssemblyQualifiedName
    path: src/mscorlib/src/System/Type.cs
    startLine: 367
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object was loaded.</p>\n"
  remarks: "\n<p>The assembly-qualified name of a type consists of the type name, including its namespace, followed by a comma, followed by the display name of the assembly. The display name of an assembly is obtained using the <xref href=\"System.Reflection.Assembly.FullName\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>In the .NET Framework version 2.0, processor architecture is added to assembly identity, and can be specified as part of assembly name strings. For example, \"ProcessorArchitecture=msil\". However, it is not included in the string returned by the <xref href=\"System.Type.AssemblyQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> property, for compatibility reasons. See <xref href=\"System.Reflection.AssemblyName.ProcessorArchitecture\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>All compilers that support the common language runtime emit the simple name of a nested class, and reflection constructs a mangled name when queried, in accordance with the following conventions.</p>\n<p>Delimiter </p>\n<p>Meaning </p>\n<table><tbody><tr><td>\n<p>Backslash (\\) </p>\n</td><td>\n<p>Escape character. </p>\n</td></tr><tr><td>\n<p>Comma (,) </p>\n</td><td>\n<p>Precedes the Assembly name. </p>\n</td></tr><tr><td>\n<p>Plus sign (+) </p>\n</td><td>\n<p>Precedes a nested class. </p>\n</td></tr><tr><td>\n<p>Period (.) </p>\n</td><td>\n<p>Denotes namespace identifiers. </p>\n</td></tr><tr><td>\n<p>Brackets ([]) </p>\n</td><td>\n<p>After a type name, denotes an array of that type.</p>\n<p>-or-</p>\n<p>For a generic type, encloses the generic type argument list.</p>\n<p>-or-</p>\n<p>Within a type argument list, encloses an assembly-qualified type. </p>\n</td></tr></tbody></table>\n<p>For example, the assembly-qualified name for a class might look like this: </p>\n<pre><code>TopNamespace.SubNameSpace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089</code></pre>\n<p>If the namespace contained a plus sign, for example TopNamespace.Sub+Namespace, then the plus sign (+) would be preceded by an escape character (\\) to prevent it from being interpreted as a nesting separator. Reflection would emit this string as follows: </p>\n<pre><code>TopNamespace.Sub\\+Namespace.ContainingClass+NestedClass, MyAssembly, Version=1.3.0.0, Culture=neutral, PublicKeyToken=b17a5c561934e089 </code></pre>\n<p>A \"++\" becomes \"\\+\\+\", and a \"\\\" becomes \"\\\\\".</p>\n<p>This qualified name can be persisted and later used to load the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>. To search for and load a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>, use <xref href=\"System.Type.GetType\" data-throw-if-not-resolved=\"false\"></xref> either with the type name only or with the assembly qualified type name. <xref href=\"System.Type.GetType\" data-throw-if-not-resolved=\"false\"></xref> with the type name only will look for the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> in the caller's assembly and then in the System assembly. <xref href=\"System.Type.GetType\" data-throw-if-not-resolved=\"false\"></xref> with the assembly qualified type name will look for the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> in any assembly.</p>\n<p>Type names may include trailing characters that denote additional information about the type, such as whether the type is a reference type, a pointer type or an array type. To retrieve the type name without these trailing characters, use <code>t.GetElementType().ToString()</code>, where <em>t</em> is the type.</p>\n<p>Spaces are relevant in all type name components except the assembly name. In the assembly name, spaces before the ',' separator are relevant, but spaces after the ',' separator are ignored.</p>\n<p>Generic arguments of generic types are themselves qualified by assembly name. For example, in the assembly-qualified type name for <code>MyGenericClass<int></code> (<code>MyGenericClass(Of Integer)</code> in Visual Basic), <strong>int</strong> is expanded to the assembly-qualified type name for <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents a generic parameter, this property returns <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following example displays the assembly name associated with the class and the fully qualified name of the type.</p>type_assembly#1"
  - "\n<p>The following example compares the strings returned by the <xref href=\"System.Type.ToString\" data-throw-if-not-resolved=\"false\"></xref> method and the <strong>Name</strong>, <xref href=\"System.Type.FullName\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Type.AssemblyQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> properties. </p>System.Type.ToString#1"
  syntax:
    content: public abstract string AssemblyQualifiedName { get; }
    content.vb: Public MustOverride ReadOnly Property AssemblyQualifiedName As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.String
    commentId: T:System.String
  - type: System.Type.GetType
    commentId: M:System.Type.GetType
  - type: System.Type.FullName
    commentId: P:System.Type.FullName
  - type: System.Type.Namespace
    commentId: P:System.Type.Namespace
  - type: System.Reflection.AssemblyName
    commentId: T:System.Reflection.AssemblyName
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.FullName
  commentId: P:System.Type.FullName
  id: FullName
  parent: System.Type
  langs:
  - csharp
  - vb
  name: FullName
  fullName: System.Type.FullName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullName
    path: src/mscorlib/src/System/Type.cs
    startLine: 355
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the fully qualified name of the type, including its namespace but not its assembly. </p>\n"
  remarks: "\n<p>For example, the fully qualified name of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> type is <code>System.String</code>. Contrast this with the assembly-qualified name returned by the <xref href=\"System.Type.AssemblyQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> property, which consists of the full name plus the full assembly name. </p>\n<p>If the current type represents a closed generic type, the type arguments in the string returned by the <xref href=\"System.Type.FullName\" data-throw-if-not-resolved=\"false\"></xref>property are qualified by their full assembly name, even though the string representation of the generic type itself is not qualified by its full assembly name. The following example illustrates the difference in the FullName property for a type that represents generic type definition and one that represents a closed generic type. </p>System.Type.FullName#2<p>This property returns <strong>null</strong> if:</p><ul><li><p>The current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents a type parameter of a generic type.  </p><p>The following example retrieves the type parameter of the <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> type and attempts to display its <xref href=\"System.Type.FullName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Type.FullName#3</li><li><p>The current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents an array type, a pointer  type, or a <strong>byref</strong> type that is based on a generic type parameter. </p><p>The following example defines a generic type, <code>Generictype1<T></code>, with three methods: <code>Display(T[])</code>, which is passed an array of type T; <code>HandleT(T)</code>, which is passed a T object; and <code>ChangeValue(ref T)</code>, which is passed a T object by reference. Because C# and Visual Basic do not allow us to define T as a pointer in the <code>HandleT</code> method, we have to call the <xref href=\"System.Type.MakePointerType\" data-throw-if-not-resolved=\"false\"></xref> method on the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the method's parameter type to create a pointer to a generic type. The output from the example shows that in all three cases, the <xref href=\"System.Type.FullName\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.   </p>System.Type.FullName#4</li><li><p>The current type contains generic type parameters that have not been replaced by specific types (that is, the <xref href=\"System.Type.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong>), but the type is not a generic type definition (that is, the <xref href=\"System.Type.IsGenericTypeDefinition\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong></p><p>In the following example, <code>Derived<T></code> inherits from <code>Base<T></code>. The <xref href=\"System.Type.BaseType\" data-throw-if-not-resolved=\"false\"></xref> property obtains the  <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the base type of <code>Derived<T></code>, and its <xref href=\"System.Type.FullName\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>null</strong>. </p>System.Type.FullName#5<p> To get a <xref href=\"System.Type.FullName\" data-throw-if-not-resolved=\"false\"></xref> that is not <strong>null</strong>, you can use the <xref href=\"System.Type.GetGenericTypeDefinition\" data-throw-if-not-resolved=\"false\"></xref> method to get the generic type definition, as the example illustrates.</p></li></ul><p>This property is read-only.</p>"
  example:
  - "\n<p>The following example displays the full name of the specified type.</p>TestFullName#1"
  - "\n<p>The following example compares the strings returned by the <xref href=\"System.Type.ToString\" data-throw-if-not-resolved=\"false\"></xref> method and the <strong>Name</strong>, <xref href=\"System.Type.FullName\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Type.AssemblyQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> properties. </p>System.Type.ToString#1"
  syntax:
    content: public abstract string FullName { get; }
    content.vb: Public MustOverride ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.String
    commentId: T:System.String
  - type: System.Type.Namespace
    commentId: P:System.Type.Namespace
  - type: System.Type.AssemblyQualifiedName
    commentId: P:System.Type.AssemblyQualifiedName
  - type: System.Reflection.AssemblyName
    commentId: T:System.Reflection.AssemblyName
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.GenericParameterPosition
  commentId: P:System.Type.GenericParameterPosition
  id: GenericParameterPosition
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GenericParameterPosition
  fullName: System.Type.GenericParameterPosition
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GenericParameterPosition
    path: src/mscorlib/src/System/Type.cs
    startLine: 1171
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents a type parameter of a generic type or a generic method.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Type.GenericParameterPosition\" data-throw-if-not-resolved=\"false\"></xref> property returns the position of a type parameter in the parameter list of the generic type definition or generic method definition where the type parameter was originally defined. The <xref href=\"System.Type.DeclaringType\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Type.DeclaringMethod\" data-throw-if-not-resolved=\"false\"></xref> properties identify the generic type or method definition:</p>\n<ul><li>\n<p>If the <xref href=\"System.Type.DeclaringMethod\" data-throw-if-not-resolved=\"false\"></xref> property returns a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref>, that <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> represents a generic method definition, and the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents a type parameter of that generic method definition.</p>\n</li><li>\n<p>If the <xref href=\"System.Type.DeclaringMethod\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>null</strong>, then the <xref href=\"System.Type.DeclaringType\" data-throw-if-not-resolved=\"false\"></xref> property always returns a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing a generic type definition, and the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents a type parameter of that generic type definition.</p>\n</li></ul>\n<p>To provide the correct context for the value of the <xref href=\"System.Type.GenericParameterPosition\" data-throw-if-not-resolved=\"false\"></xref> property, it is necessary to identify the generic type or method a type parameter belongs to. For example, consider the return value of the generic method <code>GetSomething</code> in the following code: </p>System.Type.GenericParameterPosition#1<p>The type returned by <code>GetSomething</code> depends on the type arguments supplied to class <code>A</code> and to <code>GetSomething</code> itself. You can obtain a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> for <code>GetSomething</code>, and from that you can obtain the return type. When you examine the type parameters of the return type, <xref href=\"System.Type.GenericParameterPosition\" data-throw-if-not-resolved=\"false\"></xref> returns 0 for both. The position of <code>V</code> is 0 because <code>V</code> is the first type parameter in the type parameter list for class <code>A</code>. The position of <code>X</code> is 0 because <code>X</code> is the first type parameter in the type parameter list for <code>GetSomething</code>.</p><p>Calling the <xref href=\"System.Type.GenericParameterPosition\" data-throw-if-not-resolved=\"false\"></xref> property causes an exception if the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> does not represent a type parameter. When you examine the type arguments of an open constructed type, use the <xref href=\"System.Type.IsGenericParameter\" data-throw-if-not-resolved=\"false\"></xref> property to tell which are type parameters and which are types. The <xref href=\"System.Type.IsGenericParameter\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong> for a type parameter; you can then use the <xref href=\"System.Type.GenericParameterPosition\" data-throw-if-not-resolved=\"false\"></xref> method to obtain its position and use the <xref href=\"System.Type.DeclaringMethod\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Type.DeclaringType\" data-throw-if-not-resolved=\"false\"></xref> properties to determine the generic method or type definition that defines it.</p>"
  example:
  - "\n<p>The following example defines a generic class with two type parameters and defines a second generic class that derives from the first class. The derived class's base class has two type arguments: the first is <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>, and the second is a type parameter of the derived type. The example displays information about these generic classes, including the positions reported by the <xref href=\"System.Type.GenericParameterPosition\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Type.HasUnboundGenericParameters#1"
  syntax:
    content: public virtual int GenericParameterPosition { get; }
    content.vb: Public Overridable ReadOnly Property GenericParameterPosition As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current type does not represent a type parameter. That is, <xref href=\"System.Type.IsGenericParameter\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. </p>\n"
  seealso:
  - type: System.Type.MakeGenericType(System.Type[])
    commentId: M:System.Type.MakeGenericType(System.Type[])
  - type: System.Type.ContainsGenericParameters
    commentId: P:System.Type.ContainsGenericParameters
  - type: System.Type.IsGenericParameter
    commentId: P:System.Type.IsGenericParameter
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.GenericTypeArguments
  commentId: P:System.Type.GenericTypeArguments
  id: GenericTypeArguments
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GenericTypeArguments
  fullName: System.Type.GenericTypeArguments
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GenericTypeArguments
    path: src/mscorlib/src/System/Type.cs
    startLine: 1336
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets an array of the generic type arguments for this type.</p>\n"
  remarks: "\n<p>This property gets only the generic type arguments; that is, the types that have been specified for the generic type parameters of the current type. If the current type is a generic type definition, this property returns an empty array. </p>\n<p>If a generic type is used in a generic method or in another generic type, some of its generic type arguments might be generic type parameters of the enclosing method or type. </p>\n<p>To get the generic type parameters of a type that represents a generic type definition, use the <xref href=\"System.Reflection.TypeInfo.GenericTypeParameters\" data-throw-if-not-resolved=\"false\"></xref> property. To get a <xref href=\"System.Reflection.TypeInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object, use the <xref href=\"System.Reflection.IntrospectionExtensions.GetTypeInfo(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> extension method. </p>\n"
  syntax:
    content: public virtual Type[] GenericTypeArguments { get; }
    content.vb: Public Overridable ReadOnly Property GenericTypeArguments As Type()
    parameters: []
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.HasElementType
  commentId: P:System.Type.HasElementType
  id: HasElementType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: HasElementType
  fullName: System.Type.HasElementType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: HasElementType
    path: src/mscorlib/src/System/Type.cs
    startLine: 1240
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> encompasses or refers to another type; that is, whether the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is an array, a pointer, or is passed by reference.</p>\n"
  remarks: "\n<p>For example, Type.GetType(\"Int32[]\").HasElementType returns <strong>true</strong>, but Type.GetType(\"Int32\").HasElementType returns <strong>false</strong>. HasElementType also returns <strong>true</strong> for \"Int32*\" and \"Int32&\".</p>\n<p>If the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns <strong>false</strong>.</p>\n"
  example:
  - "\n<p>The following example returns <strong>true</strong> or <strong>false</strong> depending on whether or not the object is an array, a reference type, or a pointer.</p>Type_HasElementType#1"
  syntax:
    content: public bool HasElementType { get; }
    content.vb: Public ReadOnly Property HasElementType As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Type.HasElementTypeImpl
    commentId: M:System.Type.HasElementTypeImpl
  - type: System.Type.IsArray
    commentId: P:System.Type.IsArray
  - type: System.Type.IsPointer
    commentId: P:System.Type.IsPointer
  - type: System.Type.IsByRef
    commentId: P:System.Type.IsByRef
  - type: System.Type.GetElementType
    commentId: M:System.Type.GetElementType
  - type: System.Type.GetType
    commentId: M:System.Type.GetType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Type.IsArray
  commentId: P:System.Type.IsArray
  id: IsArray
  parent: System.Type
  langs:
  - csharp
  - vb
  name: IsArray
  fullName: System.Type.IsArray
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsArray
    path: src/mscorlib/src/System/Type.cs
    startLine: 1139
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value that indicates whether the type is an array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Type.IsArray\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong> for the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> class. It also returns <strong>false</strong> if the current instance is a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents a collection type or an interface designed to work with collections, such as <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>To check for an array, use code such as: </p>\n<pre><code class=\"c#\">typeof(Array).IsAssignableFrom(type)</code></pre>\n<pre><code class=\"vb\">GetType(Array).IsAssignableFrom(type)</code></pre>\n<p>If the current type represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns <strong>false</strong>.</p>\n<p>This property is read-only.</p>\n"
  example:
  - "\n<p>The following example demonstrates using the<xref href=\"System.Type.IsArray\" data-throw-if-not-resolved=\"false\"></xref> property.</p>System.Type.IsArray#1"
  syntax:
    content: public bool IsArray { get; }
    content.vb: Public ReadOnly Property IsArray As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Type.IsArrayImpl
    commentId: M:System.Type.IsArrayImpl
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Type.IsByRef
  commentId: P:System.Type.IsByRef
  id: IsByRef
  parent: System.Type
  langs:
  - csharp
  - vb
  name: IsByRef
  fullName: System.Type.IsByRef
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsByRef
    path: src/mscorlib/src/System/Type.cs
    startLine: 1211
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is passed by reference.</p>\n"
  remarks: "\n<p>To get to the actual type, dereference the type that was passed by reference, and then call <xref href=\"System.Type.GetElementType\" data-throw-if-not-resolved=\"false\"></xref> on that type.</p>\n"
  example:
  - "\n<p>The following example demonstrates a use of the <strong>IsByRef</strong> property to check whether a specified type is passed by reference. The example defines the class <strong>MyTypeDelegator</strong>, which overrides the <strong>HasElementTypeImpl</strong> method. The main class checks for the <strong>HasElementType</strong> property and displays the element type.</p>Type_HasElementTypeImpl#1"
  syntax:
    content: public bool IsByRef { get; }
    content.vb: Public ReadOnly Property IsByRef As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Type.IsByRefImpl
    commentId: M:System.Type.IsByRefImpl
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Type.IsConstructedGenericType
  commentId: P:System.Type.IsConstructedGenericType
  id: IsConstructedGenericType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: IsConstructedGenericType
  fullName: System.Type.IsConstructedGenericType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsConstructedGenericType
    path: src/mscorlib/src/System/Type.cs
    startLine: 1159
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value that indicates whether this object represents a constructed generic type. You can create instances of a constructed generic type. </p>\n"
  remarks: "\n<p>A constructed generic type has had explicit types supplied for all of its generic type parameters. It is also referred to as a closed generic type. </p>\n<p>When this property is <strong>true</strong>, you can create instances of the current type; when it is <strong>false</strong>, you can't. </p>\n"
  syntax:
    content: public virtual bool IsConstructedGenericType { get; }
    content.vb: Public Overridable ReadOnly Property IsConstructedGenericType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.IsGenericParameter
  commentId: P:System.Type.IsGenericParameter
  id: IsGenericParameter
  parent: System.Type
  langs:
  - csharp
  - vb
  name: IsGenericParameter
  fullName: System.Type.IsGenericParameter
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsGenericParameter
    path: src/mscorlib/src/System/Type.cs
    startLine: 1165
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> represents a type parameter in the definition of a generic type or method.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects that represent generic type parameters can be obtained by calling the <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method of a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents a generic type definition, or the <xref href=\"System.Reflection.MethodInfo.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method of a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents a generic method definition.</p>\n<ul><li>\n<p>For a generic type or method definition, the <xref href=\"System.Type.IsGenericParameter\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong> for every element of the resulting array.</p>\n</li><li>\n<p>For a closed constructed type or method, the <xref href=\"System.Type.IsGenericParameter\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong> for every element of the array returned by the <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li><li>\n<p>For an open constructed type or method, some elements of the array might be specific types and others might be type parameters. <xref href=\"System.Type.IsGenericParameter\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong> for the types and <strong>true</strong> for the type parameters. The code example for the <xref href=\"System.Type.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property demonstrates a generic class with a mixture of types and type parameters.</p>\n</li></ul>\n<p>For a list of the invariant conditions for terms used in generic reflection, see the <xref href=\"System.Type.IsGenericType\" data-throw-if-not-resolved=\"false\"></xref> property remarks. </p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Type.IsGenericParameter\" data-throw-if-not-resolved=\"false\"></xref> property to test for generic type parameters in a generic type.</p>System.Type.IsGenericParameter#2"
  syntax:
    content: public virtual bool IsGenericParameter { get; }
    content.vb: Public Overridable ReadOnly Property IsGenericParameter As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Type.GenericParameterPosition
    commentId: P:System.Type.GenericParameterPosition
  - type: System.Type.GetGenericArguments
    commentId: M:System.Type.GetGenericArguments
  - type: System.Type.GetGenericParameterConstraints
    commentId: M:System.Type.GetGenericParameterConstraints
  - type: System.Type.GenericParameterAttributes
    commentId: P:System.Type.GenericParameterAttributes
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.IsNested
  commentId: P:System.Type.IsNested
  id: IsNested
  parent: System.Type
  langs:
  - csharp
  - vb
  name: IsNested
  fullName: System.Type.IsNested
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsNested
    path: src/mscorlib/src/System/Type.cs
    startLine: 937
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents a type whose definition is nested inside the definition of another type.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Type.IsNested\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong> for all nested types, regardless of visibility. To test for nesting and visibility at the same time, use the related properties <xref href=\"System.Type.IsNestedAssembly\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Type.IsNestedFamily\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Type.IsNestedFamANDAssem\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Type.IsNestedFamORAssem\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Type.IsNestedPrivate\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Type.IsNestedPublic\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Reflection.TypeAttributes.VisibilityMask\" data-throw-if-not-resolved=\"false\"></xref> enumeration member selects the visibility attributes for a type.</p>\n"
  example:
  - "\n<p>The following example creates an outer class with a number of nested classes that have various types of visibility. It then retrieves the value of a number of visibility-related <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> properties for the parent type and each of its nested types. </p>System.Type.IsNestedFamAndAssem#1"
  syntax:
    content: public bool IsNested { get; }
    content.vb: Public ReadOnly Property IsNested As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Type.IsNestedAssembly
    commentId: P:System.Type.IsNestedAssembly
  - type: System.Type.IsNestedFamily
    commentId: P:System.Type.IsNestedFamily
  - type: System.Type.IsNestedFamANDAssem
    commentId: P:System.Type.IsNestedFamANDAssem
  - type: System.Type.IsNestedFamORAssem
    commentId: P:System.Type.IsNestedFamORAssem
  - type: System.Type.IsNestedPrivate
    commentId: P:System.Type.IsNestedPrivate
  - type: System.Type.IsNestedPublic
    commentId: P:System.Type.IsNestedPublic
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Type.IsPointer
  commentId: P:System.Type.IsPointer
  id: IsPointer
  parent: System.Type
  langs:
  - csharp
  - vb
  name: IsPointer
  fullName: System.Type.IsPointer
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsPointer
    path: src/mscorlib/src/System/Type.cs
    startLine: 1215
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> is a pointer.</p>\n"
  remarks: "\n<p>If the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> represents a generic type, or a type parameter in the definition of a generic type or generic method, this property always returns <strong>false</strong>.</p>\n<p>This property is read-only.</p>\n"
  example:
  - "\n<p>The following example shows a use of the <strong>IsPointer</strong> property.</p>Type_HasElementTypeImpl#1"
  syntax:
    content: public bool IsPointer { get; }
    content.vb: Public ReadOnly Property IsPointer As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Type.IsPointerImpl
    commentId: M:System.Type.IsPointerImpl
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Type.Namespace
  commentId: P:System.Type.Namespace
  id: Namespace
  parent: System.Type
  langs:
  - csharp
  - vb
  name: Namespace
  fullName: System.Type.Namespace
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Namespace
    path: src/mscorlib/src/System/Type.cs
    startLine: 361
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the namespace of the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>A namespace is a logical design-time naming convenience, used mainly to define scope in an application and organize classes and other types in a single hierarchical structure. From the viewpoint of the runtime, there are no namespaces.</p>\n<p>If the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> represents a constructed generic type, this property returns the namespace that contains the generic type definition. Similarly, if the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> represents a generic parameter <em>T</em>, this property returns the namespace that contains the generic type definition that defines <em>T</em>.</p>\n<p>If the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents a generic parameter, this property returns <strong>null</strong>.</p>\n"
  example:
  - "\n<p>This following example demonstrates a use of the <strong>Namespace</strong> and <xref href=\"System.Type.Module\" data-throw-if-not-resolved=\"false\"></xref> properties and the <xref href=\"System.Type.ToString\" data-throw-if-not-resolved=\"false\"></xref> method of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>Type_ToString#1"
  syntax:
    content: public abstract string Namespace { get; }
    content.vb: Public MustOverride ReadOnly Property Namespace As String
    parameters: []
    return:
      type: System.String
  seealso:
  - type: System.String
    commentId: T:System.String
  - type: System.Type.FullName
    commentId: P:System.Type.FullName
  - type: System.Type.AssemblyQualifiedName
    commentId: P:System.Type.AssemblyQualifiedName
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.TypeHandle
  commentId: P:System.Type.TypeHandle
  id: TypeHandle
  parent: System.Type
  langs:
  - csharp
  - vb
  name: TypeHandle
  fullName: System.Type.TypeHandle
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TypeHandle
    path: src/mscorlib/src/System/Type.cs
    startLine: 323
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the handle for the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<strong>TypeHandle</strong> encapsulates a pointer to an internal data structure that represents the type. This handle is unique during the process lifetime. The handle is valid only in the application domain in which it was obtained.</p>\n"
  example:
  - "\n<p>The following example returns the handle of the corresponding type and passes the handle to a method that gets the type from the handle and displays it.</p>Type_TypeHandle#1"
  syntax:
    content: public virtual RuntimeTypeHandle TypeHandle { get; }
    content.vb: Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle
    parameters: []
    return:
      type: System.RuntimeTypeHandle
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The .NET Compact Framework does not currently support this property.</p>\n"
  seealso:
  - type: System.RuntimeTypeHandle
    commentId: T:System.RuntimeTypeHandle
  - type: System.Type.GetTypeHandle(System.Object)
    commentId: M:System.Type.GetTypeHandle(System.Object)
  - type: System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
    commentId: M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Type.Equals(System.Object)
  commentId: M:System.Type.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Type.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Type.cs
    startLine: 1761
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Type.Equals(System.Type)
  commentId: M:System.Type.Equals(System.Type)
  id: Equals(System.Type)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: Equals(Type)
  fullName: System.Type.Equals(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Type.cs
    startLine: 1771
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public bool Equals(Type o)
    content.vb: Public Function Equals(o As Type) As Boolean
    parameters:
    - id: o
      type: System.Type
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Type.GetArrayRank
  commentId: M:System.Type.GetArrayRank
  id: GetArrayRank
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetArrayRank()
  fullName: System.Type.GetArrayRank()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetArrayRank
    path: src/mscorlib/src/System/Type.cs
    startLine: 373
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public virtual int GetArrayRank()
    content.vb: Public Overridable Function GetArrayRank As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.GetElementType
  commentId: M:System.Type.GetElementType
  id: GetElementType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetElementType()
  fullName: System.Type.GetElementType()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetElementType
    path: src/mscorlib/src/System/Type.cs
    startLine: 1327
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public abstract Type GetElementType()
    content.vb: Public MustOverride Function GetElementType As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.GetGenericTypeDefinition
  commentId: M:System.Type.GetGenericTypeDefinition
  id: GetGenericTypeDefinition
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetGenericTypeDefinition()
  fullName: System.Type.GetGenericTypeDefinition()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetGenericTypeDefinition
    path: src/mscorlib/src/System/Type.cs
    startLine: 1348
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public virtual Type GetGenericTypeDefinition()
    content.vb: Public Overridable Function GetGenericTypeDefinition As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.GetHashCode
  commentId: M:System.Type.GetHashCode
  id: GetHashCode
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Type.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Type.cs
    startLine: 1796
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Type.GetType(System.String)
  commentId: M:System.Type.GetType(System.String)
  id: GetType(System.String)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetType(String)
  fullName: System.Type.GetType(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetType
    path: src/mscorlib/src/System/Type.cs
    startLine: 95
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static Type GetType(string typeName)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function GetType(typeName As String) As Type
    parameters:
    - id: typeName
      type: System.String
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Type.GetType(System.String,System.Boolean)
  commentId: M:System.Type.GetType(System.String,System.Boolean)
  id: GetType(System.String,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetType(String, Boolean)
  fullName: System.Type.GetType(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetType
    path: src/mscorlib/src/System/Type.cs
    startLine: 89
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static Type GetType(string typeName, bool throwOnError)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function GetType(typeName As String, throwOnError As Boolean) As Type
    parameters:
    - id: typeName
      type: System.String
    - id: throwOnError
      type: System.Boolean
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Type.GetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Type.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetType(String, Boolean, Boolean)
  fullName: System.Type.GetType(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetType
    path: src/mscorlib/src/System/Type.cs
    startLine: 83
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public static Type GetType(string typeName, bool throwOnError, bool ignoreCase)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function GetType(typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type
    parameters:
    - id: typeName
      type: System.String
    - id: throwOnError
      type: System.Boolean
    - id: ignoreCase
      type: System.Boolean
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Type.GetTypeCode(System.Type)
  commentId: M:System.Type.GetTypeCode(System.Type)
  id: GetTypeCode(System.Type)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetTypeCode(Type)
  fullName: System.Type.GetTypeCode(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetTypeCode
    path: src/mscorlib/src/System/Type.cs
    startLine: 227
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public static TypeCode GetTypeCode(Type type)
    content.vb: Public Shared Function GetTypeCode(type As Type) As TypeCode
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.TypeCode
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  commentId: M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  id: GetTypeFromHandle(System.RuntimeTypeHandle)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetTypeFromHandle(RuntimeTypeHandle)
  fullName: System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static Type GetTypeFromHandle(RuntimeTypeHandle handle)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function GetTypeFromHandle(handle As RuntimeTypeHandle) As Type
    parameters:
    - id: handle
      type: System.RuntimeTypeHandle
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Type.MakeArrayType
  commentId: M:System.Type.MakeArrayType
  id: MakeArrayType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: MakeArrayType()
  fullName: System.Type.MakeArrayType()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MakeArrayType
    path: src/mscorlib/src/System/Type.cs
    startLine: 146
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public virtual Type MakeArrayType()
    content.vb: Public Overridable Function MakeArrayType As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.MakeArrayType(System.Int32)
  commentId: M:System.Type.MakeArrayType(System.Int32)
  id: MakeArrayType(System.Int32)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: MakeArrayType(Int32)
  fullName: System.Type.MakeArrayType(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MakeArrayType
    path: src/mscorlib/src/System/Type.cs
    startLine: 147
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public virtual Type MakeArrayType(int rank)
    content.vb: Public Overridable Function MakeArrayType(rank As Integer) As Type
    parameters:
    - id: rank
      type: System.Int32
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.MakeByRefType
  commentId: M:System.Type.MakeByRefType
  id: MakeByRefType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: MakeByRefType()
  fullName: System.Type.MakeByRefType()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MakeByRefType
    path: src/mscorlib/src/System/Type.cs
    startLine: 145
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public virtual Type MakeByRefType()
    content.vb: Public Overridable Function MakeByRefType As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.MakeGenericType(System.Type[])
  commentId: M:System.Type.MakeGenericType(System.Type[])
  id: MakeGenericType(System.Type[])
  parent: System.Type
  langs:
  - csharp
  - vb
  name: MakeGenericType(Type[])
  fullName: System.Type.MakeGenericType(System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MakeGenericType
    path: src/mscorlib/src/System/Type.cs
    startLine: 1304
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public virtual Type MakeGenericType(params Type[] typeArguments)
    content.vb: Public Overridable Function MakeGenericType(ParamArray typeArguments As Type()) As Type
    parameters:
    - id: typeArguments
      type: System.Type[]
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Type.MakeGenericType(System.Type())
  name.vb: MakeGenericType(Type())
- uid: System.Type.MakePointerType
  commentId: M:System.Type.MakePointerType
  id: MakePointerType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: MakePointerType()
  fullName: System.Type.MakePointerType()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MakePointerType
    path: src/mscorlib/src/System/Type.cs
    startLine: 143
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public virtual Type MakePointerType()
    content.vb: Public Overridable Function MakePointerType As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.ToString
  commentId: M:System.Type.ToString
  id: ToString
  parent: System.Type
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Type.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Type.cs
    startLine: 1739
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Type.DeclaringType
  commentId: P:System.Type.DeclaringType
  id: DeclaringType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: DeclaringType
  fullName: System.Type.DeclaringType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaringType
    path: src/mscorlib/src/System/Type.cs
    startLine: 65
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the type that declares the current nested type or generic type parameter.</p>\n"
  remarks: "\n<p>If the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents a type parameter of a generic type, this property returns the generic type definition.</p>\n<p>If the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents a type parameter of a generic method, this property returns the type that contains the generic method definition. If the type is generic, the generic type definition is returned. That is, the following code returns the generic type definition of the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> generic class, which contains the <xref href=\"System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})\" data-throw-if-not-resolved=\"false\"></xref> generic method:</p>System.Type.DeclaringType#1<p>If the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> represents a type parameter in the definition of a generic type or generic method, the <xref href=\"System.Type.DeclaringType\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Type.DeclaringMethod\" data-throw-if-not-resolved=\"false\"></xref> properties identify the generic type definition or generic method definition where the generic type parameter was originally defined:</p><ul><li><p>If the <xref href=\"System.Type.DeclaringMethod\" data-throw-if-not-resolved=\"false\"></xref> property returns a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref>, that <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> represents a generic method definition, and the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents a type parameter of that generic method definition.</p></li><li><p>If the <xref href=\"System.Type.DeclaringMethod\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>null</strong>, then the <xref href=\"System.Type.DeclaringType\" data-throw-if-not-resolved=\"false\"></xref> property always returns a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing a generic type definition, and the current <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object represents a type parameter of that generic type definition.</p></li><li><p>Getting the <xref href=\"System.Type.DeclaringType\" data-throw-if-not-resolved=\"false\"></xref> property on a type whose <xref href=\"System.Type.IsGenericParameter\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p></li></ul>"
  example:
  - "\n<p>This example displays the declaring type of a method in a derived class.</p>Classic Type.DeclaringType Example#1"
  syntax:
    content: public override Type DeclaringType { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: System.Type
  seealso:
  - type: System.Reflection.MemberInfo
    commentId: T:System.Reflection.MemberInfo
  - type: System.Type.ReflectedType
    commentId: P:System.Type.ReflectedType
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.Name
  commentId: P:System.Type.Name
  id: Name
  parent: System.Type
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Type.Name
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Runtime/ref/System.Runtime.Manual.cs
    startLine: 43
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public abstract string Name { get; }
    content.vb: Public MustOverride ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  fullName: System.TypeCode
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
