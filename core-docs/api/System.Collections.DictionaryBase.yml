items:
- uid: System.Collections.DictionaryBase
  commentId: T:System.Collections.DictionaryBase
  id: DictionaryBase
  parent: System.Collections
  children:
  - System.Collections.DictionaryBase.#ctor
  - System.Collections.DictionaryBase.Clear
  - System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
  - System.Collections.DictionaryBase.Count
  - System.Collections.DictionaryBase.Dictionary
  - System.Collections.DictionaryBase.GetEnumerator
  - System.Collections.DictionaryBase.InnerHashtable
  - System.Collections.DictionaryBase.OnClear
  - System.Collections.DictionaryBase.OnClearComplete
  - System.Collections.DictionaryBase.OnGet(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  - System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  - System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  - System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize
  - System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Keys
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Values
  - System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: DictionaryBase
  fullName: System.Collections.DictionaryBase
  type: Class
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DictionaryBase
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 17
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Provides the <strong>abstract</strong> base class for a strongly typed collection of key/value pairs.</p>\n"
  remarks: "\n<p>The foreach statement of the C# language (for each in Visual Basic) returns an object of the type of the elements in the collection. Since each element of the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> is a key/value pair, the element type is not the type of the key or the type of the value. Instead, the element type is <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <strong>foreach</strong> statement is a wrapper around the enumerator, which only allows reading from, not writing to, the collection.</p>\n<p>Because keys can be inherited and their behavior changed, their absolute uniqueness cannot be guaranteed by comparisons using the <xref href=\"System.Type.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: 'public abstract class DictionaryBase : IDictionary, ICollection, IEnumerable'
    content.vb: >-
      Public MustInherit Class DictionaryBase
          Implements IDictionary, ICollection, IEnumerable
  seealso:
  - type: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Collections.Generic
    commentId: N:System.Collections.Generic
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Collections.DictionaryBase.#ctor
  commentId: M:System.Collections.DictionaryBase.#ctor
  id: '#ctor'
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: DictionaryBase()
  fullName: System.Collections.DictionaryBase.DictionaryBase()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 114
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: protected DictionaryBase()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Collections.DictionaryBase.Count
  commentId: P:System.Collections.DictionaryBase.Count
  id: Count
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.DictionaryBase.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 36
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.DictionaryBase.Dictionary
  commentId: P:System.Collections.DictionaryBase.Dictionary
  id: Dictionary
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: Dictionary
  fullName: System.Collections.DictionaryBase.Dictionary
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dictionary
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 31
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the list of elements contained in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.DictionaryBase.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.DictionaryBase.InnerHashtable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: protected IDictionary Dictionary { get; }
    content.vb: Protected ReadOnly Property Dictionary As IDictionary
    parameters: []
    return:
      type: System.Collections.IDictionary
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Collections.DictionaryBase.InnerHashtable
  commentId: P:System.Collections.DictionaryBase.InnerHashtable
  id: InnerHashtable
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: InnerHashtable
  fullName: System.Collections.DictionaryBase.InnerHashtable
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InnerHashtable
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 21
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the list of elements contained in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.DictionaryBase.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.DictionaryBase.InnerHashtable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: protected Hashtable InnerHashtable { get; }
    content.vb: Protected ReadOnly Property InnerHashtable As Hashtable
    parameters: []
    return:
      type: System.Collections.Hashtable
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 52
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether access to a <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object is synchronized (thread safe).</p>\n"
  remarks: "\n<p>A <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object is not synchronized. Derived classes can provide a synchronized version of the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class using the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property during the entire enumeration. </p>System.Collections.DictionaryBase#3<p>Retrieving the value of this property is an O(1) operation.</p>"
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
    commentId: M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  - type: System.Collections.ICollection.SyncRoot
    commentId: P:System.Collections.ICollection.SyncRoot
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 62
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an object that can be used to synchronize access to a <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Derived classes can provide their own synchronized version of the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class using the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property. The synchronizing code must perform operations on the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object, not directly on the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property during the entire enumeration. </p>System.Collections.DictionaryBase#3<p>Retrieving the value of this property is an O(1) operation.</p>"
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  seealso:
  - type: System.Collections.ICollection.IsSynchronized
    commentId: P:System.Collections.ICollection.IsSynchronized
  - type: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
    commentId: M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize
  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.IsFixedSize
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.IsFixedSize
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 47
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether a <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object has a fixed size.</p>\n"
  remarks: "\n<p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but does allow the modification of existing elements.</p>\n<p>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: bool IDictionary.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsFixedSize As Boolean Implements IDictionary.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IDictionary.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly
  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.IsReadOnly
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.IsReadOnly
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 42
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether a <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n"
  remarks: "\n<p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n<p>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: bool IDictionary.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsReadOnly As Boolean Implements IDictionary.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IDictionary.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)
  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.Item[Object]
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.this[]
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 77
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets or sets the value associated with the specified key.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[key]</code>.</p>\n<p>You can also use the <xref href=\"System.Collections.IDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>; for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>. However, if the specified key already exists in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.IDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.IDictionary.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: object IDictionary.this[object key] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Item(key As Object) As Object Implements IDictionary.this
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is set and the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The property is set, <em>key</em> does not exist in the collection, and the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.IDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  implements:
  - System.Collections.IDictionary.Item(System.Object)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Collections.DictionaryBase.System.Collections.IDictionary.Item(System.Object)
  name.vb: System.Collections.IDictionary.Item(Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Keys
  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.Keys
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Keys
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Keys
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 57
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the keys in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The order of the keys in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object is unspecified, but is the same order as the associated values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.Collections.IDictionary.Values\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the keys in the original <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object. Therefore, changes to the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> property of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: ICollection IDictionary.Keys { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Keys As ICollection Implements IDictionary.Keys
    parameters: []
    return:
      type: System.Collections.ICollection
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.IDictionary.Values
    commentId: P:System.Collections.IDictionary.Values
  implements:
  - System.Collections.IDictionary.Keys
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.Keys
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Values
  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values
  id: System#Collections#IDictionary#Values
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.Values
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Values
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Values
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 67
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the values in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The order of the values in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object is unspecified, but is the same order as the associated keys in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object returned by the <xref href=\"System.Collections.IDictionary.Keys\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is not a static copy; instead, the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> refers back to the values in the original <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object. Therefore, changes to the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> continue to be reflected in the returned <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> property of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: ICollection IDictionary.Values { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Values As ICollection Implements IDictionary.Values
    parameters: []
    return:
      type: System.Collections.ICollection
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.IDictionary.Keys
    commentId: P:System.Collections.IDictionary.Keys
  implements:
  - System.Collections.IDictionary.Values
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.Values
- uid: System.Collections.DictionaryBase.Clear
  commentId: M:System.Collections.DictionaryBase.Clear
  id: Clear
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.DictionaryBase.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 137
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Clears the contents of the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.DictionaryBase.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero, and references to other objects from elements of the collection are also released.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.DictionaryBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  implements:
  - System.Collections.IDictionary.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Collections.DictionaryBase.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 72
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> elements to a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  remarks: "\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.DictionaryBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void CopyTo(Array array, int index)
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  seealso:
  - type: System.Array
    commentId: T:System.Array
  - type: System.Collections.DictionaryEntry
    commentId: T:System.Collections.DictionaryEntry
  - type: System.Collections.DictionaryBase.GetEnumerator
    commentId: M:System.Collections.DictionaryBase.GetEnumerator
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.DictionaryBase.GetEnumerator
  commentId: M:System.Collections.DictionaryBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.DictionaryBase.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 165
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: public IDictionaryEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IDictionaryEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
  seealso:
  - type: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IDictionary.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.DictionaryBase.OnClear
  commentId: M:System.Collections.DictionaryBase.OnClear
  id: OnClear
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnClear()
  fullName: System.Collections.DictionaryBase.OnClear()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnClear
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 188
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes before clearing the contents of the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.DictionaryBase.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.DictionaryBase.InnerHashtable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnClear()
    content.vb: Protected Overridable Sub OnClear
  seealso:
  - type: System.Collections.DictionaryBase.OnClearComplete
    commentId: M:System.Collections.DictionaryBase.OnClearComplete
  - type: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnClearComplete
  commentId: M:System.Collections.DictionaryBase.OnClearComplete
  id: OnClearComplete
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnClearComplete()
  fullName: System.Collections.DictionaryBase.OnClearComplete()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnClearComplete
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 208
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after clearing the contents of the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.DictionaryBase.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.DictionaryBase.InnerHashtable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnClearComplete()
    content.vb: Protected Overridable Sub OnClearComplete
  seealso:
  - type: System.Collections.DictionaryBase.OnClear
    commentId: M:System.Collections.DictionaryBase.OnClear
  - type: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnGet(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)
  id: OnGet(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnGet(Object, Object)
  fullName: System.Collections.DictionaryBase.OnGet(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnGet
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 175
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the element with the specified key and value in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method returns <em>currentValue</em>. It is intended to be overridden by a derived class to perform additional action when the specified element is retrieved.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.DictionaryBase.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.DictionaryBase.InnerHashtable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual object OnGet(object key, object currentValue)
    content.vb: Protected Overridable Function OnGet(key As Object, currentValue As Object) As Object
    parameters:
    - id: key
      type: System.Object
    - id: currentValue
      type: System.Object
    return:
      type: System.Object
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  id: OnInsert(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnInsert(Object, Object)
  fullName: System.Collections.DictionaryBase.OnInsert(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnInsert
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 184
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes before inserting a new element into the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.DictionaryBase.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.DictionaryBase.InnerHashtable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: protected virtual void OnInsert(object key, object value)
    content.vb: Protected Overridable Sub OnInsert(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
    - id: value
      type: System.Object
  seealso:
  - type: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  - type: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  - type: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  id: OnInsertComplete(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnInsertComplete(Object, Object)
  fullName: System.Collections.DictionaryBase.OnInsertComplete(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnInsertComplete
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 204
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after inserting a new element into the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.DictionaryBase.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.DictionaryBase.InnerHashtable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnInsertComplete(object key, object value)
    content.vb: Protected Overridable Sub OnInsertComplete(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
    - id: value
      type: System.Object
  seealso:
  - type: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  - type: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  id: OnRemove(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnRemove(Object, Object)
  fullName: System.Collections.DictionaryBase.OnRemove(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnRemove
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 192
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes before removing an element from the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.DictionaryBase.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.DictionaryBase.InnerHashtable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: protected virtual void OnRemove(object key, object value)
    content.vb: Protected Overridable Sub OnRemove(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
    - id: value
      type: System.Object
  seealso:
  - type: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  - type: System.Collections.DictionaryBase.OnClear
    commentId: M:System.Collections.DictionaryBase.OnClear
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  id: OnRemoveComplete(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnRemoveComplete(Object, Object)
  fullName: System.Collections.DictionaryBase.OnRemoveComplete(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnRemoveComplete
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 212
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after removing an element from the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.DictionaryBase.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.DictionaryBase.InnerHashtable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnRemoveComplete(object key, object value)
    content.vb: Protected Overridable Sub OnRemoveComplete(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
    - id: value
      type: System.Object
  seealso:
  - type: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  - type: System.Collections.DictionaryBase.OnClearComplete
    commentId: M:System.Collections.DictionaryBase.OnClearComplete
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  id: OnSet(System.Object,System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnSet(Object, Object, Object)
  fullName: System.Collections.DictionaryBase.OnSet(System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnSet
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 180
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes before setting a value in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.DictionaryBase.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.DictionaryBase.InnerHashtable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: protected virtual void OnSet(object key, object oldValue, object newValue)
    content.vb: Protected Overridable Sub OnSet(key As Object, oldValue As Object, newValue As Object)
    parameters:
    - id: key
      type: System.Object
    - id: oldValue
      type: System.Object
    - id: newValue
      type: System.Object
  seealso:
  - type: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  - type: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  - type: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  id: OnSetComplete(System.Object,System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnSetComplete(Object, Object, Object)
  fullName: System.Collections.DictionaryBase.OnSetComplete(System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnSetComplete
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 200
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after setting a value in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.DictionaryBase.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.DictionaryBase.InnerHashtable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnSetComplete(object key, object oldValue, object newValue)
    content.vb: Protected Overridable Sub OnSetComplete(key As Object, oldValue As Object, newValue As Object)
    parameters:
    - id: key
      type: System.Object
    - id: oldValue
      type: System.Object
    - id: newValue
      type: System.Object
  seealso:
  - type: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  - type: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  id: OnValidate(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnValidate(Object, Object)
  fullName: System.Collections.DictionaryBase.OnValidate(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnValidate
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 196
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes when validating the element with the specified key and value.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action when the specified element is validated.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.DictionaryBase.Dictionary\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.DictionaryBase.InnerHashtable\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: protected virtual void OnValidate(object key, object value)
    content.vb: Protected Overridable Sub OnValidate(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
    - id: value
      type: System.Object
  seealso:
  - type: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  - type: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.Add(Object, Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Add
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 121
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Adds an element with the specified key and value into the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>An object that has no correlation between its state and its hash code value should typically not be used as the key. For example, <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects are better than <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> objects for use as keys.</p>\n<p>You can also use the <xref href=\"System.Collections.IDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property to add new elements by setting the value of a key that does not exist in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>; for example, <code>myCollection[\"myNonexistentKey\"] = myValue</code>. However, if the specified key already exists in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>, setting the <xref href=\"System.Collections.IDictionary.Item(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> property overwrites the old value. In contrast, the <xref href=\"System.Collections.IDictionary.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method does not modify existing elements.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: void IDictionary.Add(object key, object value)
    content.vb: Sub System.Collections.IDictionary.Add(key As Object, value As Object) Implements IDictionary.Add
    parameters:
    - id: key
      type: System.Object
    - id: value
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element with the same key already exists in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.IDictionary.Remove(System.Object)
    commentId: M:System.Collections.IDictionary.Remove(System.Object)
  - type: System.Collections.IDictionary.Item(System.Object)
    commentId: P:System.Collections.IDictionary.Item(System.Object)
  - type: System.Collections.IDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  implements:
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)
  commentId: M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.Contains(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Contains
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 116
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> contains a specific key.</p>\n"
  remarks: "\n<p>This method is an O(1) operation.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>key</em> to determine whether <em>item</em> exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>key</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: bool IDictionary.Contains(object key)
    content.vb: Function System.Collections.IDictionary.Contains(key As Object) As Boolean Implements IDictionary.Contains
    parameters:
    - id: key
      type: System.Object
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  implements:
  - System.Collections.IDictionary.Contains(System.Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)
  commentId: M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.Remove(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Remove
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 144
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the element with the specified key from the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> does not contain an element with the specified key, the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. No exception is thrown.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a dictionary of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> keys and values that have a <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> of 5 characters or less.</p>System.Collections.DictionaryBase#1"
  syntax:
    content: void IDictionary.Remove(object key)
    content.vb: Sub System.Collections.IDictionary.Remove(key As Object) Implements IDictionary.Remove
    parameters:
    - id: key
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - type: System.Collections.IDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  - type: System.Collections.IDictionary.Remove(System.Object)
    commentId: M:System.Collections.IDictionary.Remove(System.Object)
  implements:
  - System.Collections.IDictionary.Remove(System.Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
- uid: System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.DictionaryBase.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 170
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position. At this position, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  seealso:
  - type: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IDictionary.IsFixedSize
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsFixedSize
  fullName: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.IDictionary.IsReadOnly
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsReadOnly
  fullName: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.IDictionary.Item(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Item[Object]
  fullName: System.Collections.IDictionary.Item[System.Object]
  fullname.vb: System.Collections.IDictionary.Item(System.Object)
  name.vb: Item(Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    fullName: '['
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Keys
  parent: System.Collections.IDictionary
  isExternal: true
  name: Keys
  fullName: System.Collections.IDictionary.Keys
- uid: System.Collections.IDictionary.Values
  parent: System.Collections.IDictionary
  isExternal: true
  name: Values
  fullName: System.Collections.IDictionary.Values
- uid: System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: true
  name: Clear()
  fullName: System.Collections.IDictionary.Clear()
  spec.csharp:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IDictionary.GetEnumerator
  parent: System.Collections.IDictionary
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Add(Object, Object)
  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Contains(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Contains(Object)
  fullName: System.Collections.IDictionary.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Remove(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Remove(Object)
  fullName: System.Collections.IDictionary.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
