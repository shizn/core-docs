items:
- uid: System.Collections.Generic.HashSet`1
  commentId: T:System.Collections.Generic.HashSet`1
  id: HashSet`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.HashSet`1.#ctor
  - System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Generic.HashSet`1.Add(`0)
  - System.Collections.Generic.HashSet`1.Clear
  - System.Collections.Generic.HashSet`1.Comparer
  - System.Collections.Generic.HashSet`1.Contains(`0)
  - System.Collections.Generic.HashSet`1.CopyTo(`0[])
  - System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  - System.Collections.Generic.HashSet`1.Count
  - System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.GetEnumerator
  - System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.Remove(`0)
  - System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  - System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  - System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  - System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Generic.HashSet`1.TrimExcess
  - System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  langs:
  - csharp
  - vb
  name: HashSet<T>
  fullName: System.Collections.Generic.HashSet<T>
  type: Class
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashSet
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 51
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Represents a set of values.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#System.Core/System/Collections/Generic/HashSet.cs#2d265edc718b158b\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#System.Core/System/Collections/Generic/HashSet.cs#2d265edc718b158b\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>The <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> class provides high-performance set operations. A set is a collection that contains no duplicate elements, and whose elements are in no particular order.</p>\n<p>\n<xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Collections.Generic.IReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> interface starting with the .NET Framework 4.6; in previous versions of the .NET Framework, the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> class did not implement this interface. </p>\n<p>The capacity of a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the object can hold. A <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object's capacity automatically increases as elements are added to the object.</p>\n<p>The <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> class is based on the model of mathematical sets and provides high-performance set operations similar to accessing the keys of the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> collections. In simple terms, the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> class can be thought of as a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> collection without values.</p>\n<p>A <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection is not sorted and cannot contain duplicate elements. If order or element duplication is more important than performance for your application, consider using the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> class together with the <xref href=\"System.Collections.Generic.List`1.Sort\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>\n<xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> provides many mathematical set operations, such as set addition (unions) and set subtraction. The following table lists the provided <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> operations and their mathematical equivalents.</p>\n<p>HashSet(Of T) operation</p>\n<p>Mathematical equivalent</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Union or set addition</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Intersection</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Set subtraction</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Symmetric difference</p>\n</td></tr></tbody></table>\n<p>In addition to the listed set operations, the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> class also provides methods for determining set equality, overlap of sets, and whether a set is a subset or superset of another set.</p>\n<p>For very large <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> objects, you can increase the maximum capacity to 2 billion elements on a 64-bit system by setting the <strong>enabled</strong> attribute of the  configuration element to <strong>true</strong> in the run-time environment.</p>\n<p>Starting with the .NET FrameworkÂ 4, the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> class implements the <xref href=\"System.Collections.Generic.ISet`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - <p>The following example demonstrates how to merge two disparate sets. This example creates two <xref href="System.Collections.Generic.HashSet`1" data-throw-if-not-resolved="false"></xref> objects, and populates them with even and odd numbers, respectively. A third <xref href="System.Collections.Generic.HashSet`1" data-throw-if-not-resolved="false"></xref> object is created from the set that contains the even numbers. The example then calls the <xref href="System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})" data-throw-if-not-resolved="false"></xref> method, which adds the odd number set to the third set.</p>System.Collections.Generic.HashSet_UnionWith#01
  syntax:
    content: >-
      [DebuggerTypeProxy(typeof (ICollectionDebugView<>))]

      [DebuggerDisplay("Count = {Count}")]

      [SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification = "By design")]

      public class HashSet<T> : ISet<T>, ICollection<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable
    content.vb: >-
      <DebuggerTypeProxy(GetType(ICollectionDebugView(Of )))>

      <DebuggerDisplay("Count = {Count}")>

      <SuppressMessage("Microsoft.Naming", "CA1710:IdentifiersShouldHaveCorrectSuffix", Justification:="By design")>

      Public Class HashSet(Of T)
          Implements ISet(Of T), ICollection(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
  seealso:
  - type: System.Collections.Generic.SortedSet`1
    commentId: T:System.Collections.Generic.SortedSet`1
  - type: System.Collections.Generic.ISet`1
    commentId: T:System.Collections.Generic.ISet`1
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.ICollection{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.Generic.ISet{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.HashSet(Of T)
  name.vb: HashSet(Of T)
- uid: System.Collections.Generic.HashSet`1.#ctor
  commentId: M:System.Collections.Generic.HashSet`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: HashSet()
  fullName: System.Collections.Generic.HashSet<T>.HashSet()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 77
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and uses the default equality comparer for the set type.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the object can hold. A <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object's capacity automatically increases as elements are added to the object.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create and populate two <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> objects. This example is part of a larger example provided for the <xref href=\"System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Collections.Generic.HashSet_UnionWith#03"
  syntax:
    content: public HashSet()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).HashSet()
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: HashSet(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 95
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> class that uses the default equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the object can hold. A <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object's capacity automatically increases as elements are added to the object.</p>\n<p>If <em>collection</em> contains duplicates, the set will contain one of each unique element. No exception will be thrown. Therefore, the size of the resulting set is not identical to the size of <em>collection</em>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in the <em>collection</em> parameter.</p>\n"
  example:
  - "\n<p>The following example shows how to create a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection from an existing set. In this example, two sets are created with even and odd integers, respectively. A third <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is then created from the even integer set.</p>System.Collections.Generic.HashSet_UnionWith#02"
  syntax:
    content: public HashSet(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).HashSet(System.Collections.Generic.IEnumerable(Of T))
  name.vb: HashSet(IEnumerable(Of T))
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: HashSet(IEnumerable<T>, IEqualityComparer<T>)
  fullName: System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 106
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the object can hold. A <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object's capacity automatically increases as elements are added to the object.</p>\n<p>If <em>collection</em> contains duplicates, the set will contain one of each unique element. No exception will be thrown. Therefore, the size of the resulting set is not identical to the size of <em>collection</em>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in the <em>collection</em> parameter.</p>\n"
  example:
  - "\n<p>The following example uses a supplied <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to allow case-insensitive comparisons on the elements of a  <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection of vehicle types.</p>System.Collections.Generic.HashSet_ExceptWith#03"
  syntax:
    content: public HashSet(IEnumerable<T> collection, IEqualityComparer<T> comparer)
    content.vb: Public Sub New(collection As IEnumerable(Of T), comparer As IEqualityComparer(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).HashSet(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: HashSet(IEnumerable(Of T), IEqualityComparer(Of T))
- uid: System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: HashSet(IEqualityComparer<T>)
  fullName: System.Collections.Generic.HashSet<T>.HashSet(System.Collections.Generic.IEqualityComparer<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 81
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and uses the specified equality comparer for the set type.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the object can hold. A <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object's capacity automatically increases as elements are added to the object.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  example:
  - 
  syntax:
    content: public HashSet(IEqualityComparer<T> comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer(Of T))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{T}}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).HashSet(System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: HashSet(IEqualityComparer(Of T))
- uid: System.Collections.Generic.HashSet`1.Comparer
  commentId: P:System.Collections.Generic.HashSet`1.Comparer
  id: Comparer
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: Comparer
  fullName: System.Collections.Generic.HashSet<T>.Comparer
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Comparer
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 901
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> object that is used to determine equality for the values in the set.</p>\n"
  remarks: "\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - 
  syntax:
    content: public IEqualityComparer<T> Comparer { get; }
    content.vb: Public ReadOnly Property Comparer As IEqualityComparer(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.IEqualityComparer{{T}}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.HashSet(Of T).Comparer
- uid: System.Collections.Generic.HashSet`1.Count
  commentId: P:System.Collections.Generic.HashSet`1.Count
  id: Count
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.HashSet<T>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 303
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets the number of elements that are contained in a set.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is the number of elements that the object can hold. A <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object's capacity automatically increases as elements are added to the object.</p>\n<p>The capacity is always greater than or equal to <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds the capacity while adding elements, the capacity is set to the first prime number that is greater than double the previous capacity.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create, populate, and manipulate two <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> objects. In this example, both the contents of the set and <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref> display to the console. </p>System.Collections.Generic.HashSet_UnionWith#01"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.Generic.ICollection{{T}}.Count
  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.HashSet(Of T).Count
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  commentId: P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly
  id: System#Collections#Generic#ICollection{T}#IsReadOnly
  isEii: true
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.IsReadOnly
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.ICollection<T>.IsReadOnly
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 311
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Gets a value indicating whether a collection is read-only.</p>\n"
  remarks: "\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - 
  syntax:
    content: bool ICollection<T>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<T>.IsReadOnly As Boolean Implements ICollection(Of T).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.Generic.ICollection{{T}}.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.ICollection<T>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<T>.IsReadOnly
- uid: System.Collections.Generic.HashSet`1.Add(`0)
  commentId: M:System.Collections.Generic.HashSet`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: Add(T)
  fullName: System.Collections.Generic.HashSet<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 345
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds the specified element to a set.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals the capacity of the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object, the capacity is automatically adjusted to accommodate the new item.</p>\n<p>If <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity of the internal array, this method is an O(1) operation. If the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object must be resized, this method becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to create and populate two <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> objects. This example is part of a larger example provided for the <xref href=\"System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Collections.Generic.HashSet_UnionWith#03"
  syntax:
    content: public bool Add(T item)
    content.vb: Public Function Add(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
    return:
      type: System.Boolean
      description: true if added, false if already present
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).Add(T)
- uid: System.Collections.Generic.HashSet`1.Clear
  commentId: M:System.Collections.Generic.HashSet`1.Clear
  id: Clear
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Generic.HashSet<T>.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 201
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all elements from a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero and references to other objects from elements of the collection are also released. The capacity remains unchanged until a call to <xref href=\"System.Collections.Generic.HashSet`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> is made.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates and populates a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection, then clears it and releases the memory referenced by the collection.</p>System.Collections.Generic.HashSet_Clear#02"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  implements:
  - System.Collections.Generic.ICollection{{T}}.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).Clear()
- uid: System.Collections.Generic.HashSet`1.Contains(`0)
  commentId: M:System.Collections.Generic.HashSet`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  fullName: System.Collections.Generic.HashSet<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 223
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object contains the specified element.</p>\n"
  remarks: "\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to remove values from a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection using the <xref href=\"System.Collections.Generic.HashSet`1.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method. In this example, the <xref href=\"System.Collections.Generic.HashSet`1.Contains(`0)\" data-throw-if-not-resolved=\"false\"></xref> method verifies that the set contains a value before removing it.</p>System.Collections.Generic.HashSet_RemoveWhere#02"
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: item to check for containment
    return:
      type: System.Boolean
      description: true if item contained; false if not
  implements:
  - System.Collections.Generic.ICollection{{T}}.Contains({T})
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).Contains(T)
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.HashSet`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[])
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[])
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 823
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the elements of a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object to an array.</p>\n"
  remarks: "\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public void CopyTo(T[] array)
    content.vb: Public Sub CopyTo(array As T())
    parameters:
    - id: array
      type: '{T}[]'
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).CopyTo(T())
  name.vb: CopyTo(T())
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 246
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the elements of a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object to an array, starting at the specified array index.</p>\n"
  remarks: "\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: array to add items to
    - id: arrayIndex
      type: System.Int32
      description: index to start at
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>arrayIndex</em> is greater than the length of the destination <em>array</em>.</p>\n"
  implements:
  - System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)
  id: CopyTo(`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32, Int32)
  fullName: System.Collections.Generic.HashSet<T>.CopyTo(T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 825
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Copies the specified number of elements of a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object to an array, starting at the specified array index.</p>\n"
  remarks: "\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <em>count</em>.</p>\n"
  example:
  - 
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex, int count)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer, count As Integer)
    parameters:
    - id: array
      type: '{T}[]'
    - id: arrayIndex
      type: System.Int32
    - id: count
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than 0.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>arrayIndex</em> is greater than the length of the destination <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is greater than the available space from the <em>index</em> to the end of the destination <em>array</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).CopyTo(T(), System.Int32, System.Int32)
  name.vb: CopyTo(T(), Int32, Int32)
- uid: System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: ExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: ExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.ExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExceptWith
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 434
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all elements in the specified collection from the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method is the equivalent of mathematical set subtraction.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in the <em>other</em> parameter.</p>\n"
  example:
  - "\n<p>The following example creates two <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collections with overlapping sets of data. The lower range of values is then removed from the larger set using the <xref href=\"System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Collections.Generic.HashSet_ExceptWith#02"
  syntax:
    content: public void ExceptWith(IEnumerable<T> other)
    content.vb: Public Sub ExceptWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: enumerable with items to remove
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>other</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).ExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ExceptWith(IEnumerable(Of T))
- uid: System.Collections.Generic.HashSet`1.GetEnumerator
  commentId: M:System.Collections.Generic.HashSet`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 320
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of enumerators. Therefore, using <strong>foreach</strong> is recommended instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. Therefore, you must call the <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property returns the same object until <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.HashSet`1.Enumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator object instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - 
  syntax:
    content: public HashSet<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As HashSet(Of T).Enumerator
    return:
      type: System.Collections.Generic.HashSet`1.Enumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).GetEnumerator()
- uid: System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})
  id: IntersectWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: IntersectWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IntersectWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IntersectWith
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 386
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Modifies the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object to contain only elements that are present in that object and in the specified collection.</p>\n"
  remarks: "\n<p>If the collection represented by the <em>other</em> parameter is a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection with the same equality comparer as the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object, this method is an O(<em>n</em>) operation. Otherwise, this method is an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref> and <em>m</em> is the number of elements in <em>other</em>.</p>\n"
  example:
  - 
  syntax:
    content: public void IntersectWith(IEnumerable<T> other)
    content.vb: Public Sub IntersectWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: 'enumerable with items to add '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>other</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).IntersectWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IntersectWith(IEnumerable(Of T))
- uid: System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: IsProperSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsProperSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsProperSubsetOf
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 575
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is a proper subset of the specified collection.</p>\n"
  remarks: "\n<p>An empty set is a proper subset of any other collection. Therefore, this method returns <strong>true</strong> if the collection represented by the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is empty unless the <em>other</em> parameter is also an empty set.</p>\n<p>This method always returns <strong>false</strong> if <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is greater than or equal to the number of elements in <em>other</em>.</p>\n<p>If the collection represented by <em>other</em> is a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection with the same equality comparer as the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object, then this method is an O(<em>n</em>) operation. Otherwise, this method is an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref> and <em>m</em> is the number of elements in <em>other</em>.</p>\n"
  example:
  - "\n<p>The following example creates two disparate <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> objects and compares them to each other. In this example, <code>lowNumbers</code> is both a subset and a proper subset of <code>allNumbers</code> until <code>allNumbers</code> is modified, using the <xref href=\"System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method, to contain only values that are present in both sets. Once <code>allNumbers</code> and <code>lowNumbers</code> are identical, <code>lowNumbers</code> is still a subset of <code>allNumbers</code> but is no longer a proper subset.</p>System.Collections.Generic.HashSet_boolMethods#02"
  syntax:
    content: public bool IsProperSubsetOf(IEnumerable<T> other)
    content.vb: Public Function IsProperSubsetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
      description: true if this is a proper subset of other; false if not
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>other</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsProperSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSubsetOf(IEnumerable(Of T))
- uid: System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: IsProperSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsProperSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsProperSupersetOf
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 692
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is a proper superset of the specified collection.</p>\n"
  remarks: "\n<p>An empty set is a proper superset of any other collection. Therefore, this method returns <strong>true</strong> if the collection represented by the <em>other</em> parameter is empty unless the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection is also empty.</p>\n<p>This method always returns <strong>false</strong> if <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than or equal to the number of elements in <em>other</em>.</p>\n<p>If the collection represented by <em>other</em> is a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection with the same equality comparer as the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object, this method is an O(<em>n</em>) operation. Otherwise, this method is an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is the number of elements in <em>other</em> and <em>m</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates two disparate <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> objects and compares them to each other. In this example, <code>allNumbers</code> is both a superset and a proper superset of <code>lowNumbers</code> until <code>allNumbers</code> is modified, using the <xref href=\"System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method, to contain only values that are present in both sets. Once <code>allNumbers</code> and <code>lowNumbers</code> are identical, <code>allNumbers</code> is still a superset of <code>lowNumbers</code> but is no longer a proper superset.</p>System.Collections.Generic.HashSet_boolMethods#02"
  syntax:
    content: public bool IsProperSupersetOf(IEnumerable<T> other)
    content.vb: Public Function IsProperSupersetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
      description: true if this is a proper superset of other; false if not
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>other</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsProperSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsProperSupersetOf(IEnumerable(Of T))
- uid: System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSubsetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: IsSubsetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsSubsetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSubsetOf
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 518
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is a subset of the specified collection.</p>\n"
  remarks: "\n<p>An empty set is a subset of any other collection, including an empty set; therefore, this method returns <strong>true</strong> if the collection represented by the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is empty, even if the <em>other</em> parameter is an empty set.</p>\n<p>This method always returns <strong>false</strong> if <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is greater than the number of elements in <em>other</em>.</p>\n<p>If the collection represented by <em>other</em> is a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection with the same equality comparer as the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object, this method is an O(<em>n</em>) operation. Otherwise, this method is an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref> and <em>m</em> is the number of elements in <em>other</em>.</p>\n"
  example:
  - "\n<p>The following example creates two disparate <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> objects and compares them to each other. In this example, <code>lowNumbers</code> is both a subset and a proper subset of <code>allNumbers</code> until <code>allNumbers</code> is modified, using the <xref href=\"System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method, to contain only values that are present in both sets. Once <code>allNumbers</code> and <code>lowNumbers</code> are identical, <code>lowNumbers</code> is still a subset of <code>allNumbers</code> but is no longer a proper subset.</p>System.Collections.Generic.HashSet_boolMethods#02"
  syntax:
    content: public bool IsSubsetOf(IEnumerable<T> other)
    content.vb: Public Function IsSubsetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
      description: true if this is a subset of other; false if not
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>other</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsSubsetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSubsetOf(IEnumerable(Of T))
- uid: System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  id: IsSupersetOf(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: IsSupersetOf(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.IsSupersetOf(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSupersetOf
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 634
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is a superset of the specified collection.</p>\n"
  remarks: "\n<p>All collections, including the empty set,Â are supersets of the empty set. Therefore, this method returns <strong>true</strong> if the collection represented by the <em>other</em> parameter is empty, even if the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is empty.</p>\n<p>This method always returns <strong>false</strong> if <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the number of elements in <em>other</em>.</p>\n<p>If the collection represented by <em>other</em> is a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection with the same equality comparer as the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object, this method is an O(<em>n</em>) operation. Otherwise, this method is an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is the number of elements in <em>other</em> and <em>m</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates two disparate <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> objects and compares them to each other. In this example, <code>allNumbers</code> is both a superset and a proper superset of <code>lowNumbers</code> until <code>allNumbers</code> is modified, using the <xref href=\"System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method, to contain only values that are present in both sets. Once <code>allNumbers</code> and <code>lowNumbers</code> are identical, <code>allNumbers</code> is still a superset of <code>lowNumbers</code> but is no longer a proper superset.</p>System.Collections.Generic.HashSet_boolMethods#02"
  syntax:
    content: public bool IsSupersetOf(IEnumerable<T> other)
    content.vb: Public Function IsSupersetOf(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
      description: true if this is a superset of other; false if not
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>other</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).IsSupersetOf(System.Collections.Generic.IEnumerable(Of T))
  name.vb: IsSupersetOf(IEnumerable(Of T))
- uid: System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})
  id: Overlaps(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: Overlaps(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.Overlaps(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Overlaps
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 743
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object and a specified collection share common elements.</p>\n"
  remarks: "\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>other</em>.</p>\n"
  example:
  - "\n<p>The following example creates two disparate <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> objects and compares them to each another. In this example, <code>allNumbers</code> and <code>lowNumbers</code> are shown to share common elements using the <xref href=\"System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Collections.Generic.HashSet_boolMethods#02"
  syntax:
    content: public bool Overlaps(IEnumerable<T> other)
    content.vb: Public Function Overlaps(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
      description: true if these have at least one common element; false if disjoint
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>other</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).Overlaps(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Overlaps(IEnumerable(Of T))
- uid: System.Collections.Generic.HashSet`1.Remove(`0)
  commentId: M:System.Collections.Generic.HashSet`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  fullName: System.Collections.Generic.HashSet<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 256
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes the specified element from a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object does not contain the specified element, the object remains unchanged. No exception is thrown.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to remove values from a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection using the <xref href=\"System.Collections.Generic.HashSet`1.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method. In this example, zero is arbitrarily removed from the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>System.Collections.Generic.HashSet_RemoveWhere#02"
  syntax:
    content: public bool Remove(T item)
    content.vb: Public Function Remove(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: item to remove
    return:
      type: System.Boolean
      description: true if removed; false if not (i.e. if the item wasn't in the HashSet)
  implements:
  - System.Collections.Generic.ICollection{{T}}.Remove({T})
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).Remove(T)
- uid: System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  commentId: M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})
  id: RemoveWhere(System.Predicate{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: RemoveWhere(Predicate<T>)
  fullName: System.Collections.Generic.HashSet<T>.RemoveWhere(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveWhere
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 869
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Removes all elements that match the conditions defined by the specified predicate from a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  remarks: "\n<p>Calling this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to remove values from a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection using the <xref href=\"System.Collections.Generic.HashSet`1.Remove(`0)\" data-throw-if-not-resolved=\"false\"></xref> method. In this example, all odd integers are removed from the <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection as specified by the <em>match</em> delegate.</p>System.Collections.Generic.HashSet_RemoveWhere#02"
  syntax:
    content: public int RemoveWhere(Predicate<T> match)
    content.vb: Public Function RemoveWhere(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).RemoveWhere(System.Predicate(Of T))
  name.vb: RemoveWhere(Predicate(Of T))
- uid: System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})
  id: SetEquals(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: SetEquals(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.SetEquals(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetEquals
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 778
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Determines whether a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object and the specified collection contain the same elements.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method ignores duplicate entries and the order of elements in the <em>other</em> parameter.</p>\n<p>If the collection represented by <em>other</em> is a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection with the same equality comparer as the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object, this method is an O(<em>n</em>) operation. Otherwise, this method is an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is the number of elements in <em>other</em> and <em>m</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates two disparate <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> objects and compares them to each another. Initially, the two sets are not equal, which is demonstrated by using the <xref href=\"System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method. The <code>allNumbers</code><xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is then modified, after which the sets are equal.</p>System.Collections.Generic.HashSet_boolMethods#02"
  syntax:
    content: public bool SetEquals(IEnumerable<T> other)
    content.vb: Public Function SetEquals(other As IEnumerable(Of T)) As Boolean
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>other</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).SetEquals(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SetEquals(IEnumerable(Of T))
- uid: System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  id: SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: SymmetricExceptWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.SymmetricExceptWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymmetricExceptWith
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 466
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Modifies the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object to contain only elements that are present either in that object or in the specified collection, but not both.</p>\n"
  remarks: "\n<p>If the <em>other</em> parameter is a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection with the same equality comparer as the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object, this method is an O(<em>n</em>) operation. Otherwise, this method is an O(<em>n</em> + <em>m</em>) operation, where <em>n</em> is the number of elements in <em>other</em> and <em>m</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates two <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collections with overlapping sets of data. The set that contains the lower values is then modified, using the <xref href=\"System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method, to contain only the values that are not present in both sets.</p>System.Collections.Generic.HashSet_SymmetricExceptWith#02"
  syntax:
    content: public void SymmetricExceptWith(IEnumerable<T> other)
    content.vb: Public Sub SymmetricExceptWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: enumerable with items to XOR
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>other</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).SymmetricExceptWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SymmetricExceptWith(IEnumerable(Of T))
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  commentId: M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)
  id: System#Collections#Generic#ICollection{T}#Add(`0)
  isEii: true
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: ICollection<T>.Add(T)
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.ICollection<T>.Add
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 192
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Adds an item to an <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than <xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, this method is an O(1) operation. If the capacity must be increased to accommodate the new element, this method becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: void ICollection<T>.Add(T item)
    content.vb: Sub System.Collections.Generic.ICollection<T>.Add(item As T) Implements ICollection(Of T).Add
    parameters:
    - id: item
      type: '{T}'
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  implements:
  - System.Collections.Generic.ICollection{{T}}.Add({T})
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.ICollection<T>.Add(T)
  name.vb: System.Collections.Generic.ICollection<T>.Add(T)
- uid: System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 325
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through a collection.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. At this position, the <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. Therefore, you must call the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> property returns the same object until <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. You cannot set <xref href=\"System.Collections.Generic.IEnumerator`1.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again; you must create a new enumerator object instead.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - 
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
  seealso:
  - type: System.Collections.Generic.IEnumerator`1
    commentId: T:System.Collections.Generic.IEnumerator`1
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Generic.HashSet<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 330
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns an enumerator that iterates through a collection.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in C++, <strong>For Each</strong> in Visual Basic) hides the complexity of enumerators. Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, the <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. Therefore, you must call the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>Default implementations of collections in the <xref href=\"System.Collections.Generic\" data-throw-if-not-resolved=\"false\"></xref> namespace are not synchronized.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - 
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  fullName.vb: System.Collections.Generic.HashSet(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.Generic.HashSet`1.TrimExcess
  commentId: M:System.Collections.Generic.HashSet`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: TrimExcess()
  fullName: System.Collections.Generic.HashSet<T>.TrimExcess()
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrimExcess
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 920
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Sets the capacity of a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.</p>\n"
  remarks: "\n<p>You can use the <xref href=\"System.Collections.Generic.HashSet`1.TrimExcess\" data-throw-if-not-resolved=\"false\"></xref> method to minimize a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object's memory overhead once it is known that no new elements will be added. To completely clear a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object and release all memory referenced by it, call this method after calling the <xref href=\"System.Collections.Generic.HashSet`1.Clear\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Generic.HashSet`1.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates and populates a <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> collection, and then clears the collection and releases the memory referenced by it.</p>System.Collections.Generic.HashSet_Clear#02"
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).TrimExcess()
- uid: System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})
  id: UnionWith(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.HashSet`1
  langs:
  - csharp
  - vb
  name: UnionWith(IEnumerable<T>)
  fullName: System.Collections.Generic.HashSet<T>.UnionWith(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnionWith
    path: src/System.Collections/src/System/Collections/Generic/HashSet.cs
    startLine: 358
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Modifies the current <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object to contain all elements that are present in itself, the specified collection, or both.</p>\n"
  remarks: "\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in the <em>other</em> parameter.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to merge two disparate sets. This example creates two <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> objects, and populates them with even and odd numbers, respectively. A third <xref href=\"System.Collections.Generic.HashSet`1\" data-throw-if-not-resolved=\"false\"></xref> object is created from the set that contains the even numbers. The example then calls the <xref href=\"System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})\" data-throw-if-not-resolved=\"false\"></xref> method, which adds the odd number set to the third set.</p>System.Collections.Generic.HashSet_UnionWith#01"
  syntax:
    content: public void UnionWith(IEnumerable<T> other)
    content.vb: Public Sub UnionWith(other As IEnumerable(Of T))
    parameters:
    - id: other
      type: System.Collections.Generic.IEnumerable{{T}}
      description: enumerable with items to add
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>other</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.HashSet(Of T).UnionWith(System.Collections.Generic.IEnumerable(Of T))
  name.vb: UnionWith(IEnumerable(Of T))
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.ICollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ISet{{T}}
  definition: System.Collections.Generic.ISet`1
  name: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  fullname.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    fullName: System.Collections.Generic.ISet
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ISet`1
  isExternal: false
  name: ISet<T>
  fullName: System.Collections.Generic.ISet<T>
  fullname.vb: System.Collections.Generic.ISet(Of T)
  name.vb: ISet(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    fullName: System.Collections.Generic.ISet
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ISet`1
    name: ISet
    fullName: System.Collections.Generic.ISet
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEqualityComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Count
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{{T}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection`1.Count
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  parent: System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.ICollection{{T}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Generic.ICollection{{T}}.Clear
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Contains({T})
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection{{T}}.CopyTo({T}[],System.Int32)
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.HashSet`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: HashSet.Enumerator<>
  fullName: System.Collections.Generic.HashSet.Enumerator<>
  fullname.vb: System.Collections.Generic.HashSet.Enumerator(Of )
  name.vb: HashSet.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.HashSet`1.Enumerator
    name: HashSet.Enumerator
    fullName: System.Collections.Generic.HashSet.Enumerator
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.HashSet`1.Enumerator
    name: HashSet.Enumerator
    fullName: System.Collections.Generic.HashSet.Enumerator
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Remove({T})
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Predicate{{T}}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  fullName: System.Predicate<T>
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  fullName: System.Predicate<T>
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{{T}}.Add({T})
  parent: System.Collections.Generic.ICollection{{T}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<T>.Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<T>.Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
