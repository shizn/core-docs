items:
- uid: System.Collections.Specialized.StringEnumerator
  commentId: T:System.Collections.Specialized.StringEnumerator
  id: StringEnumerator
  parent: System.Collections.Specialized
  children:
  - System.Collections.Specialized.StringEnumerator.Current
  - System.Collections.Specialized.StringEnumerator.MoveNext
  - System.Collections.Specialized.StringEnumerator.Reset
  langs:
  - csharp
  - vb
  name: StringEnumerator
  fullName: System.Collections.Specialized.StringEnumerator
  type: Class
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StringEnumerator
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 235
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Supports a simple iteration over a <xref href=\"System.Collections.Specialized.StringCollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position. At this position, calling <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. Therefore, you must call <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, calling <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. To set <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several of the properties and methods of <xref href=\"System.Collections.Specialized.StringEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.StringEnumerator2#1"
  syntax:
    content: public class StringEnumerator
    content.vb: Public Class StringEnumerator
  seealso:
  - type: System.Collections.IEnumerable
    commentId: T:System.Collections.IEnumerable
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  - type: System.Collections.Specialized.StringCollection
    commentId: T:System.Collections.Specialized.StringCollection
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.Specialized.StringEnumerator.Current
  commentId: P:System.Collections.Specialized.StringEnumerator.Current
  id: Current
  parent: System.Collections.Specialized.StringEnumerator
  langs:
  - csharp
  - vb
  name: Current
  fullName: System.Collections.Specialized.StringEnumerator.Current
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Current
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 246
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Gets the current element in the collection.</p>\n"
  remarks: "\n<p>After an enumerator is created or after a <xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called, <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> must be called to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined.</p>\n<p>\n<xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> also throws an exception if the last call to <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, which indicates the end of the collection.</p>\n<p>\n<xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> does not move the position of the enumerator, and consecutive calls to <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> return the same object until either <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several of the properties and methods of <xref href=\"System.Collections.Specialized.StringEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.StringEnumerator2#1"
  syntax:
    content: public string Current { get; }
    content.vb: Public ReadOnly Property Current As String
    parameters: []
    return:
      type: System.String
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The enumerator is positioned before the first element of the collection or after the last element. </p>\n"
  seealso:
  - type: System.Collections.Specialized.StringEnumerator.MoveNext
    commentId: M:System.Collections.Specialized.StringEnumerator.MoveNext
  - type: System.Collections.Specialized.StringEnumerator.Reset
    commentId: M:System.Collections.Specialized.StringEnumerator.Reset
  - type: System.Collections.IEnumerator.Current
    commentId: P:System.Collections.IEnumerator.Current
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.StringEnumerator.MoveNext
  commentId: M:System.Collections.Specialized.StringEnumerator.MoveNext
  id: MoveNext
  parent: System.Collections.Specialized.StringEnumerator
  langs:
  - csharp
  - vb
  name: MoveNext()
  fullName: System.Collections.Specialized.StringEnumerator.MoveNext()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveNext
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 254
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Advances the enumerator to the next element of the collection.</p>\n"
  remarks: "\n<p>After an enumerator is created or after a <xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called, an enumerator is positioned before the first element of the collection, and the first call to <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> moves the enumerator over the first element of the collection.</p>\n<p>If <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong> until <xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several of the properties and methods of <xref href=\"System.Collections.Specialized.StringEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.StringEnumerator2#1"
  syntax:
    content: public bool MoveNext()
    content.vb: Public Function MoveNext As Boolean
    return:
      type: System.Boolean
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The collection was modified after the enumerator was created. </p>\n"
  seealso:
  - type: System.Collections.Specialized.StringEnumerator.Current
    commentId: P:System.Collections.Specialized.StringEnumerator.Current
  - type: System.Collections.Specialized.StringEnumerator.Reset
    commentId: M:System.Collections.Specialized.StringEnumerator.Reset
  - type: System.Collections.IEnumerator.MoveNext
    commentId: M:System.Collections.IEnumerator.MoveNext
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.StringEnumerator.Reset
  commentId: M:System.Collections.Specialized.StringEnumerator.Reset
  id: Reset
  parent: System.Collections.Specialized.StringEnumerator
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Collections.Specialized.StringEnumerator.Reset()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reset
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/StringCollection.cs
    startLine: 259
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: "\n<p>Sets the enumerator to its initial position, which is before the first element in the collection.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> moves the enumerator to the beginning of the collection, before the first element. After <xref href=\"System.Collections.Specialized.StringEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.Specialized.StringEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> must be called to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.Specialized.StringEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates several of the properties and methods of <xref href=\"System.Collections.Specialized.StringEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Collections.Specialized.StringEnumerator2#1"
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The collection was modified after the enumerator was created. </p>\n"
  seealso:
  - type: System.Collections.Specialized.StringEnumerator.MoveNext
    commentId: M:System.Collections.Specialized.StringEnumerator.MoveNext
  - type: System.Collections.Specialized.StringEnumerator.Current
    commentId: P:System.Collections.Specialized.StringEnumerator.Current
  - type: System.Collections.IEnumerator.Reset
    commentId: M:System.Collections.IEnumerator.Reset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Collections.Specialized
  isExternal: false
  name: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
