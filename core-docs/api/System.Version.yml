items:
- uid: System.Version
  commentId: T:System.Version
  id: Version
  parent: System
  children:
  - System.Version.#ctor(System.Int32,System.Int32)
  - System.Version.#ctor(System.Int32,System.Int32,System.Int32)
  - System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Version.#ctor(System.String)
  - System.Version.Build
  - System.Version.CompareTo(System.Version)
  - System.Version.Equals(System.Object)
  - System.Version.Equals(System.Version)
  - System.Version.GetHashCode
  - System.Version.Major
  - System.Version.MajorRevision
  - System.Version.Minor
  - System.Version.MinorRevision
  - System.Version.op_Equality(System.Version,System.Version)
  - System.Version.op_GreaterThan(System.Version,System.Version)
  - System.Version.op_GreaterThanOrEqual(System.Version,System.Version)
  - System.Version.op_Inequality(System.Version,System.Version)
  - System.Version.op_LessThan(System.Version,System.Version)
  - System.Version.op_LessThanOrEqual(System.Version,System.Version)
  - System.Version.Parse(System.String)
  - System.Version.Revision
  - System.Version.System#IComparable#CompareTo(System.Object)
  - System.Version.ToString
  - System.Version.ToString(System.Int32)
  - System.Version.TryParse(System.String,System.Version@)
  langs:
  - csharp
  - vb
  name: Version
  fullName: System.Version
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Version
    path: src/mscorlib/src/System/Version.cs
    startLine: 25
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.</p>\n"
  remarks: "\n<p>Version numbers consist of two to four components: major, minor, build, and revision. The major and minor components are required; the build and revision components are optional, but the build component is required if the revision component is defined. All defined components must be integers greater than or equal to 0. The format of the version number is as follows (optional components are shown in square brackets ([ and ]): </p>\n<p>major.minor[.build[.revision]] </p>\n<p>The components are used by convention as follows: </p>\n<ul><li>\n<p>Major: Assemblies with the same name but different major versions are not interchangeable. A higher version number might indicate a major rewrite of a product where backward compatibility cannot be assumed.</p>\n</li><li>\n<p>Minor: If the name and major version number on two assemblies are the same, but the minor version number is different, this indicates significant enhancement with the intention of backward compatibility. This higher minor version number might indicate a point release of a product or a fully backward-compatible new version of a product.</p>\n</li><li>\n<p>Build: A difference in build number represents a recompilation of the same source. Different build numbers might be used when the processor, platform, or compiler changes.</p>\n</li><li>\n<p>Revision: Assemblies with the same name, major, and minor version numbers but different revisions are intended to be fully interchangeable. A higher revision number might be used in a build that fixes a security hole in a previously released assembly.</p>\n</li></ul>\n<p>Subsequent versions of an assembly that differ only by build or revision numbers are considered to be Hotfix updates of the prior version.</p>\n<p>The value of <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> properties that have not been explicitly assigned a value is undefined (-1).</p>\n<p>Starting with .NET Framework 2.0, the <xref href=\"System.Version.MajorRevision\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Version.MinorRevision\" data-throw-if-not-resolved=\"false\"></xref> properties enable you to identify a temporary version of your application that, for example, corrects a problem until you can release a permanent solution.  Furthermore, the WindowsÂ NT operating system uses the <xref href=\"System.Version.MajorRevision\" data-throw-if-not-resolved=\"false\"></xref> property to encode the service pack number.</p>\n"
  example:
  - <p>The following example uses the <xref href="System.Reflection.AssemblyVersionAttribute" data-throw-if-not-resolved="false"></xref> attribute to assign a version number to an assembly. At compile time, this version information is stored with the assembly's metadata. At run time, the example retrieves the value of the <xref href="System.Type.Assembly" data-throw-if-not-resolved="false"></xref> property on a type found in the assembly to get a reference to the executing assembly, and it retrieves the assembly's version information from the <xref href="System.Reflection.AssemblyName.Version" data-throw-if-not-resolved="false"></xref> property of the <xref href="System.Reflection.AssemblyName" data-throw-if-not-resolved="false"></xref> object returned by the <xref href="System.Reflection.Assembly.GetName" data-throw-if-not-resolved="false"></xref> method.</p>System.Version.Class#6
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public sealed class Version : ICloneable, IComparable, IComparable<Version>, IEquatable<Version>
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public NotInheritable Class Version
          Implements ICloneable, IComparable, IComparable(Of Version), IEquatable(Of Version)
  inheritance:
  - System.Object
  implements:
  - System.IComparable
  - System.IComparable{System.Version}
  - System.IEquatable{System.Version}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Version.#ctor(System.Int32,System.Int32)
  commentId: M:System.Version.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Version(Int32, Int32)
  fullName: System.Version.Version(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Version.cs
    startLine: 74
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> class using the specified major and minor values.</p>\n"
  remarks: "\n<p>This constructor creates a <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object with the following property values. </p>\n<table><thead><tr><th>\n<p>Property</p>\n</th><th>\n<p>Value</p>\n</th></tr></thead><tbody><tr><td>\n<p>\n<xref href=\"System.Version.Major\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>major</em>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Version.Minor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>minor</em>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Version.Build\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>undefined (-1)</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Version.Revision\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>undefined (-1)</p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public Version(int major, int minor)
    content.vb: Public Sub New(major As Integer, minor As Integer)
    parameters:
    - id: major
      type: System.Int32
    - id: minor
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>major</em> or <em>minor</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Version(Int32, Int32, Int32)
  fullName: System.Version.Version(System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Version.cs
    startLine: 57
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> class using the specified major, minor, and build values.</p>\n"
  remarks: "\n<p>This constructor creates a <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object with the following property values. </p>\n<table><thead><tr><th>\n<p>Property</p>\n</th><th>\n<p>Value</p>\n</th></tr></thead><tbody><tr><td>\n<p>\n<xref href=\"System.Version.Major\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>major</em>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Version.Minor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>minor</em>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Version.Build\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>build</em>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Version.Revision\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>undefined (-1)</p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public Version(int major, int minor, int build)
    content.vb: Public Sub New(major As Integer, minor As Integer, build As Integer)
    parameters:
    - id: major
      type: System.Int32
    - id: minor
      type: System.Int32
    - id: build
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>major</em>, <em>minor</em>, or <em>build</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Version(Int32, Int32, Int32, Int32)
  fullName: System.Version.Version(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Version.cs
    startLine: 37
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> class with the specified major, minor, build, and revision numbers.</p>\n"
  remarks: "\n<p>This constructor creates a <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object with the following property values. </p>\n<table><thead><tr><th>\n<p>Property</p>\n</th><th>\n<p>Value</p>\n</th></tr></thead><tbody><tr><td>\n<p>\n<xref href=\"System.Version.Major\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>major</em>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Version.Minor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>minor</em>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Version.Build\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>build</em>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Version.Revision\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>revision</em>\n</p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and <xref href=\"System.Version.Major\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Minor\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Build\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Revision\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.MajorRevision\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Version.MinorRevision\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>system.version.revision#1"
  syntax:
    content: public Version(int major, int minor, int build, int revision)
    content.vb: Public Sub New(major As Integer, minor As Integer, build As Integer, revision As Integer)
    parameters:
    - id: major
      type: System.Int32
    - id: minor
      type: System.Int32
    - id: build
      type: System.Int32
    - id: revision
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>major</em>, <em>minor</em>, <em>build</em>, or <em>revision</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.#ctor(System.String)
  commentId: M:System.Version.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Version(String)
  fullName: System.Version.Version(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Version.cs
    startLine: 86
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> class using the specified string.</p>\n"
  remarks: "\n<p>The <em>version</em> parameter can contain only the components major, minor, build, and revision, in that order, and all separated by periods. There must be at least two components, and at most four. The first two components are assumed to be major and minor. The value of unspecified components is undefined.</p>\n<p>The format of the version number is as follows. Optional components are shown in square brackets ('[' and ']'): </p>\n<p>major.minor[.build[.revision]] </p>\n<p>All defined components must be integers greater than or equal to 0. For example, if the major number is 6, the minor number is 2, the build number is 1, and the revision number is 3, then <em>version</em> should be \"6.2.1.3\".</p>\n"
  syntax:
    content: public Version(string version)
    content.vb: Public Sub New(version As String)
    parameters:
    - id: version
      type: System.String
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>version</em> has fewer than two components or more than four components. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>version</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>A major, minor, build, or revision component is less than zero. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>At least one component of <em>version</em> does not parse to an integer. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>At least one component of <em>version</em> represents a number greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.Build
  commentId: P:System.Version.Build
  id: Build
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Build
  fullName: System.Version.Build
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Build
    path: src/mscorlib/src/System/Version.cs
    startLine: 109
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the build component of the version number for the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>For example, if the version number is 6.2.1.3, the build number is 1. If the version number is 6.2, the build number is undefined.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and <xref href=\"System.Version.Major\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Minor\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Build\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Revision\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.MajorRevision\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Version.MinorRevision\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>system.version.revision#1"
  syntax:
    content: public int Build { get; }
    content.vb: Public ReadOnly Property Build As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.Major
  commentId: P:System.Version.Major
  id: Major
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Major
  fullName: System.Version.Major
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Major
    path: src/mscorlib/src/System/Version.cs
    startLine: 101
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the major component of the version number for the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>For example, if the version number is 6.2, the major version is 6.</p>\n"
  syntax:
    content: public int Major { get; }
    content.vb: Public ReadOnly Property Major As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.MajorRevision
  commentId: P:System.Version.MajorRevision
  id: MajorRevision
  parent: System.Version
  langs:
  - csharp
  - vb
  name: MajorRevision
  fullName: System.Version.MajorRevision
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MajorRevision
    path: src/mscorlib/src/System/Version.cs
    startLine: 117
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the high 16 bits of the revision number.</p>\n"
  remarks: "\n<p>Suppose you release an interim version of your application to temporarily correct a problem until you can release a permanent solution. The temporary version does not warrant a new revision number, but it does need to be identified as a different version. In this case, encode the identification information in the high and low 16-bit portions of the 32-bit revision number. Use the <xref href=\"System.Version.Revision\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the entire revision number, use the <xref href=\"System.Version.MajorRevision\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the high 16 bits, and use the <xref href=\"System.Version.MinorRevision\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the low 16 bits.</p>\n<p>Starting in the .NET Framework version 2.0, the WindowsÂ NT operating system uses the <xref href=\"System.Version.MajorRevision\" data-throw-if-not-resolved=\"false\"></xref> property to encode the service pack number. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and the <xref href=\"System.Version.Major\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Minor\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Build\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Revision\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.MajorRevision\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Version.MinorRevision\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>system.version.revision#1"
  syntax:
    content: public short MajorRevision { get; }
    content.vb: Public ReadOnly Property MajorRevision As Short
    parameters: []
    return:
      type: System.Int16
  seealso:
  - type: System.Version.MinorRevision
    commentId: P:System.Version.MinorRevision
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.Minor
  commentId: P:System.Version.Minor
  id: Minor
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Minor
  fullName: System.Version.Minor
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Minor
    path: src/mscorlib/src/System/Version.cs
    startLine: 105
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the minor component of the version number for the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>For example, if the version number is 6.2, the minor version is 2.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and <xref href=\"System.Version.Major\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Minor\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Build\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Revision\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.MajorRevision\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Version.MinorRevision\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>system.version.revision#1"
  syntax:
    content: public int Minor { get; }
    content.vb: Public ReadOnly Property Minor As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.MinorRevision
  commentId: P:System.Version.MinorRevision
  id: MinorRevision
  parent: System.Version
  langs:
  - csharp
  - vb
  name: MinorRevision
  fullName: System.Version.MinorRevision
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MinorRevision
    path: src/mscorlib/src/System/Version.cs
    startLine: 121
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the low 16 bits of the revision number.</p>\n"
  remarks: "\n<p>Suppose you release an interim version of your application to temporarily correct a problem until you can release a permanent solution. The temporary version does not warrant a new revision number, but it does need to be identified as a different version. In this case, encode the identification information in the high and low 16-bit portions of the 32-bit revision number. Use the <xref href=\"System.Version.Revision\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the entire revision number, use the <xref href=\"System.Version.MajorRevision\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the high 16 bits, and use the <xref href=\"System.Version.MinorRevision\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the low 16 bits.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and the <xref href=\"System.Version.Major\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Minor\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Build\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Revision\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.MajorRevision\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Version.MinorRevision\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>system.version.revision#1"
  syntax:
    content: public short MinorRevision { get; }
    content.vb: Public ReadOnly Property MinorRevision As Short
    parameters: []
    return:
      type: System.Int16
  seealso:
  - type: System.Version.MajorRevision
    commentId: P:System.Version.MajorRevision
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.Revision
  commentId: P:System.Version.Revision
  id: Revision
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Revision
  fullName: System.Version.Revision
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Revision
    path: src/mscorlib/src/System/Version.cs
    startLine: 113
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the revision component of the version number for the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>For example, if the version number is 6.2.1.3, the revision number is 3. If the version number is 6.2, the revision number is undefined.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and <xref href=\"System.Version.Major\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Minor\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Build\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Revision\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.MajorRevision\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Version.MinorRevision\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>system.version.revision#1"
  syntax:
    content: public int Revision { get; }
    content.vb: Public ReadOnly Property Revision As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.CompareTo(System.Version)
  commentId: M:System.Version.CompareTo(System.Version)
  id: CompareTo(System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: CompareTo(Version)
  fullName: System.Version.CompareTo(System.Version)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareTo
    path: src/mscorlib/src/System/Version.cs
    startLine: 174
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object to a specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object and returns an indication of their relative values.</p>\n"
  remarks: "\n<p>This method implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> interface, and performs slightly better than the <xref href=\"System.Version.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method because it does not have to unbox the <em>value</em> parameter.</p>\n<p>The components of <strong>Version</strong> in decreasing order of importance are: major, minor, build, and revision. An unknown component is assumed to be older than any known component. For example: </p>\n<ul><li>\n<p>Version 1.1 is older than version 1.1.0. </p>\n</li><li>\n<p>Version 1.1 is older than version 1.1.1. </p>\n</li><li>\n<p>Version 1.1 is older than version 1.1.2.3. </p>\n</li><li>\n<p>Version 1.1.2 is older than version 1.1.2.4. </p>\n</li><li>\n<p>Version 1.2.5 is newer than version 1.2.3.4. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following code example demonstrates generic and nongeneric versions of the <strong>CompareTo</strong> method for several value and reference types.</p>T.CompareTo#1"
  syntax:
    content: public int CompareTo(Version value)
    content.vb: Public Function CompareTo(value As Version) As Integer
    parameters:
    - id: value
      type: System.Version
    return:
      type: System.Int32
  implements:
  - System.IComparable{System.Version}.CompareTo(System.Version)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.Equals(System.Object)
  commentId: M:System.Version.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Version.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Version.cs
    startLine: 206
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  seealso:
  - type: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Version.Equals(System.Version)
  commentId: M:System.Version.Equals(System.Version)
  id: Equals(System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Equals(Version)
  fullName: System.Version.Equals(System.Version)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Version.cs
    startLine: 221
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object and a specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object represent the same value.</p>\n"
  remarks: "\n<p>This method implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> interface, and performs slightly better than the <xref href=\"System.Version.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method because it does not have to unbox the <em>obj</em> parameter.</p>\n"
  syntax:
    content: public bool Equals(Version obj)
    content.vb: Public Function Equals(obj As Version) As Boolean
    parameters:
    - id: obj
      type: System.Version
    return:
      type: System.Boolean
  seealso:
  - type: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  implements:
  - System.IEquatable{System.Version}.Equals(System.Version)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.GetHashCode
  commentId: M:System.Version.GetHashCode
  id: GetHashCode
  parent: System.Version
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Version.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Version.cs
    startLine: 236
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a hash code for the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and <xref href=\"System.Version.Major\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Minor\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Build\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.Revision\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Version.MajorRevision\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Version.MinorRevision\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>system.version.revision#1"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Version.op_Equality(System.Version,System.Version)
  commentId: M:System.Version.op_Equality(System.Version,System.Version)
  id: op_Equality(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Equality(Version, Version)
  fullName: System.Version.Equality(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/Version.cs
    startLine: 411
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> objects are equal.</p>\n"
  syntax:
    content: public static bool operator ==(Version v1, Version v2)
    content.vb: Public Shared Operator =(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
    - id: v2
      type: System.Version
    return:
      type: System.Boolean
  seealso:
  - type: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - type: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_GreaterThan(System.Version,System.Version)
  commentId: M:System.Version.op_GreaterThan(System.Version,System.Version)
  id: op_GreaterThan(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: GreaterThan(Version, Version)
  fullName: System.Version.GreaterThan(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_GreaterThan
    path: src/mscorlib/src/System/Version.cs
    startLine: 437
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the first specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is greater than the second specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public static bool operator>(Version v1, Version v2)
    content.vb: Public Shared Operator>(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
    - id: v2
      type: System.Version
    return:
      type: System.Boolean
  seealso:
  - type: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - type: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_GreaterThanOrEqual(System.Version,System.Version)
  commentId: M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)
  id: op_GreaterThanOrEqual(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Version, Version)
  fullName: System.Version.GreaterThanOrEqual(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_GreaterThanOrEqual
    path: src/mscorlib/src/System/Version.cs
    startLine: 441
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the first specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is greater than or equal to the second specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public static bool operator >=(Version v1, Version v2)
    content.vb: Public Shared Operator >=(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
    - id: v2
      type: System.Version
    return:
      type: System.Boolean
  seealso:
  - type: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - type: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_Inequality(System.Version,System.Version)
  commentId: M:System.Version.op_Inequality(System.Version,System.Version)
  id: op_Inequality(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Inequality(Version, Version)
  fullName: System.Version.Inequality(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/Version.cs
    startLine: 419
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> objects are not equal.</p>\n"
  syntax:
    content: public static bool operator !=(Version v1, Version v2)
    content.vb: Public Shared Operator <>(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
    - id: v2
      type: System.Version
    return:
      type: System.Boolean
  seealso:
  - type: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - type: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_LessThan(System.Version,System.Version)
  commentId: M:System.Version.op_LessThan(System.Version,System.Version)
  id: op_LessThan(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: LessThan(Version, Version)
  fullName: System.Version.LessThan(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_LessThan
    path: src/mscorlib/src/System/Version.cs
    startLine: 423
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the first specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is less than the second specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public static bool operator <(Version v1, Version v2)
    content.vb: Public Shared Operator <(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
    - id: v2
      type: System.Version
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>v1</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - type: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_LessThanOrEqual(System.Version,System.Version)
  commentId: M:System.Version.op_LessThanOrEqual(System.Version,System.Version)
  id: op_LessThanOrEqual(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Version, Version)
  fullName: System.Version.LessThanOrEqual(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_LessThanOrEqual
    path: src/mscorlib/src/System/Version.cs
    startLine: 430
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the first specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is less than or equal to the second <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public static bool operator <=(Version v1, Version v2)
    content.vb: Public Shared Operator <=(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
    - id: v2
      type: System.Version
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>v1</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - type: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.Parse(System.String)
  commentId: M:System.Version.Parse(System.String)
  id: Parse(System.String)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Parse(String)
  fullName: System.Version.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parse
    path: src/mscorlib/src/System/Version.cs
    startLine: 327
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a version number to an equivalent <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <em>input</em> parameter must have the following format:</p>\n<pre><code>major.minor[.build[.revision]]</code></pre>\n<p>where major, minor, build, and revision are the string representations of the version number's four components: major version number, minor version number, build number, and revision number. Optional components are shown in square brackets ([ and ]). The components must appear in the specified order, and must be separated by periods.</p>\n<p>Because the string representation of a version number must conform to a recognized pattern, applications should always use exception handling when calling the <xref href=\"System.Version.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to parse user input. Alternatively, you can call the <xref href=\"System.Version.TryParse(System.String,System.Version@)\" data-throw-if-not-resolved=\"false\"></xref> method to parse the string representation of a version number and return a value that indicates whether the parse operation succeeded.</p>\n<p>The <xref href=\"System.Version.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is a convenience method; it is equivalent to calling the <xref href=\"System.Version.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Version.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to parse a number of strings that contain version information.</p>System.Version.Parse#1"
  syntax:
    content: public static Version Parse(string input)
    content.vb: Public Shared Function Parse(input As String) As Version
    parameters:
    - id: input
      type: System.String
    return:
      type: System.Version
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>input</em> has fewer than two or more than four version components.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>At least one component in <em>input</em> is less than zero.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>At least one component in <em>input</em> is not an integer.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>At least one component in <em>input</em> represents a number that is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Version.TryParse(System.String,System.Version@)
    commentId: M:System.Version.TryParse(System.String,System.Version@)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.System#IComparable#CompareTo(System.Object)
  commentId: M:System.Version.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Version
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  fullName: System.Version.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2256
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IComparable.CompareTo(object version)
    content.vb: Function System.IComparable.CompareTo(version As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: version
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: System.Version.ToString
  commentId: M:System.Version.ToString
  id: ToString
  parent: System.Version
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Version.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Version.cs
    startLine: 251
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object to its equivalent <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> representation.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Version.ToString(System.Int32)
  commentId: M:System.Version.ToString(System.Int32)
  id: ToString(System.Int32)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: ToString(Int32)
  fullName: System.Version.ToString(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Version.cs
    startLine: 257
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object to its equivalent <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> representation. A specified count indicates the number of components to return.</p>\n"
  syntax:
    content: public string ToString(int fieldCount)
    content.vb: Public Function ToString(fieldCount As Integer) As String
    parameters:
    - id: fieldCount
      type: System.Int32
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>fieldCount</em> is less than 0, or more than 4.</p>\n<p>-or- </p>\n<p>\n<em>fieldCount</em> is more than the number of components defined in the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.TryParse(System.String,System.Version@)
  commentId: M:System.Version.TryParse(System.String,System.Version@)
  id: TryParse(System.String,System.Version@)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: TryParse(String, out Version)
  fullName: System.Version.TryParse(System.String, out System.Version)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryParse
    path: src/mscorlib/src/System/Version.cs
    startLine: 341
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Tries to convert the string representation of a version number to an equivalent <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object, and returns a value that indicates whether the conversion succeeded.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Version.TryParse(System.String,System.Version@)\" data-throw-if-not-resolved=\"false\"></xref> method is similar to the <xref href=\"System.Version.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, except that it does not throw an exception if the conversion fails. Instead, it returns <strong>false</strong> if <em>input</em> is null, has fewer than two or more than four components, has at least one component that is not an integer, has at least one component that is less than zero, or has at least one component that is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>For the parse operation to succeed, the <em>input</em> parameter must be in the following format:</p>\n<pre><code>major.minor[.build[.revision]]</code></pre>\n<p>where major, minor, build, and revision are the string representations of the version number's four components: major version number, minor version number, build number, and revision number. Optional components are shown in square brackets ([ and ]). The components must appear in order, and must be separated by periods.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Version.TryParse(System.String,System.Version@)\" data-throw-if-not-resolved=\"false\"></xref> method to parse a number of strings that contain version information.</p>System.Version.TryParse#1"
  syntax:
    content: public static bool TryParse(string input, out Version result)
    content.vb: Public Shared Function TryParse(input As String, ByRef result As Version) As Boolean
    parameters:
    - id: input
      type: System.String
    - id: result
      type: System.Version
    return:
      type: System.Boolean
  seealso:
  - type: System.Version.Parse(System.String)
    commentId: M:System.Version.Parse(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Version.TryParse(System.String, ByRef System.Version)
  name.vb: TryParse(String, ByRef Version)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.IComparable{System.Version}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Version>
  fullName: System.IComparable<System.Version>
  fullname.vb: System.IComparable(Of System.Version)
  name.vb: IComparable(Of Version)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: )
    fullName: )
- uid: System.IEquatable{System.Version}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Version>
  fullName: System.IEquatable<System.Version>
  fullname.vb: System.IEquatable(Of System.Version)
  name.vb: IEquatable(Of Version)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IComparable`1
  parent: System
  isExternal: false
  name: IComparable<T>
  fullName: System.IComparable<T>
  fullname.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.IComparable{System.Version}.CompareTo(System.Version)
  parent: System.IComparable{System.Version}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Version)
  fullName: System.IComparable<System.Version>.CompareTo(System.Version)
  fullname.vb: System.IComparable(Of System.Version).CompareTo(System.Version)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<System.Version>.CompareTo
  - name: (
    fullName: (
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of System.Version).CompareTo
  - name: (
    fullName: (
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: )
    fullName: )
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  fullName: System.Version
- uid: System.IComparable`1.CompareTo(`0)
  parent: System.IComparable`1
  isExternal: false
  name: CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<T>.CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of T).CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{System.Version}.Equals(System.Version)
  parent: System.IEquatable{System.Version}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Version)
  fullName: System.IEquatable<System.Version>.Equals(System.Version)
  fullname.vb: System.IEquatable(Of System.Version).Equals(System.Version)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Version>.Equals
  - name: (
    fullName: (
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Version).Equals
  - name: (
    fullName: (
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
