items:
- uid: System.Version
  commentId: T:System.Version
  id: Version
  parent: System
  children:
  - System.Version.#ctor(System.Int32,System.Int32)
  - System.Version.#ctor(System.Int32,System.Int32,System.Int32)
  - System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Version.#ctor(System.String)
  - System.Version.Build
  - System.Version.CompareTo(System.Version)
  - System.Version.Equals(System.Object)
  - System.Version.Equals(System.Version)
  - System.Version.GetHashCode
  - System.Version.Major
  - System.Version.MajorRevision
  - System.Version.Minor
  - System.Version.MinorRevision
  - System.Version.op_Equality(System.Version,System.Version)
  - System.Version.op_GreaterThan(System.Version,System.Version)
  - System.Version.op_GreaterThanOrEqual(System.Version,System.Version)
  - System.Version.op_Inequality(System.Version,System.Version)
  - System.Version.op_LessThan(System.Version,System.Version)
  - System.Version.op_LessThanOrEqual(System.Version,System.Version)
  - System.Version.Parse(System.String)
  - System.Version.Revision
  - System.Version.System#IComparable#CompareTo(System.Object)
  - System.Version.ToString
  - System.Version.ToString(System.Int32)
  - System.Version.TryParse(System.String,System.Version@)
  langs:
  - csharp
  - vb
  name: Version
  fullName: System.Version
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Version
    path: src/mscorlib/src/System/Version.cs
    startLine: 25
  assemblies:
  - System.Runtime
  namespace: System
  summary: Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.
  syntax:
    content: 'public sealed class Version : IComparable, IComparable<Version>, IEquatable<Version>'
    content.vb: >-
      Public NotInheritable Class Version
          Implements IComparable, IComparable(Of Version), IEquatable(Of Version)
  inheritance:
  - System.Object
  implements:
  - System.IComparable
  - System.IComparable{System.Version}
  - System.IEquatable{System.Version}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Version.#ctor(System.Int32,System.Int32)
  commentId: M:System.Version.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Version(Int32, Int32)
  fullName: System.Version.Version(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Version.cs
    startLine: 74
  assemblies:
  - System.Runtime
  namespace: System
  summary: Initializes a new instance of the <xref href="System.Version" data-throw-if-not-resolved="false"></xref> class using the specified major and minor values.
  syntax:
    content: public Version(int major, int minor)
    content.vb: Public Sub New(major As Integer, minor As Integer)
    parameters:
    - id: major
      type: System.Int32
      description: 'The major version number. '
    - id: minor
      type: System.Int32
      description: 'The minor version number. '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>major</em> or <em>minor</em> is less than zero. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Version(Int32, Int32, Int32)
  fullName: System.Version.Version(System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Version.cs
    startLine: 57
  assemblies:
  - System.Runtime
  namespace: System
  summary: Initializes a new instance of the <xref href="System.Version" data-throw-if-not-resolved="false"></xref> class using the specified major, minor, and build values.
  syntax:
    content: public Version(int major, int minor, int build)
    content.vb: Public Sub New(major As Integer, minor As Integer, build As Integer)
    parameters:
    - id: major
      type: System.Int32
      description: 'The major version number. '
    - id: minor
      type: System.Int32
      description: 'The minor version number. '
    - id: build
      type: System.Int32
      description: 'The build number. '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>major</em>, <em>minor</em>, or <em>build</em> is less than zero. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Version(Int32, Int32, Int32, Int32)
  fullName: System.Version.Version(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Version.cs
    startLine: 37
  assemblies:
  - System.Runtime
  namespace: System
  summary: Initializes a new instance of the <xref href="System.Version" data-throw-if-not-resolved="false"></xref> class with the specified major, minor, build, and revision numbers.
  syntax:
    content: public Version(int major, int minor, int build, int revision)
    content.vb: Public Sub New(major As Integer, minor As Integer, build As Integer, revision As Integer)
    parameters:
    - id: major
      type: System.Int32
      description: 'The major version number. '
    - id: minor
      type: System.Int32
      description: 'The minor version number. '
    - id: build
      type: System.Int32
      description: 'The build number. '
    - id: revision
      type: System.Int32
      description: 'The revision number. '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>major</em>, <em>minor</em>, <em>build</em>, or <em>revision</em> is less than zero. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.#ctor(System.String)
  commentId: M:System.Version.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Version(String)
  fullName: System.Version.Version(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Version.cs
    startLine: 86
  assemblies:
  - System.Runtime
  namespace: System
  summary: Initializes a new instance of the <xref href="System.Version" data-throw-if-not-resolved="false"></xref> class using the specified string.
  syntax:
    content: public Version(string version)
    content.vb: Public Sub New(version As String)
    parameters:
    - id: version
      type: System.String
      description: 'A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character (''.''). '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>version</em> has fewer than two components or more than four components. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>version</em> is null. "
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: 'A major, minor, build, or revision component is less than zero. '
  - type: System.FormatException
    commentId: T:System.FormatException
    description: 'At least one component of <em>version</em> does not parse to an integer. '
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: At least one component of <em>version</em> represents a number greater than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.Build
  commentId: P:System.Version.Build
  id: Build
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Build
  fullName: System.Version.Build
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Build
    path: src/mscorlib/src/System/Version.cs
    startLine: 109
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the value of the build component of the version number for the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public int Build { get; }
    content.vb: Public ReadOnly Property Build As Integer
    parameters: []
    return:
      type: System.Int32
      description: The build number, or -1 if the build number is undefined.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.Major
  commentId: P:System.Version.Major
  id: Major
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Major
  fullName: System.Version.Major
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Major
    path: src/mscorlib/src/System/Version.cs
    startLine: 101
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the value of the major component of the version number for the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public int Major { get; }
    content.vb: Public ReadOnly Property Major As Integer
    parameters: []
    return:
      type: System.Int32
      description: The major version number.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.MajorRevision
  commentId: P:System.Version.MajorRevision
  id: MajorRevision
  parent: System.Version
  langs:
  - csharp
  - vb
  name: MajorRevision
  fullName: System.Version.MajorRevision
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MajorRevision
    path: src/mscorlib/src/System/Version.cs
    startLine: 117
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the high 16 bits of the revision number.
  syntax:
    content: public short MajorRevision { get; }
    content.vb: Public ReadOnly Property MajorRevision As Short
    parameters: []
    return:
      type: System.Int16
      description: A 16-bit signed integer.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.Minor
  commentId: P:System.Version.Minor
  id: Minor
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Minor
  fullName: System.Version.Minor
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Minor
    path: src/mscorlib/src/System/Version.cs
    startLine: 105
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the value of the minor component of the version number for the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public int Minor { get; }
    content.vb: Public ReadOnly Property Minor As Integer
    parameters: []
    return:
      type: System.Int32
      description: The minor version number.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.MinorRevision
  commentId: P:System.Version.MinorRevision
  id: MinorRevision
  parent: System.Version
  langs:
  - csharp
  - vb
  name: MinorRevision
  fullName: System.Version.MinorRevision
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MinorRevision
    path: src/mscorlib/src/System/Version.cs
    startLine: 121
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the low 16 bits of the revision number.
  syntax:
    content: public short MinorRevision { get; }
    content.vb: Public ReadOnly Property MinorRevision As Short
    parameters: []
    return:
      type: System.Int16
      description: A 16-bit signed integer.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.Revision
  commentId: P:System.Version.Revision
  id: Revision
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Revision
  fullName: System.Version.Revision
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Revision
    path: src/mscorlib/src/System/Version.cs
    startLine: 113
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the value of the revision component of the version number for the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public int Revision { get; }
    content.vb: Public ReadOnly Property Revision As Integer
    parameters: []
    return:
      type: System.Int32
      description: The revision number, or -1 if the revision number is undefined.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.CompareTo(System.Version)
  commentId: M:System.Version.CompareTo(System.Version)
  id: CompareTo(System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: CompareTo(Version)
  fullName: System.Version.CompareTo(System.Version)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareTo
    path: src/mscorlib/src/System/Version.cs
    startLine: 174
  assemblies:
  - System.Runtime
  namespace: System
  summary: Compares the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object to a specified <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object and returns an indication of their relative values.
  syntax:
    content: public int CompareTo(Version value)
    content.vb: Public Function CompareTo(value As Version) As Integer
    parameters:
    - id: value
      type: System.Version
      description: A <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object to compare to the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object, or null.
    return:
      type: System.Int32
      description: A signed integer that indicates the relative values of the two objects, as shown in the following table.Return value Meaning Less than zero The current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object is a version before <em>value</em>. Zero The current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object is the same version as <em>value</em>. Greater than zero The current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object is a version subsequent to <em>value</em>. -or-<em>value</em> is null.
  implements:
  - System.IComparable{System.Version}.CompareTo(System.Version)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.Equals(System.Object)
  commentId: M:System.Version.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Version.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Version.cs
    startLine: 206
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns a value indicating whether the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object is equal to a specified object.
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'An object to compare with the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object, or null. '
    return:
      type: System.Boolean
      description: true if the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object and <em>obj</em> are both <xref href="System.Version" data-throw-if-not-resolved="false"></xref> objects, and every component of the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object matches the corresponding component of <em>obj</em>; otherwise, false.
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Version.Equals(System.Version)
  commentId: M:System.Version.Equals(System.Version)
  id: Equals(System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Equals(Version)
  fullName: System.Version.Equals(System.Version)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Version.cs
    startLine: 221
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns a value indicating whether the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object and a specified <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object represent the same value.
  syntax:
    content: public bool Equals(Version obj)
    content.vb: Public Function Equals(obj As Version) As Boolean
    parameters:
    - id: obj
      type: System.Version
      description: A <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object to compare to the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object, or null.
    return:
      type: System.Boolean
      description: true if every component of the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object matches the corresponding component of the <em>obj</em> parameter; otherwise, false.
  implements:
  - System.IEquatable{System.Version}.Equals(System.Version)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.GetHashCode
  commentId: M:System.Version.GetHashCode
  id: GetHashCode
  parent: System.Version
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Version.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Version.cs
    startLine: 236
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns a hash code for the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Version.op_Equality(System.Version,System.Version)
  commentId: M:System.Version.op_Equality(System.Version,System.Version)
  id: op_Equality(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Equality(Version, Version)
  fullName: System.Version.Equality(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/Version.cs
    startLine: 411
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether two specified <xref href="System.Version" data-throw-if-not-resolved="false"></xref> objects are equal.
  syntax:
    content: public static bool operator ==(Version v1, Version v2)
    content.vb: Public Shared Operator =(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
      description: 'The first <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object. '
    - id: v2
      type: System.Version
      description: 'The second <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object. '
    return:
      type: System.Boolean
      description: true if <em>v1</em> equals <em>v2</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_GreaterThan(System.Version,System.Version)
  commentId: M:System.Version.op_GreaterThan(System.Version,System.Version)
  id: op_GreaterThan(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: GreaterThan(Version, Version)
  fullName: System.Version.GreaterThan(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_GreaterThan
    path: src/mscorlib/src/System/Version.cs
    startLine: 437
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether the first specified <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object is greater than the second specified <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public static bool operator>(Version v1, Version v2)
    content.vb: Public Shared Operator>(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
      description: 'The first <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object. '
    - id: v2
      type: System.Version
      description: 'The second <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object. '
    return:
      type: System.Boolean
      description: true if <em>v1</em> is greater than <em>v2</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_GreaterThanOrEqual(System.Version,System.Version)
  commentId: M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)
  id: op_GreaterThanOrEqual(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Version, Version)
  fullName: System.Version.GreaterThanOrEqual(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_GreaterThanOrEqual
    path: src/mscorlib/src/System/Version.cs
    startLine: 441
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether the first specified <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object is greater than or equal to the second specified <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public static bool operator >=(Version v1, Version v2)
    content.vb: Public Shared Operator >=(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
      description: 'The first <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object. '
    - id: v2
      type: System.Version
      description: 'The second <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object. '
    return:
      type: System.Boolean
      description: true if <em>v1</em> is greater than or equal to <em>v2</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_Inequality(System.Version,System.Version)
  commentId: M:System.Version.op_Inequality(System.Version,System.Version)
  id: op_Inequality(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Inequality(Version, Version)
  fullName: System.Version.Inequality(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/Version.cs
    startLine: 419
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether two specified <xref href="System.Version" data-throw-if-not-resolved="false"></xref> objects are not equal.
  syntax:
    content: public static bool operator !=(Version v1, Version v2)
    content.vb: Public Shared Operator <>(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
      description: 'The first <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object. '
    - id: v2
      type: System.Version
      description: 'The second <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object. '
    return:
      type: System.Boolean
      description: true if <em>v1</em> does not equal <em>v2</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_LessThan(System.Version,System.Version)
  commentId: M:System.Version.op_LessThan(System.Version,System.Version)
  id: op_LessThan(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: LessThan(Version, Version)
  fullName: System.Version.LessThan(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_LessThan
    path: src/mscorlib/src/System/Version.cs
    startLine: 423
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether the first specified <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object is less than the second specified <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public static bool operator <(Version v1, Version v2)
    content.vb: Public Shared Operator <(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
      description: 'The first <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object. '
    - id: v2
      type: System.Version
      description: 'The second <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object. '
    return:
      type: System.Boolean
      description: true if <em>v1</em> is less than <em>v2</em>; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>v1</em> is null. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_LessThanOrEqual(System.Version,System.Version)
  commentId: M:System.Version.op_LessThanOrEqual(System.Version,System.Version)
  id: op_LessThanOrEqual(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Version, Version)
  fullName: System.Version.LessThanOrEqual(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_LessThanOrEqual
    path: src/mscorlib/src/System/Version.cs
    startLine: 430
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether the first specified <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object is less than or equal to the second <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public static bool operator <=(Version v1, Version v2)
    content.vb: Public Shared Operator <=(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
      description: 'The first <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object. '
    - id: v2
      type: System.Version
      description: 'The second <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object. '
    return:
      type: System.Boolean
      description: true if <em>v1</em> is less than or equal to <em>v2</em>; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>v1</em> is null. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.Parse(System.String)
  commentId: M:System.Version.Parse(System.String)
  id: Parse(System.String)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Parse(String)
  fullName: System.Version.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parse
    path: src/mscorlib/src/System/Version.cs
    startLine: 327
  assemblies:
  - System.Runtime
  namespace: System
  summary: Converts the string representation of a version number to an equivalent <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public static Version Parse(string input)
    content.vb: Public Shared Function Parse(input As String) As Version
    parameters:
    - id: input
      type: System.String
      description: A string that contains a version number to convert.
    return:
      type: System.Version
      description: An object that is equivalent to the version number specified in the <em>input</em> parameter.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>input</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>input</em> has fewer than two or more than four version components."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: At least one component in <em>input</em> is less than zero.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: At least one component in <em>input</em> is not an integer.
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: At least one component in <em>input</em> represents a number that is greater than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.System#IComparable#CompareTo(System.Object)
  commentId: M:System.Version.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Version
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  fullName: System.Version.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2256
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IComparable.CompareTo(object version)
    content.vb: Function System.IComparable.CompareTo(version As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: version
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: System.Version.ToString
  commentId: M:System.Version.ToString
  id: ToString
  parent: System.Version
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Version.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Version.cs
    startLine: 251
  assemblies:
  - System.Runtime
  namespace: System
  summary: Converts the value of the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object to its equivalent <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: 'The <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of the values of the major, minor, build, and revision components of the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object, as depicted in the following format. Each component is separated by a period character (''.''). Square brackets (''['' and '']'') indicate a component that will not appear in the return value if the component is not defined: major.minor[.build[.revision]] For example, if you create a <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object using the constructor Version(1,1), the returned string is "1.1". If you create a <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object using the constructor Version(1,3,4,2), the returned string is "1.3.4.2".'
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Version.ToString(System.Int32)
  commentId: M:System.Version.ToString(System.Int32)
  id: ToString(System.Int32)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: ToString(Int32)
  fullName: System.Version.ToString(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Version.cs
    startLine: 257
  assemblies:
  - System.Runtime
  namespace: System
  summary: Converts the value of the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object to its equivalent <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation. A specified count indicates the number of components to return.
  syntax:
    content: public string ToString(int fieldCount)
    content.vb: Public Function ToString(fieldCount As Integer) As String
    parameters:
    - id: fieldCount
      type: System.Int32
      description: 'The number of components to return. The <em>fieldCount</em> ranges from 0 to 4. '
    return:
      type: System.String
      description: The <xref href="System.String" data-throw-if-not-resolved="false"></xref> representation of the values of the major, minor, build, and revision components of the current <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object, each separated by a period character ('.'). The <em>fieldCount</em> parameter determines how many components are returned.fieldCount Return Value 0 An empty string (""). 1 major 2 major.minor 3 major.minor.build 4 major.minor.build.revision For example, if you create <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object using the constructor Version(1,3,5), ToString(2) returns "1.3" and ToString(4) throws an exception.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>fieldCount</em> is less than 0, or more than 4.-or- <em>fieldCount</em> is more than the number of components defined in the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.TryParse(System.String,System.Version@)
  commentId: M:System.Version.TryParse(System.String,System.Version@)
  id: TryParse(System.String,System.Version@)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: TryParse(String, out Version)
  fullName: System.Version.TryParse(System.String, out System.Version)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryParse
    path: src/mscorlib/src/System/Version.cs
    startLine: 341
  assemblies:
  - System.Runtime
  namespace: System
  summary: Tries to convert the string representation of a version number to an equivalent <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object, and returns a value that indicates whether the conversion succeeded.
  syntax:
    content: public static bool TryParse(string input, out Version result)
    content.vb: Public Shared Function TryParse(input As String, ByRef result As Version) As Boolean
    parameters:
    - id: input
      type: System.String
      description: A string that contains a version number to convert.
    - id: result
      type: System.Version
      description: 'When this method returns, contains the <xref href="System.Version" data-throw-if-not-resolved="false"></xref> equivalent of the number that is contained in <em>input</em>, if the conversion succeeded, or a <xref href="System.Version" data-throw-if-not-resolved="false"></xref> object whose major and minor version numbers are 0 if the conversion failed. If <em>input</em> is null or <xref href="System.String.Empty" data-throw-if-not-resolved="false"></xref>, <em>result</em> is null when the method returns. '
    return:
      type: System.Boolean
      description: true if the <em>input</em> parameter was converted successfully; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Version.TryParse(System.String, ByRef System.Version)
  name.vb: TryParse(String, ByRef Version)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.IComparable{System.Version}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Version>
  fullName: System.IComparable<System.Version>
  fullname.vb: System.IComparable(Of System.Version)
  name.vb: IComparable(Of Version)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: )
    fullName: )
- uid: System.IEquatable{System.Version}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Version>
  fullName: System.IEquatable<System.Version>
  fullname.vb: System.IEquatable(Of System.Version)
  name.vb: IEquatable(Of Version)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.IComparable`1
  parent: System
  isExternal: false
  name: IComparable<>
  fullName: System.IComparable<>
  fullname.vb: System.IComparable(Of )
  name.vb: IComparable(Of )
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<>
  fullName: System.IEquatable<>
  fullname.vb: System.IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.IComparable{System.Version}.CompareTo(System.Version)
  parent: System.IComparable{System.Version}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Version)
  fullName: System.IComparable<System.Version>.CompareTo(System.Version)
  fullname.vb: System.IComparable(Of System.Version).CompareTo(System.Version)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<System.Version>.CompareTo
  - name: (
    fullName: (
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of System.Version).CompareTo
  - name: (
    fullName: (
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: )
    fullName: )
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  fullName: System.Version
- uid: System.IComparable`1.CompareTo(`0)
  parent: System.IComparable`1
  isExternal: false
  name: CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<T>.CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of T).CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{System.Version}.Equals(System.Version)
  parent: System.IEquatable{System.Version}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Version)
  fullName: System.IEquatable<System.Version>.Equals(System.Version)
  fullname.vb: System.IEquatable(Of System.Version).Equals(System.Version)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Version>.Equals
  - name: (
    fullName: (
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Version).Equals
  - name: (
    fullName: (
  - uid: System.Version
    name: Version
    fullName: System.Version
  - name: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: false
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
