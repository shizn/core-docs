items:
- uid: System.Net.WebSockets.WebSocket
  commentId: T:System.Net.WebSockets.WebSocket
  id: WebSocket
  parent: System.Net.WebSockets
  children:
  - System.Net.WebSockets.WebSocket.#ctor
  - System.Net.WebSockets.WebSocket.Abort
  - System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.CloseStatus
  - System.Net.WebSockets.WebSocket.CloseStatusDescription
  - System.Net.WebSockets.WebSocket.Dispose
  - System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  - System.Net.WebSockets.WebSocket.State
  - System.Net.WebSockets.WebSocket.SubProtocol
  langs:
  - csharp
  - vb
  name: WebSocket
  fullName: System.Net.WebSockets.WebSocket
  type: Class
  source:
    remote:
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WebSocket
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 10
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: "\n<p>The WebSocket class allows applications to send and receive data after the WebSocket upgrade has completed.</p>\n"
  remarks: "\n<p>Some of the classes in the <xref href=\"System.Net.WebSockets\" data-throw-if-not-resolved=\"false\"></xref> namespace are supported on Windows 7, Windows Vista SP2, and Windows Server 2008. However, the only public implementations of client and server WebSockets are supported on Windows 8 and Windows Server 2012. The classes and class elements in the <xref href=\"System.Net.WebSockets\" data-throw-if-not-resolved=\"false\"></xref> namespace that are supported on Windows 7, Windows Vista SP2, and Windows Server 2008 are abstract classes. This allows an application developer to inherit and extend these abstract classes with an actual implementation of client WebSockets.\n</p>\n"
  syntax:
    content: 'public abstract class WebSocket : IDisposable'
    content.vb: >-
      Public MustInherit Class WebSocket
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Net.WebSockets.WebSocket.#ctor
  commentId: M:System.Net.WebSockets.WebSocket.#ctor
  id: '#ctor'
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  - vb
  name: WebSocket()
  fullName: System.Net.WebSockets.WebSocket.WebSocket()
  type: Constructor
  source:
    remote:
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 12
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: "\n<p>Creates an instance of the <xref href=\"System.Net.WebSockets.WebSocket\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected WebSocket()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.WebSockets.WebSocket.CloseStatus
  commentId: P:System.Net.WebSockets.WebSocket.CloseStatus
  id: CloseStatus
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  - vb
  name: CloseStatus
  fullName: System.Net.WebSockets.WebSocket.CloseStatus
  type: Property
  source:
    remote:
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloseStatus
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 13
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: "\n<p>Indicates the reason why the remote endpoint initiated the close handshake.</p>\n"
  remarks: "\n<p>If the close handshake has not been initiated yet, WebSocketCloseStatus.None is returned.</p>\n"
  syntax:
    content: public abstract WebSocketCloseStatus? CloseStatus { get; }
    content.vb: Public MustOverride ReadOnly Property CloseStatus As WebSocketCloseStatus?
    parameters: []
    return:
      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
      description: "\n<p>Returns <xref href=\"System.Net.WebSockets.WebSocketCloseStatus\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.WebSockets.WebSocket.CloseStatusDescription
  commentId: P:System.Net.WebSockets.WebSocket.CloseStatusDescription
  id: CloseStatusDescription
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  - vb
  name: CloseStatusDescription
  fullName: System.Net.WebSockets.WebSocket.CloseStatusDescription
  type: Property
  source:
    remote:
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloseStatusDescription
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 14
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: "\n<p>Allows the remote endpoint to describe the reason why the connection was closed.</p>\n"
  syntax:
    content: public abstract string CloseStatusDescription { get; }
    content.vb: Public MustOverride ReadOnly Property CloseStatusDescription As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Returns <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.WebSockets.WebSocket.State
  commentId: P:System.Net.WebSockets.WebSocket.State
  id: State
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  - vb
  name: State
  fullName: System.Net.WebSockets.WebSocket.State
  type: Property
  source:
    remote:
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: State
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 15
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: "\n<p>Returns the current state of the WebSocket connection.</p>\n"
  syntax:
    content: public abstract WebSocketState State { get; }
    content.vb: Public MustOverride ReadOnly Property State As WebSocketState
    parameters: []
    return:
      type: System.Net.WebSockets.WebSocketState
      description: "\n<p>Returns <xref href=\"System.Net.WebSockets.WebSocketState\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.WebSockets.WebSocket.SubProtocol
  commentId: P:System.Net.WebSockets.WebSocket.SubProtocol
  id: SubProtocol
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  - vb
  name: SubProtocol
  fullName: System.Net.WebSockets.WebSocket.SubProtocol
  type: Property
  source:
    remote:
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubProtocol
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 16
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: "\n<p>The subprotocol that was negotiated during the opening handshake.</p>\n"
  syntax:
    content: public abstract string SubProtocol { get; }
    content.vb: Public MustOverride ReadOnly Property SubProtocol As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Returns <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.WebSockets.WebSocket.Abort
  commentId: M:System.Net.WebSockets.WebSocket.Abort
  id: Abort
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  - vb
  name: Abort()
  fullName: System.Net.WebSockets.WebSocket.Abort()
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Abort
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 17
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: "\n<p>Aborts the WebSocket connection and cancels any pending IO operations.</p>\n"
  syntax:
    content: public abstract void Abort()
    content.vb: Public MustOverride Sub Abort
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  commentId: M:System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  - vb
  name: CloseAsync(WebSocketCloseStatus, String, CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloseAsync
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 18
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: "\n<p>Closes the WebSocket connection as an asynchronous operation using the close handshake defined in the <see href=\"http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06\">WebSocket protocol specification</see> section 7.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>   object will complete after the WebSocket has been closed.</p>\n<p>This method closes the WebSocket connection using the close handshake defined in the <see href=\"http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06\">WebSocket protocol specification</see> section 7.</p>\n"
  syntax:
    content: public abstract Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken)
    content.vb: Public MustOverride Function CloseAsync(closeStatus As WebSocketCloseStatus, statusDescription As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "\n<p>Indicates the reason for closing the WebSocket connection.</p>\n"
    - id: statusDescription
      type: System.String
      description: "\n<p>Specifies a human readable explanation as to why the connection is closed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token that can be used to propagate notification that operations should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  commentId: M:System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  - vb
  name: CloseOutputAsync(WebSocketCloseStatus, String, CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloseOutputAsync
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 19
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: "\n<p>Initiates or completes the close handshake defined in the <see href=\"http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-06\">WebSocket protocol specification section 7</see>.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>   object will complete after the output on the WebSocket has been closed.</p>\n"
  syntax:
    content: public abstract Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken)
    content.vb: Public MustOverride Function CloseOutputAsync(closeStatus As WebSocketCloseStatus, statusDescription As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "\n<p>Indicates the reason for closing the WebSocket connection.</p>\n"
    - id: statusDescription
      type: System.String
      description: "\n<p>Allows applications to specify a human readable explanation as to why the connection is closed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token that can be used to propagate notification that operations should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.WebSockets.WebSocket.Dispose
  commentId: M:System.Net.WebSockets.WebSocket.Dispose
  id: Dispose
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Net.WebSockets.WebSocket.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 20
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: "\n<p>Used to clean up unmanaged resources for ASP.NET and self-hosted implementations.</p>\n"
  syntax:
    content: public abstract void Dispose()
    content.vb: Public MustOverride Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  commentId: M:System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  - vb
  name: ReceiveAsync(ArraySegment<Byte>, CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment<System.Byte>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveAsync
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 21
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: "\n<p>Receives data from the WebSocket connection asynchronously.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>   object will complete after the data has been received on the  WebSocket.</p>\n"
  syntax:
    content: public abstract Task<WebSocketReceiveResult> ReceiveAsync(ArraySegment<byte> buffer, CancellationToken cancellationToken)
    content.vb: Public MustOverride Function ReceiveAsync(buffer As ArraySegment(Of Byte), cancellationToken As CancellationToken) As Task(Of WebSocketReceiveResult)
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "\n<p>References the application buffer that is the storage location for the received data.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>Propagate the notification that operations should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\" data-throw-if-not-resolved=\"false\"></xref> property on the task object returns a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array containing the received data.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Net.WebSockets.WebSocket.ReceiveAsync(System.ArraySegment(Of System.Byte), System.Threading.CancellationToken)
  name.vb: ReceiveAsync(ArraySegment(Of Byte), CancellationToken)
- uid: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  commentId: M:System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.WebSocket
  langs:
  - csharp
  - vb
  name: SendAsync(ArraySegment<Byte>, WebSocketMessageType, Boolean, CancellationToken)
  fullName: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment<System.Byte>, System.Net.WebSockets.WebSocketMessageType, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.WebSockets/ref/System.Net.WebSockets.cs
    startLine: 22
  assemblies:
  - System.Net.WebSockets
  namespace: System.Net.WebSockets
  summary: "\n<p>Sends data over the WebSocket connection asynchronously.</p>\n"
  remarks: "\n<p>This operation will not block. The returned <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>   object will complete after the data has been sent on the WebSocket.</p>\n"
  syntax:
    content: public abstract Task SendAsync(ArraySegment<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken)
    content.vb: Public MustOverride Function SendAsync(buffer As ArraySegment(Of Byte), messageType As WebSocketMessageType, endOfMessage As Boolean, cancellationToken As CancellationToken) As Task
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "\n<p>The buffer to be sent over the connection.</p>\n"
    - id: messageType
      type: System.Net.WebSockets.WebSocketMessageType
      description: "\n<p>Indicates whether the application is sending a binary or text message.</p>\n"
    - id: endOfMessage
      type: System.Boolean
      description: "\n<p>Indicates whether the data in “buffer” is the last part of a message.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The token that propagates the notification that operations should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Net.WebSockets.WebSocket.SendAsync(System.ArraySegment(Of System.Byte), System.Net.WebSockets.WebSocketMessageType, System.Boolean, System.Threading.CancellationToken)
  name.vb: SendAsync(ArraySegment(Of Byte), WebSocketMessageType, Boolean, CancellationToken)
references:
- uid: System.Net.WebSockets
  isExternal: false
  name: System.Net.WebSockets
  fullName: System.Net.WebSockets
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  parent: System
  definition: System.Nullable`1
  name: Nullable<WebSocketCloseStatus>
  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  fullname.vb: System.Nullable(Of System.Net.WebSockets.WebSocketCloseStatus)
  name.vb: Nullable(Of WebSocketCloseStatus)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    fullName: System.Net.WebSockets.WebSocketCloseStatus
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    fullName: System.Net.WebSockets.WebSocketCloseStatus
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Net.WebSockets.WebSocketState
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState
- uid: System.Net.WebSockets.WebSocketCloseStatus
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketCloseStatus
  fullName: System.Net.WebSockets.WebSocketCloseStatus
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArraySegment{System.Byte}
  parent: System
  definition: System.ArraySegment`1
  name: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  fullname.vb: System.ArraySegment(Of System.Byte)
  name.vb: ArraySegment(Of Byte)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<WebSocketReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.WebSockets.WebSocketReceiveResult)
  name.vb: Task(Of WebSocketReceiveResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    fullName: System.Net.WebSockets.WebSocketReceiveResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    fullName: System.Net.WebSockets.WebSocketReceiveResult
  - name: )
    fullName: )
- uid: System.ArraySegment`1
  parent: System
  isExternal: false
  name: ArraySegment<T>
  fullName: System.ArraySegment<T>
  fullname.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    fullName: System.ArraySegment
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Net.WebSockets.WebSocketMessageType
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketMessageType
  fullName: System.Net.WebSockets.WebSocketMessageType
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
