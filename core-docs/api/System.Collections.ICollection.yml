items:
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  id: ICollection
  parent: System.Collections
  children:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  - System.Collections.ICollection.Count
  - System.Collections.ICollection.IsSynchronized
  - System.Collections.ICollection.SyncRoot
  langs:
  - csharp
  - vb
  name: ICollection
  fullName: System.Collections.ICollection
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ICollection
    path: src/mscorlib/src/System/Collections/ICollection.cs
    startLine: 21
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Defines size, enumerators, and synchronization methods for all nongeneric collections.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface is the base interface for classes in the <xref href=\"System.Collections\" data-throw-if-not-resolved=\"false\"></xref> namespace.</p>\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface extends <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>; <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> are more specialized interfaces that extend <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>. An <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> implementation is a collection of key/value pairs, like the <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> class. An <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> implementation is a collection of values and its members can be accessed by index, like the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Some collections that limit access to their elements, such as the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> class and the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> class, directly implement the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>If neither the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> interface nor the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface meet the requirements of the required collection, derive the new collection class from the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface instead for more flexibility.</p>\n<p>For the generic version of this interface, see <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public interface ICollection : IEnumerable
    content.vb: >-
      <ComVisible(True)>

      Public Interface ICollection
          Inherits IEnumerable
  seealso:
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - type: System.Collections.IList
    commentId: T:System.Collections.IList
  - type: System.Collections.Generic.ICollection`1
    commentId: T:System.Collections.Generic.ICollection`1
  inheritedMembers:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  id: Count
  parent: System.Collections.ICollection
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.ICollection.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/Collections/ICollection.cs
    startLine: 31
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: int Count { get; }
    content.vb: ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.ICollection
  langs:
  - csharp
  - vb
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSynchronized
    path: src/mscorlib/src/System/Collections/ICollection.cs
    startLine: 77
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe).</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> returns an object, which can be used to synchronize access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Most collection classes in the <xref href=\"System.Collections\" data-throw-if-not-resolved=\"false\"></xref> namespace also implement a Synchronized method, which provides a synchronized wrapper around the underlying collection.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property during the entire enumeration.</p>System.Collections.ICollection#1"
  syntax:
    content: bool IsSynchronized { get; }
    content.vb: ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.ICollection.SyncRoot
    commentId: P:System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  id: SyncRoot
  parent: System.Collections.ICollection
  langs:
  - csharp
  - vb
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SyncRoot
    path: src/mscorlib/src/System/Collections/ICollection.cs
    startLine: 68
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>For collections whose underlying store is not publicly available, the expected implementation is to return the current instance. Note that the pointer to the current instance might not be sufficient for collections that wrap other collections; those should return the underlying collection's <strong>SyncRoot</strong> property.</p>\n<p>Most collection classes in the <xref href=\"System.Collections\" data-throw-if-not-resolved=\"false\"></xref> namespace also implement a <strong>Synchronized</strong> method, which provides a synchronized wrapper around the underlying collection. However, derived classes can provide their own synchronized version of the collection using the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property. The synchronizing code must perform operations on the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property of the collection, not directly on the collection. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the collection instance.</p>\n<p>In the absence of a <strong>Synchronized</strong> method on a collection, the expected usage for <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> looks as follows:</p>System.Collections.ICollection#2<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p><p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property during the entire enumeration. </p>System.Collections.ICollection#1"
  syntax:
    content: object SyncRoot { get; }
    content.vb: ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: System.Object
  seealso:
  - type: System.Collections.ICollection.IsSynchronized
    commentId: P:System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Collections/ICollection.cs
    startLine: 28
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Copies the elements of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> to an <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at a particular <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> index.</p>\n"
  syntax:
    content: void CopyTo(Array array, int index)
    content.vb: Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\n<p>-or-</p>\n<p>The type of the source <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>.</p>\n"
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
