items:
- uid: System.Runtime.InteropServices.VariantWrapper
  commentId: T:System.Runtime.InteropServices.VariantWrapper
  id: VariantWrapper
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)
  - System.Runtime.InteropServices.VariantWrapper.WrappedObject
  langs:
  - csharp
  - vb
  name: VariantWrapper
  fullName: System.Runtime.InteropServices.VariantWrapper
  type: Class
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VariantWrapper
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 863
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Marshals data of type <strong>VT_VARIANT | VT_BYREF</strong> from managed to unmanaged code. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The purpose of <xref href=\"System.Runtime.InteropServices.VariantWrapper\" data-throw-if-not-resolved=\"false\"></xref> is to add one level of indirection when marshaling a managed type to the corresponding <strong>VARIANT</strong> type.</p>\n<p>You can use this class to wrap an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that the interop marshaler passes as <strong>VT_VARIANT | VT_BYREF</strong>. In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type <strong>VT_VARIANT | VT_BYREF</strong> to unmanaged code. The interop marshaler passed a variant of the managed type (for example, <strong>VT_BSTR | VT_BYREF</strong> for <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, or <strong>VT_I4 | VT_BYREF</strong> for <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>), but not <strong>VT_VARIANT | VT_BYREF</strong>.</p>\n<p>One advantage of using <strong>VT_VARIANT | VT_BYREF</strong> variant types is that the type of data can be changed during a method call. For example, you can pass a <strong>VT_VARIANT</strong><strong>| VT_BYREF</strong> variant type that contains a <strong>VT_BSTR</strong> and get a variant returned that contains a <strong>VT_I4</strong> after a method call. Because the COM interop marshaler has no way of knowing when to pass <strong>VT_BSTR | VT_BYREF</strong> and when to pass <strong>VT_VARIANT | VT_BYREF</strong>, which points to a variant that contains a <strong>BSTR</strong> for parameters declared as <strong>VARIANT *</strong>, you can instruct the marshaler by using <xref href=\"System.Runtime.InteropServices.VariantWrapper\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Note that early binding is not supported; you can use <xref href=\"System.Runtime.InteropServices.VariantWrapper\" data-throw-if-not-resolved=\"false\"></xref> only when calling <xref href=\"System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])\" data-throw-if-not-resolved=\"false\"></xref> or with a Dispatch-only interface called in an early bound fashion. In C#, you must also use the <strong>ref</strong> keyword to specify <strong>ByRef</strong> semantics for any parameter of type <xref href=\"System.Runtime.InteropServices.VariantWrapper\" data-throw-if-not-resolved=\"false\"></xref>. In Visual Basic, <strong>ByRef</strong> semantics are added automatically for every implicit late binding call. Also note that nesting <xref href=\"System.Runtime.InteropServices.VariantWrapper\" data-throw-if-not-resolved=\"false\"></xref> objects and arrays of <xref href=\"System.Runtime.InteropServices.VariantWrapper\" data-throw-if-not-resolved=\"false\"></xref> objects is not supported.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Runtime.InteropServices.VariantWrapper\" data-throw-if-not-resolved=\"false\"></xref> class to wrap an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that the interop marshaler passes as <strong>VT_VARIANT | VT_BYREF</strong>. </p>System.Runtime.InteropServices.VariantWrapper#1"
  syntax:
    content: 'public sealed class VariantWrapper : object'
    content.vb: >-
      Public NotInheritable Class VariantWrapper
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)
  commentId: M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Runtime.InteropServices.VariantWrapper
  langs:
  - csharp
  - vb
  name: VariantWrapper(Object)
  fullName: System.Runtime.InteropServices.VariantWrapper.VariantWrapper(System.Object)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 867
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.InteropServices.VariantWrapper\" data-throw-if-not-resolved=\"false\"></xref> class for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> parameter.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Runtime.InteropServices.VariantWrapper\" data-throw-if-not-resolved=\"false\"></xref> class to wrap an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> that the interop marshaler passes as <strong>VT_VARIANT | VT_BYREF</strong>. </p>System.Runtime.InteropServices.VariantWrapper#1"
  syntax:
    content: public VariantWrapper(object obj)
    content.vb: Public Sub New(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to marshal. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.VariantWrapper.WrappedObject
  commentId: P:System.Runtime.InteropServices.VariantWrapper.WrappedObject
  id: WrappedObject
  parent: System.Runtime.InteropServices.VariantWrapper
  langs:
  - csharp
  - vb
  name: WrappedObject
  fullName: System.Runtime.InteropServices.VariantWrapper.WrappedObject
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WrappedObject
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 868
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the object wrapped by the <xref href=\"System.Runtime.InteropServices.VariantWrapper\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public object WrappedObject { get; }
    content.vb: Public ReadOnly Property WrappedObject As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>The object wrapped by the <xref href=\"System.Runtime.InteropServices.VariantWrapper\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
