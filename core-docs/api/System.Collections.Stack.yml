items:
- uid: System.Collections.Stack
  commentId: T:System.Collections.Stack
  id: Stack
  parent: System.Collections
  children:
  - System.Collections.Stack.#ctor
  - System.Collections.Stack.#ctor(System.Collections.ICollection)
  - System.Collections.Stack.#ctor(System.Int32)
  - System.Collections.Stack.Clear
  - System.Collections.Stack.Clone
  - System.Collections.Stack.Contains(System.Object)
  - System.Collections.Stack.CopyTo(System.Array,System.Int32)
  - System.Collections.Stack.Count
  - System.Collections.Stack.GetEnumerator
  - System.Collections.Stack.IsSynchronized
  - System.Collections.Stack.Peek
  - System.Collections.Stack.Pop
  - System.Collections.Stack.Push(System.Object)
  - System.Collections.Stack.Synchronized(System.Collections.Stack)
  - System.Collections.Stack.SyncRoot
  - System.Collections.Stack.ToArray
  langs:
  - csharp
  - vb
  name: Stack
  fullName: System.Collections.Stack
  type: Class
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Stack
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 22
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Represents a simple last-in-first-out (LIFO) non-generic collection of objects.</p>\n"
  remarks: "\n<p>For the generic version of this collection, see <xref href=\"System.Collections.Generic.Stack`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity of a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation.</p>\n<p>If <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity of the stack, <xref href=\"System.Collections.Stack.Push(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> is an O(1) operation. If the capacity needs to be increased to accommodate the new element, <xref href=\"System.Collections.Stack.Push(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Collections.Stack.Pop\" data-throw-if-not-resolved=\"false\"></xref> is an O(1) operation.</p>\n<p>\n<xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n"
  example:
  - "\n<p>The following example shows how to create and add values to a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> and how to display its values.</p>Classic Stack Example#1"
  syntax:
    content: 'public class Stack : ICollection'
    content.vb: >-
      Public Class Stack
          Inherits ICollection
  seealso:
  - type: System.Collections.Generic.Stack`1
    commentId: T:System.Collections.Generic.Stack`1
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.Stack.#ctor
  commentId: M:System.Collections.Stack.#ctor
  id: '#ctor'
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: Stack()
  fullName: System.Collections.Stack.Stack()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 34
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and has the default initial capacity.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: public Stack()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Stack.#ctor(System.Collections.ICollection)
  commentId: M:System.Collections.Stack.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: Stack(ICollection)
  fullName: System.Collections.Stack.Stack(System.Collections.ICollection)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 250
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified collection and has the same initial capacity as the number of elements copied.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The elements are copied onto the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> in the same order they are read by the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>col</em>.</p>\n"
  syntax:
    content: public Stack(ICollection col)
    content.vb: Public Sub New(col As ICollection)
    parameters:
    - id: col
      type: System.Collections.ICollection
      description: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> to copy elements from. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>col</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Stack.#ctor(System.Int32)
  commentId: M:System.Collections.Stack.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: Stack(Int32)
  fullName: System.Collections.Stack.Stack(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 43
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>initialCapacity</em>.</p>\n"
  syntax:
    content: public Stack(int initialCapacity)
    content.vb: Public Sub New(initialCapacity As Integer)
    parameters:
    - id: initialCapacity
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>initialCapacity</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Stack.Count
  commentId: P:System.Collections.Stack.Count
  id: Count
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Stack.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 68
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The capacity is the number of elements that the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> can store. <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity is always greater than or equal to <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public virtual int Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Stack.IsSynchronized
  commentId: P:System.Collections.Stack.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: IsSynchronized
  fullName: System.Collections.Stack.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSynchronized
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 77
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe).</p>\n"
  remarks: "\n<p>To guarantee the thread safety of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, all operations must be done through the wrapper returned by the <xref href=\"System.Collections.Stack.Synchronized(System.Collections.Stack)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Stack.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration.</p>Classic Stack.IsSynchronized Example#2<p>Retrieving the value of this property is an O(1) operation.</p>"
  example:
  - "\n<p>The following example shows how to synchronize a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, determine if a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is synchronized, and use a synchronized <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Stack.IsSynchronized Example#1"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Stack.SyncRoot
  commentId: P:System.Collections.Stack.SyncRoot
  id: SyncRoot
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: SyncRoot
  fullName: System.Collections.Stack.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SyncRoot
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 82
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>To create a synchronized version of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, use the <xref href=\"System.Collections.Stack.Synchronized(System.Collections.Stack)\" data-throw-if-not-resolved=\"false\"></xref> method. However, derived classes can provide their own synchronized version of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Collections.Stack.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property. The synchronizing code must perform operations on the <xref href=\"System.Collections.Stack.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, not directly on the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Stack.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration. </p>Classic Stack.IsSynchronized Example#2<p>Retrieving the value of this property is an O(1) operation.</p>"
  syntax:
    content: public virtual Object SyncRoot { get; }
    content.vb: Public Overridable ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: Object
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Stack.Clear
  commentId: M:System.Collections.Stack.Clear
  id: Clear
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Stack.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 95
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes all objects from the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero, and references to other objects from elements of the collection are also released.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to clear the values of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Stack.Clear Example#1"
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Stack.Clone
  commentId: M:System.Collections.Stack.Clone
  id: Clone
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Collections.Stack.Clone()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 102
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Creates a shallow copy of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.</p>\n<p>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual Object Clone()
    content.vb: Public Overridable Function Clone As Object
    return:
      type: Object
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Stack.Contains(System.Object)
  commentId: M:System.Collections.Stack.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: Contains(Object)
  fullName: System.Collections.Stack.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 257
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether an element is in the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method determines equality by calling the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method tests for equality by passing the <em>obj</em> argument to the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method of individual objects in the collection. In the earlier versions of the .NET Framework, this determination was made by using passing the individual items in the collection to the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method of the <em>obj</em> argument.</p>\n"
  syntax:
    content: public virtual bool Contains(object obj)
    content.vb: Public Overridable Function Contains(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to locate in the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong>, if <em>obj</em> is found in the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Stack.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Stack.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Collections.Stack.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 258
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> to an existing one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified array index.</p>\n"
  remarks: "\n<p>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref href=\"System.Collections.Stack.Pop\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to copy a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> into a one-dimensional array.</p>Classic Stack.CopyTo Example#1"
  syntax:
    content: public virtual void CopyTo(Array array, int index)
    content.vb: Public Overridable Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  seealso:
  - type: System.Collections.Stack.ToArray
    commentId: M:System.Collections.Stack.ToArray
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Stack.GetEnumerator
  commentId: M:System.Collections.Stack.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Stack.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 166
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>[Visual Basic, C#]</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public virtual IEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IEnumerator
    return:
      type: IEnumerator
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Stack.Peek
  commentId: M:System.Collections.Stack.Peek
  id: Peek
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: Peek()
  fullName: System.Collections.Stack.Peek()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Peek
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 174
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns the object at the top of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> without removing it.</p>\n"
  remarks: "\n<p>This method is similar to the <xref href=\"System.Collections.Stack.Pop\" data-throw-if-not-resolved=\"false\"></xref> method, but <xref href=\"System.Collections.Stack.Peek\" data-throw-if-not-resolved=\"false\"></xref> does not modify the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>null</strong> can be pushed onto the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> as a placeholder, if needed. To distinguish between a null value and the end of the stack, check the <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref> property or catch the <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>, which is thrown when the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example shows how to add elements to the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, remove elements from the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, or view the element at the top of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Stack.Peek Example#1"
  syntax:
    content: public virtual Object Peek()
    content.vb: Public Overridable Function Peek As Object
    return:
      type: Object
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is empty. </p>\n"
  seealso:
  - type: System.Collections.Stack.Pop
    commentId: M:System.Collections.Stack.Pop
  - type: System.Collections.Stack.Push(System.Object)
    commentId: M:System.Collections.Stack.Push(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Stack.Pop
  commentId: M:System.Collections.Stack.Pop
  id: Pop
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: Pop()
  fullName: System.Collections.Stack.Pop()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pop
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 184
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes and returns the object at the top of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is similar to the <xref href=\"System.Collections.Stack.Peek\" data-throw-if-not-resolved=\"false\"></xref> method, but <xref href=\"System.Collections.Stack.Peek\" data-throw-if-not-resolved=\"false\"></xref> does not modify the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>null</strong> can be pushed onto the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> as a placeholder, if needed. To distinguish between a null value and the end of the stack, check the <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref> property or catch the <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>, which is thrown when the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n<p>\n    This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example shows how to add elements to the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, remove elements from the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, or view the element at the top of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Stack.Peek Example#1"
  syntax:
    content: public virtual Object Pop()
    content.vb: Public Overridable Function Pop As Object
    return:
      type: Object
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is empty. </p>\n"
  seealso:
  - type: System.Collections.Stack.Peek
    commentId: M:System.Collections.Stack.Peek
  - type: System.Collections.Stack.Push(System.Object)
    commentId: M:System.Collections.Stack.Push(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Stack.Push(System.Object)
  commentId: M:System.Collections.Stack.Push(System.Object)
  id: Push(System.Object)
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: Push(Object)
  fullName: System.Collections.Stack.Push(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Push
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 262
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Inserts an object at the top of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals the capacity, the capacity of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is increased by automatically reallocating the internal array, and the existing elements are copied to the new array before the new element is added.</p>\n<p>\n<strong>null</strong> can be pushed onto the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> as a placeholder, if needed. It occupies a slot in the stack and is treated like any object.</p>\n<p>If <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity of the stack, <xref href=\"System.Collections.Stack.Push(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> is an O(1) operation. If the capacity needs to be increased to accommodate the new element, <xref href=\"System.Collections.Stack.Push(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to add elements to the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, remove elements from the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, or view the element at the top of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Stack.Peek Example#1"
  syntax:
    content: public virtual void Push(object obj)
    content.vb: Public Overridable Sub Push(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to push onto the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.Stack.Peek
    commentId: M:System.Collections.Stack.Peek
  - type: System.Collections.Stack.Pop
    commentId: M:System.Collections.Stack.Pop
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Stack.Synchronized(System.Collections.Stack)
  commentId: M:System.Collections.Stack.Synchronized(System.Collections.Stack)
  id: Synchronized(System.Collections.Stack)
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: Synchronized(Stack)
  fullName: System.Collections.Stack.Synchronized(System.Collections.Stack)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Synchronized
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 213
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns a synchronized (thread safe) wrapper for the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>To guarantee the thread safety of the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, all operations must be done through this wrapper.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Stack.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration. </p>Classic Stack.IsSynchronized Example#2<p>This method is an O(1) operation.</p>"
  example:
  - "\n<p>The following example shows how to synchronize a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>, determine if a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> is synchronized, and use a synchronized <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Stack.IsSynchronized Example#1"
  syntax:
    content: public static Stack Synchronized(Stack stack)
    content.vb: Public Shared Function Synchronized(stack As Stack) As Stack
    parameters:
    - id: stack
      type: System.Collections.Stack
    return:
      type: System.Collections.Stack
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stack</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.Stack.ToArray
  commentId: M:System.Collections.Stack.ToArray
  id: ToArray
  parent: System.Collections.Stack
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.Collections.Stack.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections.NonGeneric/src/System/Collections/Stack.cs
    startLine: 224
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> to a new array.</p>\n"
  remarks: "\n<p>The elements are copied onto the array in last-in-first-out (LIFO) order, similar to the order of the elements returned by a succession of calls to <xref href=\"System.Collections.Stack.Pop\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Stack.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to copy a <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> into a one-dimensional array.</p>Classic Stack.CopyTo Example#1"
  syntax:
    content: public virtual Object[] ToArray()
    content.vb: Public Overridable Function ToArray As Object()
    return:
      type: Object[]
  seealso:
  - type: System.Collections.Stack.CopyTo(System.Array,System.Int32)
    commentId: M:System.Collections.Stack.CopyTo(System.Array,System.Int32)
  - type: System.Collections.Stack.Pop
    commentId: M:System.Collections.Stack.Pop
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Stack
  parent: System.Collections
  isExternal: false
  name: Stack
  fullName: System.Collections.Stack
- uid: System.Object[]
  isExternal: false
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ()
    fullName: ()
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
