items:
- uid: System.Runtime.CompilerServices.StateMachineAttribute
  commentId: T:System.Runtime.CompilerServices.StateMachineAttribute
  id: StateMachineAttribute
  parent: System.Runtime.CompilerServices
  children:
  - System.Runtime.CompilerServices.StateMachineAttribute.#ctor(System.Type)
  - System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType
  langs:
  - csharp
  - vb
  name: StateMachineAttribute
  fullName: System.Runtime.CompilerServices.StateMachineAttribute
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/StateMachineAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StateMachineAttribute
    path: src/mscorlib/src/System/Runtime/CompilerServices/StateMachineAttribute.cs
    startLine: 9
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Allows you to determine whether a method is a state machine method.</p>\n"
  remarks: "\n<p>You should not apply the StateMachine attribute to methods in your code. For methods that are state machine methods, the compiler will apply the <xref href=\"System.Runtime.CompilerServices.AsyncStateMachineAttribute\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.CompilerServices.IteratorStateMachineAttribute\" data-throw-if-not-resolved=\"false\"></xref> in the emitted IL.</p>\n<p>When checking whether a method is a state machine method, it is preferable to instead check for following attributes, which are derived from StateMachineAttribute:</p>\n<ul><li>\n<p>\n<xref href=\"System.Runtime.CompilerServices.AsyncStateMachineAttribute\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Runtime.CompilerServices.IteratorStateMachineAttribute\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>StateMachineAttribute cannot be used to check whether a method is a state machine method if the method is an iterator method in C#.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)]

      public class StateMachineAttribute : Attribute, _Attribute
    content.vb: >-
      <Serializable>

      <AttributeUsage(AttributeTargets.Method, Inherited:=False, AllowMultiple:=False)>

      Public Class StateMachineAttribute
          Inherits Attribute
          Implements _Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 64
    namedArguments:
    - name: Inherited
      type: System.Boolean
      value: false
    - name: AllowMultiple
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Runtime.CompilerServices.StateMachineAttribute.#ctor(System.Type)
  commentId: M:System.Runtime.CompilerServices.StateMachineAttribute.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.Runtime.CompilerServices.StateMachineAttribute
  langs:
  - csharp
  - vb
  name: StateMachineAttribute(Type)
  fullName: System.Runtime.CompilerServices.StateMachineAttribute.StateMachineAttribute(System.Type)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/StateMachineAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/CompilerServices/StateMachineAttribute.cs
    startLine: 14
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.CompilerServices.StateMachineAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public StateMachineAttribute(Type stateMachineType)
    content.vb: Public Sub New(stateMachineType As Type)
    parameters:
    - id: stateMachineType
      type: System.Type
  seealso:
  - type: System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType
    commentId: P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType
  - type: System.Runtime.CompilerServices.AsyncStateMachineAttribute
    commentId: T:System.Runtime.CompilerServices.AsyncStateMachineAttribute
  - type: System.Runtime.CompilerServices.IteratorStateMachineAttribute
    commentId: T:System.Runtime.CompilerServices.IteratorStateMachineAttribute
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType
  commentId: P:System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType
  id: StateMachineType
  parent: System.Runtime.CompilerServices.StateMachineAttribute
  langs:
  - csharp
  - vb
  name: StateMachineType
  fullName: System.Runtime.CompilerServices.StateMachineAttribute.StateMachineType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/StateMachineAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StateMachineType
    path: src/mscorlib/src/System/Runtime/CompilerServices/StateMachineAttribute.cs
    startLine: 12
  assemblies:
  - System.Runtime
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Returns the type object for the underlying state machine type that was generated by the compiler to implement the state machine method.</p>\n"
  remarks: "\n<p>This property may be useful for debuggers and reflection tools.</p>\n"
  syntax:
    content: public Type StateMachineType { get; }
    content.vb: Public ReadOnly Property StateMachineType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
