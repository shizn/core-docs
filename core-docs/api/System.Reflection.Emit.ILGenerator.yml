items:
- uid: System.Reflection.Emit.ILGenerator
  commentId: T:System.Reflection.Emit.ILGenerator
  id: ILGenerator
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  - System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  - System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  - System.Reflection.Emit.ILGenerator.BeginFaultBlock
  - System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  - System.Reflection.Emit.ILGenerator.BeginScope
  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  - System.Reflection.Emit.ILGenerator.DefineLabel
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  - System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  - System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  - System.Reflection.Emit.ILGenerator.EndExceptionBlock
  - System.Reflection.Emit.ILGenerator.EndScope
  - System.Reflection.Emit.ILGenerator.ILOffset
  - System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  - System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  - System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  langs:
  - csharp
  - vb
  name: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ILGenerator
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 17
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Generates Microsoft intermediate language (MSIL) instructions.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> is used to generate method bodies for methods and constructors in dynamic assemblies (represented by the <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.Emit.ConstructorBuilder\" data-throw-if-not-resolved=\"false\"></xref> classes) and for standalone dynamic methods (represented by the <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> class). To obtain an <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref>, use the <xref href=\"System.Reflection.Emit.ConstructorBuilder.GetILGenerator\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.Emit.DynamicMethod.GetILGenerator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.Emit.MethodBuilder.GetILGenerator\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>MSIL is used as input to a just-in-time (JIT) compiler.</p>\n"
  syntax:
    content: >-
      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_ILGenerator))]

      [ComVisible(true)]

      public class ILGenerator : _ILGenerator
    content.vb: >-
      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_ILGenerator))>

      <ComVisible(True)>

      Public Class ILGenerator
          Implements _ILGenerator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.Emit.ILGenerator.ILOffset
  commentId: P:System.Reflection.Emit.ILGenerator.ILOffset
  id: ILOffset
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: ILOffset
  fullName: System.Reflection.Emit.ILGenerator.ILOffset
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ILOffset
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1353
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is transparent, and can be called from partially trusted code.</p>\n<p>If the <xref href=\"System.Reflection.Emit.ILGenerator.ILOffset\" data-throw-if-not-resolved=\"false\"></xref> property is accessed before any MSIL instructions have been emitted, it returns 0 (zero).</p>\n<p>When MSIL is generated for dynamic languages, this property can be used to map offsets in the MSIL stream to source code line numbers. The resulting information can be used to provide stack traces when exceptions are thrown. </p>\n"
  example:
  - 
  syntax:
    content: public virtual int ILOffset { get; }
    content.vb: Public Overridable ReadOnly Property ILOffset As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  id: BeginCatchBlock(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginCatchBlock(Type)
  fullName: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BeginCatchBlock
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1035
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Begins a catch block.</p>\n"
  remarks: "\n<p>Emits a branch instruction to the end of the current exception block.</p>\n<p>If the filter exception block returns the <strong>constant exception_execute_handler</strong> (see the documentation for the Common Language Infrastructure Instruction Set), the argument to the <strong>BeginCatchBlock</strong> is not checked.</p>\n"
  example:
  - "\n<p>The code sample below demonstrates the contextual usage of the <strong>BeginCatchBlock</strong> method.</p>System.Reflection.Emit.ILGenerator.ThrowException Example#1"
  syntax:
    content: public virtual void BeginCatchBlock(Type exceptionType)
    content.vb: Public Overridable Sub BeginCatchBlock(exceptionType As Type)
    parameters:
    - id: exceptionType
      type: System.Type
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The catch block is within a filtered exception. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>exceptionType</em> is <strong>null</strong>, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  commentId: M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  id: BeginExceptFilterBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginExceptFilterBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BeginExceptFilterBlock
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1020
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Begins an exception block for a filtered exception.</p>\n"
  remarks: "\n<p>Emits a branch instruction to the end of the current exception block.</p>\n<p>If the current <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> is associated with a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> object, emitting filtered exception blocks is not supported. <xref href=\"System.Reflection.Emit.DynamicILInfo\" data-throw-if-not-resolved=\"false\"></xref> can be used to construct a dynamic method that uses filtered exception blocks.</p>\n"
  example:
  - 
  syntax:
    content: public virtual void BeginExceptFilterBlock()
    content.vb: Public Overridable Sub BeginExceptFilterBlock
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </p>\n<p>-or-</p>\n<p>This <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  commentId: M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  id: BeginExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptionBlock()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BeginExceptionBlock
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 938
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Begins an exception block for a non-filtered exception.</p>\n"
  remarks: "\n<p>Creating an exception block records some information, but does not actually emit any Microsoft intermediate language (MSIL) onto the stream.</p>\n"
  example:
  - "\n<p>The code sample below demonstrates the contextual usage of the <strong>BeginExceptionBlock</strong> method.</p>System.Reflection.Emit.ILGenerator.ThrowException Example#1"
  syntax:
    content: public virtual Label BeginExceptionBlock()
    content.vb: Public Overridable Function BeginExceptionBlock As Label
    return:
      type: System.Reflection.Emit.Label
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginFaultBlock
  commentId: M:System.Reflection.Emit.ILGenerator.BeginFaultBlock
  id: BeginFaultBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginFaultBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFaultBlock()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BeginFaultBlock
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1064
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.</p>\n"
  remarks: "\n<p>If the current <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> is associated with a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> object, emitting exception fault blocks is not supported. <xref href=\"System.Reflection.Emit.DynamicILInfo\" data-throw-if-not-resolved=\"false\"></xref> can be used to construct a dynamic method that uses exception fault blocks.</p>\n"
  example:
  - "\n<p>The following code sample illustrates the use of <strong>BeginFaultBlock</strong>.</p>ILGenerator_BeginFaultBlock#1"
  syntax:
    content: public virtual void BeginFaultBlock()
    content.vb: Public Overridable Sub BeginFaultBlock
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The MSIL being generated is not currently in an exception block. </p>\n<p>-or-</p>\n<p>This <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  commentId: M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  id: BeginFinallyBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginFinallyBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFinallyBlock()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BeginFinallyBlock
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1078
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.</p>\n"
  example:
  - "\n<p>The following code sample illustrates the use of <strong>BeginFinallyBlock</strong>.</p>ILGenerator_BeginFinallyBlock_2#2"
  syntax:
    content: public virtual void BeginFinallyBlock()
    content.vb: Public Overridable Sub BeginFinallyBlock
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The MSIL being generated is not currently in an exception block. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginScope
  commentId: M:System.Reflection.Emit.ILGenerator.BeginScope
  id: BeginScope
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginScope()
  fullName: System.Reflection.Emit.ILGenerator.BeginScope()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BeginScope
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1343
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Begins a lexical scope.</p>\n"
  remarks: "\n<p>This method is used to emit symbolic information. Local variables declared after <xref href=\"System.Reflection.Emit.ILGenerator.BeginScope\" data-throw-if-not-resolved=\"false\"></xref> are scoped until the corresponding <xref href=\"System.Reflection.Emit.ILGenerator.EndScope\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n<p>If the current <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> is associated with a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> object, it does not support symbolic information.</p>\n"
  example:
  - "\n<p>The following code sample illustrates the use of <strong>BeginScope</strong> and <strong>EndScope</strong>.</p>ILGenerator_Begin_EndScope#2"
  syntax:
    content: public virtual void BeginScope()
    content.vb: Public Overridable Sub BeginScope
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  id: DeclareLocal(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: DeclareLocal(Type)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclareLocal
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1262
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Declares a local variable of the specified type.</p>\n"
  remarks: "\n<p>The local variable is created in the current lexical scope; for example, if code is being emitted in a <strong>for</strong> loop (<strong>For</strong> loop in Visual Basic), the scope of the variable is the loop.</p>\n<p>A local variable created with this overload is not pinned. To create a pinned variable for use with unmanaged pointers, use the <xref href=\"System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method overload.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <strong>DeclareLocal</strong> method. This code is part of a larger code example for the <xref href=\"System.Reflection.Emit.LocalBuilder\" data-throw-if-not-resolved=\"false\"></xref> class.</p>LocalBuilder_Sample_SetLocalSymInfo#2"
  syntax:
    content: public virtual LocalBuilder DeclareLocal(Type localType)
    content.vb: Public Overridable Function DeclareLocal(localType As Type) As LocalBuilder
    parameters:
    - id: localType
      type: System.Type
    return:
      type: System.Reflection.Emit.LocalBuilder
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>localType</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The containing type has been created by the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  commentId: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  id: DeclareLocal(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: DeclareLocal(Type, Boolean)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclareLocal
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1267
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Declares a local variable of the specified type, optionally pinning the object referred to by the variable.</p>\n"
  remarks: "\n<p>The local variable is created in the current lexical scope; for example, if code is being emitted in a <strong>for</strong> loop (<strong>For</strong> loop in Visual Basic), the scope of the variable is the loop.</p>\n<p>In unsafe code, an object must be pinned before it can be referred to by an unmanaged pointer. While the referenced object is pinned, it cannot be moved by garbage collection.</p>\n"
  example:
  - 
  syntax:
    content: public virtual LocalBuilder DeclareLocal(Type localType, bool pinned)
    content.vb: Public Overridable Function DeclareLocal(localType As Type, pinned As Boolean) As LocalBuilder
    parameters:
    - id: localType
      type: System.Type
    - id: pinned
      type: System.Boolean
    return:
      type: System.Reflection.Emit.LocalBuilder
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>localType</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The containing type has been created by the <xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>-or-</p>\n<p>The method body of the enclosing method has been created by the <xref href=\"System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The method with which this <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> is associated is not represented by a <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.DefineLabel
  commentId: M:System.Reflection.Emit.ILGenerator.DefineLabel
  id: DefineLabel
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: DefineLabel()
  fullName: System.Reflection.Emit.ILGenerator.DefineLabel()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineLabel
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1110
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Declares a new label.</p>\n"
  remarks: "\n<p>To set the position of the label within the stream, you must call <xref href=\"System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This is just a token and does not yet represent any particular location within the stream.</p>\n"
  example:
  - "\n<p>The code sample below demonstrates the contextual usage of the <strong>DefineLabel</strong> method.</p>System.Reflection.Emit.Label Example#1"
  syntax:
    content: public virtual Label DefineLabel()
    content.vb: Public Overridable Function DefineLabel As Label
    return:
      type: System.Reflection.Emit.Label
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  id: Emit(System.Reflection.Emit.OpCode)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 429
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction onto the stream of instructions.</p>\n"
  remarks: "\n<p>If the <em>opcode</em> parameter requires an argument, the caller must ensure that the argument length matches the length of the declared parameter. Otherwise, results will be unpredictable. For example, if the Emit instruction requires a 2-byte operand and the caller supplies a 4-byte operand, the runtime will emit two additional bytes to the instruction stream. These extra bytes will be <xref href=\"System.Reflection.Emit.OpCodes.Nop\" data-throw-if-not-resolved=\"false\"></xref> instructions.</p>\n<p>The instruction values are defined in <xref href=\"System.Reflection.Emit.OpCodes\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The code sample below demonstrates the use of <strong>Emit</strong> to generate MSIL output via an instance of <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Reflection.Emit.ILGenerator.Emit Example 2#1"
  syntax:
    content: public virtual void Emit(OpCode opcode)
    content.vb: Public Overridable Sub Emit(opcode As OpCode)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  id: Emit(System.Reflection.Emit.OpCode,System.Byte)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Byte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 436
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n"
  syntax:
    content: public virtual void Emit(OpCode opcode, byte arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Byte)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.Byte
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  id: Emit(System.Reflection.Emit.OpCode,System.Double)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Double)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 763
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual void Emit(OpCode opcode, double arg)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Sub Emit(opcode As OpCode, arg As Double)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.Double
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  id: Emit(System.Reflection.Emit.OpCode,System.Int16)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Int16)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 457
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n"
  syntax:
    content: public virtual void Emit(OpCode opcode, short arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Short)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.Int16
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  id: Emit(System.Reflection.Emit.OpCode,System.Int32)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Int32)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 466
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n"
  syntax:
    content: public virtual void Emit(OpCode opcode, int arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Integer)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.Int32
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  id: Emit(System.Reflection.Emit.OpCode,System.Int64)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Int64)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 739
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n"
  syntax:
    content: public virtual void Emit(OpCode opcode, long arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Long)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.Int64
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, ConstructorInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.ConstructorInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 668
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n<p>The location of <em>con</em> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ComVisible(true)]

      public virtual void Emit(OpCode opcode, ConstructorInfo con)
    content.vb: >-
      <SecuritySafeCritical>

      <ComVisible(True)>

      Public Overridable Sub Emit(opcode As OpCode, con As ConstructorInfo)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: con
      type: System.Reflection.ConstructorInfo
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> is <strong>null</strong>. This exception is new in the .NET Framework 4.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Label)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 778
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n<p>Labels are created using <xref href=\"System.Reflection.Emit.ILGenerator.DefineLabel\" data-throw-if-not-resolved=\"false\"></xref>, and their location within the stream is fixed by using <xref href=\"System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)\" data-throw-if-not-resolved=\"false\"></xref>. If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream. <em>opcode</em> must represent a branch instruction. Because branches are relative instructions, <em>label</em> will be replaced with the correct offset to branch during the fixup process.</p>\n"
  example:
  - "\n<p>The code sample below illustrates the creation of a dynamic method with a jump table. The jump table is built using an array of <xref href=\"System.Reflection.Emit.Label\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Reflection.Emit.ILGenerator.Emit Example 2#1"
  syntax:
    content: public virtual void Emit(OpCode opcode, Label label)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, label As Label)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: label
      type: System.Reflection.Emit.Label
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Label[])
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 804
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.</p>\n"
  remarks: "\n<p>Emits a switch table.</p>\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n<p>Labels are created using <xref href=\"System.Reflection.Emit.ILGenerator.DefineLabel\" data-throw-if-not-resolved=\"false\"></xref> and their location within the stream is fixed by using <xref href=\"System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)\" data-throw-if-not-resolved=\"false\"></xref>. If a single-byte instruction is used, the label can represent a jump of at most 127 bytes along the stream. <em>opcode</em> must represent a branch instruction. Because branches are relative instructions, <em>label</em> will be replaced with the correct offset to branch during the fixup process.</p>\n"
  example:
  - "\n<p>The code sample below illustrates the creation of a dynamic method with a jump table. The jump table is built using an array of <xref href=\"System.Reflection.Emit.Label\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Reflection.Emit.ILGenerator.Emit Example 2#1"
  syntax:
    content: public virtual void Emit(OpCode opcode, Label[] labels)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, labels As Label())
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: labels
      type: System.Reflection.Emit.Label[]
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> is <strong>null</strong>. This exception is new in the .NET Framework 4.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label())
  name.vb: Emit(OpCode, Label())
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.LocalBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 850
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n"
  syntax:
    content: public virtual void Emit(OpCode opcode, LocalBuilder local)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, local As LocalBuilder)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: local
      type: System.Reflection.Emit.LocalBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The parent method of the <em>local</em> parameter does not match the method associated with this <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>local</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>opcode</em> is a single-byte instruction, and <em>local</em> represents a local variable with an index greater than <strong>Byte.MaxValue</strong>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, SignatureHelper)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.SignatureHelper)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 633
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n"
  syntax:
    content: public virtual void Emit(OpCode opcode, SignatureHelper signature)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, signature As SignatureHelper)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: signature
      type: System.Reflection.Emit.SignatureHelper
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>signature</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.FieldInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 827
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration. The location of <em>field</em> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</p>\n"
  syntax:
    content: public virtual void Emit(OpCode opcode, FieldInfo field)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, field As FieldInfo)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: field
      type: System.Reflection.FieldInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, MethodInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 474
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n<p>The location of <em>meth</em> is recorded so that the instruction stream can be patched if necessary when persisting the module to a portable executable (PE) file.</p>\n<p>If <em>meth</em> represents a generic method, it must be a generic method definition. That is, its <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property must be <strong>true</strong>.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual void Emit(OpCode opcode, MethodInfo meth)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Sub Emit(opcode As OpCode, meth As MethodInfo)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: meth
      type: System.Reflection.MethodInfo
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>meth</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>meth</em> is a generic method for which the <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  id: Emit(System.Reflection.Emit.OpCode,System.SByte)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, SByte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 443
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void Emit(OpCode opcode, sbyte arg)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub Emit(opcode As OpCode, arg As SByte)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.SByte
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  id: Emit(System.Reflection.Emit.OpCode,System.Single)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Single)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 752
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual void Emit(OpCode opcode, float arg)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Sub Emit(opcode As OpCode, arg As Single)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: arg
      type: System.Single
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  id: Emit(System.Reflection.Emit.OpCode,System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, String)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 837
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration. The location of <em>str</em> is recorded for future fixups if the module is persisted to a portable executable (PE) file.</p>\n"
  syntax:
    content: public virtual void Emit(OpCode opcode, string str)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, str As String)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: str
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  id: Emit(System.Reflection.Emit.OpCode,System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Type)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 712
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.</p>\n"
  remarks: "\n<p>The instruction values are defined in the <strong>OpCodes</strong> enumeration. The location of <em>cls</em> is recorded so that the token can be patched if necessary when persisting the module to a portable executable (PE) file.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual void Emit(OpCode opcode, Type cls)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Sub Emit(opcode As OpCode, cls As Type)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: cls
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>cls</em> is <strong>null</strong>. </p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  commentId: M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  id: EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitCall(OpCode, MethodInfo, Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EmitCall
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 595
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts a <strong>call</strong> or <strong>callvirt</strong> instruction onto the Microsoft intermediate language (MSIL) stream to call a <strong>varargs</strong> method.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method is used to emit calls to <strong>varargs</strong> methods because there is no overload of the <see cref=\"Overload:System.Reflection.Emit.ILGenerator.Emit\"></see> method that specifies the parameter types of the variable arguments.</p>\n<p>To emit calls to methods that do not use the <xref href=\"System.Reflection.CallingConventions.VarArgs\" data-throw-if-not-resolved=\"false\"></xref> calling convention, use the <xref href=\"System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)\" data-throw-if-not-resolved=\"false\"></xref> method overload. </p>\n"
  example:
  - <p>The following code example emits two methods, a <strong>varargs</strong> method and a method that calls the <strong>varargs</strong> method. The <strong>EmitCall</strong> method is used to emit the call to the <strong>varargs</strong> method.</p>Emit.ArgIterator#1
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Sub EmitCall(opcode As OpCode, methodInfo As MethodInfo, optionalParameterTypes As Type())
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: methodInfo
      type: System.Reflection.MethodInfo
    - id: optionalParameterTypes
      type: System.Type[]
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>opcode</em> does not specify a method call.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>methodInfo</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The calling convention for the method is not <strong>varargs</strong>, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type())
  name.vb: EmitCall(OpCode, MethodInfo, Type())
- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  commentId: M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  id: EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EmitCalli
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 506
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Puts a <xref href=\"System.Reflection.Emit.OpCodes.Calli\" data-throw-if-not-resolved=\"false\"></xref> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.</p>\n"
  remarks: "\n<p>Use <xref href=\"System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> to put a <xref href=\"System.Reflection.Emit.OpCodes.Calli\" data-throw-if-not-resolved=\"false\"></xref> instruction onto the stream. Do not use <xref href=\"System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If <em>optionalParameterTypes</em> specifies optional arguments, <em>callingConvention</em> must include the <xref href=\"System.Reflection.CallingConventions.VarArgs\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual void EmitCalli(OpCode opcode, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Sub EmitCalli(opcode As OpCode, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), optionalParameterTypes As Type())
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
    - id: callingConvention
      type: System.Reflection.CallingConventions
    - id: returnType
      type: System.Type
    - id: parameterTypes
      type: System.Type[]
    - id: optionalParameterTypes
      type: System.Type[]
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>optionalParameterTypes</em> is not <strong>null</strong>, but <em>callingConvention</em> does not include the <xref href=\"System.Reflection.CallingConventions.VarArgs\" data-throw-if-not-resolved=\"false\"></xref> flag.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type())
  name.vb: EmitCalli(OpCode, CallingConventions, Type, Type(), Type())
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  id: EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitWriteLine(LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EmitWriteLine
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1192
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Emits the Microsoft intermediate language (MSIL) necessary to call <see cref=\"Overload:System.Console.WriteLine\"></see> with the given local variable.</p>\n"
  remarks: "\n<p>The type of <em>localBuilder</em> must match the parameter type of an overload of the <see cref=\"Overload:System.Console.WriteLine\"></see> method.</p>\n"
  example:
  - "\n<p>The code sample below demonstrates the contextual usage of the <xref href=\"System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)\" data-throw-if-not-resolved=\"false\"></xref> method to write a string to the console in a dynamic method.</p>System.Reflection.Emit.ILGenerator.OpCodes Example#1"
  syntax:
    content: public virtual void EmitWriteLine(LocalBuilder localBuilder)
    content.vb: Public Overridable Sub EmitWriteLine(localBuilder As LocalBuilder)
    parameters:
    - id: localBuilder
      type: System.Reflection.Emit.LocalBuilder
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The type of <em>localBuilder</em> is <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref>, which are not supported. </p>\n<p>-or-</p>\n<p>There is no overload of <see cref=\"Overload:System.Console.WriteLine\"></see> that accepts the type of <em>localBuilder</em>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>localBuilder</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  id: EmitWriteLine(System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitWriteLine(FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EmitWriteLine
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1222
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Emits the Microsoft intermediate language (MSIL) necessary to call <see cref=\"Overload:System.Console.WriteLine\"></see> with the given field.</p>\n"
  remarks: "\n<p>The type of <em>fld</em> must match the parameter type of an overload of the <see cref=\"Overload:System.Console.WriteLine\"></see> method.</p>\n"
  example:
  - "\n<p>The following code sample demonstrates the use of the <xref href=\"System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)\" data-throw-if-not-resolved=\"false\"></xref> method to write a string to the console in a dynamic method.</p>System.Reflection.Emit.ILGenerator.OpCodes Example#1"
  syntax:
    content: public virtual void EmitWriteLine(FieldInfo fld)
    content.vb: Public Overridable Sub EmitWriteLine(fld As FieldInfo)
    parameters:
    - id: fld
      type: System.Reflection.FieldInfo
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>There is no overload of the <see cref=\"Overload:System.Console.WriteLine\"></see> method that accepts the type of the specified field. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>fld</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The type of the field is <xref href=\"System.Reflection.Emit.TypeBuilder\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Reflection.Emit.EnumBuilder\" data-throw-if-not-resolved=\"false\"></xref>, which are not supported. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  id: EmitWriteLine(System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitWriteLine(String)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EmitWriteLine
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1181
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Emits the Microsoft intermediate language (MSIL) to call <see cref=\"Overload:System.Console.WriteLine\"></see> with a string.</p>\n"
  remarks: "\n<p>The string must have already been defined.</p>\n"
  example:
  - "\n<p>The code sample below demonstrates the contextual usage of the <strong>EmitWriteLine</strong> method to write a string to the console in a dynamic method.</p>System.Reflection.Emit.ILGenerator.OpCodes Example#1"
  syntax:
    content: public virtual void EmitWriteLine(string value)
    content.vb: Public Overridable Sub EmitWriteLine(value As String)
    parameters:
    - id: value
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EndExceptionBlock
  commentId: M:System.Reflection.Emit.ILGenerator.EndExceptionBlock
  id: EndExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EndExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.EndExceptionBlock()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EndExceptionBlock
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 982
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Ends an exception block.</p>\n"
  example:
  - "\n<p>The code sample below demonstrates the contextual usage of the <strong>EndExceptionBlock</strong> method.</p>System.Reflection.Emit.ILGenerator.ThrowException Example#1"
  syntax:
    content: public virtual void EndExceptionBlock()
    content.vb: Public Overridable Sub
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The end exception block occurs in an unexpected place in the code stream. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EndScope
  commentId: M:System.Reflection.Emit.ILGenerator.EndScope
  id: EndScope
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EndScope()
  fullName: System.Reflection.Emit.ILGenerator.EndScope()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EndScope
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1348
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Ends a lexical scope.</p>\n"
  remarks: "\n<p>This method is used to emit symbolic information. It is used with <xref href=\"System.Reflection.Emit.ILGenerator.BeginScope\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the current <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> is associated with a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> object, it does not support symbolic information.</p>\n"
  example:
  - "\n<p>The following code sample illustrates the use of <strong>BeginScope</strong> and <strong>EndScope</strong>.</p>ILGenerator_Begin_EndScope#2"
  syntax:
    content: public virtual void EndScope()
    content.vb: Public Overridable Sub
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  commentId: M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  id: MarkLabel(System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: MarkLabel(Label)
  fullName: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MarkLabel
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1128
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.</p>\n"
  remarks: "\n<p>A label cannot be defined more than once.</p>\n"
  example:
  - "\n<p>The code sample below demonstrates the contextual usage of <strong>MarkLabel</strong> to implement MSIL branching in a dynamic method.</p>System.Reflection.Emit.ILGenerator.Emit Example 2#1"
  syntax:
    content: public virtual void MarkLabel(Label loc)
    content.vb: Public Overridable Sub MarkLabel(loc As Label)
    parameters:
    - id: loc
      type: System.Reflection.Emit.Label
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>loc</em> represents an invalid index into the label array.</p>\n<p>-or- </p>\n<p>An index for <em>loc</em> has already been defined. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  id: ThrowException(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: ThrowException(Type)
  fullName: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ThrowException
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1150
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Emits an instruction to throw an exception.</p>\n"
  example:
  - "\n<p>The following code sample demonstrates the contextual usage of <strong>ThrowException</strong> to throw an exception inside the MSIL of a dynamic method.</p>System.Reflection.Emit.ILGenerator.ThrowException Example#1"
  syntax:
    content: public virtual void ThrowException(Type excType)
    content.vb: Public Overridable Sub ThrowException(excType As Type)
    parameters:
    - id: excType
      type: System.Type
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>excType</em> is not the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> class or a derived class of <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The type does not have a default constructor. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>excType</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  commentId: M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  id: UsingNamespace(System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: UsingNamespace(String)
  fullName: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UsingNamespace
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1300
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.</p>\n"
  remarks: "\n<p>If the current <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> is associated with a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> object, this method is not supported.</p>\n"
  syntax:
    content: public virtual void UsingNamespace(string usingNamespace)
    content.vb: Public Overridable Sub UsingNamespace(usingNamespace As String)
    parameters:
    - id: usingNamespace
      type: System.String
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Length of <em>usingNamespace</em> is zero. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>usingNamespace</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This <xref href=\"System.Reflection.Emit.ILGenerator\" data-throw-if-not-resolved=\"false\"></xref> belongs to a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  fullName: System.Reflection.Emit.Label
- uid: System.Reflection.Emit.LocalBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: LocalBuilder
  fullName: System.Reflection.Emit.LocalBuilder
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.Emit.Label[]
  isExternal: false
  name: Label[]
  fullName: System.Reflection.Emit.Label[]
  fullname.vb: System.Reflection.Emit.Label()
  name.vb: Label()
  spec.csharp:
  - uid: System.Reflection.Emit.Label
    name: Label
    fullName: System.Reflection.Emit.Label
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.Emit.Label
    name: Label
    fullName: System.Reflection.Emit.Label
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.SignatureHelper
  parent: System.Reflection.Emit
  isExternal: false
  name: SignatureHelper
  fullName: System.Reflection.Emit.SignatureHelper
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
