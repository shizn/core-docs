items:
- uid: System.Diagnostics.Tracing.EventSource
  commentId: T:System.Diagnostics.Tracing.EventSource
  id: EventSource
  parent: System.Diagnostics.Tracing
  children:
  - System.Diagnostics.Tracing.EventSource.#ctor
  - System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)
  - System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)
  - System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  - System.Diagnostics.Tracing.EventSource.#ctor(System.String)
  - System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)
  - System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  - System.Diagnostics.Tracing.EventSource.ConstructionException
  - System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId
  - System.Diagnostics.Tracing.EventSource.Dispose
  - System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)
  - System.Diagnostics.Tracing.EventSource.EventCommandExecuted
  - System.Diagnostics.Tracing.EventSource.Finalize
  - System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)
  - System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)
  - System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)
  - System.Diagnostics.Tracing.EventSource.GetName(System.Type)
  - System.Diagnostics.Tracing.EventSource.GetSources
  - System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  - System.Diagnostics.Tracing.EventSource.Guid
  - System.Diagnostics.Tracing.EventSource.IsEnabled
  - System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  - System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)
  - System.Diagnostics.Tracing.EventSource.Name
  - System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  - System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})
  - System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  - System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)
  - System.Diagnostics.Tracing.EventSource.Settings
  - System.Diagnostics.Tracing.EventSource.ToString
  - System.Diagnostics.Tracing.EventSource.Write(System.String)
  - System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)
  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)
  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)
  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)
  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  - System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
  - System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  langs:
  - csharp
  - vb
  name: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventSource
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 150
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Provides the ability to create events for event tracing for Windows (ETW).</p>\n"
  remarks: "\n<p>This class is intended to be inherited by a user class that provides specific events to be used for ETW. The <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> methods are called to log the events.</p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>The basic functionality of <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> is sufficient for most applications.  If you want more control over the ETW manifest that is created, you can apply the <xref href=\"System.Diagnostics.Tracing.EventAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to the methods. For advanced event source applications, it is possible to intercept the commands being sent to the derived event source and change the filtering, or to cause actions (such as dumping a data structure) to be performed by the inheritor.  An event source can be activated with Windows ETW controllers, such as the Logman tool, immediately.  It is also possible to programmatically control and intercept the data dispatcher.  The <xref href=\"System.Diagnostics.Tracing.EventListener\" data-throw-if-not-resolved=\"false\"></xref> class provides additional functionality.      </p>\n<p>Starting with .NET Framework 4.6, <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> provides channel support and some of the event source validation rules have been relaxed. This means: </p>\n<ul><li>\n<p>\n<xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> types may now implement interfaces. This enables the use of event source types in advanced logging systems that use interfaces to define a common logging target.</p>\n</li><li>\n<p>The concept of a utility event source type has been introduced. This feature enables sharing code across multiple event source types in a project to enable scenarios such as optimized <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> overloads.</p>\n</li></ul>\n<p>For a version of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class that provides features such as channel support you are targeting .NET Framework 4.5.1 or earlier, see <see href=\"https://www.nuget.org/packages/Microsoft.Diagnostics.Tracing.EventSource\">Microsoft EventSource Library 1.0.16</see>.</p>\n"
  example:
  - "\n<p>The following example shows a simple implementation of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ETWTraceSmall#1"
  - "\n<p>The following example shows a more complex implementation of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ETWTrace#1"
  syntax:
    content: 'public class EventSource : IDisposable'
    content.vb: >-
      Public Class EventSource
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Diagnostics.Tracing.EventSource.#ctor
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor
  id: '#ctor'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource()
  fullName: System.Diagnostics.Tracing.EventSource.EventSource()
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 152
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected EventSource()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource(Boolean)
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 153
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class and specifies whether to throw an exception when an error occurs in the underlying Windows code.</p>\n"
  syntax:
    content: protected EventSource(bool throwOnEventWriteErrors)
    content.vb: Protected Sub New(throwOnEventWriteErrors As Boolean)
    parameters:
    - id: throwOnEventWriteErrors
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to throw an exception when an error occurs in the underlying Windows code; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)
  id: '#ctor(System.Diagnostics.Tracing.EventSourceSettings)'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource(EventSourceSettings)
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.Diagnostics.Tracing.EventSourceSettings)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 154
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class with the specified configuration settings.</p>\n"
  remarks: "\n<p> Specifying <em>settings</em> when the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process. </p>\n"
  syntax:
    content: protected EventSource(EventSourceSettings settings)
    content.vb: Protected Sub New(settings As EventSourceSettings)
    parameters:
    - id: settings
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: "\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  id: '#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource(EventSourceSettings, String[])
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.Diagnostics.Tracing.EventSourceSettings, System.String[])
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 155
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> to be used with non-contract events that contains the specified settings and traits.</p>\n"
  remarks: "\n<p>Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs and if not specified in pairs, an exception will occur. You can retrieve a trait by passing the key to the <xref href=\"System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, method.</p>\n<p>Specifying <em>settings</em> when the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.</p>\n"
  syntax:
    content: protected EventSource(EventSourceSettings settings, params string[] traits)
    content.vb: Protected Sub New(settings As EventSourceSettings, ParamArray traits As String())
    parameters:
    - id: settings
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: "\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\n"
    - id: traits
      type: System.String[]
      description: "\n<p>The key-value pairs that specify traits for the event source.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>traits</em> is not specified in key-value pairs.</p>\n"
  seealso:
  - type: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
    commentId: M:System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Diagnostics.Tracing.EventSource.EventSource(System.Diagnostics.Tracing.EventSourceSettings, System.String())
  name.vb: EventSource(EventSourceSettings, String())
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource(String)
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 156
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class with the specified name.</p>\n"
  syntax:
    content: public EventSource(string eventSourceName)
    content.vb: Public Sub New(eventSourceName As String)
    parameters:
    - id: eventSourceName
      type: System.String
      description: "\n<p>The name to apply to the event source. Must not be <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventSourceName</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)
  id: '#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource(String, EventSourceSettings)
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.String, System.Diagnostics.Tracing.EventSourceSettings)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 157
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class with the specified name and settings.</p>\n"
  remarks: "\n<p>Specifying <em>settings</em> when the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.</p>\n"
  syntax:
    content: public EventSource(string eventSourceName, EventSourceSettings config)
    content.vb: Public Sub New(eventSourceName As String, config As EventSourceSettings)
    parameters:
    - id: eventSourceName
      type: System.String
      description: "\n<p>The name to apply to the event source. Must not be <strong>null</strong>.</p>\n"
    - id: config
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: "\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventSourceName</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventSourceName</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  id: '#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource(String, EventSourceSettings, String[])
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.String, System.Diagnostics.Tracing.EventSourceSettings, System.String[])
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 158
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class with the specified configuration settings.</p>\n"
  remarks: "\n<p>Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs and if not specified in pairs, an exception will occur. You can retrieve a trait by passing the key to the <xref href=\"System.Diagnostics.Tracing.EventSource.GetTrait(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, method.</p>\n<p>Specifying <em>config</em> when the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> is constructed enables you to  specify whether the event is written in a manifest-based or a self-describing format. In addition, you can specify that an exception should be raised when an error occurs during the event-writing process.</p>\n"
  syntax:
    content: public EventSource(string eventSourceName, EventSourceSettings config, params string[] traits)
    content.vb: Public Sub New(eventSourceName As String, config As EventSourceSettings, ParamArray traits As String())
    parameters:
    - id: eventSourceName
      type: System.String
      description: "\n<p>The name to apply to the event source. Must not be <strong>null</strong>.</p>\n"
    - id: config
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: "\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\n"
    - id: traits
      type: System.String[]
      description: "\n<p>The key-value pairs that specify traits for the event source.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventSourceName</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>traits</em> is not specified in key-value pairs.</p>\n"
  seealso:
  - type: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
    commentId: M:System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Diagnostics.Tracing.EventSource.EventSource(System.String, System.Diagnostics.Tracing.EventSourceSettings, System.String())
  name.vb: EventSource(String, EventSourceSettings, String())
- uid: System.Diagnostics.Tracing.EventSource.ConstructionException
  commentId: P:System.Diagnostics.Tracing.EventSource.ConstructionException
  id: ConstructionException
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: ConstructionException
  fullName: System.Diagnostics.Tracing.EventSource.ConstructionException
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConstructionException
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 159
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Gets any exception that was thrown during the construction of the event source.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> constructors do not throw exceptions. Instead, any exception that is thrown is assigned to the <xref href=\"System.Diagnostics.Tracing.EventSource.ConstructionException\" data-throw-if-not-resolved=\"false\"></xref> property and logged by the <xref href=\"System.Diagnostics.Trace.WriteLine(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  syntax:
    content: public Exception ConstructionException { get; }
    content.vb: Public ReadOnly Property ConstructionException As Exception
    parameters: []
    return:
      type: System.Exception
      description: "\n<p>The exception that was thrown during the construction of the event source, or <strong>null</strong> if no exception was thrown. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId
  commentId: P:System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId
  id: CurrentThreadActivityId
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: CurrentThreadActivityId
  fullName: System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CurrentThreadActivityId
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 160
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Gets the activity ID of the current thread. </p>\n"
  syntax:
    content: public static Guid CurrentThreadActivityId { get; }
    content.vb: Public Shared ReadOnly Property CurrentThreadActivityId As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\n<p>The activity ID of the current thread. </p>\n"
  seealso:
  - type: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
    commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventSource.Guid
  commentId: P:System.Diagnostics.Tracing.EventSource.Guid
  id: Guid
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Guid
  fullName: System.Diagnostics.Tracing.EventSource.Guid
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Guid
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 161
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>The unique identifier for the event source.</p>\n"
  syntax:
    content: public Guid Guid { get; }
    content.vb: Public ReadOnly Property Guid As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\n<p>A unique identifier for the event source.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventSource.Name
  commentId: P:System.Diagnostics.Tracing.EventSource.Name
  id: Name
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Diagnostics.Tracing.EventSource.Name
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 162
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>The friendly name of the class that is derived from the event source.</p>\n"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The friendly name of the derived class.  The default is the simple name of the class.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventSource.Settings
  commentId: P:System.Diagnostics.Tracing.EventSource.Settings
  id: Settings
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Settings
  fullName: System.Diagnostics.Tracing.EventSource.Settings
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Settings
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 163
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the settings applied to this event source.</p>\n"
  syntax:
    content: public EventSourceSettings Settings { get; }
    content.vb: Public ReadOnly Property Settings As EventSourceSettings
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: "\n<p>The settings applied to this event source.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventSource.EventCommandExecuted
  commentId: E:System.Diagnostics.Tracing.EventSource.EventCommandExecuted
  id: EventCommandExecuted
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventCommandExecuted
  fullName: System.Diagnostics.Tracing.EventSource.EventCommandExecuted
  type: Event
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventCommandExecuted
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 164
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Occurs when a command comes from an event listener.</p>\n"
  syntax:
    content: public event EventHandler<EventCommandEventArgs> EventCommandExecuted
    content.vb: Public Event EventCommandExecuted As EventHandler(Of EventCommandEventArgs)
    return:
      type: EventHandler{System.Diagnostics.Tracing.EventCommandEventArgs}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.Dispose
  commentId: M:System.Diagnostics.Tracing.EventSource.Dispose
  id: Dispose
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Diagnostics.Tracing.EventSource.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 165
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Call <strong>Dispose</strong> when you are finished using the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>. The <strong>Dispose</strong> method leaves the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <strong>Dispose</strong>, you must release all references to the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> was occupying.</p>\n<p>For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</p>\n<p>Always call <strong>Dispose</strong> before you release your last reference to the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Finalize</strong> method.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)
  commentId: M:System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 166
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong> method and the <strong>Finalize</strong> method. <strong>Dispose()</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the <em>disposing</em> parameter set to <strong>true</strong>. <strong>Finalize</strong> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Diagnostics.Tracing.EventSource.Finalize
  commentId: M:System.Diagnostics.Tracing.EventSource.Finalize
  id: Finalize
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Finalize()
  fullName: System.Diagnostics.Tracing.EventSource.Finalize()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Finalize
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 167
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Allows the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> object to attempt to free resources and perform other cleanup operations before the  object is reclaimed by garbage collection.</p>\n"
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)
  id: GenerateManifest(System.Type,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: GenerateManifest(Type, String)
  fullName: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenerateManifest
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 168
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Returns a string of the XML manifest that is associated with the current event source.</p>\n"
  remarks: "\n<p>The information about the XML schema for the event manifest, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=228077\">Event Manifest Schema</see> in the MSDN Library.</p>\n"
  syntax:
    content: public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest)
    content.vb: Public Shared Function GenerateManifest(eventSourceType As Type, assemblyPathToIncludeInManifest As String) As String
    parameters:
    - id: eventSourceType
      type: System.Type
      description: "\n<p>The type of the event source.</p>\n"
    - id: assemblyPathToIncludeInManifest
      type: System.String
      description: "\n<p>The path to the assembly file (.dll) to include in the <see href=\"http://msdn.microsoft.com/library/windows/desktop/aa384022(v=vs.85).aspx\">provider</see> element of the manifest. </p>\n"
    return:
      type: System.String
      description: "\n<p>The XML data string.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)
  commentId: M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)
  id: GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: GenerateManifest(Type, String, EventManifestOptions)
  fullName: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type, System.String, System.Diagnostics.Tracing.EventManifestOptions)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenerateManifest
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 169
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Returns a string of the XML manifest that is associated with the current event source.</p>\n"
  remarks: "\n<p>If <em>flags</em> specifies <strong>OnlyIfNeededForRegistration</strong> and the <em>eventSourceType</em> specified does not require explicit registration, <xref href=\"System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>null</strong>.</p>\n"
  syntax:
    content: public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest, EventManifestOptions flags)
    content.vb: Public Shared Function GenerateManifest(eventSourceType As Type, assemblyPathToIncludeInManifest As String, flags As EventManifestOptions) As String
    parameters:
    - id: eventSourceType
      type: System.Type
      description: "\n<p>The type of the event source.</p>\n"
    - id: assemblyPathToIncludeInManifest
      type: System.String
      description: "\n<p>The path to the assembly file (.dll) file to include in the <see href=\"http://msdn.microsoft.com/library/windows/desktop/aa384022(v=vs.85).aspx\">provider</see> element of the manifest. </p>\n"
    - id: flags
      type: System.Diagnostics.Tracing.EventManifestOptions
      description: "\n<p>A bitwise combination of the enumeration values that specify how the manifest is generated.</p>\n"
    return:
      type: System.String
      description: "\n<p>The XML data string or <strong>null</strong> (see remarks).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)
  commentId: M:System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)
  id: GetGuid(System.Type)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: GetGuid(Type)
  fullName: System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGuid
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 170
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the unique identifier for this implementation of the event source.</p>\n"
  syntax:
    content: public static Guid GetGuid(Type eventSourceType)
    content.vb: Public Shared Function GetGuid(eventSourceType As Type) As Guid
    parameters:
    - id: eventSourceType
      type: System.Type
      description: "\n<p>The type of the event source.</p>\n"
    return:
      type: System.Guid
      description: "\n<p>A unique identifier for this event source type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Tracing.EventSource.GetName(System.Type)
  commentId: M:System.Diagnostics.Tracing.EventSource.GetName(System.Type)
  id: GetName(System.Type)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: GetName(Type)
  fullName: System.Diagnostics.Tracing.EventSource.GetName(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetName
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 171
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the friendly name of the event source.</p>\n"
  syntax:
    content: public static string GetName(Type eventSourceType)
    content.vb: Public Shared Function GetName(eventSourceType As Type) As String
    parameters:
    - id: eventSourceType
      type: System.Type
      description: "\n<p>The type of the event source.</p>\n"
    return:
      type: System.String
      description: "\n<p>The friendly name of the event source. The default is the simple name of the class.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Tracing.EventSource.GetSources
  commentId: M:System.Diagnostics.Tracing.EventSource.GetSources
  id: GetSources
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: GetSources()
  fullName: System.Diagnostics.Tracing.EventSource.GetSources()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSources
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 172
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets a snapshot of all the event sources for the application domain.</p>\n"
  syntax:
    content: public static Collections.Generic.IEnumerable<EventSource> GetSources()
    content.vb: Public Shared Function GetSources As Collections.Generic.IEnumerable(Of EventSource)
    return:
      type: System.Collections.Generic.IEnumerable{System.Diagnostics.Tracing.EventSource}
      description: "\n<p>An enumeration of all the event sources in the application domain.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  id: GetTrait(System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: GetTrait(String)
  fullName: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTrait
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 173
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the trait value associated with the specified key.</p>\n"
  remarks: "\n<p>Traits provide additional information for an event and are interpreted by an event listener. Traits are specified as key-value pairs when the event source is constructed.</p>\n"
  syntax:
    content: public string GetTrait(string key)
    content.vb: Public Function GetTrait(key As String) As String
    parameters:
    - id: key
      type: System.String
      description: "\n<p>The key of the trait to get.</p>\n"
    return:
      type: System.String
      description: "\n<p>The trait value associated with the specified key. If the key is not found, returns <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.IsEnabled
  commentId: M:System.Diagnostics.Tracing.EventSource.IsEnabled
  id: IsEnabled
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: IsEnabled()
  fullName: System.Diagnostics.Tracing.EventSource.IsEnabled()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEnabled
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 174
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Determines whether the current event source is enabled.</p>\n"
  syntax:
    content: public bool IsEnabled()
    content.vb: Public Function IsEnabled As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current event source is enabled; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  commentId: M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  id: IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: IsEnabled(EventLevel, EventKeywords)
  fullName: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEnabled
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 175
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Determines whether the current event source that has the specified level and keyword is enabled.</p>\n"
  remarks: "\n<p>The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled.   Event sources may have additional filtering that determines their activity.</p>\n"
  syntax:
    content: public bool IsEnabled(EventLevel level, EventKeywords keywords)
    content.vb: Public Function IsEnabled(level As EventLevel, keywords As EventKeywords) As Boolean
    parameters:
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: "\n<p>The level of the event source.</p>\n"
    - id: keywords
      type: System.Diagnostics.Tracing.EventKeywords
      description: "\n<p>The keyword of the event source.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the event source is enabled; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)
  commentId: M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)
  id: IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: IsEnabled(EventLevel, EventKeywords, EventChannel)
  fullName: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Diagnostics.Tracing.EventChannel)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEnabled
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 176
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Determines whether the current event source is enabled for events with the specified level, keywords and channel.</p>\n"
  remarks: "\n<p>If the </p>\n"
  syntax:
    content: public bool IsEnabled(EventLevel level, EventKeywords keywords, EventChannel channel)
    content.vb: Public Function IsEnabled(level As EventLevel, keywords As EventKeywords, channel As EventChannel) As Boolean
    parameters:
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: "\n<p>The event level to check. An event source will be considered enabled when its level is greater than or equal to <em>level</em>.</p>\n"
    - id: keywords
      type: System.Diagnostics.Tracing.EventKeywords
      description: "\n<p>The event keywords to check.</p>\n"
    - id: channel
      type: System.Diagnostics.Tracing.EventChannel
      description: "\n<p>The event channel to check.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the event source is enabled for the specified event level, keywords and channel; otherwise, <strong>false</strong>.</p>\n<p>The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled.   Event sources may have additional filtering that determines their activity..</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  commentId: M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  id: OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: OnEventCommand(EventCommandEventArgs)
  fullName: System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnEventCommand
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 177
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Called when the current event source is updated by the controller.</p>\n"
  syntax:
    content: protected virtual void OnEventCommand(EventCommandEventArgs command)
    content.vb: Protected Overridable Sub OnEventCommand(command As EventCommandEventArgs)
    parameters:
    - id: command
      type: System.Diagnostics.Tracing.EventCommandEventArgs
      description: "\n<p>The arguments for the event.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})
  id: SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: SendCommand(EventSource, EventCommand, Collections.Generic.IDictionary<String, String>)
  fullName: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventCommand, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendCommand
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 178
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Sends a command to a specified event source.</p>\n"
  remarks: "\n<p>Calling <xref href=\"System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})\" data-throw-if-not-resolved=\"false\"></xref> forwards the command to the <xref href=\"System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> callback.  What the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> does with the command and its arguments is specific to the event source.  The command and command arguments are passed to the <xref href=\"System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> callback of the specified event source.   If possible, the current event source should not affect other event listeners' filtering events; however, that may not be possible if the command causes a garbage collection, a system flush, or some other global activity.   </p>\n"
  syntax:
    content: public static void SendCommand(EventSource eventSource, EventCommand command, Collections.Generic.IDictionary<string, string> commandArguments)
    content.vb: Public Shared Sub SendCommand(eventSource As EventSource, command As EventCommand, commandArguments As Collections.Generic.IDictionary(Of String, String))
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source to send the command to.</p>\n"
    - id: command
      type: System.Diagnostics.Tracing.EventCommand
      description: "\n<p>The event command to send.</p>\n"
    - id: commandArguments
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "\n<p>The arguments for the event command.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventCommand, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: SendCommand(EventSource, EventCommand, Collections.Generic.IDictionary(Of String, String))
- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  id: SetCurrentThreadActivityId(System.Guid)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: SetCurrentThreadActivityId(Guid)
  fullName: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCurrentThreadActivityId
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 179
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Sets the activity ID on the current thread.</p>\n"
  remarks: "\n<p>Calling the <xref href=\"System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> method sets the activity ID on a per-thread basis. All events on the thread will have that activity ID until a new activity is started on the same thread. </p>\n<p>This method is called only by libraries that manage their own threads. </p>\n"
  syntax:
    content: public static void SetCurrentThreadActivityId(Guid activityId)
    content.vb: Public Shared Sub SetCurrentThreadActivityId(activityId As Guid)
    parameters:
    - id: activityId
      type: System.Guid
      description: "\n<p>The current thread's new activity ID, or <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> to indicate that work on the current thread is not associated with any activity. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)
  commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)
  id: SetCurrentThreadActivityId(System.Guid,System.Guid@)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: SetCurrentThreadActivityId(Guid, out Guid)
  fullName: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid, out System.Guid)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCurrentThreadActivityId
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 180
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Sets the activity ID on the current thread, and returns the previous activity ID.</p>\n"
  remarks: "\n<p>You can call the <xref href=\"System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)\" data-throw-if-not-resolved=\"false\"></xref> method to temporarily overwrite the current thread's activity ID with a new activity ID. You must then restore the previous activity ID by passing the <em>oldActivityThatWillContinue</em> argument to the <xref href=\"System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  syntax:
    content: public static void SetCurrentThreadActivityId(Guid activityId, out Guid oldActivityThatWillContinue)
    content.vb: Public Shared Sub SetCurrentThreadActivityId(activityId As Guid, ByRef oldActivityThatWillContinue As Guid)
    parameters:
    - id: activityId
      type: System.Guid
      description: "\n<p>The current thread's new activity ID, or <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> to indicate that work on the current thread is not associated with any activity.</p>\n"
    - id: oldActivityThatWillContinue
      type: System.Guid
      description: "\n<p>When this method returns, contains the previous activity ID on the current thread. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid, ByRef System.Guid)
  name.vb: SetCurrentThreadActivityId(Guid, ByRef Guid)
- uid: System.Diagnostics.Tracing.EventSource.ToString
  commentId: M:System.Diagnostics.Tracing.EventSource.ToString
  id: ToString
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Diagnostics.Tracing.EventSource.ToString()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 181
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Obtains a string representation of the current event source instance.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The name and unique identifier that identify the current event source.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Diagnostics.Tracing.EventSource.Write(System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Write(String)
  fullName: System.Diagnostics.Tracing.EventSource.Write(System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 182
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event without fields, but with the specified name and default options.</p>\n"
  syntax:
    content: public void Write(string eventName)
    content.vb: Public Sub Write(eventName As String)
    parameters:
    - id: eventName
      type: System.String
      description: "\n<p>The name of the event to write.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventName</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)
  commentId: M:System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)
  id: Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Write(String, EventSourceOptions)
  fullName: System.Diagnostics.Tracing.EventSource.Write(System.String, System.Diagnostics.Tracing.EventSourceOptions)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 183
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event without fields, but with the specified name and options.</p>\n"
  syntax:
    content: public void Write(string eventName, EventSourceOptions options)
    content.vb: Public Sub Write(eventName As String, options As EventSourceOptions)
    parameters:
    - id: eventName
      type: System.String
      description: "\n<p>The name of the event to write.</p>\n"
    - id: options
      type: System.Diagnostics.Tracing.EventSourceOptions
      description: "\n<p>The options such as level, keywords and operation code for the event.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventName</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)
  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)
  id: Write``1(System.String,``0)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Write<T>(String, T)
  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, T)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 184
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event with the specified name and data.</p>\n"
  remarks: "\n<p>If <em>eventName</em> is <strong>null</strong>, the event name is automatically derived from the type T’s event data (<xref href=\"System.Diagnostics.Tracing.EventDataAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref>) or determined based on the name of type <em>T</em>. The public instance properties of <em>data</em> will be written recursively to create the event fields.</p>\n"
  syntax:
    content: public void Write<T>(string eventName, T data)
    content.vb: Public Sub Write(Of T)(eventName As String, data As T)
    parameters:
    - id: eventName
      type: System.String
      description: "\n<p>The name of the event.</p>\n"
    - id: data
      type: '{T}'
      description: "\n<p>The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, T)
  name.vb: Write(Of T)(String, T)
- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)
  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)
  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Write<T>(String, EventSourceOptions, T)
  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, System.Diagnostics.Tracing.EventSourceOptions, T)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 185
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event with the specified name, event data and options.</p>\n"
  remarks: "\n<p>If <em>eventName</em> is <strong>null</strong>, the event name is automatically derived from the type T’s event data (<xref href=\"System.Diagnostics.Tracing.EventDataAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref>) or determined based on the name of type <em>T</em>. The public instance properties of <em>data</em> will be written recursively to create the event fields.</p>\n"
  syntax:
    content: public void Write<T>(string eventName, EventSourceOptions options, T data)
    content.vb: Public Sub Write(Of T)(eventName As String, options As EventSourceOptions, data As T)
    parameters:
    - id: eventName
      type: System.String
      description: "\n<p>The name of the event.</p>\n"
    - id: options
      type: System.Diagnostics.Tracing.EventSourceOptions
      description: "\n<p>The event options.</p>\n"
    - id: data
      type: '{T}'
      description: "\n<p>The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, System.Diagnostics.Tracing.EventSourceOptions, T)
  name.vb: Write(Of T)(String, EventSourceOptions, T)
- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)
  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)
  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Write<T>(String, ref EventSourceOptions, ref T)
  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, ref System.Diagnostics.Tracing.EventSourceOptions, ref T)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 186
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event with the specified name, options and event data.</p>\n"
  remarks: "\n<p>If <em>eventName</em> is <strong>null</strong>, the event name is automatically derived from the type T’s event data (<xref href=\"System.Diagnostics.Tracing.EventDataAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref>) or determined based on the name of type <em>T</em>. The public instance properties of <em>data</em> will be written recursively to create the event fields.</p>\n"
  syntax:
    content: public void Write<T>(string eventName, ref EventSourceOptions options, ref T data)
    content.vb: Public Sub Write(Of T)(eventName As String, ByRef options As EventSourceOptions, ByRef data As T)
    parameters:
    - id: eventName
      type: System.String
      description: "\n<p>The name of the event.</p>\n"
    - id: options
      type: System.Diagnostics.Tracing.EventSourceOptions
      description: "\n<p>The event options.</p>\n"
    - id: data
      type: '{T}'
      description: "\n<p>The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, ByRef System.Diagnostics.Tracing.EventSourceOptions, ByRef T)
  name.vb: Write(Of T)(String, ByRef EventSourceOptions, ByRef T)
- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)
  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)
  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Write<T>(String, ref EventSourceOptions, ref Guid, ref Guid, ref T)
  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, ref System.Diagnostics.Tracing.EventSourceOptions, ref System.Guid, ref System.Guid, ref T)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 187
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event with the specified name, options, related activity and event data.</p>\n"
  remarks: "\n<p>If <em>eventName</em> is <strong>null</strong>, the event name is automatically derived from the type T’s event data (<xref href=\"System.Diagnostics.Tracing.EventDataAttribute.Name\" data-throw-if-not-resolved=\"false\"></xref>) or determined based on the name of type <em>T</em>. The public instance properties of <em>data</em> will be written recursively to create the event fields.</p>\n"
  syntax:
    content: public void Write<T>(string eventName, ref EventSourceOptions options, ref Guid activityId, ref Guid relatedActivityId, ref T data)
    content.vb: Public Sub Write(Of T)(eventName As String, ByRef options As EventSourceOptions, ByRef activityId As Guid, ByRef relatedActivityId As Guid, ByRef data As T)
    parameters:
    - id: eventName
      type: System.String
      description: "\n<p>The name of the event.</p>\n"
    - id: options
      type: System.Diagnostics.Tracing.EventSourceOptions
      description: "\n<p>The event options.</p>\n"
    - id: activityId
      type: System.Guid
      description: "\n<p>The ID of the activity associated with the event.</p>\n"
    - id: relatedActivityId
      type: System.Guid
      description: "\n<p>The ID of an associated activity, or <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> if there is no associated activity.</p>\n"
    - id: data
      type: '{T}'
      description: "\n<p>The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, ByRef System.Diagnostics.Tracing.EventSourceOptions, ByRef System.Guid, ByRef System.Guid, ByRef T)
  name.vb: Write(Of T)(String, ByRef EventSourceOptions, ByRef Guid, ByRef Guid, ByRef T)
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)
  id: WriteEvent(System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 188
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(string arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  example:
  - "\n<p>The following example shows how to use this method overload to write an event. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ETWTrace#5"
  syntax:
    content: protected void WriteEvent(int eventId)
    content.vb: Protected Sub WriteEvent(eventId As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier. This value should be between 0 and 65535.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])
  id: WriteEvent(System.Int32,System.Byte[])
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Byte[])
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 189
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and byte array argument.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(byte[] arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, byte[] arg1)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Byte())
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Byte[]
      description: "\n<p>A byte array argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Byte())
  name.vb: WriteEvent(Int32, Byte())
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)
  id: WriteEvent(System.Int32,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 190
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 32-bit integer argument.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(int  arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  example:
  - "\n<p>The following example shows how to use this method overload to write an event. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ETWTrace#8"
  syntax:
    content: protected void WriteEvent(int eventId, int arg1)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int32
      description: "\n<p>An integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)
  id: WriteEvent(System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int32, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 191
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 32-bit integer arguments.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code class=\"c#\">[Event(2, Level = EventLevel.Informational)]\npublic void Info1(int arg1, int arg2, int arg3)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, int arg1, int arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Integer, arg2 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int32
      description: "\n<p>An integer argument.</p>\n"
    - id: arg2
      type: System.Int32
      description: "\n<p>An integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)
  id: WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int32, Int32, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 192
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 32-bit integer arguments.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(string arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, int arg1, int arg2, int arg3)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Integer, arg2 As Integer, arg3 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int32
      description: "\n<p>An integer argument.</p>\n"
    - id: arg2
      type: System.Int32
      description: "\n<p>An integer argument.</p>\n"
    - id: arg3
      type: System.Int32
      description: "\n<p>An integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)
  id: WriteEvent(System.Int32,System.Int32,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int32, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 193
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 32-bit integer and string arguments.</p>\n"
  syntax:
    content: protected void WriteEvent(int eventId, int arg1, string arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Integer, arg2 As String)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier. This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int32
      description: "\n<p>A 32-bit integer argument.</p>\n"
    - id: arg2
      type: System.String
      description: "\n<p>A string argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)
  id: WriteEvent(System.Int32,System.Int64)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int64)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 194
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 64-bit integer argument.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(string arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, long arg1)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Long)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])
  id: WriteEvent(System.Int32,System.Int64,System.Byte[])
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int64, Byte[])
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 195
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes the event data using the specified indentifier and 64-bit integer and byte array arguments.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(Int64 arg1, Byte[] arg2)\n{\nbase.WriteEvent(2, arg1, arg2);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, long arg1, byte[] arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As Byte())
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int64
      description: "\n<p>A 64-bit integer argument.</p>\n"
    - id: arg2
      type: System.Byte[]
      description: "\n<p>A byte array argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Byte())
  name.vb: WriteEvent(Int32, Int64, Byte())
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)
  id: WriteEvent(System.Int32,System.Int64,System.Int64)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int64, Int64)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 196
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 64-bit arguments.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(string arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, long arg1, long arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As Long)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
    - id: arg2
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)
  id: WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int64, Int64, Int64)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 197
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 64-bit arguments.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(string arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, long arg1, long arg2, long arg3)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As Long, arg3 As Long)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
    - id: arg2
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
    - id: arg3
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)
  id: WriteEvent(System.Int32,System.Int64,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int64, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 198
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 64-bit integer, and string arguments.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(Int64 arg1, string arg2)\n{\nbase.WriteEvent(2, arg1, arg2);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, long arg1, string arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As String)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int64
      description: "\n<p>A 64-bit integer argument.</p>\n"
    - id: arg2
      type: System.String
      description: "\n<p>A string argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])
  id: WriteEvent(System.Int32,System.Object[])
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Object[])
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 199
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and array of arguments.</p>\n"
  remarks: "\n<p>By default, the compiler calls this overload if the parameters for the call do not match one of the other method overloads. This overload is much slower than the other overloads, because it does the following:</p>\n<ol><li>\n<p>It allocates an array to hold the variable argument.</p>\n</li><li>\n<p>It casts each parameter to an object (which causes allocations for primitive types).</p>\n</li><li>\n<p>It assigns these objects to the array.</p>\n</li><li>\n<p>It calls the function, which then determines the type of each argument so it can be serialized for ETW.</p>\n</li></ol>\n<p>The high overhead for this overload is not significant when tracing low-volume events, because the method is used only when the provider is enabled. However, for high-volume events, the performance overhead can be significant.  You can avoid using <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> for high-volume payloads by creating a new, faster  overload with the <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\" data-throw-if-not-resolved=\"false\"></xref> method.  </p>\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(string arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, params object[] args)
    content.vb: Protected Sub WriteEvent(eventId As Integer, ParamArray args As Object())
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An array of objects.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Object())
  name.vb: WriteEvent(Int32, Object())
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)
  id: WriteEvent(System.Int32,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 200
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and string argument.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(string arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  example:
  - "\n<p>The following example shows how to use this method overload to write an event. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ETWTrace#5"
  syntax:
    content: protected void WriteEvent(int eventId, string arg1)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As String)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.String
      description: "\n<p>A string argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)
  id: WriteEvent(System.Int32,System.String,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, String, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 201
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and arguments.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(string arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, string arg1, int arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.String
      description: "\n<p>A string argument.</p>\n"
    - id: arg2
      type: System.Int32
      description: "\n<p>A 32 bit integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)
  id: WriteEvent(System.Int32,System.String,System.Int32,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, String, Int32, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 202
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and arguments.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(string arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, string arg1, int arg2, int arg3)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As Integer, arg3 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.String
      description: "\n<p>A string argument.</p>\n"
    - id: arg2
      type: System.Int32
      description: "\n<p>A 32 bit integer argument.</p>\n"
    - id: arg3
      type: System.Int32
      description: "\n<p>A 32 bit integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)
  id: WriteEvent(System.Int32,System.String,System.Int64)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, String, Int64)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 203
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and arguments.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(string arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, string arg1, long arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As Long)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.String
      description: "\n<p>A string argument.</p>\n"
    - id: arg2
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)
  id: WriteEvent(System.Int32,System.String,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, String, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 204
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and string arguments.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(string arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, string arg1, string arg2)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As String)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.String
      description: "\n<p>A string argument.</p>\n"
    - id: arg2
      type: System.String
      description: "\n<p>A string argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)
  id: WriteEvent(System.Int32,System.String,System.String,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, String, String, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEvent
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 205
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and string arguments.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>When you implement a method that is identified as an ETW event in an <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>-derived class. You must call the base class <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> method passing the <xref href=\"System.Diagnostics.Tracing.EventAttribute.EventId\" data-throw-if-not-resolved=\"false\"></xref> and the same arguments as the implemented method similar to the following example.</p>\n<pre><code>[Event(2, Level = EventLevel.Informational)]\npublic void Info1(string arg1)\n{\nbase.WriteEvent(2, arg1);\n}</code></pre>\n"
  syntax:
    content: protected void WriteEvent(int eventId, string arg1, string arg2, string arg3)
    content.vb: Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As String, arg3 As String)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.String
      description: "\n<p>A string argument.</p>\n"
    - id: arg2
      type: System.String
      description: "\n<p>A string argument.</p>\n"
    - id: arg3
      type: System.String
      description: "\n<p>A string argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  id: WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEventCore(Int32, Int32, EventSource.EventData*)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32, System.Int32, System.Diagnostics.Tracing.EventSource.EventData*)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEventCore
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 206
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p></p>\n<p>Creates a new <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> overload by using the provided event identifier and event data.</p>\n"
  remarks: "\n<p>\n<em>eventid</em> should be greater than 0 or less than 65535 or errors can occur in the operation. If errors do occur, you can get more information about the source of the error by checking the output stream of the debugger, if you have a debugger attached to the process firing events. You can also look for errors reported in the ETW event stream, if you have an ETW listener on the event source where the error occurs.</p>\n<p>This protected method  enables users to define new <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> overloads that are faster than the provided overloads.   Creating a new overload involves unsafe code.  The basic procedure is to stack-allocate an array of event data descriptors that matches the number of payload items.   For each payload item, set the correct size and value in the event data array.Call <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\" data-throw-if-not-resolved=\"false\"></xref> with the initialized array. </p>\n<p>The following example shows how to add a <see cref=\"Overload:System.Diagnostics.Tracing.EventSource.WriteEvent\"></see> overload that accepts four arguments. An example would be if you have a logging event that logs a string and 3 integers.</p>\n<pre><code class=\"c#\">[Event(1)]\npublic void LogTime(string tag, int hour, int minute, int second) \n{\nWriteEvent(1, tag, hour, minute, second);\n}</code></pre>\n<p>You could do this without calling <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\" data-throw-if-not-resolved=\"false\"></xref>, but it would be slower than it needs to be. That is because it uses arrays and reflection to figure out what to do. If you log these at a high rate (> 1000 / sec), it can be worth making a fast helper, as shown in the following example. The method shadows the existing <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref>. Thus the original caller code (LogTime) does not actually change, but the C# compiler will use the more specialized version which will be faster.</p>\n<p>To compile unsafe code, you must specify the /unsafe (C# Compiler Options) compiler option.</p>\n<pre><code class=\"c#\">class AnotherEventSource : EventSource {\n\n[NonEvent]\npublic unsafe void WriteEvent(int eventId, string arg1, int arg2, int arg3, int arg4)\n{\n\nfixed (char* arg1Ptr = arg1)\n{\n    EventData* dataDesc = stackalloc EventProvider.EventData[4];\n\n    dataDesc[0].DataPointer = (IntPtr)arg1Ptr;\n    dataDesc[0].Size = (arg1.Length + 1) * 2; // Size in bytes, including a null terminator. \n    dataDesc[1].DataPointer = (IntPtr)(&arg2);\n    dataDesc[1].Size = 4;\n    dataDesc[2].DataPointer = (IntPtr)(&arg3);\n    dataDesc[2].Size = 4;\n    dataDesc[3].DataPointer = (IntPtr)(&arg4);\n    dataDesc[3].Size = 4;\n\n    WriteEventCore(eventId, 4, (IntPtr)dataDesc);\n}\n}\n}</code></pre>\n"
  syntax:
    content: protected void WriteEventCore(int eventId, int eventDataCount, EventSource.EventData*data)
    content.vb: Protected Sub WriteEventCore(eventId As Integer, eventDataCount As Integer, data As EventSource.EventData *)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.</p>\n"
    - id: eventDataCount
      type: System.Int32
      description: "\n<p>The number of event data items.</p>\n"
    - id: data
      type: System.Diagnostics.Tracing.EventSource.EventData*
      description: "\n<p>The structure that contains the event data.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
  id: WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEventWithRelatedActivityId(Int32, Guid, Object[])
  fullName: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32, System.Guid, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEventWithRelatedActivityId
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 209
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Writes an event that indicates that the current activity is related to another activity. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method logs a transfer event. The activity of the current thread is logged with the event, and this allows two activities to be related by a consumer of events. </p>\n<p>Your ETW event method calling this function must follow these guidelines:</p>\n<ol><li>\n<p>Specify the first parameter as a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> named <code>relatedActivityId</code>.</p>\n</li><li>\n<p>Specify either <xref href=\"System.Diagnostics.Tracing.EventOpcode.Send\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Diagnostics.Tracing.EventOpcode.Receive\" data-throw-if-not-resolved=\"false\"></xref> as the <xref href=\"System.Diagnostics.Tracing.EventAttribute.Opcode\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li><li>\n<p>Call <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> passing in the event ID, followed by the related ID GUID, followed by all the parameters the event method is passed, in the same order.</p>\n</li></ol>\n<p>If <em>args</em> is not used, it is converted to an empty array for the resulting call to ETW.</p>\n"
  example:
  - "\n<p>The following code example shows how you might can specify an event source that calls <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Diagnostics.EventSource.WriteEventWithId#1,2"
  syntax:
    content: protected void WriteEventWithRelatedActivityId(int eventId, Guid relatedActivityId, params object[] args)
    content.vb: Protected Sub WriteEventWithRelatedActivityId(eventId As Integer, relatedActivityId As Guid, ParamArray args As Object())
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>An identifier that uniquely identifies this event within the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: relatedActivityId
      type: System.Guid
      description: "\n<p>The related activity identifier. </p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An array of objects that contain data about the event. </p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32, System.Guid, System.Object())
  name.vb: WriteEventWithRelatedActivityId(Int32, Guid, Object())
- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  id: WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource.EventData*)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32, System.Guid*, System.Int32, System.Diagnostics.Tracing.EventSource.EventData*)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEventWithRelatedActivityIdCore
    path: src/System.Diagnostics.Tracing/ref/System.Diagnostics.Tracing.cs
    startLine: 210
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Writes an event that indicates that the current activity is related to another activity.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\" data-throw-if-not-resolved=\"false\"></xref> is similar to the <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method but offers better performance, bevcause it does not have to unbox the <em>childActivityID</em> and <em>data</em> arguments. </p>\n<p>Your ETW event method calling this function must follow these guidelines:</p>\n<ol><li>\n<p>Specify the first parameter as a <xref href=\"System.Guid\" data-throw-if-not-resolved=\"false\"></xref> named <code>relatedActivityId</code>.</p>\n</li><li>\n<p>Specify either <xref href=\"System.Diagnostics.Tracing.EventOpcode.Send\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Diagnostics.Tracing.EventOpcode.Receive\" data-throw-if-not-resolved=\"false\"></xref> as the <xref href=\"System.Diagnostics.Tracing.EventAttribute.Opcode\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li><li>\n<p>Call <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\" data-throw-if-not-resolved=\"false\"></xref> passing in the event ID, followed by the related ID GUID, followed by all the parameters the event method is passed, in the same order.</p>\n</li></ol>\n"
  example:
  - "\n<p>The following C# code example shows how to define a method overload that calls <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Diagnostics.EventSource.WriteEventWithId#5,3"
  syntax:
    content: protected void WriteEventWithRelatedActivityIdCore(int eventId, Guid*relatedActivityId, int eventDataCount, EventSource.EventData*data)
    content.vb: Protected Sub WriteEventWithRelatedActivityIdCore(eventId As Integer, relatedActivityId As Guid *, eventDataCount As Integer, data As EventSource.EventData *)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>An identifier that uniquely identifies this event within the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: relatedActivityId
      type: System.Guid*
      description: "\n<p>A pointer to the GUID of the related activity ID. </p>\n"
    - id: eventDataCount
      type: System.Int32
      description: "\n<p>The number of items in the <em>data</em> field. </p>\n"
    - id: data
      type: System.Diagnostics.Tracing.EventSource.EventData*
      description: "\n<p>A pointer to the first item in the event data field. </p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: System.Diagnostics.Tracing
  isExternal: false
  name: System.Diagnostics.Tracing
  fullName: System.Diagnostics.Tracing
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Tracing.EventSourceSettings
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSourceSettings
  fullName: System.Diagnostics.Tracing.EventSourceSettings
- uid: System.String[]
  isExternal: false
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
  - name: ()
    fullName: ()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  fullName: System.Guid
- uid: EventHandler{System.Diagnostics.Tracing.EventCommandEventArgs}
  definition: EventHandler`1
  name: EventHandler<EventCommandEventArgs>
  fullName: EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>
  fullname.vb: EventHandler(Of System.Diagnostics.Tracing.EventCommandEventArgs)
  name.vb: EventHandler(Of EventCommandEventArgs)
  spec.csharp:
  - uid: EventHandler`1
    name: EventHandler
    fullName: EventHandler
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Diagnostics.Tracing.EventCommandEventArgs
    name: EventCommandEventArgs
    fullName: System.Diagnostics.Tracing.EventCommandEventArgs
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: EventHandler`1
    name: EventHandler
    fullName: EventHandler
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Diagnostics.Tracing.EventCommandEventArgs
    name: EventCommandEventArgs
    fullName: System.Diagnostics.Tracing.EventCommandEventArgs
  - name: )
    fullName: )
- uid: EventHandler`1
  isExternal: true
  name: EventHandler<>
  fullName: EventHandler<>
  fullname.vb: EventHandler(Of )
  name.vb: EventHandler(Of )
  spec.csharp:
  - uid: EventHandler`1
    name: EventHandler
    fullName: EventHandler
    isExternal: true
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: EventHandler`1
    name: EventHandler
    fullName: EventHandler
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Diagnostics.Tracing.EventManifestOptions
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventManifestOptions
  fullName: System.Diagnostics.Tracing.EventManifestOptions
- uid: System.Collections.Generic.IEnumerable{System.Diagnostics.Tracing.EventSource}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<EventSource>
  fullName: System.Collections.Generic.IEnumerable<System.Diagnostics.Tracing.EventSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Diagnostics.Tracing.EventSource)
  name.vb: Collections.Generic.IEnumerable(Of EventSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Diagnostics.Tracing.EventSource
    name: EventSource
    fullName: System.Diagnostics.Tracing.EventSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Diagnostics.Tracing.EventSource
    name: EventSource
    fullName: System.Diagnostics.Tracing.EventSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Diagnostics.Tracing.EventLevel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventLevel
  fullName: System.Diagnostics.Tracing.EventLevel
- uid: System.Diagnostics.Tracing.EventKeywords
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventKeywords
  fullName: System.Diagnostics.Tracing.EventKeywords
- uid: System.Diagnostics.Tracing.EventChannel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventChannel
  fullName: System.Diagnostics.Tracing.EventChannel
- uid: System.Diagnostics.Tracing.EventCommandEventArgs
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventCommandEventArgs
  fullName: System.Diagnostics.Tracing.EventCommandEventArgs
- uid: System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
- uid: System.Diagnostics.Tracing.EventCommand
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventCommand
  fullName: System.Diagnostics.Tracing.EventCommand
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  definition: System.Collections.Generic.IDictionary`2
  name: Collections.Generic.IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: Collections.Generic.IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Collections.Generic.IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  fullname.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: Collections.Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Diagnostics.Tracing.EventSourceOptions
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSourceOptions
  fullName: System.Diagnostics.Tracing.EventSourceOptions
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Object[]
  isExternal: false
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ()
    fullName: ()
- uid: System.Diagnostics.Tracing.EventSource.EventData*
  isExternal: false
  name: EventSource.EventData*
  fullName: System.Diagnostics.Tracing.EventSource.EventData*
  spec.csharp:
  - uid: System.Diagnostics.Tracing.EventSource.EventData
    name: EventSource.EventData
    fullName: System.Diagnostics.Tracing.EventSource.EventData
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Diagnostics.Tracing.EventSource.EventData
    name: EventSource.EventData
    fullName: System.Diagnostics.Tracing.EventSource.EventData
  - name: '*'
    fullName: '*'
- uid: System.Guid*
  isExternal: true
  name: Guid*
  fullName: System.Guid*
  spec.csharp:
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Guid
    name: Guid
    fullName: System.Guid
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
