items:
- uid: System.Tuple`6
  commentId: T:System.Tuple`6
  id: Tuple`6
  parent: System
  children:
  - System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)
  - System.Tuple`6.Equals(System.Object)
  - System.Tuple`6.GetHashCode
  - System.Tuple`6.Item1
  - System.Tuple`6.Item2
  - System.Tuple`6.Item3
  - System.Tuple`6.Item4
  - System.Tuple`6.Item5
  - System.Tuple`6.Item6
  - System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  - System.Tuple`6.System#IComparable#CompareTo(System.Object)
  - System.Tuple`6.ToString
  langs:
  - csharp
  - vb
  name: Tuple<T1, T2, T3, T4, T5, T6>
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Tuple
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1828
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a 6-tuple, or sextuple. </p>\n"
  remarks: "\n<p>A tuple is a data structure that has a specific number and sequence of values. The <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> class represents a 6-tuple, or sextuple, which is a tuple that has six components.</p>\n<p>You can instantiate a <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object by calling either the <xref href=\"System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)\" data-throw-if-not-resolved=\"false\"></xref> or the static  <xref href=\"System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)\" data-throw-if-not-resolved=\"false\"></xref> method. You can retrieve the value of the tuple's components by using the read-only <xref href=\"System.Tuple`6.Item1\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`6.Item2\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`6.Item3\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`6.Item4\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`6.Item5\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Tuple`6.Item6\" data-throw-if-not-resolved=\"false\"></xref> instance properties.</p>\n<p>Tuples are commonly used in four different ways:</p>\n<ul><li>\n<p>To represent a single set of data. For example, a tuple can represent a database record, and its components can represent individual fields of the record.</p>\n</li><li>\n<p>To provide easy access to, and manipulation of, a data set. The following example defines a <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object that contains population data for New York City for each census from 1960 through 2000. The sextuple is passed to the <code>ComputePopulationChange</code> method, which calculates the annual rate of change between censuses, as well as the annual rate of change for the entire 50 year period. </p>System.Tuple`6.Class#1</li><li>\n<p>To return multiple values from a method without the use of <strong>out</strong> parameters (in C#) or <strong>ByRef</strong> parameters (in Visual Basic). For example, the previous example returns its computed statistics, along with the city name, in a <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</li><li>\n<p>To pass multiple values to a method through a single parameter. For example, the <xref href=\"System.Threading.Thread.Start(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method has a single parameter that lets you supply one value to the method that the thread executes at startup. If you supply a <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object as the method argument, you can supply the threadâ€™s startup routine with six items of data.</p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: 'public class Tuple<T1, T2, T3, T4, T5, T6> : IStructuralComparable, IStructuralEquatable, IComparable'
    content.vb: >-
      Public Class Tuple(Of T1, T2, T3, T4, T5, T6)
          Implements IStructuralComparable, IStructuralEquatable, IComparable
    typeParameters:
    - id: T1
      description: "\n<p>The type of the tuple's first component.</p>\n"
    - id: T2
      description: "\n<p>The type of the tuple's second component.</p>\n"
    - id: T3
      description: "\n<p>The type of the tuple's third component.</p>\n"
    - id: T4
      description: "\n<p>The type of the tuple's fourth component.</p>\n"
    - id: T5
      description: "\n<p>The type of the tuple's fifth component.</p>\n"
    - id: T6
      description: "\n<p>The type of the tuple's sixth component.</p>\n"
  seealso:
  - type: System.Tuple
    commentId: T:System.Tuple
  - type: System.Tuple`1
    commentId: T:System.Tuple`1
  - type: System.Tuple`2
    commentId: T:System.Tuple`2
  - type: System.Tuple`3
    commentId: T:System.Tuple`3
  - type: System.Tuple`4
    commentId: T:System.Tuple`4
  - type: System.Tuple`5
    commentId: T:System.Tuple`5
  - type: System.Tuple`7
    commentId: T:System.Tuple`7
  - type: System.Tuple`8
    commentId: T:System.Tuple`8
  inheritance:
  - System.Object
  implements:
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  - System.IComparable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6)
  name.vb: Tuple(Of T1, T2, T3, T4, T5, T6)
- uid: System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)
  commentId: M:System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)
  id: '#ctor(`0,`1,`2,`3,`4,`5)'
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: Tuple(T1, T2, T3, T4, T5, T6)
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.Tuple(T1, T2, T3, T4, T5, T6)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1830
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>You can also use the static <xref href=\"System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)\" data-throw-if-not-resolved=\"false\"></xref>  method to instantiate a 6-tuple object without having to explicitly specify the types of its components. The following example uses the <xref href=\"System.Tuple.Create``6(``0,``1,``2,``3,``4,``5)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a 6-tuple whose first component is of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> and whose remaining components are of type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Tuple.Create#11<p>This is equivalent to the following call to the <xref href=\"System.Tuple`6.#ctor(`0,`1,`2,`3,`4,`5)\" data-throw-if-not-resolved=\"false\"></xref> class constructor.</p>System.Tuple.Create#12"
  example:
  - 
  syntax:
    content: public Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6)
    content.vb: Public Sub New(item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6)
    parameters:
    - id: item1
      type: '{T1}'
      description: "\n<p>The value of the tuple's first component.</p>\n"
    - id: item2
      type: '{T2}'
      description: "\n<p>The value of the tuple's second component.</p>\n"
    - id: item3
      type: '{T3}'
      description: "\n<p>The value of the tuple's third component.</p>\n"
    - id: item4
      type: '{T4}'
      description: "\n<p>The value of the tuple's fourth component</p>\n"
    - id: item5
      type: '{T5}'
      description: "\n<p>The value of the tuple's fifth component.</p>\n"
    - id: item6
      type: '{T6}'
      description: "\n<p>The value of the tuple's sixth component.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).Tuple(T1, T2, T3, T4, T5, T6)
- uid: System.Tuple`6.Item1
  commentId: P:System.Tuple`6.Item1
  id: Item1
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: Item1
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.Item1
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item1
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1831
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object's first component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`6.Item1\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`6.Item1\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the first element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example defines an array of <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000. It then displays a table that lists the data. To display the city name, it retrieves the value of the <xref href=\"System.Tuple`6.Item1\" data-throw-if-not-resolved=\"false\"></xref> property for each <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Tuple`6.Item1#1"
  syntax:
    content: public T1 Item1 { get; }
    content.vb: Public ReadOnly Property Item1 As T1
    parameters: []
    return:
      type: '{T1}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object's first component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).Item1
- uid: System.Tuple`6.Item2
  commentId: P:System.Tuple`6.Item2
  id: Item2
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: Item2
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.Item2
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item2
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1832
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object's second component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`6.Item2\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`6.Item2\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the first element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example defines an array of <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000. It then displays a table that lists the data. To display the population in 1960, it retrieves the value of the <xref href=\"System.Tuple`6.Item2\" data-throw-if-not-resolved=\"false\"></xref> property for each <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Tuple`6.Item1#1"
  syntax:
    content: public T2 Item2 { get; }
    content.vb: Public ReadOnly Property Item2 As T2
    parameters: []
    return:
      type: '{T2}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object's second component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).Item2
- uid: System.Tuple`6.Item3
  commentId: P:System.Tuple`6.Item3
  id: Item3
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: Item3
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.Item3
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item3
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1833
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object's third component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`6.Item3\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`6.Item3\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the first element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example defines an array of <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000. It then displays a table that lists the data. To display the population in 1970, it retrieves the value of the <xref href=\"System.Tuple`6.Item3\" data-throw-if-not-resolved=\"false\"></xref> property for each <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Tuple`6.Item1#1"
  syntax:
    content: public T3 Item3 { get; }
    content.vb: Public ReadOnly Property Item3 As T3
    parameters: []
    return:
      type: '{T3}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object's third component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).Item3
- uid: System.Tuple`6.Item4
  commentId: P:System.Tuple`6.Item4
  id: Item4
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: Item4
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.Item4
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item4
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1834
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object's fourth component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`6.Item4\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`6.Item4\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the first element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example defines an array of <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000. It then displays a table that lists the data. To display the population in 1980, it retrieves the value of the <xref href=\"System.Tuple`6.Item4\" data-throw-if-not-resolved=\"false\"></xref> property for each <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Tuple`6.Item1#1"
  syntax:
    content: public T4 Item4 { get; }
    content.vb: Public ReadOnly Property Item4 As T4
    parameters: []
    return:
      type: '{T4}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object's fourth component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).Item4
- uid: System.Tuple`6.Item5
  commentId: P:System.Tuple`6.Item5
  id: Item5
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: Item5
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.Item5
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item5
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1835
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object's fifth component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`6.Item5\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`6.Item5\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the first element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example defines an array of <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000. It then displays a table that lists the data. To display the population in 1990, it retrieves the value of the <xref href=\"System.Tuple`6.Item5\" data-throw-if-not-resolved=\"false\"></xref> property for each <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Tuple`6.Item1#1"
  syntax:
    content: public T5 Item5 { get; }
    content.vb: Public ReadOnly Property Item5 As T5
    parameters: []
    return:
      type: '{T5}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object's fifth  component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).Item5
- uid: System.Tuple`6.Item6
  commentId: P:System.Tuple`6.Item6
  id: Item6
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: Item6
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.Item6
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Item6
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1836
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object's sixth component.</p>\n"
  remarks: "\n<p>You can dynamically determine the type of the <xref href=\"System.Tuple`6.Item6\" data-throw-if-not-resolved=\"false\"></xref> component in one of two ways:</p>\n<ul><li>\n<p>By calling the <strong>GetType</strong> method on the value that is returned by the <xref href=\"System.Tuple`6.Item6\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>By retrieving the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that represents the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object, and retrieving the first element from the array that is returned by its <xref href=\"System.Type.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example defines an array of <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects whose components contain population data for three U.S. cities (New York, Chicago, and Los Angeles) from 1960 through 2000. It then displays a table that lists the data. To display the population in 2000, it retrieves the value of the <xref href=\"System.Tuple`6.Item6\" data-throw-if-not-resolved=\"false\"></xref> property for each <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Tuple`6.Item1#1"
  syntax:
    content: public T6 Item6 { get; }
    content.vb: Public ReadOnly Property Item6 As T6
    parameters: []
    return:
      type: '{T6}'
      description: "\n<p>The value of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object's sixth component.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).Item6
- uid: System.Tuple`6.Equals(System.Object)
  commentId: M:System.Tuple`6.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1837
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a specified object.</p>\n"
  remarks: "\n<p>The <em>obj</em> parameter is considered to be equal to the current instance under the following conditions:</p>\n<ul><li>\n<p>It is a <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</li><li>\n<p>Its six components are of the same types as the current instance.</p>\n</li><li>\n<p>Its six components are equal to those of the current instance. Equality is determined by the default object equality comparer for each component. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example defines an array of sextuples that contain population data for Los Angeles and New York from 1960 to 2000. The first component of each sextuple identifies the city. The first, third, and fourth sextuples contain data for New York. The first sextuple is a duplicate of the fourth sextuple. The third sextuple identifies the city as \"New York City\" instead of \"New York\". As the example shows, only the fourth sextuple is equal to the first sextuple. </p>System.Tuple`6.Equals#1"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with this instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).Equals(System.Object)
- uid: System.Tuple`6.GetHashCode
  commentId: M:System.Tuple`6.GetHashCode
  id: GetHashCode
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1838
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).GetHashCode()
- uid: System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  commentId: M:System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: IStructuralComparable.CompareTo(Object, IComparer)
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IStructuralComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1839
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object to a specified object by using a specified comparer and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.IStructuralComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>This method lets you define customized comparisons of <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects. For example, you can use this method to order <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects based on the value of a specific component. </p>\n<p>Although this method can be called directly, it is most commonly called by collection-sorting methods that include <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> parameters to order the members of a collection. For example, it is called by the <xref href=\"System.Array.Sort(System.Array,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Collections.SortedList.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method of a <xref href=\"System.Collections.SortedList\" data-throw-if-not-resolved=\"false\"></xref> object that is instantiated by using the <xref href=\"System.Collections.SortedList.#ctor(System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n<p>The <xref href=\"System.Tuple`6.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)\" data-throw-if-not-resolved=\"false\"></xref> method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref href=\"System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example creates an array of <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects that contains population data for three U.S. cities from 1960 to 2000. The sextuple's first component is the city name. The remaining five components represent the population at 10-year intervals from 1960 to 2000. </p>\n<p>The <code>PopulationComparer</code> class provides an <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation that allows the array of sextuples to be sorted by any one of its components. Two values are provided to the <code>PopulationComparer</code> class in its constructor: The position of the component that defines the sort order, and a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the tuple objects should be sorted in ascending or descending order. </p>\n<p>The example then displays the elements in the array in unsorted order, sorts them by the third component (the population in 1970) and displays them, and then sorts them by the sixth component (the population in 2000) and displays them.</p>System.Tuple`6.CompareTo#2"
  syntax:
    content: int IStructuralComparable.CompareTo(object other, IComparer comparer)
    content.vb: Function System.Collections.IStructuralComparable.CompareTo(other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>An object to compare with the current instance.</p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>An object that provides custom rules for comparison.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative position of this instance and <em>other</em> in the sort order, as shown in the following table.</p>\n<p>Value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>A negative integer</p>\n</td><td>\n<p>This instance precedes <em>other</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>This instance and <em>other</em> have the same position in the sort order.</p>\n</td></tr><tr><td>\n<p>A positive integer</p>\n</td><td>\n<p>This instance follows <em>other</em>.</p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>other</em> is not a <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  name.vb: System.Collections.IStructuralComparable.CompareTo(Object, IComparer)
- uid: System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IStructuralEquatable.Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1840
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a specified object based on a specified comparison method.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>The <xref href=\"System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implementation is called only if <em>other</em> is not <strong>null</strong>, and if it can be successfully cast (in C#) or converted (in Visual Basic) to a <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object whose components are of the same types as the current instance. The <xref href=\"System.Tuple`6.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method first passes the <xref href=\"System.Tuple`6.Item1\" data-throw-if-not-resolved=\"false\"></xref> values of the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects to be compared to the <xref href=\"System.Collections.IEqualityComparer.Equals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implementation. If this method call returns <strong>true</strong>, the method is called again and passed the <xref href=\"System.Tuple`6.Item2\" data-throw-if-not-resolved=\"false\"></xref> values of the two <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects. This continues until the method call returns <strong>false</strong> when it compares a specific pair of <strong>Item</strong> values, or the two <xref href=\"System.Tuple`6.Item6\" data-throw-if-not-resolved=\"false\"></xref> values are passed to the method. </p>\n"
  example:
  - "\n<p>The following example defines a <code>RateComparer</code> class that performs a custom test for equality. If the values that are passed to its <xref href=\"System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)\" data-throw-if-not-resolved=\"false\"></xref> method are of type <xref href=\"System.Single\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>, the method tests for equality by using only up to three fractional digits. Otherwise, it simply calls the <em>x</em> parameter's <strong>Equals</strong> method. The example uses this <xref href=\"System.Collections.IEqualityComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to determine whether four <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects that contain data on the rate of population change between 1960 and 2000 are equal.</p>System.Tuple`6.Equals#2"
  syntax:
    content: bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
    content.vb: Function System.Collections.IStructuralEquatable.Equals(other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>The object to compare with this instance.</p>\n"
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>An object that defines the method to use to evaluate whether the two objects are equal.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current instance is equal to the specified object; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)
- uid: System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Tuple`6.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IStructuralEquatable.GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1841
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Calculates the hash code for the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object by using a specified computation method.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.Collections.IStructuralEquatable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>The method simply wraps a call to the <em>comparer</em> object's <xref href=\"System.Collections.IEqualityComparer.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n<p>The algorithm used to compute the hash code should return the same hash code for two <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects that are considered to be equal.</p>\n"
  example:
  - 
  syntax:
    content: int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
    content.vb: Function System.Collections.IStructuralEquatable.GetHashCode(comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>An object whose <xref href=\"System.Collections.IEqualityComparer.GetHashCode(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>  method calculates the hash code of the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  implements:
  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Tuple`6.System#IComparable#CompareTo(System.Object)
  commentId: M:System.Tuple`6.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1842
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares the current <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object to a specified object and returns an integer that indicates whether the current object is before, after, or in the same position as the specified object in the sort order.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n<p>This method provides the <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> implementation for the <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> class. Although the method can be called directly, it is most commonly called by the default overloads of collection-sorting methods, such as <xref href=\"System.Array.Sort(System.Array)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.SortedList.Add(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, to order the members of a collection.</p>\n<p>The <xref href=\"System.Tuple`6.System#IComparable#CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method is intended for use in sorting operations. It should not be used when the primary purpose of a comparison is to determine whether two objects are equal. To determine whether two objects are equal, call the <xref href=\"System.Tuple`6.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <xref href=\"System.Tuple`6.System#IComparable#CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method uses the default object comparer to compare each component.</p>\n"
  example:
  - "\n<p>The following example creates an array of <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> objects that contain population data for three cities in the United States from 1960 to 2000. The six components consist of the city name followed by the city's population at 10-year intervals from 1960 to 2000. The example displays the components of each tuple in the array in unsorted order, sorts the array, and then calls the <xref href=\"System.Tuple`6.ToString\" data-throw-if-not-resolved=\"false\"></xref> method to display each tuple in sorted order. The output shows that the array has been sorted by name, which is the first component. Note that the example does not directly call the <xref href=\"System.Tuple`6.System#IComparable#CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. This method is called implicitly by the <xref href=\"System.Array.Sort(System.Array)\" data-throw-if-not-resolved=\"false\"></xref> method for each element in the array.</p>System.Tuple`6.CompareTo#1"
  syntax:
    content: int IComparable.CompareTo(object obj)
    content.vb: Function System.IComparable.CompareTo(obj As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with the current instance.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative position of this instance and <em>obj</em> in the sort order, as shown in the following table.</p>\n<p>Value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>A negative integer</p>\n</td><td>\n<p>This instance precedes <em>obj</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>This instance and <em>obj</em> have the same position in the sort order.</p>\n</td></tr><tr><td>\n<p>A positive integer</p>\n</td><td>\n<p>This instance follows <em>obj</em>.</p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>obj</em> is not a <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IComparable.CompareTo(System.Object)
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: System.Tuple`6.ToString
  commentId: M:System.Tuple`6.ToString
  id: ToString
  parent: System.Tuple`6
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Tuple<T1, T2, T3, T4, T5, T6>.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1843
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a string that represents the value of this <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The string returned by this method takes the form (Item1, Item2, Item3, Item4, <em>Item5, Item6</em>), where Item1, Item2, Item3, Item4, Item5, and Item6 represent the values of the <xref href=\"System.Tuple`6.Item1\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`6.Item2\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`6.Item3\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`6.Item4\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Tuple`6.Item5\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Tuple`6.Item6\" data-throw-if-not-resolved=\"false\"></xref> properties, respectively. If any of the property values is <strong>null</strong>, it is represented as <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example defines a <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object that contains population data for New York City for each census from 1960 through 2000. The components of the sextuple are then displayed by a call to the <xref href=\"System.Tuple`6.ToString\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Tuple`6.ToString#1"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The string representation of this <xref href=\"System.Tuple`6\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Tuple(Of T1, T2, T3, T4, T5, T6).ToString()
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IStructuralComparable
  parent: System.Collections
  isExternal: false
  name: IStructuralComparable
  fullName: System.Collections.IStructuralComparable
- uid: System.Collections.IStructuralEquatable
  parent: System.Collections
  isExternal: false
  name: IStructuralEquatable
  fullName: System.Collections.IStructuralEquatable
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: '{T1}'
  isExternal: false
  name: T1
  fullName: T1
- uid: '{T2}'
  isExternal: false
  name: T2
  fullName: T2
- uid: '{T3}'
  isExternal: false
  name: T3
  fullName: T3
- uid: '{T4}'
  isExternal: false
  name: T4
  fullName: T4
- uid: '{T5}'
  isExternal: false
  name: T5
  fullName: T5
- uid: '{T6}'
  isExternal: false
  name: T6
  fullName: T6
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Collections.IStructuralComparable
  isExternal: false
  name: CompareTo(Object, IComparer)
  fullName: System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    fullName: System.Collections.IComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    fullName: System.Collections.IComparer
  - name: )
    fullName: )
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: Equals(Object, IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    fullName: System.Collections.IStructuralEquatable.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    fullName: System.Collections.IStructuralEquatable.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: Collections.IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: GetHashCode(IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
  - name: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
  - name: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: false
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
