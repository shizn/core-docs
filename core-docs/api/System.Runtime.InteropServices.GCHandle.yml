items:
- uid: System.Runtime.InteropServices.GCHandle
  commentId: T:System.Runtime.InteropServices.GCHandle
  id: GCHandle
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject
  - System.Runtime.InteropServices.GCHandle.Alloc(System.Object)
  - System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)
  - System.Runtime.InteropServices.GCHandle.Equals(System.Object)
  - System.Runtime.InteropServices.GCHandle.Free
  - System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)
  - System.Runtime.InteropServices.GCHandle.GetHashCode
  - System.Runtime.InteropServices.GCHandle.IsAllocated
  - System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)
  - System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle
  - System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr
  - System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)
  - System.Runtime.InteropServices.GCHandle.Target
  - System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)
  langs:
  - csharp
  - vb
  name: GCHandle
  fullName: System.Runtime.InteropServices.GCHandle
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GCHandle
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 41
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Provides a way to access a managed object from unmanaged memory.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> structure is used with the <xref href=\"System.Runtime.InteropServices.GCHandleType\" data-throw-if-not-resolved=\"false\"></xref> enumeration to create a handle corresponding to any managed object. This handle can be one of four types: <strong>Weak</strong>, <strong>WeakTrackResurrection</strong>, <strong>Normal</strong>, or <strong>Pinned</strong>. When the handle has been allocated, you can use it to prevent the managed object from being collected by the garbage collector when an unmanaged client holds the only reference. Without such a handle, the object can be collected by the garbage collector before completing its work on behalf of the unmanaged client.</p>\n<p>You can also use <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> to create a pinned object that returns a memory address to prevent the garbage collector from moving the object in memory.</p>\n<p>When the handle goes out of scope you must explicitly release it by calling the <xref href=\"System.Runtime.InteropServices.GCHandle.Free\" data-throw-if-not-resolved=\"false\"></xref> method; otherwise, memory leaks may occur. When you free a pinned handle, the associated object will be unpinned and will become eligible for garbage collection, if there are no other references to it.</p>\n"
  example:
  - "\n<p>The following example shows an <code>App</code> class that creates a handle to a managed object using the <strong>GCHandle.Alloc</strong> method, which prevents the managed object from being collected. A call to the <strong>EnumWindows</strong> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref>. The unmanaged function passes the type back to the caller as a parameter of the callback function.</p>System.Runtime.InteropServices.GCHandle#1"
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      [ComVisible(true)]

      public struct GCHandle
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      <ComVisible(True)>

      Public Structure GCHandle
  seealso:
  - type: System.Runtime.InteropServices.GCHandleType
    commentId: T:System.Runtime.InteropServices.GCHandleType
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Runtime.InteropServices.GCHandle.IsAllocated
  commentId: P:System.Runtime.InteropServices.GCHandle.IsAllocated
  id: IsAllocated
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: IsAllocated
  fullName: System.Runtime.InteropServices.GCHandle.IsAllocated
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsAllocated
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 178
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets a value indicating whether the handle is allocated.</p>\n"
  remarks: "\n<p>Use this property when using <xref href=\"System.Runtime.InteropServices.GCHandleType.Weak\" data-throw-if-not-resolved=\"false\"></xref> handles to determine if the <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> is still available. When the garbage collector collects the object, the <xref href=\"System.Runtime.InteropServices.GCHandleType.Weak\" data-throw-if-not-resolved=\"false\"></xref> handle can still be resurrected in the finalizer. In that case, the handle is not allocated (it is lost when the garbage collector attempts to collect the object), even though the target object is valid.</p>\n"
  syntax:
    content: public bool IsAllocated { get; }
    content.vb: Public ReadOnly Property IsAllocated As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Runtime.InteropServices.GCHandleType
    commentId: T:System.Runtime.InteropServices.GCHandleType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.InteropServices.GCHandle.Target
  commentId: P:System.Runtime.InteropServices.GCHandle.Target
  id: Target
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: Target
  fullName: System.Runtime.InteropServices.GCHandle.Target
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Target
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 134
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets or sets the object this handle represents.</p>\n"
  example:
  - "\n<p>The following example shows an <code>App</code> class that creates a handle to a managed object using the <strong>GCHandle.Alloc</strong> method, which prevents the managed object from being collected. A call to the <strong>EnumWindows</strong> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref>. The unmanaged function passes the type back to the caller as a parameter of the callback function.</p>System.Runtime.InteropServices.GCHandle#1"
  syntax:
    content: >-
      public object Target

      {
          [SecurityCritical]
          get;
          [SecurityCritical]
          set;
      }
    content.vb: Public Property Target As Object
    parameters: []
    return:
      type: System.Object
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The handle was freed, or never initialized. </p>\n"
  seealso:
  - type: System.Runtime.InteropServices.GCHandleType
    commentId: T:System.Runtime.InteropServices.GCHandleType
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject
  commentId: M:System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject
  id: AddrOfPinnedObject
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: AddrOfPinnedObject()
  fullName: System.Runtime.InteropServices.GCHandle.AddrOfPinnedObject()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddrOfPinnedObject
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 159
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Retrieves the address of an object in a <xref href=\"System.Runtime.InteropServices.GCHandleType.Pinned\" data-throw-if-not-resolved=\"false\"></xref> handle.</p>\n"
  remarks: "\n<p>This method is used to get a stable pointer to the object. Pinning an object prevents the garbage collector from moving it around in memory, thereby reducing the efficiency of the garbage collector.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public IntPtr AddrOfPinnedObject()
    content.vb: >-
      <SecurityCritical>

      Public Function AddrOfPinnedObject As IntPtr
    return:
      type: System.IntPtr
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The handle is any type other than <xref href=\"System.Runtime.InteropServices.GCHandleType.Pinned\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Runtime.InteropServices.GCHandleType
    commentId: T:System.Runtime.InteropServices.GCHandleType
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.GCHandle.Alloc(System.Object)
  commentId: M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object)
  id: Alloc(System.Object)
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: Alloc(Object)
  fullName: System.Runtime.InteropServices.GCHandle.Alloc(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Alloc
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 88
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Allocates a <xref href=\"System.Runtime.InteropServices.GCHandleType.Normal\" data-throw-if-not-resolved=\"false\"></xref> handle for the specified object.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Runtime.InteropServices.GCHandleType.Normal\" data-throw-if-not-resolved=\"false\"></xref> handles are opaque, which means that you cannot resolve the address of the object it contains through the handle.</p>\n"
  example:
  - "\n<p>The following example shows an <code>App</code> class that creates a handle to a managed object using the <strong>GCHandle.Alloc</strong> method, which prevents the managed object from being collected. A call to the <strong>EnumWindows</strong> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref>. The unmanaged function passes the type back to the caller as a parameter of the callback function.</p>System.Runtime.InteropServices.GCHandle#1"
  syntax:
    content: >-
      [SecurityCritical]

      public static GCHandle Alloc(object value)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function Alloc(value As Object) As GCHandle
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Runtime.InteropServices.GCHandle
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An instance with nonprimitive (non-blittable) members cannot be pinned. </p>\n"
  seealso:
  - type: System.Runtime.InteropServices.GCHandleType
    commentId: T:System.Runtime.InteropServices.GCHandleType
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)
  commentId: M:System.Runtime.InteropServices.GCHandle.Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)
  id: Alloc(System.Object,System.Runtime.InteropServices.GCHandleType)
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: Alloc(Object, GCHandleType)
  fullName: System.Runtime.InteropServices.GCHandle.Alloc(System.Object, System.Runtime.InteropServices.GCHandleType)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Alloc
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 94
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Allocates a handle of the specified type for the specified object.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static GCHandle Alloc(object value, GCHandleType type)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function Alloc(value As Object, type As GCHandleType) As GCHandle
    parameters:
    - id: value
      type: System.Object
    - id: type
      type: System.Runtime.InteropServices.GCHandleType
    return:
      type: System.Runtime.InteropServices.GCHandle
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An instance with nonprimitive (non-blittable) members cannot be pinned. </p>\n"
  seealso:
  - type: System.Runtime.InteropServices.GCHandleType
    commentId: T:System.Runtime.InteropServices.GCHandleType
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.GCHandle.Equals(System.Object)
  commentId: M:System.Runtime.InteropServices.GCHandle.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Runtime.InteropServices.GCHandle.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 244
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Determines whether the specified <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> object is equal to the current <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>Two <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> objects are equal if they point to the same memory handle.</p>\n"
  example:
  - 
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Runtime.InteropServices.GCHandle.Free
  commentId: M:System.Runtime.InteropServices.GCHandle.Free
  id: Free
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: Free()
  fullName: System.Runtime.InteropServices.GCHandle.Free()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Free
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 102
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Releases a <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The caller must ensure that for a given handle, <xref href=\"System.Runtime.InteropServices.GCHandle.Free\" data-throw-if-not-resolved=\"false\"></xref> is called only once.</p>\n"
  example:
  - "\n<p>The following example shows an <code>App</code> class that creates a handle to a managed object using the <strong>GCHandle.Alloc</strong> method, which prevents the managed object from being collected. A call to the <strong>EnumWindows</strong> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref>. The unmanaged function passes the type back to the caller as a parameter of the callback function.</p>System.Runtime.InteropServices.GCHandle#1"
  syntax:
    content: >-
      [SecurityCritical]

      public void Free()
    content.vb: >-
      <SecurityCritical>

      Public Sub Free
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The handle was freed or never initialized. </p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)
  id: FromIntPtr(System.IntPtr)
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: FromIntPtr(IntPtr)
  fullName: System.Runtime.InteropServices.GCHandle.FromIntPtr(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromIntPtr
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 194
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns a new <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> object created from a handle to a managed object.</p>\n"
  example:
  - "\n<p>The following code example shows an <code>App</code> class that creates a handle to a managed object using the <strong>GCHandle.Alloc</strong> method, which prevents the managed object from being collected. A call to the <strong>EnumWindows</strong> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> object. The unmanaged function passes the type back to the caller as a parameter of the callback function.</p>System.Runtime.InteropServices.GCHandle#1"
  syntax:
    content: >-
      [SecurityCritical]

      public static GCHandle FromIntPtr(IntPtr value)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function FromIntPtr(value As IntPtr) As GCHandle
    parameters:
    - id: value
      type: System.IntPtr
    return:
      type: System.Runtime.InteropServices.GCHandle
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The value of the <em>value</em> parameter is <xref href=\"System.IntPtr.Zero\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.GCHandle.GetHashCode
  commentId: M:System.Runtime.InteropServices.GCHandle.GetHashCode
  id: GetHashCode
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Runtime.InteropServices.GCHandle.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 239
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns an identifier for the current <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.InteropServices.GCHandle.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref> method returns an integer representation of the internal memory handle encapsulated by the <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
  example:
  - 
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)
  commentId: M:System.Runtime.InteropServices.GCHandle.op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)
  id: op_Equality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: Equality(GCHandle, GCHandle)
  fullName: System.Runtime.InteropServices.GCHandle.Equality(System.Runtime.InteropServices.GCHandle, System.Runtime.InteropServices.GCHandle)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 257
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns a value indicating whether two <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> objects are equal.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator ==(GCHandle a, GCHandle b)
    content.vb: Public Shared Operator =(a As GCHandle, b As GCHandle) As Boolean
    parameters:
    - id: a
      type: System.Runtime.InteropServices.GCHandle
    - id: b
      type: System.Runtime.InteropServices.GCHandle
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle
  commentId: M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle
  id: op_Explicit(System.IntPtr)~System.Runtime.InteropServices.GCHandle
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: Explicit(IntPtr to GCHandle)
  fullName: System.Runtime.InteropServices.GCHandle.Explicit(System.IntPtr to System.Runtime.InteropServices.GCHandle)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 188
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>A <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> is stored using an internal integer representation.</p>\n"
  remarks: "\n<p>This method allows you to retrieve a <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> from an integer value.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static explicit operator GCHandle(IntPtr value)
    content.vb: >-
      <SecurityCritical>

      Public Shared Narrowing Operator CType(value As IntPtr) As GCHandle
    parameters:
    - id: value
      type: System.IntPtr
    return:
      type: System.Runtime.InteropServices.GCHandle
  seealso:
  - type: System.Runtime.InteropServices.GCHandleType
    commentId: T:System.Runtime.InteropServices.GCHandleType
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.GCHandle.Narrowing(System.IntPtr to System.Runtime.InteropServices.GCHandle)
  name.vb: Narrowing(IntPtr to GCHandle)
- uid: System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr
  commentId: M:System.Runtime.InteropServices.GCHandle.op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr
  id: op_Explicit(System.Runtime.InteropServices.GCHandle)~System.IntPtr
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: Explicit(GCHandle to IntPtr)
  fullName: System.Runtime.InteropServices.GCHandle.Explicit(System.Runtime.InteropServices.GCHandle to System.IntPtr)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 221
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>A <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> is stored using an internal integer representation.</p>\n"
  remarks: "\n<p>This method can be used to retrieve the integer value from a <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static explicit operator IntPtr(GCHandle value)
    content.vb: Public Shared Narrowing Operator CType(value As GCHandle) As IntPtr
    parameters:
    - id: value
      type: System.Runtime.InteropServices.GCHandle
    return:
      type: System.IntPtr
  seealso:
  - type: System.Runtime.InteropServices.GCHandleType
    commentId: T:System.Runtime.InteropServices.GCHandleType
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.GCHandle.Narrowing(System.Runtime.InteropServices.GCHandle to System.IntPtr)
  name.vb: Narrowing(GCHandle to IntPtr)
- uid: System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)
  commentId: M:System.Runtime.InteropServices.GCHandle.op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)
  id: op_Inequality(System.Runtime.InteropServices.GCHandle,System.Runtime.InteropServices.GCHandle)
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: Inequality(GCHandle, GCHandle)
  fullName: System.Runtime.InteropServices.GCHandle.Inequality(System.Runtime.InteropServices.GCHandle, System.Runtime.InteropServices.GCHandle)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 262
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns a value indicating whether two <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> objects are not equal.</p>\n"
  example:
  - 
  syntax:
    content: public static bool operator !=(GCHandle a, GCHandle b)
    content.vb: Public Shared Operator <>(a As GCHandle, b As GCHandle) As Boolean
    parameters:
    - id: a
      type: System.Runtime.InteropServices.GCHandle
    - id: b
      type: System.Runtime.InteropServices.GCHandle
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)
  commentId: M:System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)
  id: ToIntPtr(System.Runtime.InteropServices.GCHandle)
  parent: System.Runtime.InteropServices.GCHandle
  langs:
  - csharp
  - vb
  name: ToIntPtr(GCHandle)
  fullName: System.Runtime.InteropServices.GCHandle.ToIntPtr(System.Runtime.InteropServices.GCHandle)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToIntPtr
    path: src/mscorlib/src/System/Runtime/InteropServices/GcHandle.cs
    startLine: 226
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns the internal integer representation of a <xref href=\"System.Runtime.InteropServices.GCHandle\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  example:
  - "\n<p>The following code example shows an <code>App</code> class that creates a handle to a managed object using the <strong>GCHandle.Alloc</strong> method, which prevents the managed object from being collected. A call to the <strong>EnumWindows</strong> method passes a delegate and a managed object (both declared as managed types, but not shown), and casts the handle to an <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> object. The unmanaged function passes the type back to the caller as a parameter of the callback function.</p>System.Runtime.InteropServices.GCHandle#1"
  syntax:
    content: public static IntPtr ToIntPtr(GCHandle value)
    content.vb: Public Shared Function ToIntPtr(value As GCHandle) As IntPtr
    parameters:
    - id: value
      type: System.Runtime.InteropServices.GCHandle
    return:
      type: System.IntPtr
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
- uid: System.Runtime.InteropServices.GCHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: GCHandle
  fullName: System.Runtime.InteropServices.GCHandle
- uid: System.Runtime.InteropServices.GCHandleType
  parent: System.Runtime.InteropServices
  isExternal: false
  name: GCHandleType
  fullName: System.Runtime.InteropServices.GCHandleType
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
