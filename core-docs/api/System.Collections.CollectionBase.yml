items:
- uid: System.Collections.CollectionBase
  commentId: T:System.Collections.CollectionBase
  id: CollectionBase
  parent: System.Collections
  children:
  - System.Collections.CollectionBase.#ctor
  - System.Collections.CollectionBase.#ctor(System.Int32)
  - System.Collections.CollectionBase.Capacity
  - System.Collections.CollectionBase.Clear
  - System.Collections.CollectionBase.Count
  - System.Collections.CollectionBase.GetEnumerator
  - System.Collections.CollectionBase.InnerList
  - System.Collections.CollectionBase.List
  - System.Collections.CollectionBase.OnClear
  - System.Collections.CollectionBase.OnClearComplete
  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnValidate(System.Object)
  - System.Collections.CollectionBase.RemoveAt(System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  - System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  - System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  - System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  - System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  - vb
  name: CollectionBase
  fullName: System.Collections.CollectionBase
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CollectionBase
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 13
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Provides the <strong>abstract</strong> base class for a strongly typed collection.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance is always modifiable. See <xref href=\"System.Collections.ReadOnlyCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> for a read-only version of this class.</p>\n<p>The capacity of a <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by setting the <xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public abstract class CollectionBase : IList, ICollection, IEnumerable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public MustInherit Class CollectionBase
          Implements IList, ICollection, IEnumerable
  seealso:
  - type: System.Collections.ArrayList
    commentId: T:System.Collections.ArrayList
  - type: System.Collections.IList
    commentId: T:System.Collections.IList
  - type: System.Collections.ReadOnlyCollectionBase
    commentId: T:System.Collections.ReadOnlyCollectionBase
  - type: System.Collections.Generic
    commentId: N:System.Collections.Generic
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Collections.CollectionBase.#ctor
  commentId: M:System.Collections.CollectionBase.#ctor
  id: '#ctor'
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: CollectionBase()
  fullName: System.Collections.CollectionBase.CollectionBase()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 18
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class with the default initial capacity.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: protected CollectionBase()
    content.vb: Protected Sub New
  seealso:
  - type: System.Collections.CollectionBase.Capacity
    commentId: P:System.Collections.CollectionBase.Capacity
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Collections.CollectionBase.#ctor(System.Int32)
  commentId: M:System.Collections.CollectionBase.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: CollectionBase(Int32)
  fullName: System.Collections.CollectionBase.CollectionBase(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 22
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class with the specified capacity.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  syntax:
    content: protected CollectionBase(int capacity)
    content.vb: Protected Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
  seealso:
  - type: System.Collections.CollectionBase.Capacity
    commentId: P:System.Collections.CollectionBase.Capacity
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Collections.CollectionBase.Capacity
  commentId: P:System.Collections.CollectionBase.Capacity
  id: Capacity
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: Capacity
  fullName: System.Collections.CollectionBase.Capacity
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Capacity
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 39
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets or sets the number of elements that the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> can contain.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> can store. <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is always greater than or equal to <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds <xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>The capacity can be decreased by setting the <xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly. When the value of <xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is an O(<em>n</em>) operation, where <em>n</em> is the new capacity.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public int Capacity { get; set; }
    content.vb: >-
      <ComVisible(False)>

      Public Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set to a value that is less than <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough memory available on the system.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.Count
    commentId: P:System.Collections.CollectionBase.Count
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Collections.CollectionBase.Count
  commentId: P:System.Collections.CollectionBase.Count
  id: Count
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.CollectionBase.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 50
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance. This property cannot be overridden.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.CollectionBase.InnerList
  commentId: P:System.Collections.CollectionBase.InnerList
  id: InnerList
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: InnerList
  fullName: System.Collections.CollectionBase.InnerList
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InnerList
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 27
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> containing the list of elements in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: protected ArrayList InnerList { get; }
    content.vb: Protected ReadOnly Property InnerList As ArrayList
    parameters: []
    return:
      type: System.Collections.ArrayList
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Collections.CollectionBase.List
  commentId: P:System.Collections.CollectionBase.List
  id: List
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: List
  fullName: System.Collections.CollectionBase.List
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: List
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 35
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> containing the list of elements in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: protected IList List { get; }
    content.vb: Protected ReadOnly Property List As IList
    parameters: []
    return:
      type: System.Collections.IList
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.CollectionBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 88
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe).</p>\n"
  remarks: "\n<p>A <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance is not synchronized. Derived classes can provide a synchronized version of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration: </p>System.Collections.CollectionBase#2<p>Retrieving the value of this property is an O(1) operation.</p>"
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.ICollection.SyncRoot
    commentId: P:System.Collections.ICollection.SyncRoot
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.CollectionBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.ICollection.SyncRoot
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 92
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Derived classes can provide their own synchronized version of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property. The synchronizing code must perform operations on the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>, not directly on the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.ICollection.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration: </p>System.Collections.CollectionBase#2<p>Retrieving the value of this property is an O(1) operation.</p>"
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  seealso:
  - type: System.Collections.ICollection.IsSynchronized
    commentId: P:System.Collections.ICollection.IsSynchronized
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  commentId: P:System.Collections.CollectionBase.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: IList.IsFixedSize
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.IsFixedSize
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 84
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  remarks: "\n<p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</p>\n<p>A collection with a fixed size is simply a collection with a wrapper that prevents adding and removing elements; therefore, if changes are made to the underlying collection, including the addition or removal of elements, the fixed-size collection reflects those changes.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: bool IList.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IList.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  commentId: P:System.Collections.CollectionBase.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: IList.IsReadOnly
  fullName: System.Collections.CollectionBase.System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.IsReadOnly
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 80
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  remarks: "\n<p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n<p>A collection that is read-only is simply a collection with a wrapper that prevents modifying the collection; therefore, if changes are made to the underlying collection, the read-only collection reflects those changes.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: bool IList.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IList.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Collections.CollectionBase.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: IList.Item[Int32]
  fullName: System.Collections.CollectionBase.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.this[]
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 100
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets or sets the element at the specified index.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: object IList.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this
    parameters:
    - id: index
      type: System.Int32
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.Count
    commentId: P:System.Collections.CollectionBase.Count
  implements:
  - System.Collections.IList.Item(System.Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Collections.CollectionBase.System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
- uid: System.Collections.CollectionBase.Clear
  commentId: M:System.Collections.CollectionBase.Clear
  id: Clear
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.CollectionBase.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clear
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 56
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes all objects from the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance. This method cannot be overridden.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To perform custom actions before or after the collection is cleared, override the protected <xref href=\"System.Collections.CollectionBase.OnClear\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.CollectionBase.OnClearComplete\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  implements:
  - System.Collections.IList.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.CollectionBase.GetEnumerator
  commentId: M:System.Collections.CollectionBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.CollectionBase.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 179
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>[Visual Basic, C#]</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position. At this position, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>While the <xref href=\"System.Collections.CollectionBase.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method is not visible to COM clients by default, inheriting the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class can expose it and can cause undesirable behavior in COM clients.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.CollectionBase.OnClear
  commentId: M:System.Collections.CollectionBase.OnClear
  id: OnClear
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnClear()
  fullName: System.Collections.CollectionBase.OnClear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnClear
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 189
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes when clearing the contents of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the process fails, the collection reverts back to its previous state.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnClear()
    content.vb: Protected Overridable Sub OnClear
  seealso:
  - type: System.Collections.CollectionBase.OnClearComplete
    commentId: M:System.Collections.CollectionBase.OnClearComplete
  - type: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnClearComplete
  commentId: M:System.Collections.CollectionBase.OnClearComplete
  id: OnClearComplete
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnClearComplete()
  fullName: System.Collections.CollectionBase.OnClearComplete()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnClearComplete
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 206
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after clearing the contents of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnClearComplete()
    content.vb: Protected Overridable Sub OnClearComplete
  seealso:
  - type: System.Collections.CollectionBase.OnClear
    commentId: M:System.Collections.CollectionBase.OnClear
  - type: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  commentId: M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  id: OnInsert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnInsert(Int32, Object)
  fullName: System.Collections.CollectionBase.OnInsert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnInsert
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 186
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes before inserting a new element into the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the process fails, the collection reverts back to its previous state.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: protected virtual void OnInsert(int index, object value)
    content.vb: Protected Overridable Sub OnInsert(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
  seealso:
  - type: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  - type: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
    commentId: M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - type: System.Collections.CollectionBase.OnValidate(System.Object)
    commentId: M:System.Collections.CollectionBase.OnValidate(System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  commentId: M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  id: OnInsertComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnInsertComplete(Int32, Object)
  fullName: System.Collections.CollectionBase.OnInsertComplete(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnInsertComplete
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 203
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after inserting a new element into the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The collection reverts back to its previous state if one of the following occurs:</p>\n<ul><li>\n<p>The process fails.</p>\n</li><li>\n<p>This method is overridden to throw an exception.</p>\n</li></ul>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnInsertComplete(int index, object value)
    content.vb: Protected Overridable Sub OnInsertComplete(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
  seealso:
  - type: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - type: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
    commentId: M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  commentId: M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  id: OnRemove(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnRemove(Int32, Object)
  fullName: System.Collections.CollectionBase.OnRemove(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnRemove
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 192
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes when removing an element from the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the process fails, the collection reverts back to its previous state.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: protected virtual void OnRemove(int index, object value)
    content.vb: Protected Overridable Sub OnRemove(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
  seealso:
  - type: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  - type: System.Collections.CollectionBase.OnClear
    commentId: M:System.Collections.CollectionBase.OnClear
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  commentId: M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  id: OnRemoveComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnRemoveComplete(Int32, Object)
  fullName: System.Collections.CollectionBase.OnRemoveComplete(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnRemoveComplete
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 209
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after removing an element from the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The collection reverts back to its previous state if one of the following occurs:</p>\n<ul><li>\n<p>The process fails.</p>\n</li><li>\n<p>This method is overridden to throw an exception.</p>\n</li></ul>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnRemoveComplete(int index, object value)
    content.vb: Protected Overridable Sub OnRemoveComplete(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
  seealso:
  - type: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  - type: System.Collections.CollectionBase.OnClearComplete
    commentId: M:System.Collections.CollectionBase.OnClearComplete
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  commentId: M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  id: OnSet(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnSet(Int32, Object, Object)
  fullName: System.Collections.CollectionBase.OnSet(System.Int32, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnSet
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 183
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes before setting a value in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the process fails, the collection reverts back to its previous state.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: protected virtual void OnSet(int index, object oldValue, object newValue)
    content.vb: Protected Overridable Sub OnSet(index As Integer, oldValue As Object, newValue As Object)
    parameters:
    - id: index
      type: System.Int32
    - id: oldValue
      type: System.Object
    - id: newValue
      type: System.Object
  seealso:
  - type: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
    commentId: M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  - type: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - type: System.Collections.CollectionBase.OnValidate(System.Object)
    commentId: M:System.Collections.CollectionBase.OnValidate(System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  commentId: M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  id: OnSetComplete(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnSetComplete(Int32, Object, Object)
  fullName: System.Collections.CollectionBase.OnSetComplete(System.Int32, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnSetComplete
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 200
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after setting a value in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The collection reverts back to its previous state if one of the following occurs:</p>\n<ul><li>\n<p>The process fails.</p>\n</li><li>\n<p>This method is overridden to throw an exception.</p>\n</li></ul>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnSetComplete(int index, object oldValue, object newValue)
    content.vb: Protected Overridable Sub OnSetComplete(index As Integer, oldValue As Object, newValue As Object)
    parameters:
    - id: index
      type: System.Int32
    - id: oldValue
      type: System.Object
    - id: newValue
      type: System.Object
  seealso:
  - type: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
    commentId: M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - type: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnValidate(System.Object)
  commentId: M:System.Collections.CollectionBase.OnValidate(System.Object)
  id: OnValidate(System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnValidate(Object)
  fullName: System.Collections.CollectionBase.OnValidate(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnValidate
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 195
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes when validating a value.</p>\n"
  remarks: "\n<p>The default implementation of this method determines whether <em>value</em> is <strong>null</strong>, and, if so, throws <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref>. It is intended to be overridden by a derived class to perform additional action when the specified element is validated.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: protected virtual void OnValidate(object value)
    content.vb: Protected Overridable Sub OnValidate(value As Object)
    parameters:
    - id: value
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
    commentId: M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - type: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)
  commentId: M:System.Collections.CollectionBase.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Collections.CollectionBase.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RemoveAt
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 62
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the element at the specified index of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance. This method is not overridable.</p>\n"
  remarks: "\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IList.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.CollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.CollectionBase.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.ICollection.CopyTo
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 96
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the entire <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified index of the target array.</p>\n"
  remarks: "\n<p>The specified array must be of a compatible type.</p>\n<p>This method uses <xref href=\"System.Array.Copy(System.Array,System.Array,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> to copy the elements.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or-</p>\n<p>The number of elements in the source <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>.</p>\n"
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
- uid: System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  commentId: M:System.Collections.CollectionBase.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: IList.Add(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Add
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 129
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Adds an object to the end of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array and copying the existing elements to the new array before the new element is added.</p>\n<p>If <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: int IList.Add(object value)
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.Count
    commentId: P:System.Collections.CollectionBase.Count
  - type: System.Collections.IList.Insert(System.Int32,System.Object)
    commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
  - type: System.Collections.IList.Remove(System.Object)
    commentId: M:System.Collections.IList.Remove(System.Object)
  implements:
  - System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Collections.CollectionBase.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: IList.Contains(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Contains
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 125
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> contains a specific element.</p>\n"
  remarks: "\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether <em>item</em> exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: bool IList.Contains(object value)
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.IList.IndexOf(System.Object)
    commentId: M:System.Collections.IList.IndexOf(System.Object)
  implements:
  - System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Collections.CollectionBase.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: IList.IndexOf(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.IndexOf
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 159
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether <em>item</em> exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: int IList.IndexOf(object value)
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  seealso:
  - type: System.Collections.IList.Contains(System.Object)
    commentId: M:System.Collections.IList.Contains(System.Object)
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Collections.CollectionBase.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: IList.Insert(Int32, Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Insert
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 163
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Inserts an element into the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> already equals the capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.</p>\n<p>If <em>index</em> is equal to <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>, <em>value</em> is added to the end of <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: void IList.Insert(int index, object value)
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
    parameters:
    - id: index
      type: System.Int32
    - id: value
      type: System.Object
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is greater than <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  seealso:
  - type: System.Collections.IList.Add(System.Object)
    commentId: M:System.Collections.IList.Add(System.Object)
  - type: System.Collections.IList.Remove(System.Object)
    commentId: M:System.Collections.IList.Remove(System.Object)
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
- uid: System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Collections.CollectionBase.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: IList.Remove(Object)
  fullName: System.Collections.CollectionBase.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Remove
    path: src/mscorlib/src/System/Collections/CollectionBase.cs
    startLine: 144
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the first occurrence of a specific object from the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>If the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> does not contain the specified object, the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged. No exception is thrown.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: void IList.Remove(object value)
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
    parameters:
    - id: value
      type: System.Object
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>value</em> parameter was not found in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.RemoveAt(System.Int32)
    commentId: M:System.Collections.CollectionBase.RemoveAt(System.Int32)
  - type: System.Collections.IList.Add(System.Object)
    commentId: M:System.Collections.IList.Add(System.Object)
  - type: System.Collections.IList.Insert(System.Int32,System.Object)
    commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
  implements:
  - System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: false
  name: IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: false
  name: IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  fullname.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    fullName: System.Collections.IList.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    fullName: System.Collections.IList.Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: false
  name: Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    fullName: System.Collections.IList.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    fullName: System.Collections.IList.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    fullName: System.Collections.IList.Add
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    fullName: System.Collections.IList.Add
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IList.Contains
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IList.Contains
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    fullName: System.Collections.IList.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    fullName: System.Collections.IList.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IList.Remove
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IList.Remove
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
