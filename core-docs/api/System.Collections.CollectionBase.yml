items:
- uid: System.Collections.CollectionBase
  commentId: T:System.Collections.CollectionBase
  id: CollectionBase
  parent: System.Collections
  children:
  - System.Collections.CollectionBase.#ctor
  - System.Collections.CollectionBase.#ctor(System.Int32)
  - System.Collections.CollectionBase.Capacity
  - System.Collections.CollectionBase.Clear
  - System.Collections.CollectionBase.Count
  - System.Collections.CollectionBase.GetEnumerator
  - System.Collections.CollectionBase.InnerList
  - System.Collections.CollectionBase.List
  - System.Collections.CollectionBase.OnClear
  - System.Collections.CollectionBase.OnClearComplete
  - System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  - System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  - System.Collections.CollectionBase.OnValidate(System.Object)
  - System.Collections.CollectionBase.RemoveAt(System.Int32)
  langs:
  - csharp
  - vb
  name: CollectionBase
  fullName: System.Collections.CollectionBase
  type: Class
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CollectionBase
    path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
    startLine: 17
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Provides the <strong>abstract</strong> base class for a strongly typed collection.</p>\n"
  remarks: "\n<p>A <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance is always modifiable. See <xref href=\"System.Collections.ReadOnlyCollectionBase\" data-throw-if-not-resolved=\"false\"></xref> for a read-only version of this class.</p>\n<p>The capacity of a <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation. The capacity can be decreased by setting the <xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: 'public abstract class CollectionBase : IList'
    content.vb: >-
      Public MustInherit Class CollectionBase
          Inherits IList
  seealso:
  - type: System.Collections.ArrayList
    commentId: T:System.Collections.ArrayList
  - type: System.Collections.IList
    commentId: T:System.Collections.IList
  - type: System.Collections.ReadOnlyCollectionBase
    commentId: T:System.Collections.ReadOnlyCollectionBase
  - type: System.Collections.Generic
    commentId: N:System.Collections.Generic
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.Collections.IList
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Collections.CollectionBase.#ctor
  commentId: M:System.Collections.CollectionBase.#ctor
  id: '#ctor'
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: CollectionBase()
  fullName: System.Collections.CollectionBase.CollectionBase()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
    startLine: 21
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class with the default initial capacity.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: protected CollectionBase()
    content.vb: Protected Sub New
  seealso:
  - type: System.Collections.CollectionBase.Capacity
    commentId: P:System.Collections.CollectionBase.Capacity
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Collections.CollectionBase.#ctor(System.Int32)
  commentId: M:System.Collections.CollectionBase.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: CollectionBase(Int32)
  fullName: System.Collections.CollectionBase.CollectionBase(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
    startLine: 26
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class with the specified capacity.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required by reallocating the internal array.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  syntax:
    content: protected CollectionBase(int capacity)
    content.vb: Protected Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
  seealso:
  - type: System.Collections.CollectionBase.Capacity
    commentId: P:System.Collections.CollectionBase.Capacity
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Collections.CollectionBase.Capacity
  commentId: P:System.Collections.CollectionBase.Capacity
  id: Capacity
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: Capacity
  fullName: System.Collections.CollectionBase.Capacity
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Capacity
    path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
    startLine: 45
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets or sets the number of elements that the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> can contain.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> can store. <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is always greater than or equal to <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds <xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements.</p>\n<p>The capacity can be decreased by setting the <xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> property explicitly. When the value of <xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set explicitly, the internal array is also reallocated to accommodate the specified capacity.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is an O(<em>n</em>) operation, where <em>n</em> is the new capacity.</p>\n"
  syntax:
    content: public int Capacity { get; set; }
    content.vb: Public Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<xref href=\"System.Collections.CollectionBase.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set to a value that is less than <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough memory available on the system.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.Count
    commentId: P:System.Collections.CollectionBase.Count
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Collections.CollectionBase.Count
  commentId: P:System.Collections.CollectionBase.Count
  id: Count
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.CollectionBase.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
    startLine: 58
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance. This property cannot be overridden.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.CollectionBase.InnerList
  commentId: P:System.Collections.CollectionBase.InnerList
  id: InnerList
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: InnerList
  fullName: System.Collections.CollectionBase.InnerList
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InnerList
    path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
    startLine: 32
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> containing the list of elements in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: protected ArrayList InnerList { get; }
    content.vb: Protected ReadOnly Property InnerList As ArrayList
    parameters: []
    return:
      type: System.Collections.ArrayList
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Collections.CollectionBase.List
  commentId: P:System.Collections.CollectionBase.List
  id: List
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: List
  fullName: System.Collections.CollectionBase.List
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: List
    path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
    startLine: 40
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> containing the list of elements in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: protected IList List { get; }
    content.vb: Protected ReadOnly Property List As IList
    parameters: []
    return:
      type: IList
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Collections.CollectionBase.Clear
  commentId: M:System.Collections.CollectionBase.Clear
  id: Clear
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.CollectionBase.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
    startLine: 66
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes all objects from the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance. This method cannot be overridden.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>To perform custom actions before or after the collection is cleared, override the protected <xref href=\"System.Collections.CollectionBase.OnClear\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.CollectionBase.OnClearComplete\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.CollectionBase.GetEnumerator
  commentId: M:System.Collections.CollectionBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.CollectionBase.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
    startLine: 213
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>[Visual Basic, C#]</p>\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position. At this position, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, calling <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> throws an exception. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and the next call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>. If the collection is modified between <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the element that it is set to, even if the enumerator is already invalidated.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n<p>While the <xref href=\"System.Collections.CollectionBase.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> method is not visible to COM clients by default, inheriting the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class can expose it and can cause undesirable behavior in COM clients.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: IEnumerator
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.CollectionBase.OnClear
  commentId: M:System.Collections.CollectionBase.OnClear
  id: OnClear
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnClear()
  fullName: System.Collections.CollectionBase.OnClear()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnClear
    path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
    startLine: 226
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes when clearing the contents of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the collection is cleared.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the process fails, the collection reverts back to its previous state.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnClear()
    content.vb: Protected Overridable Sub OnClear
  seealso:
  - type: System.Collections.CollectionBase.OnClearComplete
    commentId: M:System.Collections.CollectionBase.OnClearComplete
  - type: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnClearComplete
  commentId: M:System.Collections.CollectionBase.OnClearComplete
  id: OnClearComplete
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnClearComplete()
  fullName: System.Collections.CollectionBase.OnClearComplete()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnClearComplete
    path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
    startLine: 248
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after clearing the contents of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the collection is cleared.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnClearComplete()
    content.vb: Protected Overridable Sub OnClearComplete
  seealso:
  - type: System.Collections.CollectionBase.OnClear
    commentId: M:System.Collections.CollectionBase.OnClear
  - type: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  commentId: M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  id: OnInsert(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnInsert(Int32, Object)
  fullName: System.Collections.CollectionBase.OnInsert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnInsert
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 90
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes before inserting a new element into the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is inserted.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the process fails, the collection reverts back to its previous state.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: protected virtual void OnInsert(int index, object value)
    content.vb: Protected Overridable Sub OnInsert(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which to insert <em>value</em>.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The new value of the element at <em>index</em>.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  - type: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
    commentId: M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - type: System.Collections.CollectionBase.OnValidate(System.Object)
    commentId: M:System.Collections.CollectionBase.OnValidate(System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  commentId: M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  id: OnInsertComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnInsertComplete(Int32, Object)
  fullName: System.Collections.CollectionBase.OnInsertComplete(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnInsertComplete
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 91
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after inserting a new element into the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is inserted.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The collection reverts back to its previous state if one of the following occurs:</p>\n<ul><li>\n<p>The process fails.</p>\n</li><li>\n<p>This method is overridden to throw an exception.</p>\n</li></ul>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnInsertComplete(int index, object value)
    content.vb: Protected Overridable Sub OnInsertComplete(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which to insert <em>value</em>.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The new value of the element at <em>index</em>.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - type: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
    commentId: M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  commentId: M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  id: OnRemove(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnRemove(Int32, Object)
  fullName: System.Collections.CollectionBase.OnRemove(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnRemove
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 92
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes when removing an element from the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is removed.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the process fails, the collection reverts back to its previous state.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: protected virtual void OnRemove(int index, object value)
    content.vb: Protected Overridable Sub OnRemove(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which <em>value</em> can be found.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the element to remove from <em>index</em>.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  - type: System.Collections.CollectionBase.OnClear
    commentId: M:System.Collections.CollectionBase.OnClear
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  commentId: M:System.Collections.CollectionBase.OnRemoveComplete(System.Int32,System.Object)
  id: OnRemoveComplete(System.Int32,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnRemoveComplete(Int32, Object)
  fullName: System.Collections.CollectionBase.OnRemoveComplete(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnRemoveComplete
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 93
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after removing an element from the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is removed.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The collection reverts back to its previous state if one of the following occurs:</p>\n<ul><li>\n<p>The process fails.</p>\n</li><li>\n<p>This method is overridden to throw an exception.</p>\n</li></ul>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnRemoveComplete(int index, object value)
    content.vb: Protected Overridable Sub OnRemoveComplete(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which <em>value</em> can be found.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the element to remove from <em>index</em>.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnRemove(System.Int32,System.Object)
  - type: System.Collections.CollectionBase.OnClearComplete
    commentId: M:System.Collections.CollectionBase.OnClearComplete
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  commentId: M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  id: OnSet(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnSet(Int32, Object, Object)
  fullName: System.Collections.CollectionBase.OnSet(System.Int32, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnSet
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 94
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes before setting a value in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action before the specified element is set.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the process fails, the collection reverts back to its previous state.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: protected virtual void OnSet(int index, object oldValue, object newValue)
    content.vb: Protected Overridable Sub OnSet(index As Integer, oldValue As Object, newValue As Object)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which <em>oldValue</em> can be found.</p>\n"
    - id: oldValue
      type: System.Object
      description: "\n<p>The value to replace with <em>newValue</em>.</p>\n"
    - id: newValue
      type: System.Object
      description: "\n<p>The new value of the element at <em>index</em>.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
    commentId: M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  - type: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  - type: System.Collections.CollectionBase.OnValidate(System.Object)
    commentId: M:System.Collections.CollectionBase.OnValidate(System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  commentId: M:System.Collections.CollectionBase.OnSetComplete(System.Int32,System.Object,System.Object)
  id: OnSetComplete(System.Int32,System.Object,System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnSetComplete(Int32, Object, Object)
  fullName: System.Collections.CollectionBase.OnSetComplete(System.Int32, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnSetComplete
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 95
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after setting a value in the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The default implementation of this method is intended to be overridden by a derived class to perform some action after the specified element is set.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The collection reverts back to its previous state if one of the following occurs:</p>\n<ul><li>\n<p>The process fails.</p>\n</li><li>\n<p>This method is overridden to throw an exception.</p>\n</li></ul>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  syntax:
    content: protected virtual void OnSetComplete(int index, object oldValue, object newValue)
    content.vb: Protected Overridable Sub OnSetComplete(index As Integer, oldValue As Object, newValue As Object)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which <em>oldValue</em> can be found.</p>\n"
    - id: oldValue
      type: System.Object
      description: "\n<p>The value to replace with <em>newValue</em>.</p>\n"
    - id: newValue
      type: System.Object
      description: "\n<p>The new value of the element at <em>index</em>.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
    commentId: M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - type: System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnInsertComplete(System.Int32,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.OnValidate(System.Object)
  commentId: M:System.Collections.CollectionBase.OnValidate(System.Object)
  id: OnValidate(System.Object)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: OnValidate(Object)
  fullName: System.Collections.CollectionBase.OnValidate(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnValidate
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 96
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes when validating a value.</p>\n"
  remarks: "\n<p>The default implementation of this method determines whether <em>value</em> is <strong>null</strong>, and, if so, throws <xref href=\"System.ArgumentNullException\" data-throw-if-not-resolved=\"false\"></xref>. It is intended to be overridden by a derived class to perform additional action when the specified element is validated.</p>\n<p>The On* methods are invoked only on the instance returned by the <xref href=\"System.Collections.CollectionBase.List\" data-throw-if-not-resolved=\"false\"></xref> property, but not on the instance returned by the <xref href=\"System.Collections.CollectionBase.InnerList\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The default implementation of this method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example implements the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> class and uses that implementation to create a collection of <xref href=\"System.Int16\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>System.Collections.CollectionBase#1"
  syntax:
    content: protected virtual void OnValidate(object value)
    content.vb: Protected Overridable Sub OnValidate(value As Object)
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to validate.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
    commentId: M:System.Collections.CollectionBase.OnSet(System.Int32,System.Object,System.Object)
  - type: System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
    commentId: M:System.Collections.CollectionBase.OnInsert(System.Int32,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.CollectionBase.RemoveAt(System.Int32)
  commentId: M:System.Collections.CollectionBase.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.CollectionBase
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Collections.CollectionBase.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Collections.NonGeneric/src/System/Collections/CollectionBase.cs
    startLine: 73
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the element at the specified index of the <xref href=\"System.Collections.CollectionBase\" data-throw-if-not-resolved=\"false\"></xref> instance. This method is not overridable.</p>\n"
  remarks: "\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.CollectionBase.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
