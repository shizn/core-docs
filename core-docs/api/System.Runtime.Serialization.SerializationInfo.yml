items:
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  id: SerializationInfo
  parent: System.Runtime.Serialization
  children:
  - System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Byte)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Char)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.DateTime)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Decimal)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Double)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int16)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int64)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.SByte)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Single)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt16)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt32)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt64)
  - System.Runtime.Serialization.SerializationInfo.AssemblyName
  - System.Runtime.Serialization.SerializationInfo.FullTypeName
  - System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetByte(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetChar(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetEnumerator
  - System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetString(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)
  - System.Runtime.Serialization.SerializationInfo.MemberCount
  - System.Runtime.Serialization.SerializationInfo.ObjectType
  - System.Runtime.Serialization.SerializationInfo.SetType(System.Type)
  langs:
  - csharp
  - vb
  name: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SerializationInfo
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 30
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Stores all the data needed to serialize or deserialize an object. This class cannot be inherited.</p>\n"
  remarks: "\n<p>This class is used by objects with custom serialization behavior. The <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref> method on either <xref href=\"System.Runtime.Serialization.ISerializable\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.Serialization.ISerializationSurrogate\" data-throw-if-not-resolved=\"false\"></xref> populates the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store with the name, type, and value of each piece of information it wants to serialize. During deserialization, the appropriate function can extract this information.</p>\n<p>Objects are added to the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store at serialization time using the <xref href=\"System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> methods and extracted from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store at deserialization using the <xref href=\"System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>For more information about customizing serialization, see Custom Serialization.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> for custom serialization and deserialization of various values.</p>ISerializable Interface Example#1"
  syntax:
    content: >-
      [ComVisible(true)]

      public sealed class SerializationInfo
    content.vb: >-
      <ComVisible(True)>

      Public NotInheritable Class SerializationInfo
  seealso:
  - type: System.Runtime.Serialization.ISerializable
    commentId: T:System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)
  commentId: M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)
  id: '#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)'
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: SerializationInfo(Type, IFormatterConverter)
  fullName: System.Runtime.Serialization.SerializationInfo.SerializationInfo(System.Type, System.Runtime.Serialization.IFormatterConverter)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 52
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> passed as the <em>converter</em> parameter converts data from its internal representation to the form the user requested. The internal representation of the data within the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> depends on the formatter that created it.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public SerializationInfo(Type type, IFormatterConverter converter)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub New(type As Type, converter As IFormatterConverter)
    parameters:
    - id: type
      type: System.Type
    - id: converter
      type: System.Runtime.Serialization.IFormatterConverter
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>converter</em> is <strong>null</strong>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AssemblyName
  commentId: P:System.Runtime.Serialization.SerializationInfo.AssemblyName
  id: AssemblyName
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AssemblyName
  fullName: System.Runtime.Serialization.SerializationInfo.AssemblyName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AssemblyName
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 107
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets the assembly name of the type to serialize during serialization only.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.Serialization.SerializationInfo.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> is the same as the value returned by <xref href=\"System.Reflection.Assembly.FullName\" data-throw-if-not-resolved=\"false\"></xref> property of the assembly of the containing type. This is the assembly name that the formatter uses when serializing type information for this object.</p>\n<p>The assembly name contains the name of the assembly, version, culture, and some security information about the object. </p>\n<p>Users who are changing the type being serialized (for example, to send a proxy for a particular type) will set the value of this property.</p>\n<p>Do not use this property during deserialization because the value of this property is undefined.</p>\n"
  syntax:
    content: >-
      public string AssemblyName

      {
          get;
          [SecuritySafeCritical]
          set;
      }
    content.vb: Public Property AssemblyName As String
    parameters: []
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value the property is set to is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.FullTypeName
  commentId: P:System.Runtime.Serialization.SerializationInfo.FullTypeName
  id: FullTypeName
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: FullTypeName
  fullName: System.Runtime.Serialization.SerializationInfo.FullTypeName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullTypeName
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 88
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets the full name of the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to serialize.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.Serialization.SerializationInfo.FullTypeName\" data-throw-if-not-resolved=\"false\"></xref> is the same as what would be returned by calling the <xref href=\"System.Type.FullName\" data-throw-if-not-resolved=\"false\"></xref> on <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>. This is the type name the formatter uses when serializing type information for this object.</p>\n<p>Users who are changing the type to serialize (for example, to send a proxy for a particular type) will want to set the value of this property.</p>\n<p>Do not use this property during deserialization because the value of this property is undefined.</p>\n"
  syntax:
    content: public string FullTypeName { get; set; }
    content.vb: Public Property FullTypeName As String
    parameters: []
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value this property is set to is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.MemberCount
  commentId: P:System.Runtime.Serialization.SerializationInfo.MemberCount
  id: MemberCount
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: MemberCount
  fullName: System.Runtime.Serialization.SerializationInfo.MemberCount
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MemberCount
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 202
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets the number of members that have been added to the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public int MemberCount { get; }
    content.vb: Public ReadOnly Property MemberCount As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.SerializationInfo.ObjectType
  commentId: P:System.Runtime.Serialization.SerializationInfo.ObjectType
  id: ObjectType
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: ObjectType
  fullName: System.Runtime.Serialization.SerializationInfo.ObjectType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ObjectType
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 210
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Returns the type of the object to be serialized.</p>\n"
  syntax:
    content: public Type ObjectType { get; }
    content.vb: Public ReadOnly Property ObjectType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)
  id: AddValue(System.String,System.Boolean)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Boolean)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 304
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a Boolean value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. For example:</p>\n<pre><code class=\"c#\">void ISerializable.GetObject(SerializationInfo info, StreamingContext context)\n{\n// This will not cause an exception to be thrown.\ninfo.AddValue(\"ABC\", true);\ninfo.AddValue(\"abc\", false);\n// However, this will cause the SerializationException to be thrown.\ninfo.AddValue(\"XYZ\", true);\ninfo.AddValue(\"XYZ\", false);\n}</code></pre>\n<pre><code class=\"vb#\">Private Sub GetObjectData(ByVal info As SerializationInfo, _\nByVal context As StreamingContext)\n' This will not cause an exception to be thrown.\ninfo.AddValue(\"ABC\", \"upper case\")\ninfo.AddValue(\"abc\", \"lower case\")\n' However, this will cause the SerializationException to be thrown.\ninfo.AddValue(\"XYZ\", \"same case\")\ninfo.AddValue(\"XYZ\", \"same case\")\nEnd Sub</code></pre>\n"
  syntax:
    content: public void AddValue(string name, bool value)
    content.vb: Public Sub AddValue(name As String, value As Boolean)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Byte)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Byte)
  id: AddValue(System.String,System.Byte)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Byte)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 321
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds an 8-bit unsigned integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n"
  syntax:
    content: public void AddValue(string name, byte value)
    content.vb: Public Sub AddValue(name As String, value As Byte)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.Byte
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Char)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Char)
  id: AddValue(System.String,System.Char)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Char)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 309
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a Unicode character value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n"
  syntax:
    content: public void AddValue(string name, char value)
    content.vb: Public Sub AddValue(name As String, value As Char)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.Char
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.DateTime)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.DateTime)
  id: AddValue(System.String,System.DateTime)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, DateTime)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 374
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n"
  syntax:
    content: public void AddValue(string name, DateTime value)
    content.vb: Public Sub AddValue(name As String, value As Date)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.DateTime
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Decimal)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Decimal)
  id: AddValue(System.String,System.Decimal)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Decimal)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 369
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a decimal value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n"
  syntax:
    content: public void AddValue(string name, decimal value)
    content.vb: Public Sub AddValue(name As String, value As Decimal)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.Decimal
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>If The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>If a value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Double)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Double)
  id: AddValue(System.String,System.Double)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Double)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 364
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a double-precision floating-point value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n"
  syntax:
    content: public void AddValue(string name, double value)
    content.vb: Public Sub AddValue(name As String, value As Double)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.Double
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int16)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int16)
  id: AddValue(System.String,System.Int16)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Int16)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 326
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a 16-bit signed integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n"
  syntax:
    content: public void AddValue(string name, short value)
    content.vb: Public Sub AddValue(name As String, value As Short)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.Int16
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)
  id: AddValue(System.String,System.Int32)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Int32)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 337
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a 32-bit signed integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n"
  example:
  - ISerializable Interface Example#1
  syntax:
    content: public void AddValue(string name, int value)
    content.vb: Public Sub AddValue(name As String, value As Integer)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int64)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int64)
  id: AddValue(System.String,System.Int64)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Int64)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 348
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a 64-bit signed integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n"
  syntax:
    content: public void AddValue(string name, long value)
    content.vb: Public Sub AddValue(name As String, value As Long)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.Int64
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)
  id: AddValue(System.String,System.Object)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Object)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 292
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds the specified object into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store, where it is associated with a specified name.</p>\n"
  remarks: "\n<p>The object contained in the <em>value</em> parameter is serialized as the type returned by <em>value</em>. </p>\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n"
  syntax:
    content: public void AddValue(string name, object value)
    content.vb: Public Sub AddValue(name As String, value As Object)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)
  id: AddValue(System.String,System.Object,System.Type)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Object, Type)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 276
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store, where <em>value</em> is associated with <em>name</em> and is serialized as being of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref><em>type</em>.</p>\n"
  remarks: "\n<p>The assigned type is always the type of the object, or one of its parents.</p>\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n"
  syntax:
    content: public void AddValue(string name, object value, Type type)
    content.vb: Public Sub AddValue(name As String, value As Object, type As Type)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.Object
    - id: type
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>If <em>name</em> or <em>type</em> is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.SByte)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.SByte)
  id: AddValue(System.String,System.SByte)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, SByte)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 315
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds an 8-bit signed integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown. </p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void AddValue(string name, sbyte value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub AddValue(name As String, value As SByte)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.SByte
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Single)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Single)
  id: AddValue(System.String,System.Single)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Single)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 359
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a single-precision floating-point value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown.</p>\n"
  syntax:
    content: public void AddValue(string name, float value)
    content.vb: Public Sub AddValue(name As String, value As Single)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.Single
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt16)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt16)
  id: AddValue(System.String,System.UInt16)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, UInt16)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.UInt16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 331
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a 16-bit unsigned integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void AddValue(string name, ushort value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub AddValue(name As String, value As UShort)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.UInt16
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt32)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt32)
  id: AddValue(System.String,System.UInt32)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, UInt32)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 342
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a 32-bit unsigned integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown.</p>\n"
  example:
  - "\n<p>The following example uses the <see cref=\"Overload:System.Runtime.Serialization.SerializationInfo.AddValue\"></see> method to customize the serialization of a type. The code adds a string and an integer to an instance of the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> class in the <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Runtime.Serialization.ISerializable\" data-throw-if-not-resolved=\"false\"></xref> interface. The code also uses the <xref href=\"System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to retrieve values from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>ISerializable_GetObjectData#0"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void AddValue(string name, uint value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub AddValue(name As String, value As UInteger)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.UInt32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt64)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt64)
  id: AddValue(System.String,System.UInt64)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, UInt64)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 353
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a 64-bit unsigned integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If two values are added with names that differ only by case, no exception will be thrown, which is not a recommended practice. However, adding two values with the exact same name will cause the <xref href=\"System.Runtime.Serialization.SerializationException\" data-throw-if-not-resolved=\"false\"></xref> to be thrown.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void AddValue(string name, ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub AddValue(name As String, value As ULong)
    parameters:
    - id: name
      type: System.String
    - id: value
      type: System.UInt64
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)
  id: GetBoolean(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetBoolean(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBoolean
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 570
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a Boolean value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a Boolean, or can be converted to one, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool GetBoolean(string name)
    content.vb: Public Function GetBoolean(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Boolean
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a Boolean value. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetByte(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetByte(System.String)
  id: GetByte(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetByte(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetByte(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByte
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 610
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves an 8-bit unsigned integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is an 8-bit unsigned integer, or can be converted to one, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public byte GetByte(string name)
    content.vb: Public Function GetByte(name As String) As Byte
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Byte
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to an 8-bit unsigned integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetChar(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetChar(System.String)
  id: GetChar(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetChar(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetChar(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetChar
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 583
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a Unicode character value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a Unicode character, or can be converted to one, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public char GetChar(string name)
    content.vb: Public Function GetChar(name As String) As Char
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Char
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a Unicode character. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)
  id: GetDateTime(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetDateTime(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDateTime
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 744
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>, or can be converted to a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public DateTime GetDateTime(string name)
    content.vb: Public Function GetDateTime(name As String) As Date
    parameters:
    - id: name
      type: System.String
    return:
      type: System.DateTime
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)
  id: GetDecimal(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetDecimal(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDecimal
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 731
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a decimal value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a decimal, or can be converted to a decimal, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public decimal GetDecimal(string name)
    content.vb: Public Function GetDecimal(name As String) As Decimal
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Decimal
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a decimal. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)
  id: GetDouble(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetDouble(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDouble
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 718
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a double-precision floating-point value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a double, or can be converted to a double, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public double GetDouble(string name)
    content.vb: Public Function GetDouble(name As String) As Double
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Double
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a double-precision floating-point value. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetEnumerator
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetEnumerator
  id: GetEnumerator
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Runtime.Serialization.SerializationInfo.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 234
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Returns a <xref href=\"System.Runtime.Serialization.SerializationInfoEnumerator\" data-throw-if-not-resolved=\"false\"></xref> used to iterate through the name-value pairs in the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>This function will most often be used by formatters that need to enumerate through the values before writing them out to the stream.</p>\n"
  syntax:
    content: public SerializationInfoEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As SerializationInfoEnumerator
    return:
      type: System.Runtime.Serialization.SerializationInfoEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)
  id: GetInt16(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetInt16(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetInt16
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 623
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a 16-bit signed integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a 16-bit signed integer, or can be converted to one, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public short GetInt16(string name)
    content.vb: Public Function GetInt16(name As String) As Short
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Int16
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a 16-bit signed integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)
  id: GetInt32(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetInt32(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetInt32
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 650
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a 32-bit signed integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a 32-bit signed integer, or can be converted to one, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - ISerializable Interface Example#1
  syntax:
    content: public int GetInt32(string name)
    content.vb: Public Function GetInt32(name As String) As Integer
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Int32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a 32-bit signed integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)
  id: GetInt64(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetInt64(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetInt64
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 677
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a 64-bit signed integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a 64-bit signed integer, or can be converted to one, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public long GetInt64(string name)
    content.vb: Public Function GetInt64(name As String) As Long
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Int64
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a 64-bit signed integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)
  id: GetSByte(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetSByte(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetSByte
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 596
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves an 8-bit signed integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is an <strong>Int8</strong>, or can be converted to an <strong>Int8</strong>, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public sbyte GetSByte(string name)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function GetSByte(name As String) As SByte
    parameters:
    - id: name
      type: System.String
    return:
      type: System.SByte
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to an 8-bit signed integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)
  id: GetSingle(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetSingle(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetSingle
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 704
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a single-precision floating-point value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a single-precision floating-point number, or can be converted to one, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public float GetSingle(string name)
    content.vb: Public Function GetSingle(name As String) As Single
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Single
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a single-precision floating-point value. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetString(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetString(System.String)
  id: GetString(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetString(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetString(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetString
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 757
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, or can be converted to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public string GetString(string name)
    content.vb: Public Function GetString(name As String) As String
    parameters:
    - id: name
      type: System.String
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)
  id: GetUInt16(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetUInt16(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUInt16
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 636
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a 16-bit unsigned integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a 16-bit unsigned integer, or can be converted to one, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public ushort GetUInt16(string name)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function GetUInt16(name As String) As UShort
    parameters:
    - id: name
      type: System.String
    return:
      type: System.UInt16
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a 16-bit unsigned integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)
  id: GetUInt32(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetUInt32(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUInt32
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 663
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a 32-bit unsigned integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a 32-bit signed integer, or can be converted to one, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public uint GetUInt32(string name)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function GetUInt32(name As String) As UInteger
    parameters:
    - id: name
      type: System.String
    return:
      type: System.UInt32
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a 32-bit unsigned integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)
  id: GetUInt64(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetUInt64(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUInt64
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 690
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a 64-bit unsigned integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the value is a 64-bit unsigned integer, or can be converted to one, that value is returned; otherwise, a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref> is thrown. All conversions are done by the <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public ulong GetUInt64(string name)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function GetUInt64(name As String) As ULong
    parameters:
    - id: name
      type: System.String
    return:
      type: System.UInt64
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a 64-bit unsigned integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)
  id: GetValue(System.String,System.Type)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetValue(String, Type)
  fullName: System.Runtime.Serialization.SerializationInfo.GetValue(System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 501
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  remarks: "\n<p>If the data stored in the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> is of the type requested (or one of its derived classes), that value is returned directly. Otherwise, <xref href=\"System.Runtime.Serialization.IFormatterConverter.Convert(System.Object,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> is called to convert it to the appropriate type.</p>\n<p>The value returned by the <xref href=\"System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method can always be safely cast to the type specified in the <em>type</em> parameter.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method: </p>Classic SerializationInfo.GetValue Example#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public object GetValue(string name, Type type)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function GetValue(name As String, type As Type) As Object
    parameters:
    - id: name
      type: System.String
    - id: type
      type: System.Type
    return:
      type: System.Object
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> or <em>type</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to <em>type</em>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.SetType(System.Type)
  commentId: M:System.Runtime.Serialization.SerializationInfo.SetType(System.Type)
  id: SetType(System.Type)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: SetType(Type)
  fullName: System.Runtime.Serialization.SerializationInfo.SetType(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetType
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 130
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Sets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the object to serialize.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Runtime.Serialization.Formatter\" data-throw-if-not-resolved=\"false\"></xref> is responsible for setting the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> instance before passing it to <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref>. However, users who want to send proxies for their objects will need to change the type represented by this <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> instance. Using the <xref href=\"System.Runtime.Serialization.SerializationInfo.SetType(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to setting both the <xref href=\"System.Runtime.Serialization.SerializationInfo.FullTypeName\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Runtime.Serialization.SerializationInfo.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - IObjectReference Interface Example#1
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void SetType(Type type)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub SetType(type As Type)
    parameters:
    - id: type
      type: System.Type
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>type</em> parameter is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Runtime.Serialization.IFormatterConverter
  parent: System.Runtime.Serialization
  isExternal: false
  name: IFormatterConverter
  fullName: System.Runtime.Serialization.IFormatterConverter
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.Runtime.Serialization.SerializationInfoEnumerator
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfoEnumerator
  fullName: System.Runtime.Serialization.SerializationInfoEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Runtime.Serialization.SerializationException
  isExternal: false
  name: SerializationException
  fullName: System.Runtime.Serialization.SerializationException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
