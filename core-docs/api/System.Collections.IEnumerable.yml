items:
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  id: IEnumerable
  parent: System.Collections
  children:
  - System.Collections.IEnumerable.GetEnumerator
  langs:
  - csharp
  - vb
  name: IEnumerable
  fullName: System.Collections.IEnumerable
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IEnumerable
    path: src/mscorlib/src/System/Collections/IEnumerable.cs
    startLine: 22
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Exposes an enumerator, which supports a simple iteration over a non-generic collection.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/ienumerable.cs#9be451ac13d86a97\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/collections/ienumerable.cs#9be451ac13d86a97\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> is the base interface for all non-generic collections that can be enumerated. For the generic version of this interface see <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> contains a single method, <xref href=\"System.Collections.IEnumerable.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref>, which returns an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> provides the ability to iterate through the collection by exposing a <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> methods. </p>\n<p>It is a best practice to implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> on your collection classes to enable the <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) syntax, however implementing <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> is not required. If your collection does not implement <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>, you must still follow the iterator pattern to support this syntax by providing a <strong>GetEnumerator</strong> method that returns an interface, class or struct. When using Visual Basic, you must provide an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> implementation, which is returned by <strong>GetEnumerator</strong>. When developing with C# you must provide a class that contains a <strong>Current</strong> property, and <strong>MoveNext</strong> and <strong>Reset</strong> methods as described by <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref>, but the class does not have to implement <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the best practice for iterating a custom collection by implementing the <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> interfaces. In this example, members of these interfaces are not explicitly called, but they are implemented to support the use of <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic) to iterate through the collection. This example is a complete Console app. To compile the Visual Basic app, change the Startup object to Sub Main in the projectâ€™s Properties page.</p>\n<p>For a sample that shows how to implement the <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> interface, see <see href=\"http://code.msdn.microsoft.com/Implementing-the-e1708a24\">Implementing the IEnumerable Interface in a Collection Class</see></p>System.Collections_EnumeratorInterfaces#1"
  syntax:
    content: >-
      [Guid("496B0ABE-CDEE-11d3-88E8-00902754C43A")]

      [ComVisible(true)]

      public interface IEnumerable
    content.vb: >-
      <Guid("496B0ABE-CDEE-11d3-88E8-00902754C43A")>

      <ComVisible(True)>

      Public Interface IEnumerable
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  - type: System.Collections.Generic.IEnumerable`1
    commentId: T:System.Collections.Generic.IEnumerable`1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.IEnumerable
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/IEnumerable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Collections/IEnumerable.cs
    startLine: 29
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Returns an enumerator that iterates through a collection.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>For Each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. The <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> method also brings the enumerator back to this position.  At this position, the <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> property is undefined. Therefore, you must call the <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> method to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the implementation of the <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> interfaces for a custom collection. In this example, <xref href=\"System.Collections.IEnumerable.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> is not explicitly called, but it is implemented to support the use of <strong>foreach</strong> (<strong>For Each</strong> in Visual Basic). This code example is part of a larger example for the <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections_EnumeratorInterfaces#1"
  syntax:
    content: >-
      [DispId(-4)]

      IEnumerator GetEnumerator()
    content.vb: >-
      <DispId(-4)>

      Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
