items:
- uid: System.Threading.Tasks.TaskCompletionSource`1
  commentId: T:System.Threading.Tasks.TaskCompletionSource`1
  id: TaskCompletionSource`1
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskCompletionSource`1.#ctor
  - System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)
  - System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskCompletionSource`1.SetCanceled
  - System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})
  - System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)
  - System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)
  - System.Threading.Tasks.TaskCompletionSource`1.Task
  - System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled
  - System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})
  - System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)
  - System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)
  langs:
  - csharp
  - vb
  name: TaskCompletionSource<TResult>
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>
  type: Class
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TaskCompletionSource
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 343
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Represents the producer side of a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> unbound to a delegate, providing access to the consumer side through the <xref href=\"System.Threading.Tasks.TaskCompletionSource`1.Task\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  remarks: "\n<p>In many scenarios, it is useful to enable a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> to represent an external asynchronous operation. <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref> is provided for this purpose. It enables the creation of a task that can be handed out to consumers, and those consumers can use the members of the task as they would any other. However, unlike most tasks, the state of a task created by a TaskCompletionSource is controlled explicitly by the methods on TaskCompletionSource. This enables the completion of the external asynchronous operation to be propagated to the underlying Task. The separation also ensures that consumers are not able to transition the state without access to the corresponding TaskCompletionSource. For more information, see the entry <see href=\"http://blogs.msdn.com/b/pfxteam/archive/2009/06/02/9685804.aspx\">The Nature of TaskCompletionSource<TResult></see> in the Parallel Programming with .NET blog.</p>\n<p>The <see href=\"http://go.microsoft.com/fwlink/?LinkID=165717\">Parallel Extensions samples</see> also contain examples of how to use <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to use a <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref>:</p>System.Threading.Tasks.TaskCompletionSource#01"
  syntax:
    content: 'public class TaskCompletionSource<TResult> : object'
    content.vb: >-
      Public Class TaskCompletionSource(Of TResult)
          Inherits Object
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result value assocatied with this <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult)
  name.vb: TaskCompletionSource(Of TResult)
- uid: System.Threading.Tasks.TaskCompletionSource`1.#ctor
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: TaskCompletionSource()
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.TaskCompletionSource()
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 345
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public TaskCompletionSource()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).TaskCompletionSource()
- uid: System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: TaskCompletionSource(Object)
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.TaskCompletionSource(System.Object)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 346
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref> with the specified state.</p>\n"
  example:
  - 
  syntax:
    content: public TaskCompletionSource(object state)
    content.vb: Public Sub New(state As Object)
    parameters:
    - id: state
      type: System.Object
      description: "\n<p>The state to use as the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>'s AsyncState.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).TaskCompletionSource(System.Object)
- uid: System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Object,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: TaskCompletionSource(Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.TaskCompletionSource(System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 347
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref> with the specified state and options.</p>\n"
  example:
  - 
  syntax:
    content: public TaskCompletionSource(object state, TaskCreationOptions creationOptions)
    content.vb: Public Sub New(state As Object, creationOptions As TaskCreationOptions)
    parameters:
    - id: state
      type: System.Object
      description: "\n<p>The state to use as the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>'s AsyncState.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The options to use when creating the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> represent options invalid for use with a <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).TaskCompletionSource(System.Object, System.Threading.Tasks.TaskCreationOptions)
- uid: System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.#ctor(System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: TaskCompletionSource(TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.TaskCompletionSource(System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 348
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref> with the specified options.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> created by this instance and accessible through its <xref href=\"System.Threading.Tasks.TaskCompletionSource`1.Task\" data-throw-if-not-resolved=\"false\"></xref> property will be instantiated using the specified <em>creationOptions</em>.</p>\n"
  example:
  - 
  syntax:
    content: public TaskCompletionSource(TaskCreationOptions creationOptions)
    content.vb: Public Sub New(creationOptions As TaskCreationOptions)
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The options to use when creating the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> represent options invalid for use with a <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).TaskCompletionSource(System.Threading.Tasks.TaskCreationOptions)
- uid: System.Threading.Tasks.TaskCompletionSource`1.Task
  commentId: P:System.Threading.Tasks.TaskCompletionSource`1.Task
  id: Task
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: Task
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.Task
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Task
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 349
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> created by this <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This property enables a consumer to access the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that is controlled by this instance. When you create a <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref> object, the <xref href=\"System.Threading.Tasks.Task.Status\" data-throw-if-not-resolved=\"false\"></xref> property of this <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object returns <xref href=\"System.Threading.Tasks.TaskStatus.WaitingForActivation\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p> The <xref href=\"System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Threading.Tasks.TaskCompletionSource`1.SetCanceled\" data-throw-if-not-resolved=\"false\"></xref> methods (and their \"Try\" variants) on this instance all result in the relevant state transitions on this underlying Task.</p>\n"
  example:
  - 
  syntax:
    content: public Task<TResult> Task { get; }
    content.vb: Public ReadOnly Property Task As Task(Of TResult)
    parameters: []
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>Returns the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> created by this <xref href=\"System.Threading.Tasks.TaskCompletionSource`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).Task
- uid: System.Threading.Tasks.TaskCompletionSource`1.SetCanceled
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.SetCanceled
  id: SetCanceled
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: SetCanceled()
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.SetCanceled()
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetCanceled
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 350
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Transitions the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> into the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> state.</p>\n"
  example:
  - 
  syntax:
    content: public void SetCanceled()
    content.vb: Public Sub SetCanceled
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> is already in one of the three final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref>, or if the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n"
  seealso:
  - type: System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled
    commentId: M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).SetCanceled()
- uid: System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Collections.Generic.IEnumerable{System.Exception})
  id: SetException(System.Collections.Generic.IEnumerable{System.Exception})
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: SetException(Collections.Generic.IEnumerable<Exception>)
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.SetException(System.Collections.Generic.IEnumerable<System.Exception>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetException
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 351
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Transitions the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> into the <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref> state and binds a collection of exception objects to it.</p>\n"
  example:
  - 
  syntax:
    content: public void SetException(Collections.Generic.IEnumerable<Exception> exceptions)
    content.vb: Public Sub SetException(exceptions As Collections.Generic.IEnumerable(Of Exception))
    parameters:
    - id: exceptions
      type: System.Collections.Generic.IEnumerable{System.Exception}
      description: "\n<p>The collection of exceptions to bind to this <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskCompletionSource`1.Task\" data-throw-if-not-resolved=\"false\"></xref> was disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>exceptions</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>There are one or more null elements in <em>exceptions</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> is already in one of the three final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).SetException(System.Collections.Generic.IEnumerable(Of System.Exception))
  name.vb: SetException(Collections.Generic.IEnumerable(Of Exception))
- uid: System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.SetException(System.Exception)
  id: SetException(System.Exception)
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: SetException(Exception)
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.SetException(System.Exception)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetException
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 352
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Transitions the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> into the <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref> state and binds it to a specified exception.</p>\n"
  example:
  - 
  syntax:
    content: public void SetException(Exception exception)
    content.vb: Public Sub SetException(exception As Exception)
    parameters:
    - id: exception
      type: System.Exception
      description: "\n<p>The exception to bind to this <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskCompletionSource`1.Task\" data-throw-if-not-resolved=\"false\"></xref> was disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>exception</em> argument is null.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> is already in one of the three final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).SetException(System.Exception)
- uid: System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.SetResult(`0)
  id: SetResult(`0)
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: SetResult(TResult)
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.SetResult(TResult)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetResult
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 353
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Transitions the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> into the <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref> state.</p>\n"
  example:
  - 
  syntax:
    content: public void SetResult(TResult result)
    content.vb: Public Sub SetResult(result As TResult)
    parameters:
    - id: result
      type: '{TResult}'
      description: "\n<p>The result value to bind to this <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskCompletionSource`1.Task\" data-throw-if-not-resolved=\"false\"></xref> was disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> is already in one of the three final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).SetResult(TResult)
- uid: System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled
  id: TrySetCanceled
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: TrySetCanceled()
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.TrySetCanceled()
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrySetCanceled
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 354
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Attempts to transition the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> into the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> state.</p>\n"
  remarks: "\n<p>This operation will return false if the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> is already in one of the three final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>This method also returns false if the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n"
  example:
  - 
  syntax:
    content: public bool TrySetCanceled()
    content.vb: Public Function TrySetCanceled As Boolean
    return:
      type: System.Boolean
      description: "\n<p>True if the operation was successful; false if the operation was unsuccessful or the object has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).TrySetCanceled()
- uid: System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.TrySetCanceled(System.Threading.CancellationToken)
  id: TrySetCanceled(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: TrySetCanceled(CancellationToken)
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.TrySetCanceled(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrySetCanceled
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 355
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Attempts to transition the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> into the <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref> state and enables a cancellation token to be stored in the canceled task. </p>\n"
  remarks: "\n<p>The method returns false if the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object is already in one of the following three final states. </p>\n<ul><li>\n<p>\n<xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>This method also returns <strong>false</strong> if the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> object has already been disposed. </p>\n"
  syntax:
    content: public bool TrySetCanceled(CancellationToken cancellationToken)
    content.vb: Public Function TrySetCanceled(cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation is successful; otherwise, <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).TrySetCanceled(System.Threading.CancellationToken)
- uid: System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Collections.Generic.IEnumerable{System.Exception})
  id: TrySetException(System.Collections.Generic.IEnumerable{System.Exception})
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: TrySetException(Collections.Generic.IEnumerable<Exception>)
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.TrySetException(System.Collections.Generic.IEnumerable<System.Exception>)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrySetException
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 356
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Attempts to transition the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> into the <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref> state and binds a collection of exception objects to it. </p>\n"
  remarks: "\n<p>This operation will return false if the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> is already in one of the three final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public bool TrySetException(Collections.Generic.IEnumerable<Exception> exceptions)
    content.vb: Public Function TrySetException(exceptions As Collections.Generic.IEnumerable(Of Exception)) As Boolean
    parameters:
    - id: exceptions
      type: System.Collections.Generic.IEnumerable{System.Exception}
      description: "\n<p>The collection of exceptions to bind to this <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>True if the operation was successful; otherwise, false.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskCompletionSource`1.Task\" data-throw-if-not-resolved=\"false\"></xref> was disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>exceptions</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>There are one or more null elements in <em>exceptions</em>.</p>\n<p>-or-</p>\n<p>The <em>exceptions</em> collection is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).TrySetException(System.Collections.Generic.IEnumerable(Of System.Exception))
  name.vb: TrySetException(Collections.Generic.IEnumerable(Of Exception))
- uid: System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.TrySetException(System.Exception)
  id: TrySetException(System.Exception)
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: TrySetException(Exception)
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.TrySetException(System.Exception)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrySetException
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 357
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Attempts to transition the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> into the <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref> state and binds it to a specified exception.</p>\n"
  remarks: "\n<p>This operation will return false if the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> is already in one of the three final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public bool TrySetException(Exception exception)
    content.vb: Public Function TrySetException(exception As Exception) As Boolean
    parameters:
    - id: exception
      type: System.Exception
      description: "\n<p>The exception to bind to this <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>True if the operation was successful; otherwise, false.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskCompletionSource`1.Task\" data-throw-if-not-resolved=\"false\"></xref> was disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>exception</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).TrySetException(System.Exception)
- uid: System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)
  commentId: M:System.Threading.Tasks.TaskCompletionSource`1.TrySetResult(`0)
  id: TrySetResult(`0)
  parent: System.Threading.Tasks.TaskCompletionSource`1
  langs:
  - csharp
  - vb
  name: TrySetResult(TResult)
  fullName: System.Threading.Tasks.TaskCompletionSource<TResult>.TrySetResult(TResult)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrySetResult
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 358
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Attempts to transition the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> into the <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref> state.</p>\n"
  remarks: "\n<p>This operation will return false if the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> is already in one of the three final states: <xref href=\"System.Threading.Tasks.TaskStatus.RanToCompletion\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Threading.Tasks.TaskStatus.Canceled\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>This method also returns false if the underlying <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n"
  example:
  - 
  syntax:
    content: public bool TrySetResult(TResult result)
    content.vb: Public Function TrySetResult(result As TResult) As Boolean
    parameters:
    - id: result
      type: '{TResult}'
      description: "\n<p>The result value to bind to this <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>True if the operation was successful; otherwise, false. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskCompletionSource(Of TResult).TrySetResult(TResult)
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.Task{{TResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  fullname.vb: System.Threading.Tasks.Task(Of )
  name.vb: Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Exception}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Exception>
  fullName: System.Collections.Generic.IEnumerable<System.Exception>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Exception)
  name.vb: Collections.Generic.IEnumerable(Of Exception)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
