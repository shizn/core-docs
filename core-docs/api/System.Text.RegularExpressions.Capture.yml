items:
- uid: System.Text.RegularExpressions.Capture
  commentId: T:System.Text.RegularExpressions.Capture
  id: Capture
  parent: System.Text.RegularExpressions
  children:
  - System.Text.RegularExpressions.Capture.Index
  - System.Text.RegularExpressions.Capture.Length
  - System.Text.RegularExpressions.Capture.ToString
  - System.Text.RegularExpressions.Capture.Value
  langs:
  - csharp
  - vb
  name: Capture
  fullName: System.Text.RegularExpressions.Capture
  type: Class
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Capture
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 10
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Represents the results from a single successful subexpression capture. </p>\n"
  remarks: "\n<p>A <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> object is immutable and has no public constructor. Instances are returned through the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> object, which is returned by the <strong>Match.Captures</strong> and <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> properties. However, the <strong>Match.Captures</strong> property provides information about the same match as the <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>If you do not apply a  to a capturing group, the <xref href=\"System.Text.RegularExpressions.Group.Captures\" data-throw-if-not-resolved=\"false\"></xref> property returns a <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> with a single <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> object that provides information about the same capture as the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object. If you do apply a quantifier to a capturing group, the <strong>Group.Index</strong>, <strong>Group.Length</strong>, and <strong>Group.Value</strong> properties provide information only about the last captured group, whereas the <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> objects in the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> provide information about all subexpression captures. The example provides an illustration.</p>\n"
  example:
  - "\n<p>The following example defines a regular expression that matches sentences that contain no punctuation except for a period (\".\"). </p>System.Text.RegularExpressions.Capture.Class#1<p>The regular expression pattern <code>((\\w+)[\\s.])+</code> is defined as shown in the following table. Note that in this regular expression, a quantifier (+) is applied to the entire regular expression.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>(\\w+)</code></p></td><td><p>Match one or more word characters. This is the second capturing group.</p></td></tr><tr><td><p><code>[\\s.])</code></p></td><td><p>Match a white-space character or period (\".\").</p></td></tr><tr><td><p><code>((\\w+)[\\s.])</code></p></td><td><p>Match one or more word characters followed by a white-space character or period (\".\"). This is the first capturing group.</p></td></tr><tr><td><p><code>((\\w+)[\\s.])+</code></p></td><td><p>Match one or more occurrences of a word character or characters followed by a white-space character or period (\".\").</p></td></tr></tbody></table><p>In this example, the input string consists of two sentences. As the output shows, the first sentence consists of only one word, so the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> object has a single <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> object that represents the same capture as the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object. The second sentence consists of multiple words, so the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> objects only contain information about the last matched subexpression. Group 1, which represents the first capture, contains the last word in the sentence that has a closing period. Group 2, which represents the second capture, contains the last word in the sentence. However, the <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> objects in the group's <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> object capture each subexpression match. The <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> objects in the first capturing group's collection of captures contain information about each captured word and white-space character or period. The <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> objects in the second capturing group's collection of captures contain information about each captured word.</p>"
  syntax:
    content: public class Capture
    content.vb: Public Class Capture
  seealso:
  - type: System.Text.RegularExpressions.CaptureCollection
    commentId: T:System.Text.RegularExpressions.CaptureCollection
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Text.RegularExpressions.Capture.Index
  commentId: P:System.Text.RegularExpressions.Capture.Index
  id: Index
  parent: System.Text.RegularExpressions.Capture
  langs:
  - csharp
  - vb
  name: Index
  fullName: System.Text.RegularExpressions.Capture.Index
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Index
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 13
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>The position in the original string where the first character of the captured substring is found.</p>\n"
  syntax:
    content: public int Index { get; }
    content.vb: Public ReadOnly Property Index As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting position in the original string where the captured substring is found.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.RegularExpressions.Capture.Length
  commentId: P:System.Text.RegularExpressions.Capture.Length
  id: Length
  parent: System.Text.RegularExpressions.Capture
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.Text.RegularExpressions.Capture.Length
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 14
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets the length of the captured substring.</p>\n"
  syntax:
    content: public int Length { get; }
    content.vb: Public ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The length of the captured substring.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.RegularExpressions.Capture.Value
  commentId: P:System.Text.RegularExpressions.Capture.Value
  id: Value
  parent: System.Text.RegularExpressions.Capture
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Text.RegularExpressions.Capture.Value
  type: Property
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 15
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Gets the captured substring from the input string.</p>\n"
  remarks: "\n<p>If a call to the <xref href=\"System.Text.RegularExpressions.Regex.Match(System.String)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Text.RegularExpressions.Match.NextMatch\" data-throw-if-not-resolved=\"false\"></xref> method fails to find a match, the value of the returned <strong>Match.Value</strong> property is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If the regular expression engine is unable to match a capturing group. the value of the returned <strong>Group.Value</strong> property is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. See the second example for an illustration. </p>\n"
  example:
  - "\n<p>The following example defines a regular expression that matches sentences that contain no punctuation except for a period (\".\"). The <strong>Match.Value</strong> property displays the result string, which consists of a matched sentence, for each match. The <strong>Group.Value</strong> property displays the result string for each capturing group; it consists of the last string captured by that capturing group. The <xref href=\"System.Text.RegularExpressions.Capture.Value\" data-throw-if-not-resolved=\"false\"></xref> property displays the result string for each capture.</p>System.Text.RegularExpressions.Capture.Class#1<p>The regular expression pattern <code>((\\w+)[\\s.])+</code> is defined as shown in the following table. Note that in this regular expression, a quantifier (+) is applied to the entire regular expression.</p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>(\\w+)</code></p></td><td><p>Match one or more word characters. This is the second capturing group.</p></td></tr><tr><td><p><code>[\\s.])</code></p></td><td><p>Match a white-space character or period (\".\").</p></td></tr><tr><td><p><code>((\\w+)[\\s.])</code></p></td><td><p>Match one or more word characters followed by a white-space character or period (\".\"). This is the first capturing group.</p></td></tr><tr><td><p><code>((\\w+)[\\s.])+</code></p></td><td><p>Match one or more occurrences of a word character or characters followed by a white-space character or period (\".\").</p></td></tr></tbody></table><p>In this example, the input string consists of two sentences. As the output shows, the first sentence consists of only one word, so the <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> object has a single <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> object that represents the same capture as the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object. The second sentence consists of multiple words, so the <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> objects only contain information about the last matched subexpression. Group 1, which represents the first capture, contains the last word in the sentence that has a closing period. Group 2, which represents the second capture, contains the last word in the sentence. However, the <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> objects in the group's <xref href=\"System.Text.RegularExpressions.CaptureCollection\" data-throw-if-not-resolved=\"false\"></xref> object capture each subexpression match. The <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> objects in the first capturing group's collection of captures contain information about each captured word and white-space character or period. The <xref href=\"System.Text.RegularExpressions.Capture\" data-throw-if-not-resolved=\"false\"></xref> objects in the second capturing group's collection of captures contain information about each captured word.</p>"
  - "\n<p>The following example uses a regular expression pattern, <code>^([a-z]+)(\\d+)*\\.([a-z]+(\\d)*)$</code>, to match a product number that consists of two parts separated by a period. Both parts consist of alphabetic characters followed by optional numbers. Because the first input string does not match the pattern, the value of the returned <xref href=\"System.Text.RegularExpressions.Match\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Value</strong> property is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. Similarly, when the regular expression pattern is unable to match a capturing group, the value of the corresponding <xref href=\"System.Text.RegularExpressions.Group\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Value</strong> property is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Text.RegularExpressions.Capture.Value#1<p>The regular expression pattern is defined as shown in the following table: </p><p>Pattern</p><p>Description</p><table><tbody><tr><td><p><code>^</code></p></td><td><p>Begin the match at the beginning of the string. </p></td></tr><tr><td><p><code>([a-z]+)</code></p></td><td><p>Match one or more occurrences of any character from a to z. Because the regular expression engine is passed the <xref href=\"System.Text.RegularExpressions.RegexOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref> option, this comparison is case-insensitive. This is the first capturing group. </p></td></tr><tr><td><p><code>(\\d+)?</code></p></td><td><p>Match zero or one occurrence of one or more decimal digits. This is the second capturing group. </p></td></tr><tr><td><p><code>\\.</code></p></td><td><p>Match a literal period character. </p></td></tr><tr><td><p><code>([a-z]+</code></p></td><td><p>Match one or more occurrences of any character from a to z. The comparison is case-insensitive. </p></td></tr><tr><td><p><code>(\\d)*</code></p></td><td><p>Match zero or more decimal digits. A single matched digit is the fourth capturing group. </p></td></tr><tr><td><p><code>([a-z]+(\\d)*)</code></p></td><td><p>Match one or more alphabetic characters from a to z followed by zero, one, or more decimal digits. This is the fourth capturing group.</p></td></tr><tr><td><p><code>$</code></p></td><td><p>Conclude the match at the end of the string. </p></td></tr></tbody></table>"
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The substring that is captured by the match.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.RegularExpressions.Capture.ToString
  commentId: M:System.Text.RegularExpressions.Capture.ToString
  id: ToString
  parent: System.Text.RegularExpressions.Capture
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Text.RegularExpressions.Capture.ToString()
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Text.RegularExpressions/ref/System.Text.RegularExpressions.cs
    startLine: 16
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Retrieves the captured substring from the input string by calling the <xref href=\"System.Text.RegularExpressions.Capture.Value\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  remarks: "\n<p>\n<strong>ToString</strong> is actually an internal call to the <xref href=\"System.Text.RegularExpressions.Capture.Value\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The substring that was captured by the match.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Text.RegularExpressions
  isExternal: false
  name: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
