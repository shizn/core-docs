items:
- uid: System.Reflection.EventInfo
  commentId: T:System.Reflection.EventInfo
  id: EventInfo
  parent: System.Reflection
  children:
  - System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)
  - System.Reflection.EventInfo.AddMethod
  - System.Reflection.EventInfo.Attributes
  - System.Reflection.EventInfo.Equals(System.Object)
  - System.Reflection.EventInfo.EventHandlerType
  - System.Reflection.EventInfo.GetHashCode
  - System.Reflection.EventInfo.IsSpecialName
  - System.Reflection.EventInfo.RaiseMethod
  - System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)
  - System.Reflection.EventInfo.RemoveMethod
  langs:
  - csharp
  - vb
  name: EventInfo
  fullName: System.Reflection.EventInfo
  type: Class
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventInfo
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 88
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Discovers the attributes of an event and provides access to event metadata.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Reflection.EventInfo\" data-throw-if-not-resolved=\"false\"></xref> class to inspect events and to hook up event handlers, as shown in the example code for the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>\n<xref href=\"System.Reflection.EventInfo\" data-throw-if-not-resolved=\"false\"></xref> is not intended to be used to raise events. An object raises events as dictated by its internal state. </p>\n<p>Events are used with delegates. An event listener instantiates an event-handler delegate that is invoked whenever the event is raised by an event source. In order to connect to the event source, the event listener adds this delegate to the invocation list on the source. When the event is raised, the invoke method of the event-handler delegate is called. Both multicast and single-cast event notifications are supported. The <strong>Add</strong> and <strong>Remove</strong> methods, as well as the event-handler delegate class associated with an event, must be marked in the metadata.</p>\n<p>Delegates are object-oriented function pointers. In C or C++, a function pointer is a reference to a method. In contrast to the C or C++ function pointer, a delegate contains two references: a reference to a method and a reference to an object that supports the method. Delegates can invoke a method without knowing the class type that declares or inherits the method. Delegates need only know the return type and parameter list of the method.</p>\n<p>The event model works equally well for single-cast and multicast delegates. When the delegate's invoke method is called, only a single object will have a method called on it. A multicast modifier can be applied to a delegate declaration, which allows multiple methods to be called when the invoke method of the delegate is called.</p>\n<p>Calling <xref href=\"System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> on <strong>EventInfo</strong> when the <em>inherit</em> parameter of <strong>GetCustomAttributes</strong> is <strong>true</strong> does not walk the type hierarchy. Use <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref> to inherit custom attributes.</p>\n"
  example:
  - "\n<p>The following code gets an <xref href=\"System.Reflection.EventInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the <xref href=\"System.Windows.Forms.Control.Click\" data-throw-if-not-resolved=\"false\"></xref> event of the <xref href=\"System.Windows.Forms.Button\" data-throw-if-not-resolved=\"false\"></xref> class. </p>type_getevent1#1"
  syntax:
    content: 'public abstract class EventInfo : MemberInfo'
    content.vb: >-
      Public MustInherit Class EventInfo
          Inherits MemberInfo
  see:
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  inheritedMembers:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.EventInfo.AddMethod
  commentId: P:System.Reflection.EventInfo.AddMethod
  id: AddMethod
  parent: System.Reflection.EventInfo
  langs:
  - csharp
  - vb
  name: AddMethod
  fullName: System.Reflection.EventInfo.AddMethod
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddMethod
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 91
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> method of the event, including non-public methods.</p>\n"
  remarks: "\n<p>This property is the equivalent of calling the <xref href=\"System.Reflection.EventInfo.GetAddMethod(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with a value of <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual MethodInfo AddMethod { get; }
    content.vb: Public Overridable ReadOnly Property AddMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n<p>The <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object for the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.EventInfo.Attributes
  commentId: P:System.Reflection.EventInfo.Attributes
  id: Attributes
  parent: System.Reflection.EventInfo
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.EventInfo.Attributes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 92
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the attributes for this event.</p>\n"
  remarks: "\n<p>The attributes are returned in a 4-byte integer representing a bitmap of the attributes set for the event reflected by this instance.</p>\n"
  syntax:
    content: public abstract EventAttributes Attributes { get; }
    content.vb: Public MustOverride ReadOnly Property Attributes As EventAttributes
    parameters: []
    return:
      type: System.Reflection.EventAttributes
      description: "\n<p>The read-only attributes for this event.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.EventInfo.EventHandlerType
  commentId: P:System.Reflection.EventInfo.EventHandlerType
  id: EventHandlerType
  parent: System.Reflection.EventInfo
  langs:
  - csharp
  - vb
  name: EventHandlerType
  fullName: System.Reflection.EventInfo.EventHandlerType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EventHandlerType
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 93
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the <strong>Type</strong> object of the underlying event-handler delegate associated with this event.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Reflection.EventInfo.EventHandlerType\" data-throw-if-not-resolved=\"false\"></xref> property to discover the delegate type of an event and to display its parameter types.</p>\n<p>The example defines a delegate named <code>MyDelegate</code> and an event named <code>ev</code> of type <code>MyDelegate</code>. The code in the <code>Main</code> method discovers the event signature by getting the delegate type of the event, getting the <code>Invoke</code> method of the delegate type, and then retrieving and displaying the parameters.</p>eventarg#1"
  syntax:
    content: public virtual Type EventHandlerType { get; }
    content.vb: Public Overridable ReadOnly Property EventHandlerType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A read-only <strong>Type</strong> object representing the delegate event handler.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  seealso:
  - type: System.Type
    commentId: T:System.Type
  - type: System.Delegate
    commentId: T:System.Delegate
  - type: System.EventHandler
    commentId: T:System.EventHandler
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.EventInfo.IsSpecialName
  commentId: P:System.Reflection.EventInfo.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.EventInfo
  langs:
  - csharp
  - vb
  name: IsSpecialName
  fullName: System.Reflection.EventInfo.IsSpecialName
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSpecialName
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 94
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the <strong>EventInfo</strong> has a name with a special meaning.</p>\n"
  remarks: "\n<p>This property determines whether the event's name has a special meaning. Names that begin with or contain an underscore character (_), property accessors, and operator overloading methods are examples of names that might require special treatment by some compilers.</p>\n"
  syntax:
    content: public bool IsSpecialName { get; }
    content.vb: Public ReadOnly Property IsSpecialName As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this event has a special name; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Reflection.EventAttributes
    commentId: T:System.Reflection.EventAttributes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.EventInfo.RaiseMethod
  commentId: P:System.Reflection.EventInfo.RaiseMethod
  id: RaiseMethod
  parent: System.Reflection.EventInfo
  langs:
  - csharp
  - vb
  name: RaiseMethod
  fullName: System.Reflection.EventInfo.RaiseMethod
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RaiseMethod
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 95
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the method that is called when the event is raised, including non-public methods.</p>\n"
  remarks: "\n<p>This property is the equivalent of calling the <xref href=\"System.Reflection.EventInfo.GetRaiseMethod(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with a value of <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual MethodInfo RaiseMethod { get; }
    content.vb: Public Overridable ReadOnly Property RaiseMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n<p>The method that is called when the event is raised.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.EventInfo.RemoveMethod
  commentId: P:System.Reflection.EventInfo.RemoveMethod
  id: RemoveMethod
  parent: System.Reflection.EventInfo
  langs:
  - csharp
  - vb
  name: RemoveMethod
  fullName: System.Reflection.EventInfo.RemoveMethod
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveMethod
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 96
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the <strong>MethodInfo</strong> object for removing a method of the event, including non-public methods.</p>\n"
  remarks: "\n<p>This property is the equivalent of calling the <xref href=\"System.Reflection.EventInfo.GetRemoveMethod(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> with a value of <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual MethodInfo RemoveMethod { get; }
    content.vb: Public Overridable ReadOnly Property RemoveMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n<p>The <strong>MethodInfo</strong> object for removing a method of the event.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)
  commentId: M:System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)
  id: AddEventHandler(System.Object,System.Delegate)
  parent: System.Reflection.EventInfo
  langs:
  - csharp
  - vb
  name: AddEventHandler(Object, Delegate)
  fullName: System.Reflection.EventInfo.AddEventHandler(System.Object, System.Delegate)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddEventHandler
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 97
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Adds an event handler to an event source.</p>\n"
  remarks: "\n<p>This method attempts to add a delegate to synchronize the event on the target object.</p>\n<p>Each time the event is raised by the target parameter, the method or methods encapsulated by the handler will be invoked.</p>\n"
  example:
  - "\n<p>The following code example shows how to load an assembly, create an instance of a type from the assembly, create an event handler using a dynamic assembly, and hook up the dynamic event handler. All actions are performed using late binding.</p>\n<p>The code example loads System.dll and creates an instance of the <xref href=\"System.Timers.Timer\" data-throw-if-not-resolved=\"false\"></xref> class. The example uses the <xref href=\"System.Type.GetEvent(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to get the <xref href=\"System.Timers.Timer.Elapsed\" data-throw-if-not-resolved=\"false\"></xref> event, and the <xref href=\"System.Reflection.EventInfo.EventHandlerType\" data-throw-if-not-resolved=\"false\"></xref> property to get the delegate type for the event. </p>\n<p>The code example gets a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> for the <strong>Invoke</strong> method of the delegate type, and from the <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> obtains the signature of the delegate. The code example then creates a dynamic assembly with one module containing a single type named <code>Handler</code>, and gives the type a <strong>static</strong> method (<strong>Shared</strong> method in Visual Basic) named <code>DynamicHandler</code> that will be used to handle the event.</p>\n<p>After the dynamic type is created, the code example gets a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> for the finished method and uses it to create a delegate instance. This instance is passed to the <xref href=\"System.Reflection.EventInfo.AddEventHandler(System.Object,System.Delegate)\" data-throw-if-not-resolved=\"false\"></xref> method to hook up the event. The program then pauses to allow the event to be raised.</p>AddEventHandler#1"
  syntax:
    content: public virtual void AddEventHandler(object target, Delegate handler)
    content.vb: Public Overridable Sub AddEventHandler(target As Object, handler As  Delegate)
    parameters:
    - id: target
      type: System.Object
      description: "\n<p>The event source. </p>\n"
    - id: handler
      type: System.Delegate
      description: "\n<p>Encapsulates a method or methods to be invoked when the event is raised by the target. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The event does not have a public <strong>add</strong> accessor.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The handler that was passed in cannot be used. </p>\n"
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The caller does not have access permission to the member. </p>\n"
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>The <em>target</em> parameter is <strong>null</strong> and the event is not static.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Reflection.EventInfo\" data-throw-if-not-resolved=\"false\"></xref> is not declared on the target. </p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.Delegate
    commentId: T:System.Delegate
  - type: System.EventHandler
    commentId: T:System.EventHandler
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.EventInfo.Equals(System.Object)
  commentId: M:System.Reflection.EventInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.EventInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.EventInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 98
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Reflection.MemberInfo.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.EventInfo.GetHashCode
  commentId: M:System.Reflection.EventInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.EventInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.EventInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 99
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Reflection.MemberInfo.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)
  commentId: M:System.Reflection.EventInfo.RemoveEventHandler(System.Object,System.Delegate)
  id: RemoveEventHandler(System.Object,System.Delegate)
  parent: System.Reflection.EventInfo
  langs:
  - csharp
  - vb
  name: RemoveEventHandler(Object, Delegate)
  fullName: System.Reflection.EventInfo.RemoveEventHandler(System.Object, System.Delegate)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/4.0/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveEventHandler
    path: src/System.Reflection/ref/4.0/System.Reflection.cs
    startLine: 100
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Removes an event handler from an event source.</p>\n"
  remarks: "\n<p>This method attempts to remove the delegate that may synchronize this event on the target object.</p>\n<p>When an event is raised by target, the method or methods encapsulated by <em>handler</em> will no longer be invoked.</p>\n"
  syntax:
    content: public virtual void RemoveEventHandler(object target, Delegate handler)
    content.vb: Public Overridable Sub RemoveEventHandler(target As Object, handler As  Delegate)
    parameters:
    - id: target
      type: System.Object
      description: "\n<p>The event source. </p>\n"
    - id: handler
      type: System.Delegate
      description: "\n<p>The delegate to be disassociated from the events raised by target. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The event does not have a public <strong>remove</strong> accessor. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The handler that was passed in cannot be used. </p>\n"
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>The <em>target</em> parameter is <strong>null</strong> and the event is not static.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Reflection.EventInfo\" data-throw-if-not-resolved=\"false\"></xref> is not declared on the target. </p>\n"
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The caller does not have access permission to the member. </p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.Delegate
    commentId: T:System.Delegate
  - type: System.EventHandler
    commentId: T:System.EventHandler
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.EventAttributes
  parent: System.Reflection
  isExternal: false
  name: EventAttributes
  fullName: System.Reflection.EventAttributes
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  fullName: System.Delegate
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.MethodAccessException
  isExternal: false
  name: MethodAccessException
  fullName: System.MethodAccessException
- uid: System.Reflection.TargetException
  isExternal: false
  name: TargetException
  fullName: System.Reflection.TargetException
