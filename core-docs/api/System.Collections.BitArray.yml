items:
- uid: System.Collections.BitArray
  commentId: T:System.Collections.BitArray
  id: BitArray
  parent: System.Collections
  children:
  - System.Collections.BitArray.#ctor(System.Boolean[])
  - System.Collections.BitArray.#ctor(System.Byte[])
  - System.Collections.BitArray.#ctor(System.Collections.BitArray)
  - System.Collections.BitArray.#ctor(System.Int32)
  - System.Collections.BitArray.#ctor(System.Int32,System.Boolean)
  - System.Collections.BitArray.#ctor(System.Int32[])
  - System.Collections.BitArray.And(System.Collections.BitArray)
  - System.Collections.BitArray.Get(System.Int32)
  - System.Collections.BitArray.GetEnumerator
  - System.Collections.BitArray.Item(System.Int32)
  - System.Collections.BitArray.Length
  - System.Collections.BitArray.Not
  - System.Collections.BitArray.Or(System.Collections.BitArray)
  - System.Collections.BitArray.Set(System.Int32,System.Boolean)
  - System.Collections.BitArray.SetAll(System.Boolean)
  - System.Collections.BitArray.Xor(System.Collections.BitArray)
  langs:
  - csharp
  - vb
  name: BitArray
  fullName: System.Collections.BitArray
  type: Class
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BitArray
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 10
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Manages a compact array of bit values, which are represented as Booleans, where <strong>true</strong> indicates that the bit is on (1) and <strong>false</strong> indicates the bit is off (0).</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class is a collection class in which the capacity is always the same as the count. Elements are added to a <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> by increasing the <xref href=\"System.Collections.BitArray.Length\" data-throw-if-not-resolved=\"false\"></xref> property; elements are deleted by decreasing the <xref href=\"System.Collections.BitArray.Length\" data-throw-if-not-resolved=\"false\"></xref> property. The size of a <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> is controlled by the client; indexing past the end of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> throws an <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>.The <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class provides methods that are not found in other collections, including those that allow multiple elements to be modified at once using a filter, such as <xref href=\"System.Collections.BitArray.And(System.Collections.BitArray)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.BitArray.Or(System.Collections.BitArray)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Collections.BitArray.Xor(System.Collections.BitArray)\" data-throw-if-not-resolved=\"false\"></xref> , <xref href=\"System.Collections.BitArray.Not\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Collections.BitArray.SetAll(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> class is a structure that provides the same functionality as <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>, but with faster performance. <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> is faster because it is a value type and therefore allocated on the stack, whereas <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> is a reference type and, therefore, allocated on the heap.</p>\n<p>\n<xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> can store exactly 32 bits, whereas <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> can store a variable number of bits. <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> stores both bit flags and small integers, thereby making it ideal for data that is not exposed to the user. However, if the number of required bit flags is unknown, is variable, or is greater than 32, use <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>\n<xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> is in the <xref href=\"System.Collections\" data-throw-if-not-resolved=\"false\"></xref> namespace; <xref href=\"System.Collections.Specialized.BitVector32\" data-throw-if-not-resolved=\"false\"></xref> is in the <xref href=\"System.Collections.Specialized\" data-throw-if-not-resolved=\"false\"></xref> namespace.</p>\n<p>Elements in this collection can be accessed using an integer index.  Indexes in this collection are zero-based.</p>\n"
  example:
  - "\n<p>The following code example shows how to create and initialize a <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> and how to print out its values.</p>Classic BitArray Example#1"
  syntax:
    content: 'public sealed class BitArray : ICollection, IEnumerable'
    content.vb: >-
      Public NotInheritable Class BitArray
          Inherits ICollection
          Implements IEnumerable
  seealso:
  - type: System.Collections.Specialized.BitVector32
    commentId: T:System.Collections.Specialized.BitVector32
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Collections.BitArray.#ctor(System.Boolean[])
  commentId: M:System.Collections.BitArray.#ctor(System.Boolean[])
  id: '#ctor(System.Boolean[])'
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: BitArray(Boolean[])
  fullName: System.Collections.BitArray.BitArray(System.Boolean[])
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 12
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class that contains bit values copied from the specified array of Booleans.</p>\n"
  remarks: "\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>values</em>.</p>\n"
  syntax:
    content: public BitArray(bool[] values)
    content.vb: Public Sub New(values As Boolean())
    parameters:
    - id: values
      type: System.Boolean[]
      description: "\n<p>An array of Booleans to copy. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.BitArray.BitArray(System.Boolean())
  name.vb: BitArray(Boolean())
- uid: System.Collections.BitArray.#ctor(System.Byte[])
  commentId: M:System.Collections.BitArray.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: BitArray(Byte[])
  fullName: System.Collections.BitArray.BitArray(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 13
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class that contains bit values copied from the specified array of bytes.</p>\n"
  remarks: "\n<p>The first byte in the array represents bits 0 through 7, the second byte represents bits 8 through 15, and so on. The Least Significant Bit of each byte represents the lowest index value: \" <em>bytes</em> [0] & 1\" represents bit 0, \" <em>bytes</em> [0] & 2\" represents bit 1, \" <em>bytes</em> [0] & 4\" represents bit 2, and so on.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>bytes</em>.</p>\n"
  syntax:
    content: public BitArray(byte[] bytes)
    content.vb: Public Sub New(bytes As Byte())
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>An array of bytes containing the values to copy, where each byte represents eight consecutive bits. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>bytes</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.BitArray.BitArray(System.Byte())
  name.vb: BitArray(Byte())
- uid: System.Collections.BitArray.#ctor(System.Collections.BitArray)
  commentId: M:System.Collections.BitArray.#ctor(System.Collections.BitArray)
  id: '#ctor(System.Collections.BitArray)'
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: BitArray(BitArray)
  fullName: System.Collections.BitArray.BitArray(System.Collections.BitArray)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 14
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class that contains bit values copied from the specified <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>bits</em>.</p>\n"
  syntax:
    content: public BitArray(BitArray bits)
    content.vb: Public Sub New(bits As BitArray)
    parameters:
    - id: bits
      type: System.Collections.BitArray
      description: "\n<p>The <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> to copy. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bits</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.#ctor(System.Int32)
  commentId: M:System.Collections.BitArray.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: BitArray(Int32)
  fullName: System.Collections.BitArray.BitArray(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 15
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class that can hold the specified number of bit values, which are initially set to <strong>false</strong>.</p>\n"
  remarks: "\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>length</em>.</p>\n"
  syntax:
    content: public BitArray(int length)
    content.vb: Public Sub New(length As Integer)
    parameters:
    - id: length
      type: System.Int32
      description: "\n<p>The number of bit values in the new <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>length</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.#ctor(System.Int32,System.Boolean)
  commentId: M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: BitArray(Int32, Boolean)
  fullName: System.Collections.BitArray.BitArray(System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 16
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class that can hold the specified number of bit values, which are initially set to the specified value.</p>\n"
  remarks: "\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>length</em>.</p>\n"
  syntax:
    content: public BitArray(int length, bool defaultValue)
    content.vb: Public Sub New(length As Integer, defaultValue As Boolean)
    parameters:
    - id: length
      type: System.Int32
      description: "\n<p>The number of bit values in the new <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: defaultValue
      type: System.Boolean
      description: "\n<p>The Boolean value to assign to each bit. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>length</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.#ctor(System.Int32[])
  commentId: M:System.Collections.BitArray.#ctor(System.Int32[])
  id: '#ctor(System.Int32[])'
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: BitArray(Int32[])
  fullName: System.Collections.BitArray.BitArray(System.Int32[])
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 17
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class that contains bit values copied from the specified array of 32-bit integers.</p>\n"
  remarks: "\n<p>The number in the first <em>values</em> array element represents bits 0 through 31, the second number in the array represents bits 32 through 63, and so on. The Least Significant Bit of each integer represents the lowest index value: \" <em>values</em> [0] & 1\" represents bit 0, \" <em>values</em> [0] & 2\" represents bit 1, \" <em>values</em> [0] & 4\" represents bit 2, and so on.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>values</em>.</p>\n"
  syntax:
    content: public BitArray(int[] values)
    content.vb: Public Sub New(values As Integer())
    parameters:
    - id: values
      type: System.Int32[]
      description: "\n<p>An array of integers containing the values to copy, where each integer represents 32 consecutive bits. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>values</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.BitArray.BitArray(System.Int32())
  name.vb: BitArray(Int32())
- uid: System.Collections.BitArray.Item(System.Int32)
  commentId: P:System.Collections.BitArray.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Collections.BitArray.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 18
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Gets or sets the value of the bit at a specific position in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.BitArray.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.BitArray.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n<p>Retrieving the value of this property is an O(1) operation; setting the property is also an O(1) operation.</p>\n"
  syntax:
    content: public bool this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As Boolean
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the value to get or set. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The value of the bit at position <em>index</em>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.BitArray.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Collections.BitArray.Count
    commentId: P:System.Collections.BitArray.Count
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.BitArray.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.BitArray.Length
  commentId: P:System.Collections.BitArray.Length
  id: Length
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.Collections.BitArray.Length
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 19
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Gets or sets the number of elements in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.BitArray.Length\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.BitArray.Count\" data-throw-if-not-resolved=\"false\"></xref> return the same value. <xref href=\"System.Collections.BitArray.Length\" data-throw-if-not-resolved=\"false\"></xref> can be set to a specific value, but <xref href=\"System.Collections.BitArray.Count\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>If <xref href=\"System.Collections.BitArray.Length\" data-throw-if-not-resolved=\"false\"></xref> is set to a value that is less than <xref href=\"System.Collections.BitArray.Count\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> is truncated and the elements after the index <em>value</em> -1 are deleted.</p>\n<p>If <xref href=\"System.Collections.BitArray.Length\" data-throw-if-not-resolved=\"false\"></xref> is set to a value that is greater than <xref href=\"System.Collections.BitArray.Count\" data-throw-if-not-resolved=\"false\"></xref>, the new elements are set to <strong>false</strong>.</p>\n<p>Retrieving the value of this property is an O(1) operation. Setting this property is an O(<em>n</em>) operation.</p>\n"
  syntax:
    content: public int Length { get; set; }
    content.vb: Public Property Length As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The property is set to a value that is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.And(System.Collections.BitArray)
  commentId: M:System.Collections.BitArray.And(System.Collections.BitArray)
  id: And(System.Collections.BitArray)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: And(BitArray)
  fullName: System.Collections.BitArray.And(System.Collections.BitArray)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: And
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 23
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Performs the bitwise AND operation between the elements of the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object and the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object will be modified to store the result of the bitwise AND operation.</p>\n"
  remarks: "\n<p>The bitwise AND operation returns <strong>true</strong> if both operands are <strong>true</strong>, and returns <strong>false</strong> if one or both operands are <strong>false</strong>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.BitArray.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to perform the bitwise AND operation between two <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>Classic BitArray.And Example#1"
  syntax:
    content: public BitArray And(BitArray value)
    content.vb: Public Function And(value As BitArray) As BitArray
    parameters:
    - id: value
      type: System.Collections.BitArray
      description: "\n<p>The array with which to perform the bitwise AND operation. </p>\n"
    return:
      type: System.Collections.BitArray
      description: "\n<p>An array containing the result of the bitwise AND operation, which is a reference to the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> and the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> do not have the same number of elements. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.Get(System.Int32)
  commentId: M:System.Collections.BitArray.Get(System.Int32)
  id: Get(System.Int32)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Get(Int32)
  fullName: System.Collections.BitArray.Get(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Get
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 24
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Gets the value of the bit at a specific position in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to set and get specific elements in a <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic BitArray.Get Example#1"
  syntax:
    content: public bool Get(int index)
    content.vb: Public Function Get(index As Integer) As Boolean
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the value to get. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The value of the bit at position <em>index</em>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is greater than or equal to the number of elements in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.GetEnumerator
  commentId: M:System.Collections.BitArray.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.BitArray.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 25
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the entire <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.Not
  commentId: M:System.Collections.BitArray.Not
  id: Not
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Not()
  fullName: System.Collections.BitArray.Not()
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Not
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 26
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Inverts all the bit values in the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>, so that elements set to <strong>true</strong> are changed to <strong>false</strong>, and elements set to <strong>false</strong> are changed to <strong>true</strong>.</p>\n"
  remarks: "\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.BitArray.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to apply NOT to a <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic BitArray.Not Example#1"
  syntax:
    content: public BitArray Not()
    content.vb: Public Function Not As BitArray
    return:
      type: System.Collections.BitArray
      description: "\n<p>The current instance with inverted bit values.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.Or(System.Collections.BitArray)
  commentId: M:System.Collections.BitArray.Or(System.Collections.BitArray)
  id: Or(System.Collections.BitArray)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Or(BitArray)
  fullName: System.Collections.BitArray.Or(System.Collections.BitArray)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Or
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 27
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Performs the bitwise OR operation between the elements of the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object and the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object will be modified to store the result of the bitwise OR operation.</p>\n"
  remarks: "\n<p>The bitwise OR operation returns <strong>true</strong> if one or both operands are <strong>true</strong>, and returns <strong>false</strong> if both operands are <strong>false</strong>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.BitArray.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to perform the OR operation between two <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>Classic BitArray.Or Example#1"
  syntax:
    content: public BitArray Or(BitArray value)
    content.vb: Public Function Or(value As BitArray) As BitArray
    parameters:
    - id: value
      type: System.Collections.BitArray
      description: "\n<p>The array with which to perform the bitwise OR operation. </p>\n"
    return:
      type: System.Collections.BitArray
      description: "\n<p>An array containing the result of the bitwise OR operation, which is a reference to the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> and the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> do not have the same number of elements. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.Set(System.Int32,System.Boolean)
  commentId: M:System.Collections.BitArray.Set(System.Int32,System.Boolean)
  id: Set(System.Int32,System.Boolean)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Set(Int32, Boolean)
  fullName: System.Collections.BitArray.Set(System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Set
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 28
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Sets the bit at a specific position in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> to the specified value.</p>\n"
  remarks: "\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following code example shows how to set and get specific elements in a <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic BitArray.Get Example#1"
  syntax:
    content: public void Set(int index, bool value)
    content.vb: Public Sub Set(index As Integer, value As Boolean)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the bit to set. </p>\n"
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to assign to the bit. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is greater than or equal to the number of elements in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.SetAll(System.Boolean)
  commentId: M:System.Collections.BitArray.SetAll(System.Boolean)
  id: SetAll(System.Boolean)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: SetAll(Boolean)
  fullName: System.Collections.BitArray.SetAll(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAll
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 29
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Sets all bits in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> to the specified value.</p>\n"
  remarks: "\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.BitArray.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to set and get specific elements in a <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic BitArray.Get Example#1"
  syntax:
    content: public void SetAll(bool value)
    content.vb: Public Sub SetAll(value As Boolean)
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to assign to all bits. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.Xor(System.Collections.BitArray)
  commentId: M:System.Collections.BitArray.Xor(System.Collections.BitArray)
  id: Xor(System.Collections.BitArray)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Xor(BitArray)
  fullName: System.Collections.BitArray.Xor(System.Collections.BitArray)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Xor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 31
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Performs the bitwise exclusive OR operation between the elements of the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object against the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object will be modified to store the result of the bitwise exclusive OR operation.</p>\n"
  remarks: "\n<p>The bitwise exclusive OR operation returns <strong>true</strong> if exactly one operand is <strong>true</strong>, and returns <strong>false</strong> if both operands have the same Boolean value.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.BitArray.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example shows how to perform the XOR operation between two <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>Classic BitArray.Xor Example#1"
  syntax:
    content: public BitArray Xor(BitArray value)
    content.vb: Public Function Xor(value As BitArray) As BitArray
    parameters:
    - id: value
      type: System.Collections.BitArray
      description: "\n<p>The array with which to perform the bitwise exclusive OR operation. </p>\n"
    return:
      type: System.Collections.BitArray
      description: "\n<p>An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> and the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> do not have the same number of elements. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean[]
  isExternal: true
  name: Boolean[]
  fullName: System.Boolean[]
  fullname.vb: System.Boolean()
  name.vb: Boolean()
  spec.csharp:
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Collections.BitArray
  parent: System.Collections
  isExternal: false
  name: BitArray
  fullName: System.Collections.BitArray
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32[]
  isExternal: false
  name: Int32[]
  fullName: System.Int32[]
  fullname.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ()
    fullName: ()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
