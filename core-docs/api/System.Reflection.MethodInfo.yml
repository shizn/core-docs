items:
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  id: MethodInfo
  parent: System.Reflection
  children:
  - System.Reflection.MethodInfo.CreateDelegate(System.Type)
  - System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)
  - System.Reflection.MethodInfo.Equals(System.Object)
  - System.Reflection.MethodInfo.GetGenericArguments
  - System.Reflection.MethodInfo.GetGenericMethodDefinition
  - System.Reflection.MethodInfo.GetHashCode
  - System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
  - System.Reflection.MethodInfo.ReturnParameter
  - System.Reflection.MethodInfo.ReturnType
  langs:
  - csharp
  - vb
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MethodInfo
    path: src/mscorlib/src/System/Reflection/MethodInfo.cs
    startLine: 28
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Discovers the attributes of a method and provides access to method metadata.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> class represents a method of a type. You can use a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object to obtain information about the method that the object represents and to invoke the method. For example:</p>\n<ul><li>\n<p>You can determine the method's visibility by retrieving the values of the <xref href=\"System.Reflection.MethodBase.IsFamilyAndAssembly\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.MethodBase.IsFamilyOrAssembly\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.MethodBase.IsPrivate\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.MethodBase.IsPublic\" data-throw-if-not-resolved=\"false\"></xref> properties. </p>\n</li><li>\n<p>You can discover what attributes are applied to the method by retrieving the value of the <xref href=\"System.Reflection.MethodBase.Attributes\" data-throw-if-not-resolved=\"false\"></xref> property or calling the <xref href=\"System.Reflection.Assembly.GetCustomAttributes(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>method. </p>\n</li><li>\n<p>You can determine whether the method is a generic method, an open constructed generic method, or a closed constructed generic method, by retrieving the values of the <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodInfo.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> properties.  </p>\n</li><li>\n<p>You can get information about the method's parameters and return type from the <xref href=\"System.Reflection.MethodBase.GetParameters\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Reflection.MethodInfo.ReturnParameter\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Reflection.MethodInfo.ReturnType\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Reflection.MethodInfo.ReturnTypeCustomAttributes\" data-throw-if-not-resolved=\"false\"></xref> properties. </p>\n</li><li>\n<p>You can execute a method on a class instance by calling the <xref href=\"System.Reflection.MethodBase.Invoke(System.Object,System.Object[])\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li><li>\n<p>You can instantiate a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents a constructed generic method from one that represents a generic method definition by calling the <xref href=\"System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li></ul>\n<p>You can instantiate a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> instances by calling the <see cref=\"Overload:System.Type.GetMethods\"></see> or <see cref=\"Overload:System.Type.GetMethod\"></see> method, or by calling the <xref href=\"System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method of a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents a generic method definition.</p>\n<p>For a list of the invariant conditions for terms specific to generic methods, see the <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref href=\"System.Type.IsGenericType\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  syntax:
    content: >-
      [Serializable]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_MethodInfo))]

      [PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]

      [ComVisible(true)]

      public abstract class MethodInfo : MethodBase, ICustomAttributeProvider, _MemberInfo, _MethodBase, _MethodInfo
    content.vb: >-
      <Serializable>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_MethodInfo))>

      <PermissionSet(SecurityAction.InheritanceDemand, Name:="FullTrust")>

      <ComVisible(True)>

      Public MustInherit Class MethodInfo
          Inherits MethodBase
          Implements ICustomAttributeProvider, _MemberInfo, _MethodBase, _MethodInfo
  seealso:
  - type: System.Reflection.MethodInfo.IsGenericMethod
    commentId: P:System.Reflection.MethodInfo.IsGenericMethod
  see:
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  - System.Reflection.MethodBase
  inheritedMembers:
  - System.Reflection.MethodBase.Attributes
  - System.Reflection.MethodBase.CallingConvention
  - System.Reflection.MethodBase.ContainsGenericParameters
  - System.Reflection.MethodBase.IsAbstract
  - System.Reflection.MethodBase.IsAssembly
  - System.Reflection.MethodBase.IsConstructor
  - System.Reflection.MethodBase.IsFamily
  - System.Reflection.MethodBase.IsFamilyAndAssembly
  - System.Reflection.MethodBase.IsFamilyOrAssembly
  - System.Reflection.MethodBase.IsFinal
  - System.Reflection.MethodBase.IsGenericMethod
  - System.Reflection.MethodBase.IsGenericMethodDefinition
  - System.Reflection.MethodBase.IsHideBySig
  - System.Reflection.MethodBase.IsPrivate
  - System.Reflection.MethodBase.IsPublic
  - System.Reflection.MethodBase.IsSpecialName
  - System.Reflection.MethodBase.IsStatic
  - System.Reflection.MethodBase.IsVirtual
  - System.Reflection.MethodBase.MethodImplementationFlags
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.MethodBase.GetParameters
  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.MethodInfo.ReturnParameter
  commentId: P:System.Reflection.MethodInfo.ReturnParameter
  id: ReturnParameter
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  - vb
  name: ReturnParameter
  fullName: System.Reflection.MethodInfo.ReturnParameter
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReturnParameter
    path: src/mscorlib/src/System/Reflection/MethodInfo.cs
    startLine: 78
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> object that contains information about the return type of the method, such as whether the return type has custom modifiers. </p>\n"
  remarks: "\n<p>Compiler designers can use the <xref href=\"System.Reflection.ParameterInfo\" data-throw-if-not-resolved=\"false\"></xref> object returned by this property to discover whether custom modifiers, such as <xref href=\"Microsoft.VisualC.IsConstModifier\" data-throw-if-not-resolved=\"false\"></xref>, have been applied to the return type.</p>\n"
  syntax:
    content: public virtual ParameterInfo ReturnParameter { get; }
    content.vb: Public Overridable ReadOnly Property ReturnParameter As ParameterInfo
    parameters: []
    return:
      type: System.Reflection.ParameterInfo
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>This method is not implemented.</p>\n"
  seealso:
  - type: System.Reflection.ParameterInfo.GetOptionalCustomModifiers
    commentId: M:System.Reflection.ParameterInfo.GetOptionalCustomModifiers
  - type: System.Reflection.ParameterInfo.GetRequiredCustomModifiers
    commentId: M:System.Reflection.ParameterInfo.GetRequiredCustomModifiers
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.MethodInfo.ReturnType
  commentId: P:System.Reflection.MethodInfo.ReturnType
  id: ReturnType
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  - vb
  name: ReturnType
  fullName: System.Reflection.MethodInfo.ReturnType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReturnType
    path: src/mscorlib/src/System/Reflection/MethodInfo.cs
    startLine: 76
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the return type of this method.</p>\n"
  remarks: "\n<p>To get the return type property, first get the class <strong>Type</strong>. From the <strong>Type</strong>, get the <strong>MethodInfo</strong>. From the <strong>MethodInfo</strong>, get the <strong>ReturnType</strong>.</p>\n"
  example:
  - "\n<p>The following example displays the return type of the specified method.</p>Classic MethodInfo.ReturnType Example#1"
  syntax:
    content: public virtual Type ReturnType { get; }
    content.vb: Public Overridable ReadOnly Property ReturnType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type)
  commentId: M:System.Reflection.MethodInfo.CreateDelegate(System.Type)
  id: CreateDelegate(System.Type)
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  - vb
  name: CreateDelegate(Type)
  fullName: System.Reflection.MethodInfo.CreateDelegate(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateDelegate
    path: src/mscorlib/src/System/Reflection/MethodInfo.cs
    startLine: 92
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Creates a delegate of the specified type from this method.</p>\n"
  syntax:
    content: public virtual Delegate CreateDelegate(Type delegateType)
    content.vb: 'Public Overridable Function CreateDelegate(delegateType As Type) As '
    parameters:
    - id: delegateType
      type: System.Type
    return:
      type: System.Delegate
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)
  commentId: M:System.Reflection.MethodInfo.CreateDelegate(System.Type,System.Object)
  id: CreateDelegate(System.Type,System.Object)
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  - vb
  name: CreateDelegate(Type, Object)
  fullName: System.Reflection.MethodInfo.CreateDelegate(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateDelegate
    path: src/mscorlib/src/System/Reflection/MethodInfo.cs
    startLine: 93
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Creates a delegate of the specified type with the specified target from this method.</p>\n"
  syntax:
    content: public virtual Delegate CreateDelegate(Type delegateType, object target)
    content.vb: 'Public Overridable Function CreateDelegate(delegateType As Type, target As Object) As '
    parameters:
    - id: delegateType
      type: System.Type
    - id: target
      type: System.Object
    return:
      type: System.Delegate
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.MethodInfo.Equals(System.Object)
  commentId: M:System.Reflection.MethodInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.MethodInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/MethodInfo.cs
    startLine: 61
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Reflection.MethodBase.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.MethodInfo.GetGenericArguments
  commentId: M:System.Reflection.MethodInfo.GetGenericArguments
  id: GetGenericArguments
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  - vb
  name: GetGenericArguments()
  fullName: System.Reflection.MethodInfo.GetGenericArguments()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetGenericArguments
    path: src/mscorlib/src/System/Reflection/MethodInfo.cs
    startLine: 84
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns an array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</p>\n"
  remarks: "\n<p>The elements of the returned array are in the order in which they appear in the list of type parameters for the generic method.</p>\n<ul><li>\n<p>If the current method is a closed constructed method (that is, the <xref href=\"System.Reflection.MethodInfo.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong>), the array returned by the <xref href=\"System.Reflection.MethodInfo.GetGenericArguments\" data-throw-if-not-resolved=\"false\"></xref> method contains the types that have been assigned to the generic type parameters of the generic method definition. </p>\n</li><li>\n<p>If the current method is a generic method definition, the array contains the type parameters. </p>\n</li><li>\n<p>If the current method is an open constructed method (that is, the <xref href=\"System.Reflection.MethodInfo.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong>) in which specific types have been assigned to some type parameters and type parameters of enclosing generic types have been assigned to other type parameters, the array contains both types and type parameters. Use the <xref href=\"System.Type.IsGenericParameter\" data-throw-if-not-resolved=\"false\"></xref> property to tell them apart. For a demonstration of this scenario, see the code example for the <xref href=\"System.Reflection.MethodInfo.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li></ul>\n<p>For a list of the invariant conditions for terms specific to generic methods, see the <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref href=\"System.Type.IsGenericType\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following code example shows how to get the type arguments of a generic method and display them.</p>\n<p>This example is part of a larger example provided for the <xref href=\"System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method.</p>MethodInfo.Generics#8"
  syntax:
    content: >-
      [ComVisible(true)]

      public override Type[] GetGenericArguments()
    content.vb: >-
      <ComVisible(True)>

      Public Overrides Function GetGenericArguments As Type()
    return:
      type: System.Type[]
  overridden: System.Reflection.MethodBase.GetGenericArguments
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is not supported.</p>\n"
  seealso:
  - type: System.Reflection.MethodInfo.IsGenericMethod
    commentId: P:System.Reflection.MethodInfo.IsGenericMethod
  - type: System.Reflection.MethodInfo.IsGenericMethodDefinition
    commentId: P:System.Reflection.MethodInfo.IsGenericMethodDefinition
  - type: System.Reflection.MethodInfo.GetGenericMethodDefinition
    commentId: M:System.Reflection.MethodInfo.GetGenericMethodDefinition
  - type: System.Type.IsGenericType
    commentId: P:System.Type.IsGenericType
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.MethodInfo.GetGenericMethodDefinition
  commentId: M:System.Reflection.MethodInfo.GetGenericMethodDefinition
  id: GetGenericMethodDefinition
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  - vb
  name: GetGenericMethodDefinition()
  fullName: System.Reflection.MethodInfo.GetGenericMethodDefinition()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetGenericMethodDefinition
    path: src/mscorlib/src/System/Reflection/MethodInfo.cs
    startLine: 87
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents a generic method definition from which the current method can be constructed.</p>\n"
  remarks: "\n<p>A generic method definition is a template from which methods can be constructed. For example, from the generic method definition <code>T M<T>(T t)</code> (expressed in C# syntax; <code>Function M(Of T)(ByVal tVal As T) As T</code> in Visual Basic) you can construct and invoke the method <code>int M<int>(int t)</code> (<code>Function M(Of Integer)(ByVal tVal As Integer) As Integer</code> in Visual Basic). Given a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object representing this constructed method, the <xref href=\"System.Reflection.MethodInfo.GetGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> method returns the generic method definition.</p>\n<p>If two constructed methods are created from the same generic method definition, the <xref href=\"System.Reflection.MethodInfo.GetGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> method returns the same <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object for both methods.</p>\n<p>If you call <xref href=\"System.Reflection.MethodInfo.GetGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> on a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that already represents a generic method definition, it returns the current <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If a generic method definition includes generic parameters of the declaring type, there will be a generic method definition specific to each constructed type. For example, consider the following C#, Visual Basic, and C++ code:</p>\n<pre><code>class B<U,V> {}\nclass C<T> { public B<T,S> M<S>() {...}}\n\nClass B(Of U, V)\nEnd Class\nClass C(Of T)\nPublic Function M(Of S)() As B(Of T, S)\n...\nEnd Function\nEnd Class \n\ngeneric <typename U, typename V> ref class B {};\ngeneric <typename T> ref class C\n{\npublic:\ngeneric <typename S> B<T,S>^ M() {...};\n};</code></pre>\n<p>In the constructed type <code>C<int></code> (<code>C(Of Integer)</code> in Visual Basic), the generic method <code>M</code> returns <code>B<int, S></code>. In the open type <code>C<T></code>, <code>M</code> returns <code>B<T, S></code>. In both cases, the <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong> for the <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents <code>M</code>, so <xref href=\"System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> can be called on both <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> objects. In the case of the constructed type, the result of calling <xref href=\"System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> is a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that can be invoked. In the case of the open type, the <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> returned by <xref href=\"System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> cannot be invoked.  </p>\n<p>For a list of the invariant conditions for terms specific to generic methods, see the <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref href=\"System.Type.IsGenericType\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following code example shows a class with a generic method and the code required to obtain a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> for the method, bind the method to type arguments, and get the original generic type definition back from the bound method.</p>\n<p>This example is part of a larger example provided for the <xref href=\"System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method.</p>MethodInfo.Generics#2,3,4"
  syntax:
    content: >-
      [ComVisible(true)]

      public virtual MethodInfo GetGenericMethodDefinition()
    content.vb: >-
      <ComVisible(True)>

      Public Overridable Function GetGenericMethodDefinition As MethodInfo
    return:
      type: System.Reflection.MethodInfo
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current method is not a generic method. That is, <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is not supported.</p>\n"
  seealso:
  - type: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
    commentId: M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
  - type: System.Reflection.MethodInfo.IsGenericMethod
    commentId: P:System.Reflection.MethodInfo.IsGenericMethod
  - type: System.Reflection.MethodInfo.IsGenericMethodDefinition
    commentId: P:System.Reflection.MethodInfo.IsGenericMethodDefinition
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.MethodInfo.GetHashCode
  commentId: M:System.Reflection.MethodInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.MethodInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/MethodInfo.cs
    startLine: 66
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Reflection.MethodBase.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
  commentId: M:System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
  id: MakeGenericMethod(System.Type[])
  parent: System.Reflection.MethodInfo
  langs:
  - csharp
  - vb
  name: MakeGenericMethod(Type[])
  fullName: System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MakeGenericMethod
    path: src/mscorlib/src/System/Reflection/MethodInfo.cs
    startLine: 90
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Substitutes the elements of an array of types for the type parameters of the current generic method definition, and returns a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object representing the resulting constructed method.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method allows you to write code that assigns specific types to the type parameters of a generic method definition, thus creating a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents a particular constructed method. If the <xref href=\"System.Reflection.MethodInfo.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property of this <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object returns <strong>true</strong>, you can use it to invoke the method or to create a delegate to invoke the method. </p>\n<p>Methods constructed with the <xref href=\"System.Reflection.MethodInfo.MakeGenericMethod(System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method can be open, that is, some of their type arguments can be type parameters of enclosing generic types. You might use such open constructed methods when you generate dynamic assemblies. For example, consider the following C#, Visual Basic, and C++ code.</p>\n<pre><code>class C\n{\nT N<T,U>(T t, U u) {...}\npublic V M<V>(V v)\n{\nreturn N<V,int>(v, 42);\n}\n}\n\nClass C\nPublic Function N(Of T,U)(ByVal ta As T, ByVal ua As U) As T\n...\nEnd Function\nPublic Function M(Of V)(ByVal va As V ) As V\nReturn N(Of V, Integer)(va, 42)\nEnd Function\nEnd Class\n\nref class C\n{\nprivate:\ngeneric <typename T, typename U> T N(T t, U u) {...}\npublic:\ngeneric <typename V> V M(V v)\n{\nreturn N<V, int>(v, 42);\n}\n};</code></pre>\n<p>The method body of <code>M</code> contains a call to method <code>N</code>, specifying the type parameter of <code>M</code> and the type <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong> for method <code>N<V,int></code>. The <xref href=\"System.Reflection.MethodInfo.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong>, so method <code>N<V,int></code> cannot be invoked.</p>\n<p>For a list of the invariant conditions for terms specific to generic methods, see the <xref href=\"System.Reflection.MethodInfo.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref> property. For a list of the invariant conditions for other terms used in generic reflection, see the <xref href=\"System.Type.IsGenericType\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the properties and methods of <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that support the examination of generic methods. The example does the following:</p>\n<ul><li>\n<p>Defines a class that has a generic method.</p>\n</li><li>\n<p>Creates a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the generic method.</p>\n</li><li>\n<p>Displays properties of the generic method definition.</p>\n</li><li>\n<p>Assigns type arguments to the type parameters of the <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref>, and invokes the resulting constructed generic method.</p>\n</li><li>\n<p>Displays properties of the constructed generic method.</p>\n</li><li>\n<p>Retrieves the generic method definition from the constructed method and compares it to the original definition.</p>\n</li></ul>MethodInfo.Generics#1"
  syntax:
    content: public virtual MethodInfo MakeGenericMethod(params Type[] typeArguments)
    content.vb: Public Overridable Function MakeGenericMethod(ParamArray typeArguments As Type()) As MethodInfo
    parameters:
    - id: typeArguments
      type: System.Type[]
    return:
      type: System.Reflection.MethodInfo
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> does not represent a generic method definition. That is, <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>typeArguments</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>Any element of <em>typeArguments</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of elements in <em>typeArguments</em> is not the same as the number of type parameters of the current generic method definition.</p>\n<p>-or- </p>\n<p>An element of <em>typeArguments</em> does not satisfy the constraints specified for the corresponding type parameter of the current generic method definition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is not supported.</p>\n"
  seealso:
  - type: System.Reflection.MethodInfo.IsGenericMethodDefinition
    commentId: P:System.Reflection.MethodInfo.IsGenericMethodDefinition
  - type: System.Reflection.MethodInfo.GetGenericMethodDefinition
    commentId: M:System.Reflection.MethodInfo.GetGenericMethodDefinition
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.MethodInfo.MakeGenericMethod(System.Type())
  name.vb: MakeGenericMethod(Type())
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase.Attributes
  parent: System.Reflection.MethodBase
  isExternal: false
  name: Attributes
  fullName: System.Reflection.MethodBase.Attributes
- uid: System.Reflection.MethodBase.CallingConvention
  parent: System.Reflection.MethodBase
  isExternal: false
  name: CallingConvention
  fullName: System.Reflection.MethodBase.CallingConvention
- uid: System.Reflection.MethodBase.ContainsGenericParameters
  parent: System.Reflection.MethodBase
  isExternal: false
  name: ContainsGenericParameters
  fullName: System.Reflection.MethodBase.ContainsGenericParameters
- uid: System.Reflection.MethodBase.IsAbstract
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsAbstract
  fullName: System.Reflection.MethodBase.IsAbstract
- uid: System.Reflection.MethodBase.IsAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsAssembly
  fullName: System.Reflection.MethodBase.IsAssembly
- uid: System.Reflection.MethodBase.IsConstructor
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsConstructor
  fullName: System.Reflection.MethodBase.IsConstructor
- uid: System.Reflection.MethodBase.IsFamily
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamily
  fullName: System.Reflection.MethodBase.IsFamily
- uid: System.Reflection.MethodBase.IsFamilyAndAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamilyAndAssembly
  fullName: System.Reflection.MethodBase.IsFamilyAndAssembly
- uid: System.Reflection.MethodBase.IsFamilyOrAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamilyOrAssembly
  fullName: System.Reflection.MethodBase.IsFamilyOrAssembly
- uid: System.Reflection.MethodBase.IsFinal
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFinal
  fullName: System.Reflection.MethodBase.IsFinal
- uid: System.Reflection.MethodBase.IsGenericMethod
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsGenericMethod
  fullName: System.Reflection.MethodBase.IsGenericMethod
- uid: System.Reflection.MethodBase.IsGenericMethodDefinition
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsGenericMethodDefinition
  fullName: System.Reflection.MethodBase.IsGenericMethodDefinition
- uid: System.Reflection.MethodBase.IsHideBySig
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsHideBySig
  fullName: System.Reflection.MethodBase.IsHideBySig
- uid: System.Reflection.MethodBase.IsPrivate
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsPrivate
  fullName: System.Reflection.MethodBase.IsPrivate
- uid: System.Reflection.MethodBase.IsPublic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsPublic
  fullName: System.Reflection.MethodBase.IsPublic
- uid: System.Reflection.MethodBase.IsSpecialName
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsSpecialName
  fullName: System.Reflection.MethodBase.IsSpecialName
- uid: System.Reflection.MethodBase.IsStatic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsStatic
  fullName: System.Reflection.MethodBase.IsStatic
- uid: System.Reflection.MethodBase.IsVirtual
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsVirtual
  fullName: System.Reflection.MethodBase.IsVirtual
- uid: System.Reflection.MethodBase.MethodImplementationFlags
  parent: System.Reflection.MethodBase
  isExternal: false
  name: MethodImplementationFlags
  fullName: System.Reflection.MethodBase.MethodImplementationFlags
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: GetMethodFromHandle(RuntimeMethodHandle)
  fullName: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
    name: GetMethodFromHandle
    fullName: System.Reflection.MethodBase.GetMethodFromHandle
  - name: (
    fullName: (
  - uid: System.RuntimeMethodHandle
    name: RuntimeMethodHandle
    fullName: System.RuntimeMethodHandle
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
    name: GetMethodFromHandle
    fullName: System.Reflection.MethodBase.GetMethodFromHandle
  - name: (
    fullName: (
  - uid: System.RuntimeMethodHandle
    name: RuntimeMethodHandle
    fullName: System.RuntimeMethodHandle
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)
  fullName: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle, System.RuntimeTypeHandle)
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
    name: GetMethodFromHandle
    fullName: System.Reflection.MethodBase.GetMethodFromHandle
  - name: (
    fullName: (
  - uid: System.RuntimeMethodHandle
    name: RuntimeMethodHandle
    fullName: System.RuntimeMethodHandle
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.RuntimeTypeHandle
    name: RuntimeTypeHandle
    fullName: System.RuntimeTypeHandle
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
    name: GetMethodFromHandle
    fullName: System.Reflection.MethodBase.GetMethodFromHandle
  - name: (
    fullName: (
  - uid: System.RuntimeMethodHandle
    name: RuntimeMethodHandle
    fullName: System.RuntimeMethodHandle
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.RuntimeTypeHandle
    name: RuntimeTypeHandle
    fullName: System.RuntimeTypeHandle
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.GetParameters
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetParameters()
  fullName: System.Reflection.MethodBase.GetParameters()
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetParameters
    name: GetParameters
    fullName: System.Reflection.MethodBase.GetParameters
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetParameters
    name: GetParameters
    fullName: System.Reflection.MethodBase.GetParameters
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  parent: System.Reflection.MethodBase
  isExternal: true
  name: Invoke(Object, Object[])
  fullName: System.Reflection.MethodBase.Invoke(System.Object, System.Object[])
  fullname.vb: System.Reflection.MethodBase.Invoke(System.Object, System.Object())
  name.vb: Invoke(Object, Object())
  spec.csharp:
  - uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
    name: Invoke
    fullName: System.Reflection.MethodBase.Invoke
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
    name: Invoke
    fullName: System.Reflection.MethodBase.Invoke
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  fullName: System.Delegate
- uid: System.Reflection.MethodBase.Equals(System.Object)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: Equals(Object)
  fullName: System.Reflection.MethodBase.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MethodBase.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MethodBase.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MethodBase.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.GetGenericArguments
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetGenericArguments()
  fullName: System.Reflection.MethodBase.GetGenericArguments()
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetGenericArguments
    name: GetGenericArguments
    fullName: System.Reflection.MethodBase.GetGenericArguments
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetGenericArguments
    name: GetGenericArguments
    fullName: System.Reflection.MethodBase.GetGenericArguments
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.MethodBase.GetHashCode
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetHashCode()
  fullName: System.Reflection.MethodBase.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MethodBase.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MethodBase.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.NotImplementedException
  isExternal: false
  name: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
