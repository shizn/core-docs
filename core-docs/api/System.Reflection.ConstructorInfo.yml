items:
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  id: ConstructorInfo
  parent: System.Reflection
  children:
  - System.Reflection.ConstructorInfo.ConstructorName
  - System.Reflection.ConstructorInfo.Equals(System.Object)
  - System.Reflection.ConstructorInfo.GetHashCode
  - System.Reflection.ConstructorInfo.Invoke(System.Object[])
  - System.Reflection.ConstructorInfo.TypeConstructorName
  langs:
  - csharp
  - vb
  name: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ConstructorInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConstructorInfo
    path: src/mscorlib/src/System/Reflection/ConstructorInfo.cs
    startLine: 27
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Discovers the attributes of a class constructor and provides access to constructor metadata. </p>\n"
  remarks: "\n<p>\n<strong>ConstructorInfo</strong> is used to discover the attributes of a constructor as well as to invoke a constructor. Objects are created by calling <xref href=\"System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref> on a <strong>ConstructorInfo</strong> returned by either the <xref href=\"System.Type.GetConstructors\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\" data-throw-if-not-resolved=\"false\"></xref> method of a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>\n<xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref> inherits from <xref href=\"System.Reflection.MethodBase\" data-throw-if-not-resolved=\"false\"></xref> several members, such as <xref href=\"System.Reflection.MethodBase.IsGenericMethod\" data-throw-if-not-resolved=\"false\"></xref>, that can be used to examine generic methods. In the .NET Framework version 2.0 constructors cannot be generic, so these members return <strong>false</strong> or <strong>null</strong>.</p>\n"
  example:
  - "\n<p>The following example uses <strong>ConstructorInfo</strong> with <xref href=\"System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.BindingFlags\" data-throw-if-not-resolved=\"false\"></xref> to find the constructors that match the specified search criteria.</p>type_getconstructor3#1"
  syntax:
    content: >-
      [Serializable]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_ConstructorInfo))]

      [PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]

      [ComVisible(true)]

      public abstract class ConstructorInfo : MethodBase, ICustomAttributeProvider, _MemberInfo, _MethodBase, _ConstructorInfo
    content.vb: >-
      <Serializable>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_ConstructorInfo))>

      <PermissionSet(SecurityAction.InheritanceDemand, Name:="FullTrust")>

      <ComVisible(True)>

      Public MustInherit Class ConstructorInfo
          Inherits MethodBase
          Implements ICustomAttributeProvider, _MemberInfo, _MethodBase, _ConstructorInfo
  see:
  - type: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  - System.Reflection.MethodBase
  inheritedMembers:
  - System.Reflection.MethodBase.Attributes
  - System.Reflection.MethodBase.CallingConvention
  - System.Reflection.MethodBase.ContainsGenericParameters
  - System.Reflection.MethodBase.IsAbstract
  - System.Reflection.MethodBase.IsAssembly
  - System.Reflection.MethodBase.IsConstructor
  - System.Reflection.MethodBase.IsFamily
  - System.Reflection.MethodBase.IsFamilyAndAssembly
  - System.Reflection.MethodBase.IsFamilyOrAssembly
  - System.Reflection.MethodBase.IsFinal
  - System.Reflection.MethodBase.IsGenericMethod
  - System.Reflection.MethodBase.IsGenericMethodDefinition
  - System.Reflection.MethodBase.IsHideBySig
  - System.Reflection.MethodBase.IsPrivate
  - System.Reflection.MethodBase.IsPublic
  - System.Reflection.MethodBase.IsSpecialName
  - System.Reflection.MethodBase.IsStatic
  - System.Reflection.MethodBase.IsVirtual
  - System.Reflection.MethodBase.MethodImplementationFlags
  - System.Reflection.MethodBase.GetGenericArguments
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.MethodBase.GetParameters
  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.ConstructorInfo.ConstructorName
  commentId: F:System.Reflection.ConstructorInfo.ConstructorName
  id: ConstructorName
  parent: System.Reflection.ConstructorInfo
  langs:
  - csharp
  - vb
  name: ConstructorName
  fullName: System.Reflection.ConstructorInfo.ConstructorName
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ConstructorInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConstructorName
    path: src/mscorlib/src/System/Reflection/ConstructorInfo.cs
    startLine: 38
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Represents the name of the class constructor method as it is stored in metadata. This name is always \".ctor\". This field is read-only.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static readonly string ConstructorName
    content.vb: >-
      <ComVisible(True)>

      Public Shared ReadOnly ConstructorName As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Reflection.ConstructorInfo.TypeConstructorName
  commentId: F:System.Reflection.ConstructorInfo.TypeConstructorName
  id: TypeConstructorName
  parent: System.Reflection.ConstructorInfo
  langs:
  - csharp
  - vb
  name: TypeConstructorName
  fullName: System.Reflection.ConstructorInfo.TypeConstructorName
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ConstructorInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TypeConstructorName
    path: src/mscorlib/src/System/Reflection/ConstructorInfo.cs
    startLine: 41
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Represents the name of the type constructor method as it is stored in metadata. This name is always \".cctor\". This property is read-only.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static readonly string TypeConstructorName
    content.vb: >-
      <ComVisible(True)>

      Public Shared ReadOnly TypeConstructorName As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Reflection.ConstructorInfo.Equals(System.Object)
  commentId: M:System.Reflection.ConstructorInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.ConstructorInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.ConstructorInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ConstructorInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/ConstructorInfo.cs
    startLine: 68
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Reflection.MethodBase.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.ConstructorInfo.GetHashCode
  commentId: M:System.Reflection.ConstructorInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.ConstructorInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.ConstructorInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ConstructorInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/ConstructorInfo.cs
    startLine: 73
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Reflection.MethodBase.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.ConstructorInfo.Invoke(System.Object[])
  commentId: M:System.Reflection.ConstructorInfo.Invoke(System.Object[])
  id: Invoke(System.Object[])
  parent: System.Reflection.ConstructorInfo
  langs:
  - csharp
  - vb
  name: Invoke(Object[])
  fullName: System.Reflection.ConstructorInfo.Invoke(System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ConstructorInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Invoke
    path: src/mscorlib/src/System/Reflection/ConstructorInfo.cs
    startLine: 92
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Invokes the constructor reflected by the instance that has the specified parameters, providing default values for the parameters not commonly used.</p>\n"
  remarks: "\n<p>The number, type, and order of elements in the <em>parameters</em> array should be identical to the number, type, and order of parameters for the constructor reflected by this instance. Before calling the constructor, <strong>Invoke</strong> ensures that the caller has access permission and verifies that the parameters are valid.</p>\n<p>Access restrictions are ignored for fully trusted code. That is, private constructors, methods, fields, and properties can be accessed and invoked using reflection whenever the code is fully trusted.</p>\n<p>To create an instance of a value type that has no instance constructors, use the <xref href=\"System.Activator.CreateInstance(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This method is a convenience method for the following overloaded version, using default values. This method cannot be overridden.</p>\n<p>Starting with the .NET Framework 2.0 Service Pack 1, this method can be used to access non-public members if the caller has been granted <xref href=\"System.Security.Permissions.ReflectionPermission\" data-throw-if-not-resolved=\"false\"></xref> with the <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess\" data-throw-if-not-resolved=\"false\"></xref> flag and if the grant set of the non-public members is restricted to the caller’s grant set, or a subset thereof. (See Security Considerations for Reflection.) </p>\n<p>To use this functionality, your application should target the .NET Framework 3.5 or later.</p>\n"
  syntax:
    content: >-
      [DebuggerStepThrough]

      [DebuggerHidden]

      public object Invoke(object[] parameters)
    content.vb: >-
      <DebuggerStepThrough>

      <DebuggerHidden>

      Public Function Invoke(parameters As Object()) As Object
    parameters:
    - id: parameters
      type: System.Object[]
    return:
      type: System.Object
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>The class is abstract.</p>\n<p>-or- </p>\n<p>The constructor is a class initializer. </p>\n"
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The constructor is private or protected, and the caller lacks <xref href=\"System.Security.Permissions.ReflectionPermissionFlag.MemberAccess\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>parameters</em> array does not contain values that match the types accepted by this constructor. </p>\n"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "\n<p>The invoked constructor throws an exception. </p>\n"
  - type: System.Reflection.TargetParameterCountException
    commentId: T:System.Reflection.TargetParameterCountException
    description: "\n<p>An incorrect number of parameters was passed. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Creation of <xref href=\"System.TypedReference\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.ArgIterator\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.RuntimeArgumentHandle\" data-throw-if-not-resolved=\"false\"></xref> types is not supported.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the necessary code access permission.</p>\n"
  see:
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - type: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.ConstructorInfo.Invoke(System.Object())
  name.vb: Invoke(Object())
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase.Attributes
  parent: System.Reflection.MethodBase
  isExternal: false
  name: Attributes
  fullName: System.Reflection.MethodBase.Attributes
- uid: System.Reflection.MethodBase.CallingConvention
  parent: System.Reflection.MethodBase
  isExternal: false
  name: CallingConvention
  fullName: System.Reflection.MethodBase.CallingConvention
- uid: System.Reflection.MethodBase.ContainsGenericParameters
  parent: System.Reflection.MethodBase
  isExternal: false
  name: ContainsGenericParameters
  fullName: System.Reflection.MethodBase.ContainsGenericParameters
- uid: System.Reflection.MethodBase.IsAbstract
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsAbstract
  fullName: System.Reflection.MethodBase.IsAbstract
- uid: System.Reflection.MethodBase.IsAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsAssembly
  fullName: System.Reflection.MethodBase.IsAssembly
- uid: System.Reflection.MethodBase.IsConstructor
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsConstructor
  fullName: System.Reflection.MethodBase.IsConstructor
- uid: System.Reflection.MethodBase.IsFamily
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamily
  fullName: System.Reflection.MethodBase.IsFamily
- uid: System.Reflection.MethodBase.IsFamilyAndAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamilyAndAssembly
  fullName: System.Reflection.MethodBase.IsFamilyAndAssembly
- uid: System.Reflection.MethodBase.IsFamilyOrAssembly
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFamilyOrAssembly
  fullName: System.Reflection.MethodBase.IsFamilyOrAssembly
- uid: System.Reflection.MethodBase.IsFinal
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsFinal
  fullName: System.Reflection.MethodBase.IsFinal
- uid: System.Reflection.MethodBase.IsGenericMethod
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsGenericMethod
  fullName: System.Reflection.MethodBase.IsGenericMethod
- uid: System.Reflection.MethodBase.IsGenericMethodDefinition
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsGenericMethodDefinition
  fullName: System.Reflection.MethodBase.IsGenericMethodDefinition
- uid: System.Reflection.MethodBase.IsHideBySig
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsHideBySig
  fullName: System.Reflection.MethodBase.IsHideBySig
- uid: System.Reflection.MethodBase.IsPrivate
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsPrivate
  fullName: System.Reflection.MethodBase.IsPrivate
- uid: System.Reflection.MethodBase.IsPublic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsPublic
  fullName: System.Reflection.MethodBase.IsPublic
- uid: System.Reflection.MethodBase.IsSpecialName
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsSpecialName
  fullName: System.Reflection.MethodBase.IsSpecialName
- uid: System.Reflection.MethodBase.IsStatic
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsStatic
  fullName: System.Reflection.MethodBase.IsStatic
- uid: System.Reflection.MethodBase.IsVirtual
  parent: System.Reflection.MethodBase
  isExternal: false
  name: IsVirtual
  fullName: System.Reflection.MethodBase.IsVirtual
- uid: System.Reflection.MethodBase.MethodImplementationFlags
  parent: System.Reflection.MethodBase
  isExternal: false
  name: MethodImplementationFlags
  fullName: System.Reflection.MethodBase.MethodImplementationFlags
- uid: System.Reflection.MethodBase.GetGenericArguments
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetGenericArguments()
  fullName: System.Reflection.MethodBase.GetGenericArguments()
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetGenericArguments
    name: GetGenericArguments
    fullName: System.Reflection.MethodBase.GetGenericArguments
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetGenericArguments
    name: GetGenericArguments
    fullName: System.Reflection.MethodBase.GetGenericArguments
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: GetMethodFromHandle(RuntimeMethodHandle)
  fullName: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
    name: GetMethodFromHandle
    fullName: System.Reflection.MethodBase.GetMethodFromHandle
  - name: (
    fullName: (
  - uid: System.RuntimeMethodHandle
    name: RuntimeMethodHandle
    fullName: System.RuntimeMethodHandle
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
    name: GetMethodFromHandle
    fullName: System.Reflection.MethodBase.GetMethodFromHandle
  - name: (
    fullName: (
  - uid: System.RuntimeMethodHandle
    name: RuntimeMethodHandle
    fullName: System.RuntimeMethodHandle
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)
  fullName: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle, System.RuntimeTypeHandle)
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
    name: GetMethodFromHandle
    fullName: System.Reflection.MethodBase.GetMethodFromHandle
  - name: (
    fullName: (
  - uid: System.RuntimeMethodHandle
    name: RuntimeMethodHandle
    fullName: System.RuntimeMethodHandle
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.RuntimeTypeHandle
    name: RuntimeTypeHandle
    fullName: System.RuntimeTypeHandle
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
    name: GetMethodFromHandle
    fullName: System.Reflection.MethodBase.GetMethodFromHandle
  - name: (
    fullName: (
  - uid: System.RuntimeMethodHandle
    name: RuntimeMethodHandle
    fullName: System.RuntimeMethodHandle
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.RuntimeTypeHandle
    name: RuntimeTypeHandle
    fullName: System.RuntimeTypeHandle
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.GetParameters
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetParameters()
  fullName: System.Reflection.MethodBase.GetParameters()
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetParameters
    name: GetParameters
    fullName: System.Reflection.MethodBase.GetParameters
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetParameters
    name: GetParameters
    fullName: System.Reflection.MethodBase.GetParameters
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  parent: System.Reflection.MethodBase
  isExternal: true
  name: Invoke(Object, Object[])
  fullName: System.Reflection.MethodBase.Invoke(System.Object, System.Object[])
  fullname.vb: System.Reflection.MethodBase.Invoke(System.Object, System.Object())
  name.vb: Invoke(Object, Object())
  spec.csharp:
  - uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
    name: Invoke
    fullName: System.Reflection.MethodBase.Invoke
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
    name: Invoke
    fullName: System.Reflection.MethodBase.Invoke
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.MethodBase.Equals(System.Object)
  parent: System.Reflection.MethodBase
  isExternal: true
  name: Equals(Object)
  fullName: System.Reflection.MethodBase.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MethodBase.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MethodBase.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MethodBase.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodBase.GetHashCode
  parent: System.Reflection.MethodBase
  isExternal: false
  name: GetHashCode()
  fullName: System.Reflection.MethodBase.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MethodBase.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MethodBase.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MethodBase.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MethodBase.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.MemberAccessException
  parent: System
  isExternal: false
  name: MemberAccessException
  fullName: System.MemberAccessException
- uid: System.MethodAccessException
  isExternal: false
  name: MethodAccessException
  fullName: System.MethodAccessException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.TargetInvocationException
  isExternal: false
  name: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
- uid: System.Reflection.TargetParameterCountException
  isExternal: false
  name: TargetParameterCountException
  fullName: System.Reflection.TargetParameterCountException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
