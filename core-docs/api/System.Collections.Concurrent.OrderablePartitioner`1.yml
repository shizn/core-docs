items:
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  commentId: T:System.Collections.Concurrent.OrderablePartitioner`1
  id: OrderablePartitioner`1
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)
  - System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  - System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  - System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  - System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  - System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  - System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  - System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  langs:
  - csharp
  - vb
  name: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  type: Class
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderablePartitioner
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 61
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Represents a particular manner of splitting an orderable data source into multiple partitions.</p>\n"
  remarks: "\n<p>The implementation of the derived class is responsible for ordering the elements into key-value pairs in whatever manner is appropriate. For more information, see Custom Partitioners for PLINQ and TPL.</p>\n"
  example:
  - "\n<p>The following example shows how to implement an orderable partitioner that returns one element at a time:</p>System.Collections.Concurrent.OrderablePartitioner#1"
  syntax:
    content: 'public abstract class OrderablePartitioner<TSource> : Partitioner<TSource>'
    content.vb: >-
      Public MustInherit Class OrderablePartitioner(Of TSource)
          Inherits Partitioner(Of TSource)
    typeParameters:
    - id: TSource
      description: Type of the elements in the collection.
  inheritance:
  - System.Object
  - System.Collections.Concurrent.Partitioner{{TSource}}
  inheritedMembers:
  - System.Collections.Concurrent.Partitioner{{TSource}}.SupportsDynamicPartitions
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  name.vb: OrderablePartitioner(Of TSource)
- uid: System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)
  id: '#ctor(System.Boolean,System.Boolean,System.Boolean)'
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: OrderablePartitioner(Boolean, Boolean, Boolean)
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.OrderablePartitioner(System.Boolean, System.Boolean, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 82
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Called from constructors in derived classes to initialize the <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1\" data-throw-if-not-resolved=\"false\"></xref> class with the specified constraints on the index keys.</p>\n"
  remarks: "\n<p>For more information, see Custom Partitioners for PLINQ and TPL.</p>\n"
  example:
  - 
  syntax:
    content: protected OrderablePartitioner(bool keysOrderedInEachPartition, bool keysOrderedAcrossPartitions, bool keysNormalized)
    content.vb: Protected Sub New(keysOrderedInEachPartition As Boolean, keysOrderedAcrossPartitions As Boolean, keysNormalized As Boolean)
    parameters:
    - id: keysOrderedInEachPartition
      type: System.Boolean
      description: "\nIndicates whether the elements in each partition are yielded in the order of\nincreasing keys.\n"
    - id: keysOrderedAcrossPartitions
      type: System.Boolean
      description: "\nIndicates whether elements in an earlier partition always come before\nelements in a later partition. If true, each element in partition 0 has a smaller order key than\nany element in partition 1, each element in partition 1 has a smaller order key than any element\nin partition 2, and so on.\n"
    - id: keysNormalized
      type: System.Boolean
      description: "\nIndicates whether keys are normalized. If true, all order keys are distinct\nintegers in the range [0 .. numberOfElements-1]. If false, order keys must still be distinct, but\nonly their relative order is considered, not their absolute values.\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).OrderablePartitioner(System.Boolean, System.Boolean, System.Boolean)
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  commentId: P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized
  id: KeysNormalized
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: KeysNormalized
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysNormalized
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeysNormalized
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 154
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets whether order keys are normalized.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized\" data-throw-if-not-resolved=\"false\"></xref> returns true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If the property returns false, order keys must still be distinct, but only their relative order is considered, not their absolute values.</p>\n<p>For more information, see Custom Partitioners for PLINQ and TPL.</p>\n"
  example:
  - 
  syntax:
    content: public bool KeysNormalized { get; }
    content.vb: Public ReadOnly Property KeysNormalized As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).KeysNormalized
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  commentId: P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions
  id: KeysOrderedAcrossPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: KeysOrderedAcrossPartitions
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysOrderedAcrossPartitions
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeysOrderedAcrossPartitions
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 144
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets whether elements in an earlier partition always come before elements in a later partition.</p>\n"
  remarks: "\n<p>If <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions\" data-throw-if-not-resolved=\"false\"></xref> returns true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.</p>\n<p>For more information, see Custom Partitioners for PLINQ and TPL.</p>\n"
  example:
  - 
  syntax:
    content: public bool KeysOrderedAcrossPartitions { get; }
    content.vb: Public ReadOnly Property KeysOrderedAcrossPartitions As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).KeysOrderedAcrossPartitions
- uid: System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  commentId: P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition
  id: KeysOrderedInEachPartition
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: KeysOrderedInEachPartition
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.KeysOrderedInEachPartition
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeysOrderedInEachPartition
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 134
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets whether elements in each partition are yielded in the order of increasing keys.</p>\n"
  remarks: "\n<p>For more information, see Custom Partitioners for PLINQ and TPL.</p>\n"
  example:
  - 
  syntax:
    content: public bool KeysOrderedInEachPartition { get; }
    content.vb: Public ReadOnly Property KeysOrderedInEachPartition As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).KeysOrderedInEachPartition
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions
  id: GetDynamicPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: GetDynamicPartitions()
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetDynamicPartitions()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDynamicPartitions
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 206
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Creates an object that can partition the underlying collection into a variable number of partitions.</p>\n"
  remarks: "\n<p> The returned object implements the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface. Calling <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> on the object creates another partition over the sequence.</p>\n<p>  The default implementation provides the same behavior as <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> except that the returned set of partitions does not provide the keys for the elements.</p>\n<p>  The <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> method is only supported if the <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property returns true.</p>\n<p>For more information, see Custom Partitioners for PLINQ and TPL.</p>\n"
  example:
  - 
  syntax:
    content: public override IEnumerable<TSource> GetDynamicPartitions()
    content.vb: Public Overrides Function GetDynamicPartitions As IEnumerable(Of TSource)
    return:
      type: IEnumerable{{TSource}}
      description: An object that can create partitions over the underlying data source.
  overridden: System.Collections.Concurrent.Partitioner{{TSource}}.GetDynamicPartitions
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Dynamic partitioning is not supported by the base class. It must be implemented in derived classes.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).GetDynamicPartitions()
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions
  id: GetOrderableDynamicPartitions
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: GetOrderableDynamicPartitions()
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetOrderableDynamicPartitions()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetOrderableDynamicPartitions
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 126
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Creates an object that can partition the underlying collection into a variable number of partitions.</p>\n"
  remarks: "\n<p> The returned object implements the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface. Calling <xref href=\"System.Collections.Generic.IEnumerable`1.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> on the object creates another partition over the sequence.</p>\n<p>  Each partition is represented as an enumerator over key-value pairs. The value in the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements.</p>\n<p>  The <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> method is only supported if the <xref href=\"System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions\" data-throw-if-not-resolved=\"false\"></xref> property returns true.</p>\n<p>For more information, see Custom Partitioners for PLINQ and TPL.</p>\n"
  example:
  - 
  syntax:
    content: public virtual IEnumerable<KeyValuePair<long, TSource>> GetOrderableDynamicPartitions()
    content.vb: Public Overridable Function GetOrderableDynamicPartitions As IEnumerable(Of KeyValuePair(Of Long, TSource))
    return:
      type: IEnumerable{KeyValuePair{System.Int64,{TSource}}}
      description: An object that can create partitions over the underlying data source.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Dynamic partitioning is not supported by this partitioner.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).GetOrderableDynamicPartitions()
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)
  id: GetOrderablePartitions(System.Int32)
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: GetOrderablePartitions(Int32)
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetOrderablePartitions(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetOrderablePartitions
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 99
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Partitions the underlying collection into the specified number of orderable partitions.</p>\n"
  remarks: "\n<p>Each partition is represented as an enumerator over key-value pairs.</p>\n<p> The value of the pair is the element itself, and the key is an integer which determines the relative ordering of this element against other elements in the data source.</p>\n<p>For more information, see Custom Partitioners for PLINQ and TPL.</p>\n"
  example:
  - 
  syntax:
    content: public abstract IList<IEnumerator<KeyValuePair<long, TSource>>> GetOrderablePartitions(int partitionCount)
    content.vb: Public MustOverride Function GetOrderablePartitions(partitionCount As Integer) As IList(Of IEnumerator(Of KeyValuePair(Of Long, TSource)))
    parameters:
    - id: partitionCount
      type: System.Int32
      description: The number of partitions to create.
    return:
      type: IList{IEnumerator{KeyValuePair{System.Int64,{TSource}}}}
      description: A list containing <em>partitionCount</em> enumerators.
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).GetOrderablePartitions(System.Int32)
- uid: System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  commentId: M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)
  id: GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.OrderablePartitioner`1
  langs:
  - csharp
  - vb
  name: GetPartitions(Int32)
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>.GetPartitions(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetPartitions
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/OrderablePartitioner.cs
    startLine: 165
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Partitions the underlying collection into the given number of ordered partitions.</p>\n"
  remarks: "\n<p>The default implementation provides the same behavior as <xref href=\"System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> except that the returned set of partitions does not provide the keys for the elements.</p>\n<p>For more information, see Custom Partitioners for PLINQ and TPL.</p>\n"
  example:
  - 
  syntax:
    content: public override IList<IEnumerator<TSource>> GetPartitions(int partitionCount)
    content.vb: Public Overrides Function GetPartitions(partitionCount As Integer) As IList(Of IEnumerator(Of TSource))
    parameters:
    - id: partitionCount
      type: System.Int32
      description: The number of partitions to create.
    return:
      type: IList{IEnumerator{{TSource}}}
      description: A list containing <em>partitionCount</em> enumerators.
  overridden: System.Collections.Concurrent.Partitioner{{TSource}}.GetPartitions(System.Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource).GetPartitions(System.Int32)
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Concurrent.Partitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.Partitioner`1
  name: Collections.Concurrent.Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  name.vb: Collections.Concurrent.Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Collections.Concurrent.Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Collections.Concurrent.Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner{{TSource}}.SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner{{TSource}}
  definition: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  name: SupportsDynamicPartitions
  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource).SupportsDynamicPartitions
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Collections.Concurrent.Partitioner<>
  fullName: System.Collections.Concurrent.Partitioner<>
  fullname.vb: System.Collections.Concurrent.Partitioner(Of )
  name.vb: Collections.Concurrent.Partitioner(Of )
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Collections.Concurrent.Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Collections.Concurrent.Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: SupportsDynamicPartitions
  fullName: System.Collections.Concurrent.Partitioner<TSource>.SupportsDynamicPartitions
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource).SupportsDynamicPartitions
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.Partitioner{{TSource}}.GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner{{TSource}}
  definition: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  name: GetDynamicPartitions()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions()
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    name: GetDynamicPartitions
    fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    name: GetDynamicPartitions
    fullName: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: Collections.Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: GetDynamicPartitions()
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions()
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions()
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    name: GetDynamicPartitions
    fullName: System.Collections.Concurrent.Partitioner<TSource>.GetDynamicPartitions
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions
    name: GetDynamicPartitions
    fullName: System.Collections.Concurrent.Partitioner(Of TSource).GetDynamicPartitions
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.Int64,{TSource}}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<Generic.KeyValuePair<Int64, TSource>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.Int64, TSource>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of System.Int64, TSource))
  name.vb: Generic.IEnumerable(Of Generic.KeyValuePair(Of Int64, TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{System.Int64,{TSource}}}}
  definition: System.Collections.Generic.IList`1
  name: Generic.IList<Generic.IEnumerator<Generic.KeyValuePair<Int64, TSource>>>
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<System.Int64, TSource>>>
  fullname.vb: System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of System.Int64, TSource)))
  name.vb: Generic.IList(Of Generic.IEnumerator(Of Generic.KeyValuePair(Of Int64, TSource)))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: Generic.KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IList<>
  fullName: System.Collections.Generic.IList<>
  fullname.vb: System.Collections.Generic.IList(Of )
  name.vb: Collections.Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Collections.Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner{{TSource}}.GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner{{TSource}}
  definition: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  name: GetPartitions(Int32)
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(System.Int32)
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions(System.Int32)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    name: GetPartitions
    fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    name: GetPartitions
    fullName: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{System.Collections.Generic.IEnumerator{{TSource}}}
  definition: System.Collections.Generic.IList`1
  name: Generic.IList<Generic.IEnumerator<TSource>>
  fullName: System.Collections.Generic.IList<System.Collections.Generic.IEnumerator<TSource>>
  fullname.vb: System.Collections.Generic.IList(Of System.Collections.Generic.IEnumerator(Of TSource))
  name.vb: Generic.IList(Of Generic.IEnumerator(Of TSource))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
  parent: System.Collections.Concurrent.Partitioner`1
  isExternal: true
  name: GetPartitions(Int32)
  fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions(System.Int32)
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions(System.Int32)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    name: GetPartitions
    fullName: System.Collections.Concurrent.Partitioner<TSource>.GetPartitions
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)
    name: GetPartitions
    fullName: System.Collections.Concurrent.Partitioner(Of TSource).GetPartitions
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
