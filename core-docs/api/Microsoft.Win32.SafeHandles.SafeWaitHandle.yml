items:
- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle
  commentId: T:Microsoft.Win32.SafeHandles.SafeWaitHandle
  id: SafeWaitHandle
  parent: Microsoft.Win32.SafeHandles
  children:
  - Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)
  - Microsoft.Win32.SafeHandles.SafeWaitHandle.IsInvalid
  - Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle
  langs:
  - csharp
  - vb
  name: SafeWaitHandle
  fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle
  type: Class
  source:
    remote:
      path: src/mscorlib/src/Microsoft/Win32/SafeHandles/SafeWaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SafeWaitHandle
    path: src/mscorlib/src/Microsoft/Win32/SafeHandles/SafeWaitHandle.cs
    startLine: 26
  assemblies:
  - System.Runtime.Handles
  namespace: Microsoft.Win32.SafeHandles
  summary: 'Represents a wrapper class for a wait handle. '
  syntax:
    content: 'public sealed class SafeWaitHandle : SafeHandle'
    content.vb: >-
      Public NotInheritable Class SafeWaitHandle
          Inherits SafeHandle
  inheritance:
  - System.Object
  - System.Runtime.InteropServices.SafeHandle
  inheritedMembers:
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)
  commentId: M:Microsoft.Win32.SafeHandles.SafeWaitHandle.#ctor(System.IntPtr,System.Boolean)
  id: '#ctor(System.IntPtr,System.Boolean)'
  parent: Microsoft.Win32.SafeHandles.SafeWaitHandle
  langs:
  - csharp
  - vb
  name: SafeWaitHandle(IntPtr, Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle.SafeWaitHandle(System.IntPtr, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/Microsoft/Win32/SafeHandles/SafeWaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/Microsoft/Win32/SafeHandles/SafeWaitHandle.cs
    startLine: 34
  assemblies:
  - System.Runtime.Handles
  namespace: Microsoft.Win32.SafeHandles
  summary: 'Initializes a new instance of the <xref href="Microsoft.Win32.SafeHandles.SafeWaitHandle" data-throw-if-not-resolved="false"></xref> class. '
  syntax:
    content: public SafeWaitHandle(IntPtr existingHandle, bool ownsHandle)
    content.vb: Public Sub New(existingHandle As IntPtr, ownsHandle As Boolean)
    parameters:
    - id: existingHandle
      type: System.IntPtr
      description: An <xref href="System.IntPtr" data-throw-if-not-resolved="false"></xref> object that represents the pre-existing handle to use.
    - id: ownsHandle
      type: System.Boolean
      description: true to reliably release the handle during the finalization phase; false to prevent reliable release (not recommended).
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle
  commentId: M:Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle
  id: ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafeWaitHandle
  langs:
  - csharp
  - vb
  name: ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle.ReleaseHandle()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/Microsoft/Win32/SafeHandles/SafeWaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReleaseHandle
    path: src/mscorlib/src/Microsoft/Win32/SafeHandles/SafeWaitHandle.cs
    startLine: 40
  assemblies:
  - System.Runtime.Handles
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: protected override bool ReleaseHandle()
    content.vb: Protected Overrides Function ReleaseHandle As Boolean
    return:
      type: System.Boolean
  overridden: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle.IsInvalid
  commentId: P:Microsoft.Win32.SafeHandles.SafeWaitHandle.IsInvalid
  id: IsInvalid
  parent: Microsoft.Win32.SafeHandles.SafeWaitHandle
  langs:
  - csharp
  - vb
  name: IsInvalid
  fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle.IsInvalid
  type: Property
  source:
    remote:
      path: src/System.Runtime.Handles/ref/System.Runtime.Handles.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInvalid
    path: src/System.Runtime.Handles/ref/System.Runtime.Handles.Manual.cs
    startLine: 13
  assemblies:
  - System.Runtime.Handles
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: public override bool IsInvalid { get; }
    content.vb: Public Overrides ReadOnly Property IsInvalid As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.Runtime.InteropServices.SafeHandle.IsInvalid
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: Runtime.InteropServices.SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.Runtime.InteropServices.SafeHandle.handle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: handle
  fullName: System.Runtime.InteropServices.SafeHandle.handle
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsClosed
  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousAddRef(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousGetHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousRelease()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose()
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: SetHandle(IntPtr)
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
  - name: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
  - name: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandleAsInvalid()
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: ReleaseHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: ReleaseHandle
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: ReleaseHandle
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsInvalid
  fullName: System.Runtime.InteropServices.SafeHandle.IsInvalid
