items:
- uid: System.Diagnostics.Contracts.Contract
  commentId: T:System.Diagnostics.Contracts.Contract
  id: Contract
  parent: System.Diagnostics.Contracts
  children:
  - System.Diagnostics.Contracts.Contract.Assert(System.Boolean)
  - System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.Assume(System.Boolean)
  - System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.ContractFailed
  - System.Diagnostics.Contracts.Contract.EndContractBlock
  - System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)
  - System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)
  - System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})
  - System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  - System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})
  - System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  - System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)
  - System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.OldValue``1(``0)
  - System.Diagnostics.Contracts.Contract.Requires(System.Boolean)
  - System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)
  - System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.Result``1
  - System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)
  langs:
  - csharp
  - vb
  name: Contract
  fullName: System.Diagnostics.Contracts.Contract
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contract
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 10
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.</p>\n"
  remarks: "\n<p>Code contract classes let you specify preconditions, postconditions, and object invariants in your code. Preconditions are requirements that must be met when entering a method or property. Postconditions describe expectations at the time the method or property code exits. Object invariants describe the expected state for a class that has no condition problems. For more information about preconditions, postconditions, and object invariants, see Code Contracts.</p>\n<p>For tools and detailed instructions for using code contracts, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=152461\">Code Contracts</see> on the MSDN DevLabs Web site.</p>\n<p>You must use a binary rewriter to insert run-time enforcement of contracts. Otherwise, contracts such as the <see cref=\"Overload:System.Diagnostics.Contracts.Contract.Ensures\"></see> method can only be tested statically and will not throw exceptions during run time if a contract is violated. You can download the binary rewriter CCRewrite from <see href=\"http://go.microsoft.com/fwlink/?LinkId=152461\">Code Contracts</see> on the MSDN DevLabs Web site. CCRewrite comes with a Visual Studio add-in that enables you to activate run-time contract enforcement from the project Properties page. The binary rewriter and the Visual Studio add-in do not ship with Visual Studio 2010 or the Windows SDK.</p>\n"
  syntax:
    content: 'public class Contract : object'
    content.vb: >-
      Public Class Contract
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Diagnostics.Contracts.Contract.ContractFailed
  commentId: E:System.Diagnostics.Contracts.Contract.ContractFailed
  id: ContractFailed
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: ContractFailed
  fullName: System.Diagnostics.Contracts.Contract.ContractFailed
  type: Event
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContractFailed
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 12
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Occurs when a contract fails.</p>\n"
  remarks: "\n<p>The event information for this event is supplied by the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object that is passed to the event handler. This event notifies a managed application environment such as an interactive interpreter or a Web browser host that a contract has failed. Before doing so, it will raise an event that an application can handle as it sees fit. For example, if code is being run in a testing framework, you can log a test failure and then end the test. </p>\n<p>The default implementation of the <xref href=\"System.Diagnostics.Contracts.Internal.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)\" data-throw-if-not-resolved=\"false\"></xref> method in the .NET Framework class library is to call each handler that is registered with the <xref href=\"System.Diagnostics.Contracts.Contract.ContractFailed\" data-throw-if-not-resolved=\"false\"></xref> event. Exceptions thrown by handlers are ignored, but each handler can indicate whether the failure is handled by calling the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled\" data-throw-if-not-resolved=\"false\"></xref> method for the event arguments. If any handler sets the failure as handled, the method returns <strong>null</strong> and no further action is taken. Alternatively, handlers can call the <xref href=\"System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind\" data-throw-if-not-resolved=\"false\"></xref> method to instruct the code to unwind. In that case, an exception is thrown after all handlers have executed.</p>\n"
  syntax:
    content: public static event EventHandler<ContractFailedEventArgs> ContractFailed
    content.vb: Public Shared Event ContractFailed As EventHandler(Of ContractFailedEventArgs)
    return:
      type: System.EventHandler{System.Diagnostics.Contracts.ContractFailedEventArgs}
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)
  id: Assert(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Assert(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.Assert(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assert
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 13
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Checks for a condition; if the condition is <strong>false</strong>, follows the escalation policy set for the analyzer.</p>\n"
  remarks: "\n<p>The default escalation policy is to notify the attached debugger about a contract failure or to display an Assert dialog box if a debugger is not attached. Optionally, the analyzer can be instructed to throw an exception.</p>\n"
  syntax:
    content: public static void Assert(bool condition)
    content.vb: Public Shared Sub Assert(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)
  id: Assert(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Assert(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.Assert(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assert
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 16
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Checks for a condition; if the condition is <strong>false</strong>, follows the escalation policy set by the analyzer and displays the specified message.</p>\n"
  remarks: "\n<p>The default escalation policy is to notify the attached debugger about a contract failure or to display an Assert dialog box if a debugger is not attached. Optionally, the analyzer can be instructed to throw an exception. The <em>userMessage</em> parameter is passed to the debugger output. If <em>userMessage</em> is not a constant string literal, tools may not be able to read it.</p>\n"
  syntax:
    content: public static void Assert(bool condition, string userMessage)
    content.vb: Public Shared Sub Assert(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>A message to display if the condition is not met.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)
  id: Assume(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Assume(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.Assume(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assume
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 19
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Instructs code analysis tools to assume that the specified condition is <strong>true</strong>, even if it cannot be statically proven to always be <strong>true</strong>.</p>\n"
  remarks: "\n<p>At run time, using this method is equivalent to using the <xref href=\"System.Diagnostics.Contracts.Contract.Assert(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public static void Assume(bool condition)
    content.vb: Public Shared Sub Assume(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to assume <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)
  id: Assume(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Assume(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.Assume(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assume
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 22
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Instructs code analysis tools to assume that a condition is <strong>true</strong>, even if it cannot be statically proven to always be <strong>true</strong>, and displays a message if the assumption fails.</p>\n"
  remarks: "\n<p>If <em>userMessage</em> is not a constant string literal, the contract may not be understood by tools.</p>\n<p>At run time, using this method is equivalent to using the <xref href=\"System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public static void Assume(bool condition, string userMessage)
    content.vb: Public Shared Sub Assume(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to assume <strong>true</strong>.</p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>The message to post if the assumption fails.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.EndContractBlock
  commentId: M:System.Diagnostics.Contracts.Contract.EndContractBlock
  id: EndContractBlock
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: EndContractBlock()
  fullName: System.Diagnostics.Contracts.Contract.EndContractBlock()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EndContractBlock
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 25
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Marks the end of the contract section when a method's contracts contain only preconditions in the <strong>if</strong>-<strong>then</strong>-<strong>throw</strong> form.</p>\n"
  remarks: "\n<p>Most code already contains some parameter validation in the form of <strong>if</strong>-<strong>then</strong>-<strong>throw</strong> code. The contract tools recognize <strong>if</strong>-<strong>then</strong>-<strong>throw</strong> statements as preconditions when the statements appear first inside a method, and the entire set of such statements is followed by an explicit <xref href=\"System.Diagnostics.Contracts.Contract\" data-throw-if-not-resolved=\"false\"></xref> method call, such as a <see cref=\"Overload:System.Diagnostics.Contracts.Contract.Requires\"></see>, <see cref=\"Overload:System.Diagnostics.Contracts.Contract.Ensures\"></see>, <see cref=\"Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow\"></see>, or <xref href=\"System.Diagnostics.Contracts.Contract.EndContractBlock\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>When <strong>if</strong>-<strong>then</strong>-<strong>throw</strong> statements appear in this form, the contract tools recognize them as legacy-require statements. The <xref href=\"System.Diagnostics.Contracts.Contract.EndContractBlock\" data-throw-if-not-resolved=\"false\"></xref> form is used only if no other contracts follow the <strong>if</strong>-<strong>then</strong>-<strong>throw</strong> sequences, but they should still be tagged as legacy-requires.</p>\n"
  syntax:
    content: public static void EndContractBlock()
    content.vb: Public Shared Sub
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)
  id: Ensures(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Ensures(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Ensures
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 27
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a postcondition contract for the enclosing method or property.</p>\n"
  remarks: "\n<p>The <em>condition</em> parameter specifies a postcondition that is expected to be <strong>true</strong> when the enclosing method or property returns normally.</p>\n<ul><li>\n<p>This method call must be at the beginning of a method or property, before any other code.</p>\n</li><li>\n<p>You must use the binary rewriter (available at <see href=\"http://go.microsoft.com/fwlink/?LinkId=152461\">Code Contracts</see> on the MSDN DevLabs Web site) for run-time enforcement of this postcondition. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that an expected value is returned. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Contracts.ContractClassAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ContractExample#3"
  syntax:
    content: public static void Ensures(bool condition)
    content.vb: Public Shared Sub Ensures(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test. The expression may include <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)
  id: Ensures(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Ensures(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Ensures
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 29
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a postcondition contract for a provided exit condition and a message to display if the condition is <strong>false</strong>.</p>\n"
  remarks: "\n<p>The <em>condition</em> parameter specifies a postcondition that is expected to be <strong>true</strong> when the enclosing method or property returns normally. </p>\n<ul><li>\n<p>This method call must be at the beginning of a method or property, before any other code.</p>\n</li><li>\n<p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</p>\n</li><li>\n<p>You must use the binary rewriter (available at <see href=\"http://go.microsoft.com/fwlink/?LinkId=152461\">Code Contracts</see> on the MSDN DevLabs Web site) for run-time enforcement of this postcondition.</p>\n</li><li>\n<p>If <em>userMessage</em> is not a constant string literal, the contract may not be understood by tools.</p>\n</li></ul>\n"
  syntax:
    content: public static void Ensures(bool condition, string userMessage)
    content.vb: Public Shared Sub Ensures(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test. The expression may include <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>The message to display if the expression is not <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)
  id: EnsuresOnThrow``1(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: EnsuresOnThrow<TException>(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.EnsuresOnThrow<TException>(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnsuresOnThrow
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 31
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.</p>\n"
  remarks: "\n<p>The <em>condition</em> parameter specifies a postcondition that is expected to be <strong>true</strong> when the enclosing method or property terminates abnormally and an exception of type <em>TException</em> is thrown.</p>\n<ul><li>\n<p>This method call must be at the beginning of a method or property, before any other code.</p>\n</li><li>\n<p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</p>\n</li><li>\n<p>You must use the binary rewriter for run-time enforcement of this postcondition.</p>\n</li></ul>\n"
  syntax:
    content: 'public static void EnsuresOnThrow<TException>(bool condition)where TException : Exception'
    content.vb: Public Shared Sub EnsuresOnThrow(Of TException As Exception)(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    typeParameters:
    - id: TException
      description: "\n<p>The type of exception that invokes the postcondition check.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.EnsuresOnThrow(Of TException)(System.Boolean)
  name.vb: EnsuresOnThrow(Of TException)(Boolean)
- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)
  id: EnsuresOnThrow``1(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: EnsuresOnThrow<TException>(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.EnsuresOnThrow<TException>(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnsuresOnThrow
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 33
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a postcondition contract and a message to display if the condition is <strong>false</strong> for the enclosing method or property, based on the provided exception and condition.</p>\n"
  remarks: "\n<p>The <em>condition</em> parameter specifies a postcondition that is expected to be <strong>true</strong> when the enclosing method or property terminates abnormally and an exception of type <em>TException</em> is thrown. The <em>message</em> parameter specifies a message to display if the condition is <strong>false</strong>.</p>\n<ul><li>\n<p>This method call must be at the beginning of a method or property, before any other code.</p>\n</li><li>\n<p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</p>\n</li><li>\n<p>You must use the binary rewriter for run-time enforcement of this postcondition.</p>\n</li><li>\n<p>If <em>userMessage</em> is not a constant string literal, the contract may not be understood by tools.</p>\n</li></ul>\n"
  syntax:
    content: 'public static void EnsuresOnThrow<TException>(bool condition, string userMessage)where TException : Exception'
    content.vb: Public Shared Sub EnsuresOnThrow(Of TException As Exception)(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>The message to display if the expression is <strong>false</strong>.</p>\n"
    typeParameters:
    - id: TException
      description: "\n<p>The type of exception that invokes the postcondition check.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.EnsuresOnThrow(Of TException)(System.Boolean, System.String)
  name.vb: EnsuresOnThrow(Of TException)(Boolean, String)
- uid: System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})
  commentId: M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})
  id: Exists(System.Int32,System.Int32,System.Predicate{System.Int32})
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Exists(Int32, Int32, Predicate<Int32>)
  fullName: System.Diagnostics.Contracts.Contract.Exists(System.Int32, System.Int32, System.Predicate<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exists
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 35
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Determines whether a specified test is true for any integer within a range of integers.</p>\n"
  remarks: "\n<p>The <em>toExclusive</em> parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0. For example, it would be set to 5 for integers 0 through 4.</p>\n"
  syntax:
    content: public static bool Exists(int fromInclusive, int toExclusive, Predicate<int> predicate)
    content.vb: Public Shared Function Exists(fromInclusive As Integer, toExclusive As Integer, predicate As Predicate(Of Integer)) As Boolean
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: "\n<p>The first integer to pass to <em>predicate</em>.</p>\n"
    - id: toExclusive
      type: System.Int32
      description: "\n<p>One more than the last integer to pass to <em>predicate</em>.</p>\n"
    - id: predicate
      type: System.Predicate{System.Int32}
      description: "\n<p>The function to evaluate for any value of the integer in the specified range.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>predicate</em> returns <strong>true</strong> for any integer starting from <em>fromInclusive</em> to <em>toExclusive</em> - 1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>toExclusive </em>is less than <em>fromInclusive</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.Exists(System.Int32, System.Int32, System.Predicate(Of System.Int32))
  name.vb: Exists(Int32, Int32, Predicate(Of Int32))
- uid: System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  commentId: M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  id: Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Exists<T>(Collections.Generic.IEnumerable<T>, Predicate<T>)
  fullName: System.Diagnostics.Contracts.Contract.Exists<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exists
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 36
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Determines whether an element within a collection of elements exists within a function.</p>\n"
  syntax:
    content: public static bool Exists<T>(Collections.Generic.IEnumerable<T> collection, Predicate<T> predicate)
    content.vb: Public Shared Function Exists(Of T)(collection As Collections.Generic.IEnumerable(Of T), predicate As Predicate(Of T)) As Boolean
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>The collection from which elements of type <em>T</em> will be drawn to pass to <em>predicate</em>.</p>\n"
    - id: predicate
      type: System.Predicate{{T}}
      description: "\n<p>The function to evaluate for an element in <em>collection</em>.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type that is contained in <em>collection</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if and only if <em>predicate</em> returns <strong>true</strong> for any element of type <em>T</em> in <em>collection</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.Exists(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))
  name.vb: Exists(Of T)(Collections.Generic.IEnumerable(Of T), Predicate(Of T))
- uid: System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})
  commentId: M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})
  id: ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: ForAll(Int32, Int32, Predicate<Int32>)
  fullName: System.Diagnostics.Contracts.Contract.ForAll(System.Int32, System.Int32, System.Predicate<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForAll
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 37
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Determines whether a particular condition is valid for all integers in a specified range.</p>\n"
  remarks: "\n<p>The <em>toExclusive</em> parameter is one more than the last integer to facilitate using the length of a range of integers starting at 0. For example, it would be set to 5 for integers 0 through 4.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether an array has a null element. </p>Contract.ForAllExample#1"
  syntax:
    content: public static bool ForAll(int fromInclusive, int toExclusive, Predicate<int> predicate)
    content.vb: Public Shared Function ForAll(fromInclusive As Integer, toExclusive As Integer, predicate As Predicate(Of Integer)) As Boolean
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: "\n<p>The first integer to pass to <em>predicate</em>.</p>\n"
    - id: toExclusive
      type: System.Int32
      description: "\n<p>One more than the last integer to pass to <em>predicate</em>.</p>\n"
    - id: predicate
      type: System.Predicate{System.Int32}
      description: "\n<p>The function to evaluate for the existence of the integers in the specified range.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>predicate</em> returns <strong>true</strong> for all integers starting from <em>fromInclusive</em> to <em>toExclusive</em> - 1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>toExclusive </em>is less than <em>fromInclusive</em>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.ForAll(System.Int32, System.Int32, System.Predicate(Of System.Int32))
  name.vb: ForAll(Int32, Int32, Predicate(Of Int32))
- uid: System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  commentId: M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  id: ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: ForAll<T>(Collections.Generic.IEnumerable<T>, Predicate<T>)
  fullName: System.Diagnostics.Contracts.Contract.ForAll<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForAll
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 38
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Determines whether all the elements in a collection exist within a function.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether a collection has a null element. </p>Contract.ForAllExample#1"
  syntax:
    content: public static bool ForAll<T>(Collections.Generic.IEnumerable<T> collection, Predicate<T> predicate)
    content.vb: Public Shared Function ForAll(Of T)(collection As Collections.Generic.IEnumerable(Of T), predicate As Predicate(Of T)) As Boolean
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>The collection from which elements of type <em>T</em> will be drawn to pass to <em>predicate</em>.</p>\n"
    - id: predicate
      type: System.Predicate{{T}}
      description: "\n<p>The function to evaluate for the existence of all the elements in <em>collection</em>.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type that is contained in <em>collection</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if and only if <em>predicate</em> returns <strong>true</strong> for all elements of type <em>T</em> in <em>collection</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.ForAll(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))
  name.vb: ForAll(Of T)(Collections.Generic.IEnumerable(Of T), Predicate(Of T))
- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)
  id: Invariant(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Invariant(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Invariant
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 39
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies an invariant contract for the enclosing method or property. </p>\n"
  remarks: "\n<p>\n<xref href=\"System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> contracts are contained within a method that is identified by the <xref href=\"System.Diagnostics.Contracts.ContractInvariantMethodAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute; typically, the method is named <code>ObjectInvariant</code>.</p>\n<ul><li>\n<p>This contract can be specified only in a dedicated invariant method that is declared on a class. If the method is not sealed, it should refer only to protected members, not private members, so that subclasses can be sure to maintain the invariants.</p>\n</li><li>\n<p>This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.</p>\n</li><li>\n<p>You must use the binary rewriter for run-time enforcement of this invariant.</p>\n</li><li>\n<p>Invariants are conditionally defined based on the presence of the <strong>CONTRACTS FULL</strong> symbol. During run-time checking, invariants are checked at the end of each public method. If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class. This also happens if the class is re-entered because of a call to a method on another class. </p>\n</li></ul>\n"
  syntax:
    content: public static void Invariant(bool condition)
    content.vb: Public Shared Sub Invariant(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)
  id: Invariant(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Invariant(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Invariant
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 41
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)\" data-throw-if-not-resolved=\"false\"></xref> contracts are contained within a method that is identified by the <xref href=\"System.Diagnostics.Contracts.ContractInvariantMethodAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute; typically, the method is named <code>ObjectInvariant</code>.</p>\n<ul><li>\n<p>This contract can be specified only in a dedicated invariant method that is declared on a class.</p>\n</li><li>\n<p>This contract is not exposed to clients; therefore, it may reference members that are less visible than the enclosing method.</p>\n</li><li>\n<p>You must use the binary rewriter for run-time enforcement of this invariant.</p>\n</li><li>\n<p>Invariants are conditionally defined on the <strong>CONTRACTS FULL</strong> symbol. During run-time checking, invariants are checked at the end of each public method. If an invariant mentions a public method in the same class, the invariant check that would normally happen at the end of that public method is disabled and checked only at the end of the outermost method call to that class. This also happens if the class is re-entered because of a call to a method on another class.</p>\n</li></ul>\n"
  syntax:
    content: public static void Invariant(bool condition, string userMessage)
    content.vb: Public Shared Sub Invariant(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>The message to display if the condition is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.OldValue``1(``0)
  commentId: M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)
  id: OldValue``1(``0)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: OldValue<T>(T)
  fullName: System.Diagnostics.Contracts.Contract.OldValue<T>(T)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OldValue
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 43
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Represents values as they were at the start of a method or property.</p>\n"
  remarks: "\n<p>This method can be used only in the conditional expression for the <see cref=\"Overload:System.Diagnostics.Contracts.Contract.Ensures\"></see> contract.</p>\n"
  example:
  - "\n<p>The following example shows the use of the <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that a count has been updated. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Contracts.ContractClassAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ContractExample#5"
  syntax:
    content: public static T OldValue<T>(T value)
    content.vb: Public Shared Function OldValue(Of T)(value As T) As T
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The value to represent (field or parameter).</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of value.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The value of the parameter or field at the start of a method or property.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.OldValue(Of T)(T)
  name.vb: OldValue(Of T)(T)
- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)
  id: Requires(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Requires(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.Requires(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Requires
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 44
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a precondition contract for the enclosing method or property.</p>\n"
  remarks: "\n<ul><li>\n<p>This method call must be at the beginning of a method or property, before any other code.</p>\n</li><li>\n<p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</p>\n</li><li>\n<p>Use this method instead of the <xref href=\"System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method when backward compatibility does not force you to throw a particular exception.</p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: public static void Requires(bool condition)
    content.vb: Public Shared Sub Requires(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)
  id: Requires(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Requires(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.Requires(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Requires
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 46
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.</p>\n"
  remarks: "\n<ul><li>\n<p>This method call must be at the beginning of a method or property, before any other code.</p>\n</li><li>\n<p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</p>\n</li><li>\n<p>Use this method instead of the <xref href=\"System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method when backward compatibility does not force you to throw a particular exception.</p>\n</li></ul>\n"
  example:
  - 
  syntax:
    content: public static void Requires(bool condition, string userMessage)
    content.vb: Public Shared Sub Requires(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>The message to display if the condition is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)
  id: Requires``1(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Requires<TException>(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.Requires<TException>(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Requires
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 48
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.</p>\n"
  remarks: "\n<p>You must turn on run-time checking to use the <xref href=\"System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method. If run-time checking is turned off, the process will be terminated. To obtain the tools for runtime checking, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=152461\">Code Contracts</see> on the MSDN DevLabs Web site. </p>\n<ul><li>\n<p>This method call must be at the beginning of a method or property, before any other code.</p>\n</li><li>\n<p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</p>\n</li><li>\n<p>Use this method instead of the <xref href=\"System.Diagnostics.Contracts.Contract.Requires(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method when you want to throw an exception if the precondition fails. </p>\n</li></ul>\n"
  syntax:
    content: 'public static void Requires<TException>(bool condition)where TException : Exception'
    content.vb: Public Shared Sub Requires(Of TException As Exception)(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    typeParameters:
    - id: TException
      description: "\n<p>The exception to throw if the condition is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.Requires(Of TException)(System.Boolean)
  name.vb: Requires(Of TException)(Boolean)
- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)
  id: Requires``1(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Requires<TException>(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.Requires<TException>(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Requires
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 49
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.</p>\n"
  remarks: "\n<ul><li>\n<p>You must turn on run-time checking to use the <xref href=\"System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. If run-time checking is turned off, the process will be terminated. To obtain the tools for runtime checking, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=152461\">Code Contracts</see> on the MSDN DevLabs Web site.</p>\n<p>This method call must be at the beginning of a method or property, before any other code.</p>\n</li><li>\n<p>This contract is exposed to clients; therefore, it must only reference members that are at least as visible as the enclosing method.</p>\n</li><li>\n<p>Use this method instead of the <xref href=\"System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method when you want to throw an exception if the precondition fails. </p>\n</li></ul>\n"
  syntax:
    content: 'public static void Requires<TException>(bool condition, string userMessage)where TException : Exception'
    content.vb: Public Shared Sub Requires(Of TException As Exception)(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>The message to display if the condition is <strong>false</strong>.</p>\n"
    typeParameters:
    - id: TException
      description: "\n<p>The exception to throw if the condition is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.Requires(Of TException)(System.Boolean, System.String)
  name.vb: Requires(Of TException)(Boolean, String)
- uid: System.Diagnostics.Contracts.Contract.Result``1
  commentId: M:System.Diagnostics.Contracts.Contract.Result``1
  id: Result``1
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Result<T>()
  fullName: System.Diagnostics.Contracts.Contract.Result<T>()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Result
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 50
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Represents the return value of a method or property.</p>\n"
  remarks: "\n<p>This method can be used only in the conditional expression for the <see cref=\"Overload:System.Diagnostics.Contracts.Contract.Ensures\"></see> contract.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\" data-throw-if-not-resolved=\"false\"></xref> method to specify an expected return value. This code example is part of a larger example provided for the <xref href=\"System.Diagnostics.Contracts.ContractClassAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ContractExample#3"
  syntax:
    content: public static T Result<T>()
    content.vb: Public Shared Function Result(Of T) As T
    typeParameters:
    - id: T
      description: "\n<p>Type of return value of the enclosing method or property.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>Return value of the enclosing method or property.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.Result(Of T)()
  name.vb: Result(Of T)()
- uid: System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)
  commentId: M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)
  id: ValueAtReturn``1(``0@)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: ValueAtReturn<T>(out T)
  fullName: System.Diagnostics.Contracts.Contract.ValueAtReturn<T>(out T)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueAtReturn
    path: src/System.Diagnostics.Contracts/ref/System.Diagnostics.Contracts.cs
    startLine: 51
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Represents the final (output) value of an <strong>out</strong> parameter when returning from a method.</p>\n"
  remarks: "\n<p>This method can be used only in the conditional expression for the <see cref=\"Overload:System.Diagnostics.Contracts.Contract.Ensures\"></see> contract. As with the <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\" data-throw-if-not-resolved=\"false\"></xref> method, you can omit the generic type parameter whenever the compiler is able to infer its type. The contract rewriter replaces the method call with the value of the <strong>out</strong> parameter. The <xref href=\"System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\" data-throw-if-not-resolved=\"false\"></xref> method may appear only in postconditions. The argument to the method must be an <strong>out</strong> parameter or a field of a structure <strong>out</strong> parameter. The latter is also useful when referring to fields in the postcondition of a structure constructor.</p>\n"
  syntax:
    content: public static T ValueAtReturn<T>(out T value)
    content.vb: Public Shared Function ValueAtReturn(Of T)(ByRef value As T) As T
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The <strong>out</strong> parameter.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the <strong>out</strong> parameter.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The output value of the <strong>out</strong> parameter.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.ValueAtReturn(Of T)(ByRef T)
  name.vb: ValueAtReturn(Of T)(ByRef T)
references:
- uid: System.Diagnostics.Contracts
  isExternal: false
  name: System.Diagnostics.Contracts
  fullName: System.Diagnostics.Contracts
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.EventHandler{System.Diagnostics.Contracts.ContractFailedEventArgs}
  definition: System.EventHandler`1
  name: EventHandler<ContractFailedEventArgs>
  fullName: System.EventHandler<System.Diagnostics.Contracts.ContractFailedEventArgs>
  fullname.vb: System.EventHandler(Of System.Diagnostics.Contracts.ContractFailedEventArgs)
  name.vb: EventHandler(Of ContractFailedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Diagnostics.Contracts.ContractFailedEventArgs
    name: ContractFailedEventArgs
    fullName: System.Diagnostics.Contracts.ContractFailedEventArgs
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Diagnostics.Contracts.ContractFailedEventArgs
    name: ContractFailedEventArgs
    fullName: System.Diagnostics.Contracts.ContractFailedEventArgs
  - name: )
    fullName: )
- uid: System.EventHandler`1
  isExternal: false
  name: EventHandler<>
  fullName: System.EventHandler<>
  fullname.vb: System.EventHandler(Of )
  name.vb: EventHandler(Of )
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    fullName: System.EventHandler
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    fullName: System.EventHandler
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Predicate{System.Int32}
  definition: System.Predicate`1
  name: Predicate<Int32>
  fullName: System.Predicate<System.Int32>
  fullname.vb: System.Predicate(Of System.Int32)
  name.vb: Predicate(Of Int32)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<>
  fullName: System.Predicate<>
  fullname.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Collections.Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Predicate{{T}}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  fullName: System.Predicate<T>
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
