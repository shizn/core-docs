items:
- uid: System.Threading.CancellationTokenSource
  commentId: T:System.Threading.CancellationTokenSource
  id: CancellationTokenSource
  parent: System.Threading
  children:
  - System.Threading.CancellationTokenSource.#ctor
  - System.Threading.CancellationTokenSource.#ctor(System.Int32)
  - System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)
  - System.Threading.CancellationTokenSource.Cancel
  - System.Threading.CancellationTokenSource.Cancel(System.Boolean)
  - System.Threading.CancellationTokenSource.CancelAfter(System.Int32)
  - System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)
  - System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)
  - System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])
  - System.Threading.CancellationTokenSource.Dispose
  - System.Threading.CancellationTokenSource.Dispose(System.Boolean)
  - System.Threading.CancellationTokenSource.IsCancellationRequested
  - System.Threading.CancellationTokenSource.Token
  langs:
  - csharp
  - vb
  name: CancellationTokenSource
  fullName: System.Threading.CancellationTokenSource
  type: Class
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CancellationTokenSource
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 179
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Signals to a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that it should be canceled.</p>\n"
  remarks: "\n<p>Starting with the .NET Framework 4, the .NET Framework uses a unified model for cooperative cancellation of asynchronous or long-running synchronous operations that involves two objects: </p>\n<ul><li>\n<p>A <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> object, which provides a cancellation token through its <xref href=\"System.Threading.CancellationTokenSource.Token\" data-throw-if-not-resolved=\"false\"></xref> property and sends a cancellation message by calling its <xref href=\"System.Threading.CancellationTokenSource.Cancel\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.CancellationTokenSource.CancelAfter(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n</li><li>\n<p>A <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> object, which indicates whether cancellation is requested. </p>\n</li></ul>\n<p>The general pattern for implementing the cooperative cancellation model is: </p>\n<ul><li>\n<p>Instantiate a <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> object, which manages and sends cancellation notification to the individual cancellation tokens. </p>\n</li><li>\n<p>Pass the token returned by the <xref href=\"System.Threading.CancellationTokenSource.Token\" data-throw-if-not-resolved=\"false\"></xref> property to each task or thread that listens for cancellation. </p>\n</li><li>\n<p>Call the <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\" data-throw-if-not-resolved=\"false\"></xref> method from operations that receive the cancellation token. Provide a mechanism for each task or thread to respond to a cancellation request. Whether you choose to cancel an operation, and exactly how you do it, depends on your application logic. </p>\n</li><li>\n<p>Call the <xref href=\"System.Threading.CancellationTokenSource.Cancel(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to provide notification of cancellation. This sets the <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\" data-throw-if-not-resolved=\"false\"></xref> property on every copy of the cancellation token to <strong>true</strong>. </p>\n</li><li>\n<p>Call the <xref href=\"System.Threading.CancellationTokenSource.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method when you are finished with the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n</li></ul>\n<p>For more information, see Cancellation in Managed Threads. </p>\n<p>This type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using an instance of the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic. </p>\n"
  example:
  - "\n<p>The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments. A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed. </p>\n<p>To handle the possible cancellation of the operation, the example instantiates a <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> object that generates a cancellation token which is passed to a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument. The <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method is called to ensure that the mean is computed only after all readings have been gathered successfully. If a task has not because it has been cancelled, the call to the <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method throws an exception. </p>System.Threading.CancellationTokenSource.Class#1"
  syntax:
    content: 'public class CancellationTokenSource : IDisposable'
    content.vb: >-
      Public Class CancellationTokenSource
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.CancellationTokenSource.#ctor
  commentId: M:System.Threading.CancellationTokenSource.#ctor
  id: '#ctor'
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: CancellationTokenSource()
  fullName: System.Threading.CancellationTokenSource.CancellationTokenSource()
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 181
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - 
  syntax:
    content: public CancellationTokenSource()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationTokenSource.#ctor(System.Int32)
  commentId: M:System.Threading.CancellationTokenSource.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: CancellationTokenSource(Int32)
  fullName: System.Threading.CancellationTokenSource.CancellationTokenSource(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 182
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> class that will be canceled after the specified delay in milliseconds.</p>\n"
  remarks: "\n<p>The countdown for the <em>millisecondsDelay</em> starts during the call to the constructor.  When the <em>millisecondsDelay</em> expires, the constructed <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> is canceled (if it has not been canceled already).</p>\n<p>Subsequent calls to <xref href=\"System.Threading.CancellationTokenSource.CancelAfter(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> will reset the <em>millisecondsDelay</em> for the constructed <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>, if it has not been canceled already.</p>\n"
  syntax:
    content: public CancellationTokenSource(int millisecondsDelay)
    content.vb: Public Sub New(millisecondsDelay As Integer)
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: "\n<p>The time interval in milliseconds to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsDelay</em> is less than -1. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)
  commentId: M:System.Threading.CancellationTokenSource.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: CancellationTokenSource(TimeSpan)
  fullName: System.Threading.CancellationTokenSource.CancellationTokenSource(System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 183
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> class that will be canceled after the specified time span.</p>\n"
  remarks: "\n<p>The countdown for the delay starts during the call to the constructor. When the delay expires, the constructed <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> is canceled, if it has not been canceled already.</p>\n<p>Subsequent calls to <xref href=\"System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> will reset the delay for the constructed <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>, if it has not been canceled already.</p>\n"
  syntax:
    content: public CancellationTokenSource(TimeSpan delay)
    content.vb: Public Sub New(delay As TimeSpan)
    parameters:
    - id: delay
      type: System.TimeSpan
      description: "\n<p>The time interval to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>delay</em>\n<strong>.</strong>\n<xref href=\"System.TimeSpan.TotalMilliseconds\" data-throw-if-not-resolved=\"false\"></xref> is less than -1 or greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationTokenSource.IsCancellationRequested
  commentId: P:System.Threading.CancellationTokenSource.IsCancellationRequested
  id: IsCancellationRequested
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: IsCancellationRequested
  fullName: System.Threading.CancellationTokenSource.IsCancellationRequested
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsCancellationRequested
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 184
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Gets whether cancellation has been requested for this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p> This property indicates whether cancellation has been requested for this token source, such as due to a call to its <xref href=\"System.Threading.CancellationTokenSource.Cancel\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>  If this property returns <strong>true</strong>, it only guarantees that cancellation has been requested. It does not guarantee that every handler registered with the corresponding token has finished executing, nor that cancellation requests have finished propagating to all registered handlers. Additional synchronization may be required, particularly in situations where related objects are being canceled concurrently.</p>\n<p></p>\n"
  example:
  - 
  syntax:
    content: public bool IsCancellationRequested { get; }
    content.vb: Public ReadOnly Property IsCancellationRequested As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if cancellation has been requested for this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.CancellationTokenSource.Token
  commentId: P:System.Threading.CancellationTokenSource.Token
  id: Token
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: Token
  fullName: System.Threading.CancellationTokenSource.Token
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Token
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 185
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Gets the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public CancellationToken Token { get; }
    content.vb: Public ReadOnly Property Token As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> associated with this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The token source has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.CancellationTokenSource.Cancel
  commentId: M:System.Threading.CancellationTokenSource.Cancel
  id: Cancel
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: Cancel()
  fullName: System.Threading.CancellationTokenSource.Cancel()
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cancel
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 186
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Communicates a request for cancellation.</p>\n"
  remarks: "\n<p> The associated <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> will be notified of the cancellation and will transition to a state where <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\" data-throw-if-not-resolved=\"false\"></xref> returns true. </p>\n<p>Any callbacks or cancelable operations registered with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> will be executed.</p>\n<p>Cancelable operations and callbacks registered with the token should not throw exceptions.</p>\n<p>However, this overload of Cancel will aggregate any exceptions thrown into an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</p>\n<p>The <xref href=\"System.Threading.ExecutionContext\" data-throw-if-not-resolved=\"false\"></xref> that was captured when each callback was registered will be reestablished when the callback is invoked.</p>\n<p></p>\n"
  example:
  - "\n<p>The following example uses a random number generator to emulate a data collection application that reads 10 integral values from eleven different instruments. A value of zero indicates that the measurement has failed for one instrument, in which case the operation should be cancelled and no overall mean should be computed. </p>\n<p>To handle the possible cancellation of the operation, the example instantiates a <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> object that generates a cancellation token which is passed to a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> object. The <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> object in turn passes the cancellation token to each of the tasks responsible for collecting readings for a particular instrument. The <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method is called to ensure that the mean is computed only after all readings have been gathered successfully. If a task has not because it has been cancelled, the call to the <xref href=\"System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> method throws an exception. </p>System.Threading.CancellationTokenSource.Class#1"
  syntax:
    content: public void Cancel()
    content.vb: Public Sub Cancel
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationTokenSource.Cancel(System.Boolean)
  commentId: M:System.Threading.CancellationTokenSource.Cancel(System.Boolean)
  id: Cancel(System.Boolean)
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: Cancel(Boolean)
  fullName: System.Threading.CancellationTokenSource.Cancel(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cancel
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 187
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Communicates a request for cancellation, and specifies whether remaining callbacks and cancelable operations should be processed.</p>\n"
  remarks: "\n<p> The associated <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> will be notified of the cancellation and will transition to a state where <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>true</strong>. </p>\n<p>Any callbacks or cancelable operations registered with the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> will be executed.</p>\n<p>Cancelable operations and callbacks registered with the token should not throw exceptions. </p>\n<p>If <em>throwOnFirstException</em> is <strong>true</strong>, an exception will immediately propagate out of the call to <xref href=\"System.Threading.CancellationTokenSource.Cancel(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>, preventing the remaining callbacks and cancelable operations from being processed.</p>\n<p> If <em>throwOnFirstException</em> is <strong>false</strong>, this overload will aggregate any exceptions thrown into an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>, such that one callback throwing an exception will not prevent other registered callbacks from being executed.</p>\n<p>The <xref href=\"System.Threading.ExecutionContext\" data-throw-if-not-resolved=\"false\"></xref> that was captured when each callback was registered will be reestablished when the callback is invoked.</p>\n<p></p>\n"
  example:
  - 
  syntax:
    content: public void Cancel(bool throwOnFirstException)
    content.vb: Public Sub Cancel(throwOnFirstException As Boolean)
    parameters:
    - id: throwOnFirstException
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if exceptions should immediately propagate; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>An aggregate exception containing all the exceptions thrown by the registered callbacks on the associated <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationTokenSource.CancelAfter(System.Int32)
  commentId: M:System.Threading.CancellationTokenSource.CancelAfter(System.Int32)
  id: CancelAfter(System.Int32)
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: CancelAfter(Int32)
  fullName: System.Threading.CancellationTokenSource.CancelAfter(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CancelAfter
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 188
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Schedules a cancel operation on this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> after the specified number of milliseconds.</p>\n"
  remarks: "\n<p>The countdown for the <em>millisecondsDelay</em> starts during this call. When the <em>millisecondsDelay</em> expires, this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> is canceled, if it has not been canceled already.</p>\n<p>Subsequent calls to CancelAfter will reset the <em>millisecondsDelay</em> for this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>, if it has not been canceled already.</p>\n"
  syntax:
    content: public void CancelAfter(int millisecondsDelay)
    content.vb: Public Sub CancelAfter(millisecondsDelay As Integer)
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: "\n<p>The time span to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception thrown when this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception thrown when <em>millisecondsDelay</em> is less than -1.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)
  commentId: M:System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)
  id: CancelAfter(System.TimeSpan)
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: CancelAfter(TimeSpan)
  fullName: System.Threading.CancellationTokenSource.CancelAfter(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CancelAfter
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 189
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Schedules a cancel operation on this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> after the specified time span.</p>\n"
  syntax:
    content: public void CancelAfter(TimeSpan delay)
    content.vb: Public Sub CancelAfter(delay As TimeSpan)
    parameters:
    - id: delay
      type: System.TimeSpan
      description: "\n<p>The time span to wait before canceling this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception thrown when this <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when <em>delay</em> is less than -1 or greater than Int32.MaxValue.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)
  commentId: M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)
  id: CreateLinkedTokenSource(System.Threading.CancellationToken,System.Threading.CancellationToken)
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: CreateLinkedTokenSource(CancellationToken, CancellationToken)
  fullName: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateLinkedTokenSource
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 190
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Creates a <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that will be in the canceled state when any of the source tokens are in the canceled state.</p>\n"
  example:
  - 
  syntax:
    content: public static CancellationTokenSource CreateLinkedTokenSource(CancellationToken token1, CancellationToken token2)
    content.vb: Public Shared Function CreateLinkedTokenSource(token1 As CancellationToken, token2 As CancellationToken) As CancellationTokenSource
    parameters:
    - id: token1
      type: System.Threading.CancellationToken
      description: "\n<p>The first cancellation token to observe.</p>\n"
    - id: token2
      type: System.Threading.CancellationToken
      description: "\n<p>The second cancellation token to observe.</p>\n"
    return:
      type: System.Threading.CancellationTokenSource
      description: "\n<p>A <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that is linked to the source tokens.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>A <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with one of the source tokens has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])
  commentId: M:System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])
  id: CreateLinkedTokenSource(System.Threading.CancellationToken[])
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: CreateLinkedTokenSource(CancellationToken[])
  fullName: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken[])
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateLinkedTokenSource
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 191
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Creates a <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that will be in the canceled state when any of the source tokens in the specified array are in the canceled state.</p>\n"
  example:
  - 
  syntax:
    content: public static CancellationTokenSource CreateLinkedTokenSource(params CancellationToken[] tokens)
    content.vb: Public Shared Function CreateLinkedTokenSource(ParamArray tokens As CancellationToken()) As CancellationTokenSource
    parameters:
    - id: tokens
      type: System.Threading.CancellationToken[]
      description: "\n<p>An array that contains the cancellation token instances to observe.</p>\n"
    return:
      type: System.Threading.CancellationTokenSource
      description: "\n<p>A <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that is linked to the source tokens.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>A <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with one of the source tokens has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>tokens</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>tokens</em> is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.CancellationTokenSource.CreateLinkedTokenSource(System.Threading.CancellationToken())
  name.vb: CreateLinkedTokenSource(CancellationToken())
- uid: System.Threading.CancellationTokenSource.Dispose
  commentId: M:System.Threading.CancellationTokenSource.Dispose
  id: Dispose
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Threading.CancellationTokenSource.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 192
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Call <strong>Dispose</strong> when you are finished using the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>. The <strong>Dispose</strong> method leaves the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <strong>Dispose</strong>, you must release all references to the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> was occupying.</p>\n<p>For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</p>\n<p>Always call <strong>Dispose</strong> before you release your last reference to the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Finalize</strong> method.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationTokenSource.Dispose(System.Boolean)
  commentId: M:System.Threading.CancellationTokenSource.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.CancellationTokenSource
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Threading.CancellationTokenSource.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Threading.Tasks/ref/System.Threading.Tasks.cs
    startLine: 193
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> class and optionally releases the managed resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: Threading.CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.CancellationTokenSource
  parent: System.Threading
  isExternal: false
  name: CancellationTokenSource
  fullName: System.Threading.CancellationTokenSource
- uid: System.Threading.CancellationToken[]
  isExternal: false
  name: CancellationToken[]
  fullName: System.Threading.CancellationToken[]
  fullname.vb: System.Threading.CancellationToken()
  name.vb: CancellationToken()
  spec.csharp:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    fullName: System.Threading.CancellationToken
  - name: ()
    fullName: ()
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  fullName: System.AggregateException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
