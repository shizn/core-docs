items:
- uid: System.Net.Http.Headers.CacheControlHeaderValue
  commentId: T:System.Net.Http.Headers.CacheControlHeaderValue
  id: CacheControlHeaderValue
  parent: System.Net.Http.Headers
  children:
  - System.Net.Http.Headers.CacheControlHeaderValue.#ctor
  - System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)
  - System.Net.Http.Headers.CacheControlHeaderValue.Extensions
  - System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode
  - System.Net.Http.Headers.CacheControlHeaderValue.MaxAge
  - System.Net.Http.Headers.CacheControlHeaderValue.MaxStale
  - System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit
  - System.Net.Http.Headers.CacheControlHeaderValue.MinFresh
  - System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate
  - System.Net.Http.Headers.CacheControlHeaderValue.NoCache
  - System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders
  - System.Net.Http.Headers.CacheControlHeaderValue.NoStore
  - System.Net.Http.Headers.CacheControlHeaderValue.NoTransform
  - System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached
  - System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)
  - System.Net.Http.Headers.CacheControlHeaderValue.Private
  - System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders
  - System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate
  - System.Net.Http.Headers.CacheControlHeaderValue.Public
  - System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge
  - System.Net.Http.Headers.CacheControlHeaderValue.ToString
  - System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)
  langs:
  - csharp
  - vb
  name: CacheControlHeaderValue
  fullName: System.Net.Http.Headers.CacheControlHeaderValue
  type: Class
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CacheControlHeaderValue
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 256
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Represents the value of the Cache-Control header.</p>\n"
  syntax:
    content: public class CacheControlHeaderValue
    content.vb: Public Class CacheControlHeaderValue
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Http.Headers.CacheControlHeaderValue.#ctor
  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.#ctor
  id: '#ctor'
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: CacheControlHeaderValue()
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.CacheControlHeaderValue()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 258
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public CacheControlHeaderValue()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.Extensions
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.Extensions
  id: Extensions
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: Extensions
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Extensions
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Extensions
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 259
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Cache-extension tokens, each with an optional assigned value.</p>\n"
  remarks: "\n<p>This property represents the \"cache-extension\" directive in a cache-control header field on an HTTP request or HTTP response.</p>\n"
  syntax:
    content: public ICollection<NameValueHeaderValue> Extensions { get; }
    content.vb: Public ReadOnly Property Extensions As ICollection(Of NameValueHeaderValue)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}
      description: "\n<p>Returns <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A collection of cache-extension tokens each with an optional assigned value.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.Headers.CacheControlHeaderValue.MaxAge
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MaxAge
  id: MaxAge
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: MaxAge
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MaxAge
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxAge
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 260
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>The maximum age, specified in seconds, that the HTTP client is willing to accept a response. </p>\n"
  remarks: "\n<p>This property represents the \"max-age\" directive in a cache-control header field on an HTTP request or HTTP response. </p>\n<p>Unless the <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue.MaxStale\" data-throw-if-not-resolved=\"false\"></xref> property is also set, the client is not willing to accept a stale response.</p>\n"
  syntax:
    content: public TimeSpan? MaxAge { get; set; }
    content.vb: Public Property MaxAge As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n<p>Returns <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The time in seconds. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.MaxStale
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MaxStale
  id: MaxStale
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: MaxStale
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MaxStale
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxStale
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 261
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether an HTTP client is willing to accept a response that has exceeded its expiration time.</p>\n"
  remarks: "\n<p>This property represents if the \"max-stale\" directive is present in a cache-control header field on an HTTP request. </p>\n"
  syntax:
    content: public bool MaxStale { get; set; }
    content.vb: Public Property MaxStale As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the HTTP client is willing to accept a response that has exceed the expiration time; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit
  id: MaxStaleLimit
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: MaxStaleLimit
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxStaleLimit
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 262
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>The maximum time, in seconds, an HTTP client is willing to accept a response that has exceeded its expiration time.</p>\n"
  remarks: "\n<p>This property represents the value assigned to \"max-stale\" directive in a cache-control header field on an HTTP request. </p>\n<p>If the <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit\" data-throw-if-not-resolved=\"false\"></xref> property is assigned a value other than zero, then the client is willing to accept a response that has exceeded its expiration time by no more than the specified number of seconds. If a value of zero is assigned to the <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit\" data-throw-if-not-resolved=\"false\"></xref> property, then the client is willing to accept a stale response of any age.</p>\n"
  syntax:
    content: public TimeSpan? MaxStaleLimit { get; set; }
    content.vb: Public Property MaxStaleLimit As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n<p>Returns <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The time in seconds.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.MinFresh
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MinFresh
  id: MinFresh
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: MinFresh
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MinFresh
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MinFresh
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 263
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>The freshness lifetime, in seconds, that an HTTP client is willing to accept a response.</p>\n"
  remarks: "\n<p>This property represents the \"min-fresh\" directive in a cache-control header field on an HTTP request. </p>\n<p>The  property indicates that the HTTP client is willing to accept a response whose freshness lifetime is no less than its current age plus the freshness lifetime specified time in seconds. The client wants a response that will still be fresh for at least the current age plus the freshness lifetime. </p>\n"
  syntax:
    content: public TimeSpan? MinFresh { get; set; }
    content.vb: Public Property MinFresh As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n<p>Returns <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The time in seconds.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate
  id: MustRevalidate
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: MustRevalidate
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MustRevalidate
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 264
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale.</p>\n"
  remarks: "\n<p>This property represents the \"must-revalidate\" directive in a cache-control header field on an HTTP response.</p>\n"
  syntax:
    content: public bool MustRevalidate { get; set; }
    content.vb: Public Property MustRevalidate As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the origin server requires revalidation of a cache entry on any subsequent use when the entry becomes stale; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.NoCache
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.NoCache
  id: NoCache
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: NoCache
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.NoCache
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NoCache
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 265
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether an HTTP client is willing to accept a cached response.</p>\n"
  remarks: "\n<p>This property represents the \"no-cache\" directive in a cache-control header field on an HTTP request or HTTP response. </p>\n<p>When the <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue.NoCache\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>true</strong> present in a HTTP request message, an application should forward the request toward the origin server even if it has a cached copy of what is being requested.</p>\n"
  syntax:
    content: public bool NoCache { get; set; }
    content.vb: Public Property NoCache As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the HTTP client is willing to accept a cached response; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders
  id: NoCacheHeaders
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: NoCacheHeaders
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NoCacheHeaders
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 266
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>A collection of fieldnames in the \"no-cache\" directive in a cache-control header field on an HTTP response.</p>\n"
  remarks: "\n<p>This property represents fieldnames in the \"no-cache\" directive in a cache-control header field on an HTTP response.</p>\n"
  syntax:
    content: public ICollection<string> NoCacheHeaders { get; }
    content.vb: Public ReadOnly Property NoCacheHeaders As ICollection(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: "\n<p>Returns <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A collection of fieldnames.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.Headers.CacheControlHeaderValue.NoStore
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.NoStore
  id: NoStore
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: NoStore
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.NoStore
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NoStore
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 267
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether a cache must not store any part of either the HTTP request mressage or any response.</p>\n"
  remarks: "\n<p>This property represents the \"no-store\" directive in a cache-control header field on an HTTP request or HTTP response. </p>\n<p>The purpose of the <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue.NoStore\" data-throw-if-not-resolved=\"false\"></xref> property is to prevent the inadvertent release or retention of sensitive information. This property applies to the entire message, and may be sent either in an HTTP request or a response.  </p>\n"
  syntax:
    content: public bool NoStore { get; set; }
    content.vb: Public Property NoStore As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if a cache must not store any part of either the HTTP request mressage or any response; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.NoTransform
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.NoTransform
  id: NoTransform
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: NoTransform
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.NoTransform
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NoTransform
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 268
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether a cache or proxy must not change any aspect of the entity-body.</p>\n"
  remarks: "\n<p>This property represents the \"no-transform\" directive in a cache-control header field on an HTTP request or HTTP response.</p>\n<p>When the <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue.NoTransform\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>true</strong>, intermediate caches or rpoxies must not change any aspect of the entity body. Implementors of intermediate caches and proxies have found it useful to convert the media type of certain entity bodies. A non-transparent proxy might, for example, convert between image formats in order to save cache space or to reduce the amount of traffic on a slow link. Serious operational problems occur, however, when these transformations are applied to entity bodies intended for certain kinds of applications. </p>\n"
  syntax:
    content: public bool NoTransform { get; set; }
    content.vb: Public Property NoTransform As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if a cache or proxy must not change any aspect of the entity-body; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached
  id: OnlyIfCached
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: OnlyIfCached
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnlyIfCached
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 269
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether a cache should either respond using a cached entry that is consistent with the other constraints of the HTTP request, or respond with a 504 (Gateway Timeout) status.</p>\n"
  remarks: "\n<p>This property represents the \"only-if-cached\" directive in a cache-control header field on an HTTP request.</p>\n"
  syntax:
    content: public bool OnlyIfCached { get; set; }
    content.vb: Public Property OnlyIfCached As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if a cache should either respond using a cached entry that is consistent with the other constraints of the HTTP request, or respond with a 504 (Gateway Timeout) status; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.Private
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.Private
  id: Private
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: Private
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Private
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Private
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 270
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether all or part of the HTTP response message is intended for a single user and must not be cached by a shared cache.</p>\n"
  remarks: "\n<p>This property represents the \"private\" directive in a cache-control header field on an HTTP response.</p>\n"
  syntax:
    content: public bool Private { get; set; }
    content.vb: Public Property Private As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the HTTP response message is intended for a single user and must not be cached by a shared cache; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders
  id: PrivateHeaders
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: PrivateHeaders
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrivateHeaders
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 271
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>A collection fieldnames in the \"private\" directive in a cache-control header field on an HTTP response.</p>\n"
  remarks: "\n<p>This property represents fieldnames in the \"private\" directive in a cache-control header field on an HTTP response.</p>\n"
  syntax:
    content: public ICollection<string> PrivateHeaders { get; }
    content.vb: Public ReadOnly Property PrivateHeaders As ICollection(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: "\n<p>Returns <xref href=\"System.Collections.Generic.ICollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A collection of fieldnames.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate
  id: ProxyRevalidate
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: ProxyRevalidate
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProxyRevalidate
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 272
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale for shared user agent caches.</p>\n"
  remarks: "\n<p>This property represents the \"proxy-revalidate\" directive in a cache-control header field on an HTTP response.</p>\n<p>This property does not affect  non-shared user agent caches.</p>\n"
  syntax:
    content: public bool ProxyRevalidate { get; set; }
    content.vb: Public Property ProxyRevalidate As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the origin server requires revalidation of a cache entry on any subsequent use when the entry becomes stale for shared user agent caches; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.Public
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.Public
  id: Public
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: Public
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Public
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Public
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 273
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether an HTTP response may be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache.</p>\n"
  remarks: "\n<p>This property represents the \"public\" directive in a cache-control header field on an HTTP response.</p>\n"
  syntax:
    content: public bool Public { get; set; }
    content.vb: Public Property Public As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the HTTP response may be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge
  id: SharedMaxAge
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: SharedMaxAge
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SharedMaxAge
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 274
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>The shared maximum age, specified in seconds, in an HTTP response that overrides the \"max-age\" directive in a cache-control header or an Expires header for a shared cache.</p>\n"
  remarks: "\n<p>This property represents the \"s-max-age\" directive in a cache-control header field on an HTTP response.</p>\n"
  syntax:
    content: public TimeSpan? SharedMaxAge { get; set; }
    content.vb: Public Property SharedMaxAge As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n<p>Returns <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The time in seconds.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)
  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 275
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Determines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with the current object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode
  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode
  id: GetHashCode
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 276
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Serves as a hash function for a  <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>A hash code is a numeric value that is used to identify an object during equality testing. It can also serve as an index for an object in a collection.</p>\n<p>The <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode\" data-throw-if-not-resolved=\"false\"></xref>  method is suitable for use in hashing algorithms and data structures such as a hash table.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>Returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A hash code for the current object.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)
  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)
  id: Parse(System.String)
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: Parse(String)
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 277
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Converts a string to an <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public static CacheControlHeaderValue Parse(string input)
    content.vb: Public Shared Function Parse(input As String) As CacheControlHeaderValue
    parameters:
    - id: input
      type: System.String
      description: "\n<p>A string that represents cache-control header value information.</p>\n"
    return:
      type: System.Net.Http.Headers.CacheControlHeaderValue
      description: "\n<p>Returns <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is a <strong>null</strong> reference.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>input</em> is not valid cache-control header value information.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.Http.Headers.CacheControlHeaderValue.ToString
  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.ToString
  id: ToString
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.ToString()
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 278
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Returns a string that represents the current <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>Returns <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A string that represents the current object.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)
  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)
  id: TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: TryParse(String, out CacheControlHeaderValue)
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String, out System.Net.Http.Headers.CacheControlHeaderValue)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 279
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Determines whether a string is valid <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> information.</p>\n"
  syntax:
    content: public static bool TryParse(string input, out CacheControlHeaderValue parsedValue)
    content.vb: Public Shared Function TryParse(input As String, ByRef parsedValue As CacheControlHeaderValue) As Boolean
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to validate.</p>\n"
    - id: parsedValue
      type: System.Net.Http.Headers.CacheControlHeaderValue
      description: "\n<p>The <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> version of the string.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if <em>input</em> is valid <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> information; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String, ByRef System.Net.Http.Headers.CacheControlHeaderValue)
  name.vb: TryParse(String, ByRef CacheControlHeaderValue)
references:
- uid: System.Net.Http.Headers
  isExternal: false
  name: System.Net.Http.Headers
  fullName: System.Net.Http.Headers
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<NameValueHeaderValue>
  fullName: System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue>
  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.Http.Headers.NameValueHeaderValue)
  name.vb: ICollection(Of NameValueHeaderValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Http.Headers.NameValueHeaderValue
    name: NameValueHeaderValue
    fullName: System.Net.Http.Headers.NameValueHeaderValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.Headers.NameValueHeaderValue
    name: NameValueHeaderValue
    fullName: System.Net.Http.Headers.NameValueHeaderValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  fullname.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  fullname.vb: System.Collections.Generic.ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Net.Http.Headers.CacheControlHeaderValue
  parent: System.Net.Http.Headers
  isExternal: false
  name: CacheControlHeaderValue
  fullName: System.Net.Http.Headers.CacheControlHeaderValue
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
