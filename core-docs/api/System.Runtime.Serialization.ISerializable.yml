items:
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  id: ISerializable
  parent: System.Runtime.Serialization
  children:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,StreamingContext)
  langs:
  - csharp
  - vb
  name: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
  type: Interface
  source:
    remote:
      path: src/System.Runtime.Serialization.Formatters/src/System/Runtime/Serialization/ISerializable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ISerializable
    path: src/System.Runtime.Serialization.Formatters/src/System/Runtime/Serialization/ISerializable.cs
    startLine: 8
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Allows an object to control its own serialization and deserialization.</p>\n"
  remarks: "\n<p>Any class that might be serialized must be marked with the <xref href=\"System.SerializableAttribute\" data-throw-if-not-resolved=\"false\"></xref>. If a class needs to control its serialization process, it can implement the <xref href=\"System.Runtime.Serialization.ISerializable\" data-throw-if-not-resolved=\"false\"></xref> interface. The <xref href=\"System.Runtime.Serialization.Formatter\" data-throw-if-not-resolved=\"false\"></xref> calls the <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref> at serialization time and populates the supplied <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> with all the data required to represent the object. The <xref href=\"System.Runtime.Serialization.Formatter\" data-throw-if-not-resolved=\"false\"></xref> creates a <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> with the type of the object in the graph. Objects that need to send proxies for themselves can use the <xref href=\"System.Runtime.Serialization.SerializationInfo.FullTypeName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Runtime.Serialization.SerializationInfo.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> methods on <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> to change the transmitted information.</p>\n<p>In the case of class inheritance, it is possible to serialize a class that derives from a base class that implements <xref href=\"System.Runtime.Serialization.ISerializable\" data-throw-if-not-resolved=\"false\"></xref>. In this case, the derived class should call the base class implementation of <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref> inside its implementation of <xref href=\"System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the data from the base class will not be serialized.</p>\n<p>The <xref href=\"System.Runtime.Serialization.ISerializable\" data-throw-if-not-resolved=\"false\"></xref> interface implies a constructor with the signature constructor (<xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> information, <xref href=\"System.Runtime.Serialization.StreamingContext\" data-throw-if-not-resolved=\"false\"></xref> context). At deserialization time, the current constructor is called only after the data in the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> has been deserialized by the formatter. In general, this constructor should be protected if the class is not sealed.</p>\n<p>The order in which objects are deserialized cannot be guaranteed. For example, if one type references a type that has not been deserialized yet, an exception will occur. If you are creating types that have such dependencies, you can work around the problem by implementing the <strong>IDeserializationCallback</strong> interface and the <strong>OnDeserialization</strong> method.</p>\n<p>The serialization architecture handles object types that extend <xref href=\"System.MarshalByRefObject\" data-throw-if-not-resolved=\"false\"></xref> the same as types that extend <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>. These types can be marked with the <xref href=\"System.SerializableAttribute\" data-throw-if-not-resolved=\"false\"></xref> and implement the <xref href=\"System.Runtime.Serialization.ISerializable\" data-throw-if-not-resolved=\"false\"></xref> interface as any other object type. Their object state will be captured and persisted onto the stream.</p>\n<p>When these types are being used through <xref href=\"System.Runtime.Remoting\" data-throw-if-not-resolved=\"false\"></xref>, the remoting infrastructure provides a surrogate that preempts typical serialization and instead serializes a proxy to the <xref href=\"System.MarshalByRefObject\" data-throw-if-not-resolved=\"false\"></xref>. A surrogate is a helper that knows how to serialize and deserialize objects of a particular type. The proxy, invisible to the user in most cases, will be of type <xref href=\"System.Runtime.Remoting.ObjRef\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>As a general design pattern, it would be unusual for a class to be both marked with the serializable attribute and extend <xref href=\"System.MarshalByRefObject\" data-throw-if-not-resolved=\"false\"></xref>. Developers should think carefully about the possible serialization and remoting scenarios when combining these two characteristics. One example where this might be applicable is with a <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref>. While the base class of <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> (<xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>) extends from <xref href=\"System.MarshalByRefObject\" data-throw-if-not-resolved=\"false\"></xref>, it is possible to capture the state of a <xref href=\"System.IO.MemoryStream\" data-throw-if-not-resolved=\"false\"></xref> and restore it at will. It might, therefore, be meaningful to serialize the state of this stream into a database and restore it at some later point in time. However, when used through remoting, an object of this type would be proxied.</p>\n<p>For more information about serialization of classes that extend <xref href=\"System.MarshalByRefObject\" data-throw-if-not-resolved=\"false\"></xref>, see <xref href=\"System.Runtime.Remoting.Messaging.RemotingSurrogateSelector\" data-throw-if-not-resolved=\"false\"></xref>. For more information about implementing <xref href=\"System.Runtime.Serialization.ISerializable\" data-throw-if-not-resolved=\"false\"></xref>, see Custom Serialization.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.Runtime.Serialization.ISerializable\" data-throw-if-not-resolved=\"false\"></xref> interface to define custom serialization behavior for a class.</p>ISerializable Interface Example#1"
  syntax:
    content: public interface ISerializable
    content.vb: Public Interface ISerializable
  seealso:
  - type: System.Runtime.Remoting.Messaging.RemotingSurrogateSelector
    commentId: T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,StreamingContext)
  commentId: M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  langs:
  - csharp
  - vb
  name: GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo, StreamingContext)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Serialization.Formatters/src/System/Runtime/Serialization/ISerializable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetObjectData
    path: src/System.Runtime.Serialization.Formatters/src/System/Runtime/Serialization/ISerializable.cs
    startLine: 10
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  syntax:
    content: void GetObjectData(SerializationInfo info, StreamingContext context)
    content.vb: Sub GetObjectData(info As SerializationInfo, context As StreamingContext)
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
    - id: context
      type: StreamingContext
references:
- uid: System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: StreamingContext
  isExternal: true
  name: StreamingContext
  fullName: StreamingContext
