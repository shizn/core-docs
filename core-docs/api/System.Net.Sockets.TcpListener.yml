items:
- uid: System.Net.Sockets.TcpListener
  commentId: T:System.Net.Sockets.TcpListener
  id: TcpListener
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.TcpListener.AcceptSocketAsync
  - System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  - System.Net.Sockets.TcpListener.Active
  - System.Net.Sockets.TcpListener.ExclusiveAddressUse
  - System.Net.Sockets.TcpListener.LocalEndpoint
  - System.Net.Sockets.TcpListener.Pending
  - System.Net.Sockets.TcpListener.Server
  - System.Net.Sockets.TcpListener.Start
  - System.Net.Sockets.TcpListener.Start(System.Int32)
  - System.Net.Sockets.TcpListener.Stop
  langs:
  - csharp
  - vb
  name: TcpListener
  fullName: System.Net.Sockets.TcpListener
  type: Class
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TcpListener
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 13
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: 'public class TcpListener : object'
    content.vb: >-
      Public Class TcpListener
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  id: '#ctor(System.Net.IPAddress,System.Int32)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: TcpListener(IPAddress, Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(System.Net.IPAddress, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 441
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public TcpListener(IPAddress localaddr, int port)
    content.vb: Public Sub New(localaddr As IPAddress, port As Integer)
    parameters:
    - id: localaddr
      type: System.Net.IPAddress
    - id: port
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  commentId: M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: TcpListener(IPEndPoint)
  fullName: System.Net.Sockets.TcpListener.TcpListener(System.Net.IPEndPoint)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 442
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public TcpListener(IPEndPoint localEP)
    content.vb: Public Sub New(localEP As IPEndPoint)
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.Active
  commentId: P:System.Net.Sockets.TcpListener.Active
  id: Active
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Active
  fullName: System.Net.Sockets.TcpListener.Active
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Active
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 77
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: protected bool Active { get; }
    content.vb: Protected ReadOnly Property Active As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  commentId: P:System.Net.Sockets.TcpListener.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: ExclusiveAddressUse
  fullName: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveAddressUse
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 94
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    content.vb: Public Property ExclusiveAddressUse As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.LocalEndpoint
  commentId: P:System.Net.Sockets.TcpListener.LocalEndpoint
  id: LocalEndpoint
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: LocalEndpoint
  fullName: System.Net.Sockets.TcpListener.LocalEndpoint
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalEndpoint
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 86
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public EndPoint LocalEndpoint { get; }
    content.vb: Public ReadOnly Property LocalEndpoint As EndPoint
    parameters: []
    return:
      type: EndPoint
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.TcpListener.Server
  commentId: P:System.Net.Sockets.TcpListener.Server
  id: Server
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Server
  fullName: System.Net.Sockets.TcpListener.Server
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Server
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 67
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public Socket Server { get; }
    content.vb: Public ReadOnly Property Server As Socket
    parameters: []
    return:
      type: System.Net.Sockets.Socket
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync
  commentId: M:System.Net.Sockets.TcpListener.AcceptSocketAsync
  id: AcceptSocketAsync
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: AcceptSocketAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptSocketAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AcceptSocketAsync
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 316
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public Task<Socket> AcceptSocketAsync()
    content.vb: Public Function AcceptSocketAsync As Task(Of Socket)
    return:
      type: Task{System.Net.Sockets.Socket}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  id: AcceptTcpClientAsync
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: AcceptTcpClientAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClientAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AcceptTcpClientAsync
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 324
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public Task<TcpClient> AcceptTcpClientAsync()
    content.vb: Public Function AcceptTcpClientAsync As Task(Of TcpClient)
    return:
      type: Task{System.Net.Sockets.TcpClient}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.Pending
  commentId: M:System.Net.Sockets.TcpListener.Pending
  id: Pending
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Pending()
  fullName: System.Net.Sockets.TcpListener.Pending()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pending
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 204
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public bool Pending()
    content.vb: Public Function Pending As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.Start
  commentId: M:System.Net.Sockets.TcpListener.Start
  id: Start
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Start()
  fullName: System.Net.Sockets.TcpListener.Start()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Start
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 113
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.Start(System.Int32)
  commentId: M:System.Net.Sockets.TcpListener.Start(System.Int32)
  id: Start(System.Int32)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Start(Int32)
  fullName: System.Net.Sockets.TcpListener.Start(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Start
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 118
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public void Start(int backlog)
    content.vb: Public Sub Start(backlog As Integer)
    parameters:
    - id: backlog
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.Stop
  commentId: M:System.Net.Sockets.TcpListener.Stop
  id: Stop
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Stop()
  fullName: System.Net.Sockets.TcpListener.Stop()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Stop
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 171
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Net.IPEndPoint
  isExternal: false
  name: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Net.EndPoint
  parent: System.Net
  isExternal: false
  name: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  name: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Threading.Tasks.Task{System.Net.Sockets.Socket}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Socket>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.Socket>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.Socket)
  name.vb: Threading.Tasks.Task(Of Socket)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Sockets.Socket
    name: Socket
    fullName: System.Net.Sockets.Socket
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Sockets.Socket
    name: Socket
    fullName: System.Net.Sockets.Socket
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Threading.Tasks.Task<>
  fullName: System.Threading.Tasks.Task<>
  fullname.vb: System.Threading.Tasks.Task(Of )
  name.vb: Threading.Tasks.Task(Of )
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<TcpClient>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.TcpClient>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.TcpClient)
  name.vb: Threading.Tasks.Task(Of TcpClient)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Sockets.TcpClient
    name: TcpClient
    fullName: System.Net.Sockets.TcpClient
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Sockets.TcpClient
    name: TcpClient
    fullName: System.Net.Sockets.TcpClient
  - name: )
    fullName: )
