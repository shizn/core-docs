items:
- uid: System.Threading.Tasks.ParallelLoopState
  commentId: T:System.Threading.Tasks.ParallelLoopState
  id: ParallelLoopState
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.ParallelLoopState.Break
  - System.Threading.Tasks.ParallelLoopState.IsExceptional
  - System.Threading.Tasks.ParallelLoopState.IsStopped
  - System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  - System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  - System.Threading.Tasks.ParallelLoopState.Stop
  langs:
  - csharp
  - vb
  name: ParallelLoopState
  fullName: System.Threading.Tasks.ParallelLoopState
  type: Class
  source:
    remote:
      path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParallelLoopState
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 22
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Enables iterations of parallel loops to interact with other iterations. An instance of this class is provided by the <xref href=\"System.Threading.Tasks.Parallel\" data-throw-if-not-resolved=\"false\"></xref> class to each loop; you can not create instances in your code. </p>\n"
  remarks: "\n<p>Note that you cannot instantiate an instance of this class. It is automatically generated by the compiler as an argument in a call to the <xref href=\"System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> method. The example provides an illustration. </p>\n<p>Constructs such as <strong>for</strong> and <strong>foreach</strong> (in C#) and <strong>For</strong> and <strong>For Each</strong> (in Visual Basic) execute sequentially from the lowest index to the highest or from the first object in a set to the last. In contrast, the <xref href=\"System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})\" data-throw-if-not-resolved=\"false\"></xref> methods do not. Because individual iterations of the loop run in parallel, they can begin and end in any order. The <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> class allows individual iterations of parallel loops to interact with one another. The <xref href=\"System.Threading.Tasks.ParallelLoopState\" data-throw-if-not-resolved=\"false\"></xref> class allows you to: </p>\n<ul><li>\n<p>Exit the current iteration and prevent any additional iterations from starting by calling the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method. This does not affect iterations that have already begun execution. </p>\n</li><li>\n<p>Prevent any iterations with an index greater than the current index from executing by calling the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method. This does not affect iterations that have already begun execution. </p>\n</li><li>\n<p>Determine whether an exception has occurred in any loop iteration by retrieving the value of the <xref href=\"System.Threading.Tasks.ParallelLoopState.IsExceptional\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>Determine whether any iteration of the loop has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method by retrieving the value of the <xref href=\"System.Threading.Tasks.ParallelLoopState.IsStopped\" data-throw-if-not-resolved=\"false\"></xref> property. You can use this property to return from iterations of the loop that started before the call to the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method but are still executing. </p>\n</li><li>\n<p>Determine whether any iteration of the loop has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref>method or has thrown an exception by retrieving the value of the <xref href=\"System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li><li>\n<p>Exit from a long-running iteration whose index is greater than the index of an iteration in which Break was called by retrieving the value of the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method is called. As the output from the example shows, no iterations whose index is greater than the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property value start after the call to the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method. </p>System.Threading.Tasks.ParallelLoopState#2<p>Because iterations of the loop are still likely to be executing when the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method is called, each iteration calls the <xref href=\"System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\" data-throw-if-not-resolved=\"false\"></xref> property to check whether another iteration has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method. If  the property value is <strong>true</strong>, the iteration checks the value of the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property and, if it is greater than the current iteration's index value, returns immediately. </p>"
  syntax:
    content: 'public class ParallelLoopState : object'
    content.vb: >-
      Public Class ParallelLoopState
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.Tasks.ParallelLoopState.IsExceptional
  commentId: P:System.Threading.Tasks.ParallelLoopState.IsExceptional
  id: IsExceptional
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  - vb
  name: IsExceptional
  fullName: System.Threading.Tasks.ParallelLoopState.IsExceptional
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsExceptional
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 84
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets whether any iteration of the loop has thrown an exception that went unhandled by that iteration. </p>\n"
  example:
  - 
  syntax:
    content: public bool IsExceptional { get; }
    content.vb: Public ReadOnly Property IsExceptional As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.ParallelLoopState.IsStopped
  commentId: P:System.Threading.Tasks.ParallelLoopState.IsStopped
  id: IsStopped
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  - vb
  name: IsStopped
  fullName: System.Threading.Tasks.ParallelLoopState.IsStopped
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsStopped
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 72
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets whether any iteration of the loop has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  remarks: "\n<p>For long-running iterations of the loop, you can retrieve the value of the <xref href=\"System.Threading.Tasks.ParallelLoopState.IsStopped\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether any iterations of the loop that began execution before the call to the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method are still executing. You can then use the value of the <xref href=\"System.Threading.Tasks.ParallelLoopState.IsStopped\" data-throw-if-not-resolved=\"false\"></xref> property to determine whether they should return immediately or execute normally.  </p>\n"
  example:
  - "\n<p>The following example executes up to 10,000 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method is called. Because iterations of the loop are still likely to be executing when the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method is called, the lambda expression calls the <xref href=\"System.Threading.Tasks.ParallelLoopState.IsStopped\" data-throw-if-not-resolved=\"false\"></xref> method to check whether another iteration has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method. If it returns <strong>true</strong>, the iteration returns immediately. </p>System.Threading.Tasks.ParallelLoopState#1"
  syntax:
    content: public bool IsStopped { get; }
    content.vb: Public ReadOnly Property IsStopped As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  commentId: P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  id: LowestBreakIteration
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  - vb
  name: LowestBreakIteration
  fullName: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LowestBreakIteration
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 111
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the lowest iteration of the loop from which <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> was called. </p>\n"
  remarks: "\n<p>It is possible for multiple iterations of a parallel loop to call the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method. If they do, this value is the smallest index of an iteration that called <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref>. If no iteration of the loop called <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref>, this property returns <code>null</code>. Note that the property value is unaffected by calls to the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>In long-running iterations in which all iterations after the iteration that calls the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method need not run, the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property is used to terminate iterations that began execution before the call to the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following:</p>\n<ol><li>\n<p>Check whether the <xref href=\"System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>. </p>\n</li><li>\n<p>Exit from the iteration if its index is greater than the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property value. </p>\n</li></ol>\n<p>The example provides an illustration. </p>\n"
  example:
  - "\n<p>The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method is called. This prevents iterations whose index is greater than the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property value from starting after the call to the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method, but it does not affect any iterations that have already begun executing. To prevent these from completing, each iteration calls the <xref href=\"System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\" data-throw-if-not-resolved=\"false\"></xref> method to check whether another iteration has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method. If so, the iteration checks the value of the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property and, if it is greater than the current iteration's index value, returns immediately.  </p>System.Threading.Tasks.ParallelLoopState#2<p>Note that, because the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> value is out of scope outside of the parallel loop, you must assign it to a variable that is visible outside of the loop if you want to preserve its value. </p>"
  syntax:
    content: public long ? LowestBreakIteration { get; }
    content.vb: Public ReadOnly Property LowestBreakIteration As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
  seealso:
  - type: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
    commentId: P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  - type: System.Threading.Tasks.ParallelLoopState.Break
    commentId: M:System.Threading.Tasks.ParallelLoopState.Break
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  commentId: P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  id: ShouldExitCurrentIteration
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  - vb
  name: ShouldExitCurrentIteration
  fullName: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  type: Property
  source:
    remote:
      path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ShouldExitCurrentIteration
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 61
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets whether the current iteration of the loop should exit based on requests made by this or other iterations.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>true</strong> under any of the following conditions: </p>\n<ul><li>\n<p>An iteration of the loop calls <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</li><li>\n<p>An iteration of the loop throws an exception. </p>\n</li><li>\n<p>The loop is canceled. </p>\n</li></ul>\n<p>When this property is <strong>true</strong>, the <xref href=\"System.Threading.Tasks.Parallel\" data-throw-if-not-resolved=\"false\"></xref> class will proactively attempt to prohibit additional iterations of the loop from starting execution. However, there may be cases where it is unable to prevent additional iterations from starting. </p>\n<p> It may also be the case that a long-running iteration has already begun execution. In such cases, iterations may explicitly check the <xref href=\"System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\" data-throw-if-not-resolved=\"false\"></xref> property and cease execution if the property returns <strong>true</strong>. </p>\n"
  example:
  - "\n<p>The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method is called. This prevents iterations whose index is greater than the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property value from starting after the call to the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method, but it does not affect any iterations that have already begun executing. To prevent these from completing, each iteration calls the <xref href=\"System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\" data-throw-if-not-resolved=\"false\"></xref> method to check whether another iteration has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method. If so, the iteration checks the value of the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property and, if it is greater than the current iteration's index value, returns immediately.  </p>System.Threading.Tasks.ParallelLoopState#2"
  syntax:
    content: public bool ShouldExitCurrentIteration { get; }
    content.vb: Public ReadOnly Property ShouldExitCurrentIteration As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
    commentId: P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  - type: System.Threading.Tasks.ParallelLoopState.Break
    commentId: M:System.Threading.Tasks.ParallelLoopState.Break
  - type: System.Threading.Tasks.ParallelLoopState.Stop
    commentId: M:System.Threading.Tasks.ParallelLoopState.Stop
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.ParallelLoopState.Break
  commentId: M:System.Threading.Tasks.ParallelLoopState.Break
  id: Break
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  - vb
  name: Break()
  fullName: System.Threading.Tasks.ParallelLoopState.Break()
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Break
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 178
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Communicates that the <xref href=\"System.Threading.Tasks.Parallel\" data-throw-if-not-resolved=\"false\"></xref> loop should cease execution of iterations beyond the current iteration at the system's earliest convenience. </p>\n"
  remarks: "\n<p>\n<xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> indicates that no iterations after the current iteration should be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution. For example, if <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> is called from the 100th iteration of a parallel loop iterating from 0 to 1,000, all iterations less than 100 should still be run, but the iterations from 101 through to 1000 that have not yet started are not executed.</p>\n<p>  For long-running iterations that may already be executing, <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> sets the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property to the current iteration's index if the current index is less than the current value of <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref>. To stop iterations whose index is greater than the lowest break iteration from competing execution, you should do the following: </p>\n<ol><li>\n<p>Check whether the <xref href=\"System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>. </p>\n</li><li>\n<p>Exit from the iteration if its index is greater than the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property value. </p>\n</li></ol>\n<p>The example provides an illustration. </p>\n<p>\n<xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> is typically employed in search-based algorithms where an ordering is present in the data source.</p>\n"
  example:
  - "\n<p>The following example executes up to 100 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method is called. As the output from the example shows, no iterations whose index is greater than the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property value start after the call to the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method. </p>System.Threading.Tasks.ParallelLoopState#2<p>Because iterations of the loop are still likely to be executing when the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method is called, each iteration calls the <xref href=\"System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration\" data-throw-if-not-resolved=\"false\"></xref> property to check whether another iteration has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method. If  the property value is <strong>true</strong>, the iteration checks the value of the <xref href=\"System.Threading.Tasks.ParallelLoopState.LowestBreakIteration\" data-throw-if-not-resolved=\"false\"></xref> property and, if it is greater than the current iteration's index value, returns immediately. </p>"
  syntax:
    content: public void Break()
    content.vb: Public Sub Break
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method was previously called. <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> may not be used in combination by iterations of the same loop.</p>\n"
  seealso:
  - type: System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
    commentId: P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration
  - type: System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
    commentId: P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.ParallelLoopState.Stop
  commentId: M:System.Threading.Tasks.ParallelLoopState.Stop
  id: Stop
  parent: System.Threading.Tasks.ParallelLoopState
  langs:
  - csharp
  - vb
  name: Stop()
  fullName: System.Threading.Tasks.ParallelLoopState.Stop()
  type: Method
  source:
    remote:
      path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Stop
    path: src/System.Threading.Tasks.Parallel/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 139
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: "\n<p>Communicates that the <xref href=\"System.Threading.Tasks.Parallel\" data-throw-if-not-resolved=\"false\"></xref> loop should cease execution at the system's earliest convenience.</p>\n"
  remarks: "\n<p>Calling the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method indicates that any iterations of the loop that have not yet started need not be run. It effectively cancels any additional iterations of the loop. However, it does not stop any iterations that have already begun execution. </p>\n<p>Calling the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method causes the <xref href=\"System.Threading.Tasks.ParallelLoopState.IsStopped\" data-throw-if-not-resolved=\"false\"></xref> property to return <strong>true</strong> for any iteration of the loop that is still executing. This is particularly useful for long-running iterations, which can check the <xref href=\"System.Threading.Tasks.ParallelLoopState.IsStopped\" data-throw-if-not-resolved=\"false\"></xref> property and exit early if its value is <strong>true</strong>. </p>\n<p>\n<xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> is typically employed in search-based algorithms, where once a result is found, no other iterations need be executed.</p>\n"
  example:
  - "\n<p>The following example executes up to 10,000 iterations of a loop in parallel. Each iteration pauses for a random interval from 1 to 1,000 milliseconds. A randomly generated value determines on which iteration of the loop the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method is called. As the output from the example shows, no iterations execute after the call to the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method. </p>System.Threading.Tasks.ParallelLoopState#1<p>Because iterations of the loop are still likely to be executing when the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method is called, each iteration calls the <xref href=\"System.Threading.Tasks.ParallelLoopState.IsStopped\" data-throw-if-not-resolved=\"false\"></xref> method to check whether another iteration has called the <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> method. If it returns <strong>true</strong>, the iteration returns immediately. </p>"
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> method was called previously. <xref href=\"System.Threading.Tasks.ParallelLoopState.Break\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Tasks.ParallelLoopState.Stop\" data-throw-if-not-resolved=\"false\"></xref> may not be used in combination by iterations of the same loop.</p>\n"
  seealso:
  - type: System.Threading.Tasks.ParallelLoopState.IsStopped
    commentId: P:System.Threading.Tasks.ParallelLoopState.IsStopped
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Nullable{System.Int64}
  definition: System.Nullable`1
  name: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<>
  fullName: System.Nullable<>
  fullname.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
