items:
- uid: System.IO.FileInfo
  commentId: T:System.IO.FileInfo
  id: FileInfo
  parent: System.IO
  children:
  - System.IO.FileInfo.#ctor(System.String)
  - System.IO.FileInfo.AppendText
  - System.IO.FileInfo.CopyTo(System.String)
  - System.IO.FileInfo.CopyTo(System.String,System.Boolean)
  - System.IO.FileInfo.Create
  - System.IO.FileInfo.CreateText
  - System.IO.FileInfo.Delete
  - System.IO.FileInfo.Directory
  - System.IO.FileInfo.DirectoryName
  - System.IO.FileInfo.Exists
  - System.IO.FileInfo.IsReadOnly
  - System.IO.FileInfo.Length
  - System.IO.FileInfo.MoveTo(System.String)
  - System.IO.FileInfo.Name
  - System.IO.FileInfo.Open(System.IO.FileMode)
  - System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)
  - System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.FileInfo.OpenRead
  - System.IO.FileInfo.OpenText
  - System.IO.FileInfo.OpenWrite
  - System.IO.FileInfo.ToString
  langs:
  - csharp
  - vb
  name: FileInfo
  fullName: System.IO.FileInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FileInfo
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 33
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> objects. This class cannot be inherited.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/fileinfo.cs#4ee673c1a4ecad41\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#mscorlib/system/io/fileinfo.cs#4ee673c1a4ecad41\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p>Use the <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> class for typical operations such as copying, moving, renaming, creating, opening, deleting, and appending to files.</p>\n<p>If you are performing multiple operations on the same file, it can be more efficient to use <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> instance methods instead of the corresponding static methods of the <xref href=\"System.IO.File\" data-throw-if-not-resolved=\"false\"></xref> class, because a security check will not always be necessary.</p>\n<p>Many of the <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> methods return other I/O types when you create or open files. You can use these other types to further manipulate a file. For more information, see specific <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> members such as <xref href=\"System.IO.FileInfo.Open(System.IO.FileMode)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileInfo.OpenRead\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileInfo.OpenText\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileInfo.CreateText\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.IO.FileInfo.Create\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>By default, full read/write access to new files is granted to all users.</p>\n<p>The following table describes the enumerations that are used to customize the behavior of various <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>Enumeration </p>\n<p>Description </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Specifies read and write access to a file. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.IO.FileShare\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Specifies the level of access permitted for a file that is already in use. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Specifies whether the contents of an existing file are preserved or overwritten, and whether requests to create an existing file cause an exception. </p>\n</td></tr></tbody></table>\n<p>In members that accept a path as an input string, that path must be well-formed or an exception is raised. For example, if a path is fully qualified but begins with a space, the path is not trimmed in methods of the class. Therefore, the path is malformed and an exception is raised. Similarly, a path or a combination of paths cannot be fully qualified twice. For example, \"c:\\temp c:\\windows\" also raises an exception in most cases. Ensure that your paths are well-formed when using methods that accept a path string.</p>\n<p>In members that accept a path, the path can refer to a file or just a directory. The specified path can also refer to a relative path or a Universal Naming Convention (UNC) path for a server and share name. For example, all the following are acceptable paths: </p>\n<ul><li>\n<p>\"c:\\\\MyDir\\\\MyFile.txt\" in C#, or \"c:\\MyDir\\MyFile.txt\" in Visual Basic.</p>\n</li><li>\n<p>\"c:\\\\MyDir\" in C#, or \"c:\\MyDir\" in Visual Basic.</p>\n</li><li>\n<p>\"MyDir\\\\MySubdir\" in C#, or \"MyDir\\MySubDir\" in Visual Basic.</p>\n</li><li>\n<p>\"\\\\\\\\MyServer\\\\MyShare\" in C#, or \"\\\\MyServer\\MyShare\" in Visual Basic.</p>\n</li></ul>\n<p>The <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> class provides the following properties that enable you to retrieve information about a file. For an example of how to use each property, see the property pages. </p>\n<ul><li>\n<p>The <xref href=\"System.IO.FileInfo.Directory\" data-throw-if-not-resolved=\"false\"></xref> property retrieves an object that represents the parent directory of a file.</p>\n</li><li>\n<p>The <xref href=\"System.IO.FileInfo.DirectoryName\" data-throw-if-not-resolved=\"false\"></xref> property retrieves the full path of the parent directory of a file.</p>\n</li><li>\n<p>The <xref href=\"System.IO.FileInfo.Exists\" data-throw-if-not-resolved=\"false\"></xref> property checks for the presence of a file before operating on it.</p>\n</li><li>\n<p>The <xref href=\"System.IO.FileInfo.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> property retrieves or sets a value that specifies whether a file can be modified.</p>\n</li><li>\n<p>The <xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref> retrieves the size of a file.</p>\n</li><li>\n<p>The <xref href=\"System.IO.FileInfo.Name\" data-throw-if-not-resolved=\"false\"></xref> retrieves the name of a file.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following example demonstrates some of the main members of the <strong>FileInfo</strong> class.</p>\n<p>When the properties are first retrieved, <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> calls the <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> method and caches information about the file. On subsequent calls, you must call <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> to get the latest copy of the information.</p>FInfo Class#1<p>This example produces output similar to the following.</p><pre><code>Hello\nAnd\nWelcome\nC:\\Users\\userName\\AppData\\Local\\Temp\\tmp70AB.tmp was copied to C:\\Users\\userName\\AppData\\Local\\Temp\\tmp70CB.tmp.\nC:\\Users\\userName\\AppData\\Local\\Temp\\tmp70CB.tmp was successfully deleted.</code></pre>"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public sealed class FileInfo : FileSystemInfo, ISerializable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public NotInheritable Class FileInfo
          Inherits FileSystemInfo
          Implements ISerializable
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  - type: System.IO.DriveInfo
    commentId: T:System.IO.DriveInfo
  inheritance:
  - System.Object
  - System.IO.FileSystemInfo
  inheritedMembers:
  - System.IO.FileSystemInfo.FullPath
  - System.IO.FileSystemInfo.OriginalPath
  - System.IO.FileSystemInfo.Attributes
  - System.IO.FileSystemInfo.CreationTime
  - System.IO.FileSystemInfo.CreationTimeUtc
  - System.IO.FileSystemInfo.Extension
  - System.IO.FileSystemInfo.FullName
  - System.IO.FileSystemInfo.LastAccessTime
  - System.IO.FileSystemInfo.LastAccessTimeUtc
  - System.IO.FileSystemInfo.LastWriteTime
  - System.IO.FileSystemInfo.LastWriteTimeUtc
  - System.IO.FileSystemInfo.Refresh
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.IO.FileInfo.#ctor(System.String)
  commentId: M:System.IO.FileInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: FileInfo(String)
  fullName: System.IO.FileInfo.FileInfo(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 61
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> class, which acts as a wrapper for a file path.</p>\n"
  remarks: "\n<p>You can specify either the fully qualified or the relative file name, but the security check gets the fully qualified name.</p>\n"
  example:
  - "\n<p>The following example uses this constructor to create two files, which are then written to, read from, copied, and deleted.</p>finfo ctor#1<p>The following example opens an existing file or creates a file, appends text to the file, and displays the results.</p>fileinfomain#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public FileInfo(string fileName)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(fileName As String)
    parameters:
    - id: fileName
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>fileName</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The file name is empty, contains only white spaces, or contains invalid characters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Access to <em>fileName</em> is denied. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>fileName</em> contains a colon (:) in the middle of the string. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Directory
  commentId: P:System.IO.FileInfo.Directory
  id: Directory
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Directory
  fullName: System.IO.FileInfo.Directory
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Directory
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 166
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets an instance of the parent directory.</p>\n"
  remarks: "\n<p>To get the parent directory as a string, use the <xref href=\"System.IO.FileInfo.DirectoryName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example opens or creates a file, determines its full path, and determines and displays the full contents of the directory.</p>fileinfodirectory#1"
  syntax:
    content: public DirectoryInfo Directory { get; }
    content.vb: Public ReadOnly Property Directory As DirectoryInfo
    parameters: []
    return:
      type: System.IO.DirectoryInfo
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.FileInfo.DirectoryName
  commentId: P:System.IO.FileInfo.DirectoryName
  id: DirectoryName
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: DirectoryName
  fullName: System.IO.FileInfo.DirectoryName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DirectoryName
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 146
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets a string representing the directory's full path.</p>\n"
  remarks: "\n<p>To get the parent directory as a <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object, use the <xref href=\"System.IO.FileInfo.Directory\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>When first called, <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> calls <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> and caches information about the file. On subsequent calls, you must call <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> to get the latest copy of the information.</p>\n"
  example:
  - "\n<p>The following example retrieves the full path of the specified file.</p>System.IO.FileInfo members#3"
  syntax:
    content: >-
      public string DirectoryName

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property DirectoryName As String
    parameters: []
    return:
      type: System.String
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<strong>null</strong> was passed in for the directory name. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The fully qualified path is 260 or more characters.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.FileInfo.Exists
  commentId: P:System.IO.FileInfo.Exists
  id: Exists
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Exists
  fullName: System.IO.FileInfo.Exists
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exists
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 316
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets a value indicating whether a file exists.</p>\n"
  remarks: "\n<p>When first called, <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> calls <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> and caches information about the file. On subsequent calls, you must call <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> to get the latest copy of the information.</p>\n<p>The <xref href=\"System.IO.FileInfo.Exists\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>false</strong> if any error occurs while trying to determine if the specified file exists. This can occur in situations that raise exceptions such as passing a file name with invalid characters or too many characters, a failing or missing disk, or if the caller does not have permission to read the file.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.IO.FileInfo.Exists\" data-throw-if-not-resolved=\"false\"></xref> property ensure a file exists before opening it.  You can use this technique to throw a custom exception when the file is not found. </p>IO.FileInfo.Exists#1"
  syntax:
    content: >-
      public override bool Exists

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Overrides ReadOnly Property Exists As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.IO.FileSystemInfo.Exists
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.FileInfo.IsReadOnly
  commentId: P:System.IO.FileInfo.IsReadOnly
  id: IsReadOnly
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.IO.FileInfo.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsReadOnly
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 177
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets or sets a value that determines if the current file is read only.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.FileInfo.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> property to quickly determine or change whether the current file is read only.</p>\n<p>When first called, <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> calls <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> and caches information about the file. On subsequent calls, you must call <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> to get the latest copy of the information.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.IO.FileInfo.IsReadOnly\" data-throw-if-not-resolved=\"false\"></xref> property to mark a file as read only and then mark it as read-write. </p>IO.FileInfo.IsReadOnly#1"
  syntax:
    content: public bool IsReadOnly { get; set; }
    content.vb: Public Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file described by the current <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> object could not be found.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The user does not have write permission, but attempted to set this property to <strong>false</strong>.</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Length
  commentId: P:System.IO.FileInfo.Length
  id: Length
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.IO.FileInfo.Length
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Length
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 129
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets the size, in bytes, of the current file.</p>\n"
  remarks: "\n<p>The value of the <xref href=\"System.IO.FileInfo.Length\" data-throw-if-not-resolved=\"false\"></xref> property is pre-cached if the current instance of the <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> object was returned from any of the following <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref>methods: </p>\n<ul><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.GetFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateDirectories\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFiles\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li><li>\n<p>\n<xref href=\"System.IO.DirectoryInfo.EnumerateFileSystemInfos\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</li></ul>\n<p>To get the latest value, call the <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example displays the size of the specified files.</p>FileLength#1"
  syntax:
    content: >-
      public long Length

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> cannot update the state of the file or directory. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file does not exist.</p>\n<p>-or- </p>\n<p>The <strong>Length</strong> property is called for a directory. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.FileInfo.Name
  commentId: P:System.IO.FileInfo.Name
  id: Name
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.IO.FileInfo.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 124
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets the name of the file.</p>\n"
  remarks: "\n<p>When first called, <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> calls <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> and caches information about the file. On subsequent calls, you must call <xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> to get the latest copy of the information.</p>\n<p>The name of the file includes the file extension.</p>\n"
  example:
  - "\n<p>The following example uses the <strong>Name</strong> property to display the names of files in the current directory.</p>fileinfoname#1"
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  overridden: System.IO.FileSystemInfo.Name
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.FileInfo.AppendText
  commentId: M:System.IO.FileInfo.AppendText
  id: AppendText
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: AppendText()
  fullName: System.IO.FileInfo.AppendText()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendText
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 217
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> that appends text to the file represented by this instance of the <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example appends text to a file and reads from the file.</p>finfo appendtext#1<p>The following example demonstrates appending text to the end of a file and also displays the result of the append operation to the console. The first time this routine is called, the file is created if it does not exist. After that, the specified text is appended to the file.</p>fileinfoappendtext#1"
  syntax:
    content: public StreamWriter AppendText()
    content.vb: Public Function AppendText As StreamWriter
    return:
      type: System.IO.StreamWriter
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.CopyTo(System.String)
  commentId: M:System.IO.FileInfo.CopyTo(System.String)
  id: CopyTo(System.String)
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: CopyTo(String)
  fullName: System.IO.FileInfo.CopyTo(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 232
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Copies an existing file to a new file, disallowing the overwriting of an existing file.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.IO.FileInfo.CopyTo(System.String,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method to allow overwriting of an existing file.</p>\n<p>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</p>\n"
  example:
  - "\n<p>The following example demonstrates both overloads of the <strong>CopyTo</strong> method.</p>finfo copyto2#1<p>The following example demonstrates copying one file to another file, throwing an exception if the destination file already exists.</p>FileInfoCopyTo1#1"
  syntax:
    content: public FileInfo CopyTo(string destFileName)
    content.vb: Public Function CopyTo(destFileName As String) As FileInfo
    parameters:
    - id: destFileName
      type: System.String
    return:
      type: System.IO.FileInfo
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>destFileName</em> is empty, contains only white spaces, or contains invalid characters. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurs, or the destination file already exists. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destFileName</em> is <strong>null</strong>. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>A directory path is passed in, or the file is being moved to a different drive. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The directory specified in <em>destFileName</em> does not exist.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>destFileName</em> contains a colon (:) within the string but does not specify the volume. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.CopyTo(System.String,System.Boolean)
  commentId: M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)
  id: CopyTo(System.String,System.Boolean)
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: CopyTo(String, Boolean)
  fullName: System.IO.FileInfo.CopyTo(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 253
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Copies an existing file to a new file, allowing the overwriting of an existing file.</p>\n"
  remarks: "\n<p>Use this method to allow or prevent overwriting of an existing file. Use the <xref href=\"System.IO.FileInfo.CopyTo(System.String)\" data-throw-if-not-resolved=\"false\"></xref>  method to prevent overwriting of an existing file by default.</p>\n<p>Whenever possible, avoid using short file names (such as XXXXXX~1.XXX) with this method. If two files have equivalent short file names then this method may fail and raise an exception and/or result in undesirable behavior</p>\n"
  example:
  - "\n<p>The following example demonstrates both overloads of the <strong>CopyTo</strong> method.</p>finfo copyto2#1<p>The following example demonstrates copying one file to another file, specifying whether to overwrite a file that already exists.</p>fileinfocopyto#1"
  syntax:
    content: public FileInfo CopyTo(string destFileName, bool overwrite)
    content.vb: Public Function CopyTo(destFileName As String, overwrite As Boolean) As FileInfo
    parameters:
    - id: destFileName
      type: System.String
    - id: overwrite
      type: System.Boolean
    return:
      type: System.IO.FileInfo
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>destFileName</em> is empty, contains only white spaces, or contains invalid characters. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurs, or the destination file already exists and <em>overwrite</em> is <strong>false</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destFileName</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The directory specified in <em>destFileName</em> does not exist.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>A directory path is passed in, or the file is being moved to a different drive. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>destFileName</em> contains a colon (:) in the middle of the string. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Create
  commentId: M:System.IO.FileInfo.Create
  id: Create
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Create()
  fullName: System.IO.FileInfo.Create()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 264
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a file.</p>\n"
  remarks: "\n<p>By default, full read/write access to new files is granted to all users.</p>\n<p>This method is a wrapper for the functionality provided by <xref href=\"System.IO.File.Create(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example creates a reference to a file, and then creates the file on disk using <strong>FileInfo.Create()</strong>.</p>fileinfodelete#1<p>The following example creates a file, adds some text to it, and reads from the file.</p>finfo create#1"
  syntax:
    content: public FileStream Create()
    content.vb: Public Function Create As FileStream
    return:
      type: System.IO.FileStream
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.CreateText
  commentId: M:System.IO.FileInfo.CreateText
  id: CreateText
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: CreateText()
  fullName: System.IO.FileInfo.CreateText()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateText
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 212
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> that writes a new text file.</p>\n"
  remarks: "\n<p>By default, full read/write access to new files is granted to all users.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <strong>CreateText</strong> method.</p>finfo createtext#1"
  syntax:
    content: public StreamWriter CreateText()
    content.vb: Public Function CreateText As StreamWriter
    return:
      type: System.IO.StreamWriter
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The file name is a directory. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The disk is read-only. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  seealso:
  - type: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Delete
  commentId: M:System.IO.FileInfo.Delete
  id: Delete
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Delete()
  fullName: System.IO.FileInfo.Delete()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delete
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 278
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Permanently deletes a file.</p>\n"
  remarks: "\n<p>If the file does not exist, this method does nothing.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <strong>Delete</strong> method.</p>finfo delete#1<p>The following example creates, closes, and deletes a file.</p>fileinfodelete#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override void Delete()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Sub Delete
  overridden: System.IO.FileSystemInfo.Delete
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The target file is open or memory-mapped on a computer running Microsoft Windows NT.</p>\n<p>-or-</p>\n<p>There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The path is a directory. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.FileInfo.MoveTo(System.String)
  commentId: M:System.IO.FileInfo.MoveTo(System.String)
  id: MoveTo(System.String)
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: MoveTo(String)
  fullName: System.IO.FileInfo.MoveTo(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MoveTo
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 382
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Moves a specified file to a new location, providing the option to specify a new file name.</p>\n"
  remarks: "\n<p>This method works across disk volumes. For example, the file c:\\MyFile.txt can be moved to d:\\public and renamed NewFile.txt.</p>\n"
  example:
  - "\n<p>The following example demonstrates moving a file to a different location and renaming the file.</p>IO.FileInfo.MoveTo#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void MoveTo(string destFileName)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub MoveTo(destFileName As String)
    parameters:
    - id: destFileName
      type: System.String
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs, such as the destination file already exists or the destination device is not ready. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destFileName</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>destFileName</em> is empty, contains only white spaces, or contains invalid characters. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>destFileName</em> is read-only or is a directory. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file is not found. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>destFileName</em> contains a colon (:) in the middle of the string. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Open(System.IO.FileMode)
  commentId: M:System.IO.FileInfo.Open(System.IO.FileMode)
  id: Open(System.IO.FileMode)
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Open(FileMode)
  fullName: System.IO.FileInfo.Open(System.IO.FileMode)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Open
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 341
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a file in the specified mode.</p>\n"
  example:
  - "\n<p>The following example opens a file, adds some information to the file, and reads the file.</p>finfo open1#1"
  syntax:
    content: public FileStream Open(FileMode mode)
    content.vb: Public Function Open(mode As FileMode) As FileStream
    parameters:
    - id: mode
      type: System.IO.FileMode
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file is not found. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The file is read-only or is a directory. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The file is already open. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)
  commentId: M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)
  id: Open(System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Open(FileMode, FileAccess)
  fullName: System.IO.FileInfo.Open(System.IO.FileMode, System.IO.FileAccess)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Open
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 345
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a file in the specified mode with read, write, or read/write access.</p>\n"
  example:
  - "\n<p>The following example opens a file as read-only and reads from the file.</p>finfo open2#1"
  syntax:
    content: public FileStream Open(FileMode mode, FileAccess access)
    content.vb: Public Function Open(mode As FileMode, access As FileAccess) As FileStream
    parameters:
    - id: mode
      type: System.IO.FileMode
    - id: access
      type: System.IO.FileAccess
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file is not found. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> is read-only or is a directory. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The file is already open. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  commentId: M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Open(FileMode, FileAccess, FileShare)
  fullName: System.IO.FileInfo.Open(System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Open
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 349
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</p>\n"
  example:
  - "\n<p>The following example demonstrates opening a file for reading and writing, but disallowing access to other users or processes.</p>fileinfoopen#1"
  syntax:
    content: public FileStream Open(FileMode mode, FileAccess access, FileShare share)
    content.vb: Public Function Open(mode As FileMode, access As FileAccess, share As FileShare) As FileStream
    parameters:
    - id: mode
      type: System.IO.FileMode
    - id: access
      type: System.IO.FileAccess
    - id: share
      type: System.IO.FileShare
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file is not found. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> is read-only or is a directory. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The file is already open. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.OpenRead
  commentId: M:System.IO.FileInfo.OpenRead
  id: OpenRead
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: OpenRead()
  fullName: System.IO.FileInfo.OpenRead()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OpenRead
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 355
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a read-only <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method returns a read-only <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> object with the <xref href=\"System.IO.FileShare\" data-throw-if-not-resolved=\"false\"></xref> mode set to <xref href=\"System.IO.FileShare.Read\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example opens a file as read-only and reads from it.</p>finfo openread#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public FileStream OpenRead()
    content.vb: >-
      <SecuritySafeCritical>

      Public Function OpenRead As FileStream
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> is read-only or is a directory. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The file is already open. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.OpenText
  commentId: M:System.IO.FileInfo.OpenText
  id: OpenText
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: OpenText()
  fullName: System.IO.FileInfo.OpenText()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OpenText
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 206
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> with UTF8 encoding that reads from an existing text file.</p>\n"
  example:
  - "\n<p>The following example reads text from a file.</p>finfo opentext#1"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StreamReader OpenText()
    content.vb: >-
      <SecuritySafeCritical>

      Public Function OpenText As StreamReader
    return:
      type: System.IO.StreamReader
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file is not found. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> is read-only or is a directory. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  seealso:
  - type: System.Text.Encoding.UTF8
    commentId: P:System.Text.Encoding.UTF8
  - type: System.IO.StreamReader
    commentId: T:System.IO.StreamReader
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.OpenWrite
  commentId: M:System.IO.FileInfo.OpenWrite
  id: OpenWrite
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: OpenWrite()
  fullName: System.IO.FileInfo.OpenWrite()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OpenWrite
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 364
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a write-only <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.IO.FileInfo.OpenWrite\" data-throw-if-not-resolved=\"false\"></xref> method opens a file if one already exists for the file path, or creates a new file if one does not exist. For an existing file, it does not append the new text to the existing text. Instead, it overwrites the existing characters with the new characters. If you overwrite a longer string (such as \"This is a test of the OpenWrite method\") with a shorter string (like \"Second run\"), the file will contain a mix of the strings (\"Second runtest of the OpenWrite method\").</p>\n"
  example:
  - "\n<p>The following example opens a file for writing and then reads from the file.</p>finfo openwrite#1"
  syntax:
    content: public FileStream OpenWrite()
    content.vb: Public Function OpenWrite As FileStream
    return:
      type: System.IO.FileStream
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The path specified when creating an instance of the <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> object is read-only or is a directory.  </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path specified when creating an instance of the <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> object is invalid, such as being on an unmapped drive. </p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.ToString
  commentId: M:System.IO.FileInfo.ToString
  id: ToString
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.IO.FileInfo.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/IO/FileInfo.cs
    startLine: 425
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns the path as a string.</p>\n"
  remarks: "\n<p>The string returned by the <xref href=\"System.IO.FileInfo.ToString\" data-throw-if-not-resolved=\"false\"></xref> method represents path that was passed to the constructor.  When you create a <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> object using the constructors, the <xref href=\"System.IO.FileInfo.ToString\" data-throw-if-not-resolved=\"false\"></xref> method returns the fully qualified path.  However, there are cases where the string returned by the <xref href=\"System.IO.FileInfo.ToString\" data-throw-if-not-resolved=\"false\"></xref> method does not represent the fully qualified path.  For example, when you create a <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> object using the <see cref=\"Overload:System.IO.DirectoryInfo.GetFiles\"></see> method, the <xref href=\"System.IO.FileInfo.ToString\" data-throw-if-not-resolved=\"false\"></xref> method does not represent the fully qualified path.      </p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IO.FileSystemInfo
  parent: System.IO
  isExternal: false
  name: FileSystemInfo
  fullName: System.IO.FileSystemInfo
- uid: System.IO.FileSystemInfo.FullPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FullPath
  fullName: System.IO.FileSystemInfo.FullPath
- uid: System.IO.FileSystemInfo.OriginalPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: OriginalPath
  fullName: System.IO.FileSystemInfo.OriginalPath
- uid: System.IO.FileSystemInfo.Attributes
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Attributes
  fullName: System.IO.FileSystemInfo.Attributes
- uid: System.IO.FileSystemInfo.CreationTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: CreationTime
  fullName: System.IO.FileSystemInfo.CreationTime
- uid: System.IO.FileSystemInfo.CreationTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: CreationTimeUtc
  fullName: System.IO.FileSystemInfo.CreationTimeUtc
- uid: System.IO.FileSystemInfo.Extension
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Extension
  fullName: System.IO.FileSystemInfo.Extension
- uid: System.IO.FileSystemInfo.FullName
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FullName
  fullName: System.IO.FileSystemInfo.FullName
- uid: System.IO.FileSystemInfo.LastAccessTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastAccessTime
  fullName: System.IO.FileSystemInfo.LastAccessTime
- uid: System.IO.FileSystemInfo.LastAccessTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastAccessTimeUtc
  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc
- uid: System.IO.FileSystemInfo.LastWriteTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastWriteTime
  fullName: System.IO.FileSystemInfo.LastWriteTime
- uid: System.IO.FileSystemInfo.LastWriteTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastWriteTimeUtc
  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc
- uid: System.IO.FileSystemInfo.Refresh
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Refresh()
  fullName: System.IO.FileSystemInfo.Refresh()
  spec.csharp:
  - uid: System.IO.FileSystemInfo.Refresh
    name: Refresh
    fullName: System.IO.FileSystemInfo.Refresh
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.FileSystemInfo.Refresh
    name: Refresh
    fullName: System.IO.FileSystemInfo.Refresh
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.IO.FileSystemInfo.Exists
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Exists
  fullName: System.IO.FileSystemInfo.Exists
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.IO.FileSystemInfo.Name
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Name
  fullName: System.IO.FileSystemInfo.Name
- uid: System.IO.StreamWriter
  parent: System.IO
  isExternal: false
  name: StreamWriter
  fullName: System.IO.StreamWriter
- uid: System.IO.FileInfo
  parent: System.IO
  isExternal: false
  name: FileInfo
  fullName: System.IO.FileInfo
- uid: System.IO.FileStream
  parent: System.IO
  isExternal: false
  name: FileStream
  fullName: System.IO.FileStream
- uid: System.IO.FileSystemInfo.Delete
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Delete()
  fullName: System.IO.FileSystemInfo.Delete()
  spec.csharp:
  - uid: System.IO.FileSystemInfo.Delete
    name: Delete
    fullName: System.IO.FileSystemInfo.Delete
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IO.FileSystemInfo.Delete
    name: Delete
    fullName: System.IO.FileSystemInfo.Delete
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.StreamReader
  parent: System.IO
  isExternal: false
  name: StreamReader
  fullName: System.IO.StreamReader
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.IO.PathTooLongException
  isExternal: false
  name: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.IO.DirectoryNotFoundException
  isExternal: false
  name: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
