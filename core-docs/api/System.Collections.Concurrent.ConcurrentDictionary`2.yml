items:
- uid: System.Collections.Concurrent.ConcurrentDictionary`2
  commentId: T:System.Collections.Concurrent.ConcurrentDictionary`2
  id: ConcurrentDictionary`2
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  - System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Count
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  - System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  - System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  - System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  - System.Collections.Concurrent.ConcurrentDictionary`2.Values
  langs:
  - csharp
  - vb
  name: ConcurrentDictionary<TKey, TValue>
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConcurrentDictionary
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 43
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently. </p>\n"
  remarks: "\n<p>For very large <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> objects, you can increase the maximum array size to 2 gigabytes (GB) on a 64-bit system by setting the  configuration element to <strong>true</strong> in the run-time environment.</p>\n<p>\n<xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Collections.Generic.IReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Collections.Generic.IReadOnlyDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> interfaces starting with the .NET Framework 4.6; in previous versions of the .NET Framework, the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class did not implement these interfaces. </p>\n<p>Like the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class, <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> interface. In addition, <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> provides several methods for adding or updating key/value pairs in the dictionary, as described in the following table. </p>\n<p>To do this</p>\n<p>Use this method</p>\n<p>Usage notes</p>\n<p>All these operations are atomic and are thread-safe with regards to all other operations on the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class. The only exceptions are the methods that accept a delegate, that is, <see cref=\"Overload:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate\"></see> and <see cref=\"Overload:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd\"></see>. For modifications and write operations to the dictionary, <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> uses fine-grained locking to ensure thread safety. (Read operations on the dictionary are performed in a lock-free manner.) However, delegates for these methods are called outside the locks to avoid the problems that can arise from executing unknown code under a lock. Therefore, the code executed by these delegates is not subject to the atomicity of the operation.</p>\n"
  example:
  - "\n<p>The following example shows how to construct a <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> object.</p>System.Collections.Concurrent.ConcurrentDictionary#1"
  syntax:
    content: >-
      [ComVisible(false)]

      [DebuggerTypeProxy(typeof (Mscorlib_DictionaryDebugView<, >))]

      [DebuggerDisplay("Count = {Count}")]

      [HostProtection(Synchronization = true, ExternalThreading = true)]

      public class ConcurrentDictionary<TKey, TValue> : IDictionary<TKey, TValue>, ICollection<KeyValuePair<TKey, TValue>>, IDictionary, ICollection, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable
    content.vb: >-
      <ComVisible(False)>

      <DebuggerTypeProxy(GetType(Mscorlib_DictionaryDebugView(Of , )))>

      <DebuggerDisplay("Count = {Count}")>

      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      Public Class ConcurrentDictionary(Of TKey, TValue)
          Implements IDictionary(Of TKey, TValue), ICollection(Of KeyValuePair(Of TKey, TValue)), IDictionary, ICollection, IReadOnlyDictionary(Of TKey, TValue), IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue)), IEnumerable(Of KeyValuePair(Of TKey, TValue)), IEnumerable
    typeParameters:
    - id: TKey
      description: The type of the keys in the dictionary.
    - id: TValue
      description: The type of the values in the dictionary.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue)
  name.vb: ConcurrentDictionary(Of TKey, TValue)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ConcurrentDictionary()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 165
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.</p>\n"
  remarks: "\n<p>The default concurrency level is the default concurrency multiplier (DEFAULT_CONCURRENCY_MULTIPLIER) times the number of CPUs. The higher the default concurrency multiplier is, the more concurrent write operations can take place without interference and blocking. Higher multiplier values also cause operations that require all locks (for example, table resizing, <strong>ToArray</strong> and <strong>Count</strong>) to become more expensive. The default concurrency multiplier is 4. The default capacity (DEFAULT_CAPACITY), which represents the initial number of buckets, is a trade-off between the size of a very small dictionary and the number of resizes when constructing a large dictionary. Also, the capacity should not be divisible by a small prime number. The default capacity is 31.</p>\n"
  example:
  - 
  syntax:
    content: public ConcurrentDictionary()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary()
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 198
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.</p>\n"
  example:
  - 
  syntax:
    content: public ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of KeyValuePair(Of TKey, TValue)))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: >-
        The <xref href="System.Collections.IEnumerable{KeyValuePair{TKey,TValue}}" data-throw-if-not-resolved="false"></xref> whose elements are copied to

        the new

        <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> or any of its keys is  <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>collection</em> contains one or more duplicate keys.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)))
  name.vb: ConcurrentDictionary(IEnumerable(Of KeyValuePair(Of TKey, TValue)))
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 228
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> has the default concurrency level, has the default initial capacity, and uses the specified  <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public ConcurrentDictionary(IEnumerable<KeyValuePair<TKey, TValue>> collection, IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(collection As IEnumerable(Of KeyValuePair(Of TKey, TValue)), comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: >-
        The <xref href="System.Collections.IEnumerable{KeyValuePair{TKey,TValue}}" data-throw-if-not-resolved="false"></xref> whose elements are copied to

        the new

        <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: >-
        The <xref href="System.Collections.Generic.IEqualityComparer{TKey}" data-throw-if-not-resolved="false"></xref>

        implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> or <em>comparer</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ConcurrentDictionary(IEnumerable(Of KeyValuePair(Of TKey, TValue)), IEqualityComparer(Of TKey))
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ConcurrentDictionary(IEqualityComparer<TKey>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 209
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default concurrency level and capacity, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public ConcurrentDictionary(IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: >-
        The <xref href="System.Collections.Generic.IEqualityComparer{TKey}" data-throw-if-not-resolved="false"></xref>

        implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ConcurrentDictionary(IEqualityComparer(Of TKey))
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ConcurrentDictionary(Int32, IEnumerable<KeyValuePair<TKey, TValue>>, IEqualityComparer<TKey>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Int32, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 257
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref>, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public ConcurrentDictionary(int concurrencyLevel, IEnumerable<KeyValuePair<TKey, TValue>> collection, IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(concurrencyLevel As Integer, collection As IEnumerable(Of KeyValuePair(Of TKey, TValue)), comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: "The estimated number of threads that will update the \n<xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> concurrently."
    - id: collection
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: "The <xref href=\"System.Collections.IEnumerable{KeyValuePair{TKey,TValue}}\" data-throw-if-not-resolved=\"false\"></xref> whose elements are copied to the new \n<xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>."
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "The <xref href=\"System.Collections.Generic.IEqualityComparer{TKey}\" data-throw-if-not-resolved=\"false\"></xref> implementation to use \nwhen comparing keys."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> or <em>comparer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>concurrencyLevel</em> is less than 1.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>collection</em> contains one or more duplicate keys.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Int32, System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ConcurrentDictionary(Int32, IEnumerable(Of KeyValuePair(Of TKey, TValue)), IEqualityComparer(Of TKey))
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ConcurrentDictionary(Int32, Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 182
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type.</p>\n"
  example:
  - 
  syntax:
    content: public ConcurrentDictionary(int concurrencyLevel, int capacity)
    content.vb: Public Sub New(concurrencyLevel As Integer, capacity As Integer)
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: >-
        The estimated number of threads that will update the

        <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> concurrently.
    - id: capacity
      type: System.Int32
      description: >-
        The initial number of elements that the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>

        can contain.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>concurrencyLevel</em> is less than 1.</p>\n<p>-or-</p>\n<p>\n<em>capacity</em> is less than 0.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Int32, System.Int32)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})
  id: '#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})'
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ConcurrentDictionary(Int32, Int32, IEqualityComparer<TKey>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ConcurrentDictionary(System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 305
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public ConcurrentDictionary(int concurrencyLevel, int capacity, IEqualityComparer<TKey> comparer)
    content.vb: Public Sub New(concurrencyLevel As Integer, capacity As Integer, comparer As IEqualityComparer(Of TKey))
    parameters:
    - id: concurrencyLevel
      type: System.Int32
      description: >-
        The estimated number of threads that will update the

        <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> concurrently.
    - id: capacity
      type: System.Int32
      description: >-
        The initial number of elements that the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>

        can contain.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: >-
        The <xref href="System.Collections.Generic.IEqualityComparer{TKey}" data-throw-if-not-resolved="false"></xref>

        implementation to use when comparing keys.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>concurrencyLevel</em> or <em>capacity</em> is less than 1.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ConcurrentDictionary(System.Int32, System.Int32, System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ConcurrentDictionary(Int32, Int32, IEqualityComparer(Of TKey))
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Count
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.Count
  id: Count
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 981
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets the number of key/value pairs contained in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This property has snapshot semantics and represents the number of items in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> at the moment when the property was accessed.</p>\n"
  example:
  - 
  syntax:
    content: >-
      public int Count

      {
          [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "ConcurrencyCop just doesn't know about these locks")]
          get;
      }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of key/value paris contained in the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  - System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Count
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty
  id: IsEmpty
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.IsEmpty
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsEmpty
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1161
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets a value that indicates whether the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n"
  example:
  - 
  syntax:
    content: >-
      public bool IsEmpty

      {
          [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "ConcurrencyCop just doesn't know about these locks")]
          get;
      }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: >-
        true if the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> is empty; otherwise,

        false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).IsEmpty
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)
  id: Item(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: Item[TKey]
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Item[TKey]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: this[]
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 951
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets or sets the value associated with the specified key.</p>\n"
  example:
  - 
  syntax:
    content: public TValue this[TKey key] { get; set; }
    content.vb: Public Property Item(key As TKey) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to get or set.
    return:
      type: '{TValue}'
      description: >-
        The value associated with the specified key. If the specified key is not found, a get

        operation throws a

        <xref href="Sytem.Collections.Generic.KeyNotFoundException" data-throw-if-not-resolved="false"></xref>, and a set operation creates a new

        element with the specified key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is  <strong>null</strong>.</p>\n"
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "\n<p>The property is retrieved and <em>key</em> does not exist in the collection.</p>\n"
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Item({TKey})
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.Item({TKey})
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.Keys
  id: Keys
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Keys
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1237
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets a collection containing the keys in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public ICollection<TKey> Keys { get; }
    content.vb: Public ReadOnly Property Keys As ICollection(Of TKey)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TKey}}
      description: >-
        An <xref href="System.Collections.Generic.ICollection{TKey}" data-throw-if-not-resolved="false"></xref> containing the keys in the

        <xref href="System.Collections.Generic.Dictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Keys
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#IsReadOnly
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1324
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: >-
        true if the <xref href="System.Collections.Generic.ICollection{TKey,TValue}" data-throw-if-not-resolved="false"></xref> is

        read-only; otherwise, false. For <xref href="System.Collections.Generic.Dictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>, this property always returns

        false.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.IsReadOnly
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Keys
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IReadOnlyDictionary<TKey, TValue>.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1248
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: IEnumerable<TKey> IReadOnlyDictionary<TKey, TValue>.Keys { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys As IEnumerable(Of TKey) Implements IReadOnlyDictionary(Of TKey, TValue).Keys
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TKey}}
      description: >-
        An <xref href="System.Collections.Generic.IEnumerable{TKey}" data-throw-if-not-resolved="false"></xref> containing the keys of

        the <xref href="System.Collections.Generic.IReadOnlyDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.Keys
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Keys
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  id: System#Collections#Generic#IReadOnlyDictionary{TKey,TValue}#Values
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IReadOnlyDictionary<TKey, TValue>.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1271
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: IEnumerable<TValue> IReadOnlyDictionary<TKey, TValue>.Values { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values As IEnumerable(Of TValue) Implements IReadOnlyDictionary(Of TKey, TValue).Values
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{{TValue}}
      description: >-
        An <xref href="System.Collections.Generic.IEnumerable{TValue}" data-throw-if-not-resolved="false"></xref> containing the

        values in the <xref href="System.Collections.Generic.IReadOnlyDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.Values
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
  name.vb: System.Collections.Generic.IReadOnlyDictionary<TKey,TValue>.Values
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1629
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is synchronized with the SyncRoot.</p>\n"
  example:
  - 
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
      description: >-
        true if access to the <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref> is synchronized

        (thread safe); otherwise, false. For <xref href="System.Collections.Concurrent.ConcurrentDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>, this property always

        returns false.
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.ICollection.SyncRoot
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1639
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>. This property is not supported.</p>\n"
  example:
  - 
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This property is not supported.</p>\n"
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IDictionary.IsFixedSize
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.IsFixedSize
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IDictionary.IsFixedSize
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1439
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  example:
  - 
  syntax:
    content: bool IDictionary.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsFixedSize As Boolean Implements IDictionary.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
      description: >-
        true if the <xref href="System.Collections.Generic.IDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref> has a

        fixed size; otherwise, false. For <xref href="System.Collections.Generic.ConcurrentDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>, this property always

        returns false.
  implements:
  - System.Collections.IDictionary.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.IsFixedSize
  name.vb: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IDictionary.IsReadOnly
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IDictionary.IsReadOnly
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1452
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  example:
  - 
  syntax:
    content: bool IDictionary.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsReadOnly As Boolean Implements IDictionary.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: >-
        true if the <xref href="System.Collections.Generic.IDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref> is

        read-only; otherwise, false. For <xref href="System.Collections.Generic.ConcurrentDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>, this property always

        returns false.
  implements:
  - System.Collections.IDictionary.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.IsReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IDictionary.Item[Object]
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IDictionary.this[]
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1515
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets or sets the value associated with the specified key.</p>\n"
  example:
  - 
  syntax:
    content: object IDictionary.this[object key] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Item(key As Object) As Object Implements IDictionary.this
    parameters:
    - id: key
      type: System.Object
      description: The key of the value to get or set.
    return:
      type: System.Object
      description: >-
        The value associated with the specified key, or a null reference (Nothing in Visual Basic)

        if <em>key</em> is not in the dictionary or <em>key</em> is of a type that is

        not assignable to the key type <em>TKey</em> of the <xref href="System.Collections.Generic.ConcurrentDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is  <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A value is being assigned, and <em>key</em> is of a type that is not assignable to the key type or the value type of the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IDictionary.Item(System.Object)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Item(System.Object)
  name.vb: System.Collections.IDictionary.Item(Object)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IDictionary.Keys
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Keys
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IDictionary.Keys
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1463
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys of the  <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: ICollection IDictionary.Keys { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Keys As ICollection Implements IDictionary.Keys
    parameters: []
    return:
      type: System.Collections.ICollection
      description: An <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref> containing the keys of the <xref href="System.Collections.Generic.IDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.IDictionary.Keys
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Keys
  name.vb: System.Collections.IDictionary.Keys
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values
  id: System#Collections#IDictionary#Values
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IDictionary.Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Values
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IDictionary.Values
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1492
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the values in the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: ICollection IDictionary.Values { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Values As ICollection Implements IDictionary.Values
    parameters: []
    return:
      type: System.Collections.ICollection
      description: An <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref> containing the values in the <xref href="System.Collections.IDictionary" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.IDictionary.Values
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Values
  name.vb: System.Collections.IDictionary.Values
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Values
  commentId: P:System.Collections.Concurrent.ConcurrentDictionary`2.Values
  id: Values
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Values
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1260
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets a collection that contains the values in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public ICollection<TValue> Values { get; }
    content.vb: Public ReadOnly Property Values As ICollection(Of TValue)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{{TValue}}
      description: >-
        An <xref href="System.Collections.Generic.ICollection{TValue}" data-throw-if-not-resolved="false"></xref> containing the values in

        the

        <xref href="System.Collections.Generic.Dictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Values
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  id: AddOrUpdate(`0,`1,System.Func{`0,`1,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: AddOrUpdate(TKey, TValue, Func<TKey, TValue, TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, TValue, System.Func<TKey, TValue, TValue>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddOrUpdate
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1127
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Adds a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> if the key does not already exist, or updates a key/value pair in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> by using the specified function if the key already exists.</p>\n"
  example:
  - "\n<p>The following code example shows how to initialize an <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> and how to use the AddOrUpdate method to add an additional item to the collection, and update the existing items.</p>System.Collections.ConcurrentColAddUpdate#1"
  syntax:
    content: public TValue AddOrUpdate(TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory)
    content.vb: Public Function AddOrUpdate(key As TKey, addValue As TValue, updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to be added or whose value should be updated
    - id: addValue
      type: '{TValue}'
      description: The value to be added for an absent key
    - id: updateValueFactory
      type: System.Func{{TKey},{TValue},{TValue}}
      description: "The function used to generate a new value for an existing key based on \nthe key's existing value"
    return:
      type: '{TValue}'
      description: "The new value for the key.  This will be either be the result of addValueFactory (if the key was \nabsent) or the result of updateValueFactory (if the key was present)."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> or <em>updateValueFactory</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(TKey, TValue, System.Func(Of TKey, TValue, TValue))
  name.vb: AddOrUpdate(TKey, TValue, Func(Of TKey, TValue, TValue))
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  id: AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: AddOrUpdate(TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.AddOrUpdate(TKey, System.Func<TKey, TValue>, System.Func<TKey, TValue, TValue>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddOrUpdate
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1080
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Uses the specified functions to add a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> if the key does not already exist, or to update a key/value pair in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> if the key already exists.</p>\n"
  remarks: "\n<p>If you call <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})\" data-throw-if-not-resolved=\"false\"></xref> simultaneously on different threads, <em>addValueFactory</em> may be called multiple times, but its key/value pair might not be added to the dictionary for every call. </p>\n"
  example:
  - 
  syntax:
    content: public TValue AddOrUpdate(TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory)
    content.vb: Public Function AddOrUpdate(key As TKey, addValueFactory As Func(Of TKey, TValue), updateValueFactory As Func(Of TKey, TValue, TValue)) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to be added or whose value should be updated
    - id: addValueFactory
      type: System.Func{{TKey},{TValue}}
      description: The function used to generate a value for an absent key
    - id: updateValueFactory
      type: System.Func{{TKey},{TValue},{TValue}}
      description: >-
        The function used to generate a new value for an existing key

        based on the key's existing value
    return:
      type: '{TValue}'
      description: "The new value for the key.  This will be either be the result of addValueFactory (if the key was \nabsent) or the result of updateValueFactory (if the key was present)."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em>, <em>addValueFactory</em>, or <em>updateValueFactory</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).AddOrUpdate(TKey, System.Func(Of TKey, TValue), System.Func(Of TKey, TValue, TValue))
  name.vb: AddOrUpdate(TKey, Func(Of TKey, TValue), Func(Of TKey, TValue, TValue))
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.Clear
  id: Clear
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clear
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 603
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Removes all keys and values from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Clear
  - System.Collections.IDictionary.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).Clear()
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContainsKey
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 375
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> contains the specified key.</p>\n"
  example:
  - 
  syntax:
    content: public bool ContainsKey(TKey key)
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key to locate in the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: >-
        true if the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> contains an element with

        the specified key; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.ContainsKey({TKey})
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.ContainsKey({TKey})
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 768
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary. The contents exposed through the enumerator may contain modifications made to the dictionary after <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> was called.</p>\n"
  example:
  - 
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of KeyValuePair(Of TKey, TValue))
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
      description: An enumerator for the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetEnumerator()
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)
  id: GetOrAdd(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: GetOrAdd(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetOrAdd
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1052
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Adds a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> if the key does not already exist.</p>\n"
  syntax:
    content: public TValue GetOrAdd(TKey key, TValue value)
    content.vb: Public Function GetOrAdd(key As TKey, value As TValue) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: the value to be added, if the key does not already exist
    return:
      type: '{TValue}'
      description: "The value for the key.  This will be either the existing value for the key if the \nkey is already in the dictionary, or the new value if the key was not in the dictionary."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd(TKey, TValue)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})
  id: GetOrAdd(`0,System.Func{`0,`1})
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: GetOrAdd(TKey, Func<TKey, TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.GetOrAdd(TKey, System.Func<TKey, TValue>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetOrAdd
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1026
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Adds a key/value pair to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> by using the specified function, if the key does not already exist.</p>\n"
  remarks: "\n<p>If you call <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})\" data-throw-if-not-resolved=\"false\"></xref> simultaneously on different threads, <em>addValueFactory</em> may be called multiple times, but its key/value pair might not be added to the dictionary for every call. </p>\n"
  syntax:
    content: public TValue GetOrAdd(TKey key, Func<TKey, TValue> valueFactory)
    content.vb: Public Function GetOrAdd(key As TKey, valueFactory As Func(Of TKey, TValue)) As TValue
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: valueFactory
      type: System.Func{{TKey},{TValue}}
      description: The function used to generate a value for the key
    return:
      type: '{TValue}'
      description: >-
        The value for the key.  This will be either the existing value for the key if the

        key is already in the dictionary, or the new value for the key as returned by valueFactory

        if the key was not in the dictionary.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> or <em>valueFactory</em> is <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).GetOrAdd(TKey, System.Func(Of TKey, TValue))
  name.vb: GetOrAdd(TKey, Func(Of TKey, TValue))
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1293
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: void ICollection<KeyValuePair<TKey, TValue>>.Add(KeyValuePair<TKey, TValue> keyValuePair)
    content.vb: Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(keyValuePair As KeyValuePair(Of TKey, TValue)) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Add
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: >-
        The <xref href="System.Collections.Generic.KeyValuePair{TKey,TValue}" data-throw-if-not-resolved="false"></xref>

        structure representing the key and value to add to the <xref href="System.Collections.Generic.Dictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Add(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Add(KeyValuePair(Of TKey, TValue))
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1307
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.Contains(KeyValuePair<TKey, TValue> keyValuePair)
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Contains
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: >-
        The <xref href="System.Collections.Generic.KeyValuePair{TKey,TValue}" data-throw-if-not-resolved="false"></xref>

        structure to locate in the <xref href="System.Collections.Generic.ICollection{TValue}" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: true if the <em>keyValuePair</em> is found in the <xref href="System.Collections.Generic.ICollection{TKey,TValue}" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Contains(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Contains(KeyValuePair(Of TKey, TValue))
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 641
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "ConcurrencyCop just doesn't know about these locks")]

      void ICollection<KeyValuePair<TKey, TValue>>.CopyTo(KeyValuePair<TKey, TValue>[] array, int index)
    content.vb: >-
      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="ConcurrencyCop just doesn't know about these locks")>

      Sub System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(array As KeyValuePair(Of TKey, TValue)(), index As Integer) Implements ICollection(Of KeyValuePair(Of TKey, TValue)).CopyTo
    parameters:
    - id: array
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
      description: >-
        The one-dimensional array of type <xref href="System.Collections.Generic.KeyValuePair{TKey,TValue}" data-throw-if-not-resolved="false"></xref>

        that is the destination of the <xref href="System.Collections.Generic.KeyValuePair{TKey,TValue}" data-throw-if-not-resolved="false"></xref> elements copied from the <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref>. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: >-
        The zero-based index in <em>array</em> at which copying

        begins.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.CopyTo(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[],System.Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  id: System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey,TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1340
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: bool ICollection<KeyValuePair<TKey, TValue>>.Remove(KeyValuePair<TKey, TValue> keyValuePair)
    content.vb: Function System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(keyValuePair As KeyValuePair(Of TKey, TValue)) As Boolean Implements ICollection(Of KeyValuePair(Of TKey, TValue)).Remove
    parameters:
    - id: keyValuePair
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
      description: >-
        The <xref href="System.Collections.Generic.KeyValuePair{TKey,TValue}" data-throw-if-not-resolved="false"></xref>

        structure representing the key and value to remove from the <xref href="System.Collections.Generic.Dictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: >-
        true if the key and value represented by <em>keyValuePair</em> is successfully

        found and removed; otherwise, false.
  implements:
  - System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Remove(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey,TValue>>.Remove(KeyValuePair(Of TKey, TValue))
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  id: System#Collections#Generic#IDictionary{TKey,TValue}#Add(`0,`1)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IDictionary<TKey,TValue>.Add
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1205
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: void IDictionary<TKey, TValue>.Add(TKey key, TValue value)
    content.vb: Sub System.Collections.Generic.IDictionary<TKey,TValue>.Add(key As TKey, value As TValue) Implements IDictionary(Of TKey, TValue).Add
    parameters:
    - id: key
      type: '{TKey}'
      description: The object to use as the key of the element to add.
    - id: value
      type: '{TValue}'
      description: The object to use as the value of the element to add.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Add({TKey},{TValue})
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey, TValue)
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Add(TKey, TValue)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  id: System#Collections#Generic#IDictionary{TKey,TValue}#Remove(`0)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IDictionary<TKey, TValue>.Remove(TKey)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.Generic.IDictionary<TKey,TValue>.Remove
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1225
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  syntax:
    content: bool IDictionary<TKey, TValue>.Remove(TKey key)
    content.vb: Function System.Collections.Generic.IDictionary<TKey,TValue>.Remove(key As TKey) As Boolean Implements IDictionary(Of TKey, TValue).Remove
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove.
    return:
      type: System.Boolean
      description: >
        true if the element is successfully remove; otherwise false. This method also returns

        false if

        <em>key</em> was not found in the original <xref href="System.Collections.Generic.IDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.Remove({TKey})
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey)
  name.vb: System.Collections.Generic.IDictionary<TKey,TValue>.Remove(TKey)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.ICollection.CopyTo
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1562
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Copies the elements of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> to an array, starting at the specified array index.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "ConcurrencyCop just doesn't know about these locks")]

      void ICollection.CopyTo(Array array, int index)
    content.vb: >-
      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="ConcurrencyCop just doesn't know about these locks")>

      Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: >-
        The one-dimensional array that is the destination of the elements copied from

        the <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref>. The array must have zero-based

        indexing.
    - id: index
      type: System.Int32
      description: >-
        The zero-based index in <em>array</em> at which copying

        begins.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> is equal to or greater than the length of the <em>array</em>. </p>\n<p>-or-</p>\n<p>The number of elements in the source <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>.</p>\n"
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IDictionary.Add(Object, Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IDictionary.Add
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1387
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Adds the specified key and value to the dictionary.</p>\n"
  example:
  - 
  syntax:
    content: void IDictionary.Add(object key, object value)
    content.vb: Sub System.Collections.IDictionary.Add(key As Object, value As Object) Implements IDictionary.Add
    parameters:
    - id: key
      type: System.Object
      description: The object to use as the key.
    - id: value
      type: System.Object
      description: The object to use as the value.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>key</em> is of a type that is not assignable to the key type  of the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or- </p>\n<p>\n<em>value</em> is of a type that is not assignable to the type of values in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p> -or-</p>\n<p>A value with the same key already exists in the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  implements:
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Add(System.Object, System.Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IDictionary.Contains(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IDictionary.Contains
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1415
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets whether the <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified key.</p>\n"
  example:
  - 
  syntax:
    content: bool IDictionary.Contains(object key)
    content.vb: Function System.Collections.IDictionary.Contains(key As Object) As Boolean Implements IDictionary.Contains
    parameters:
    - id: key
      type: System.Object
      description: The key to locate in the <xref href="System.Collections.Generic.IDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: >-
        true if the <xref href="System.Collections.Generic.IDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref> contains

        an element with the specified key; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.Contains(System.Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Contains(System.Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator
  id: System#Collections#IDictionary#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IDictionary.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IDictionary.GetEnumerator
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1426
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Provides a <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.Generic.IDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: IDictionaryEnumerator IDictionary.GetEnumerator()
    content.vb: Function System.Collections.IDictionary.GetEnumerator As IDictionaryEnumerator Implements IDictionary.GetEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
      description: An <xref href="System.Collections.Generics.IDictionaryEnumerator" data-throw-if-not-resolved="false"></xref> for the <xref href="System.Collections.Generic.IDictionary{TKey,TValue}" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.IDictionary.GetEnumerator
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.GetEnumerator()
  name.vb: System.Collections.IDictionary.GetEnumerator()
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IDictionary.Remove(Object)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IDictionary.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IDictionary.Remove
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1475
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: void IDictionary.Remove(object key)
    content.vb: Sub System.Collections.IDictionary.Remove(key As Object) Implements IDictionary.Remove
    parameters:
    - id: key
      type: System.Object
      description: The key of the element to remove.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.Remove(System.Object)
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IDictionary.Remove(System.Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 1361
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The enumerator returned from the dictionary is safe to use concurrently with reads and writes to the dictionary, however it does not represent a moment-in-time snapshot of the dictionary. The contents exposed through the enumerator may contain modifications made to the dictionary after <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator\" data-throw-if-not-resolved=\"false\"></xref> was called.</p>\n"
  example:
  - 
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An enumerator for the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.ToArray()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToArray
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 678
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Copies the key and value pairs stored in the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref> to a new array.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "ConcurrencyCop just doesn't know about these locks")]

      public KeyValuePair<TKey, TValue>[] ToArray()
    content.vb: >-
      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="ConcurrencyCop just doesn't know about these locks")>

      Public Function ToArray As KeyValuePair(Of TKey, TValue)()
    return:
      type: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
      description: A new array containing a snapshot of key and value pairs copied from the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).ToArray()
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)
  id: TryAdd(`0,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: TryAdd(TKey, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryAdd
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 358
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Attempts to add the specified key and value to the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method returns <strong>false</strong> if the key already exists. Use the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)\" data-throw-if-not-resolved=\"false\"></xref> or <see cref=\"Overload:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate\"></see> method to update the value in case a key already exists.</p>\n"
  example:
  - "\n<p>The following example shows how to call the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)\" data-throw-if-not-resolved=\"false\"></xref>method:</p>System.Collections.Concurrent.ConcurrentDictionary#2"
  syntax:
    content: public bool TryAdd(TKey key, TValue value)
    content.vb: Public Function TryAdd(key As TKey, value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to add.
    - id: value
      type: '{TValue}'
      description: >-
        The value of the element to add. The value can be a null reference (Nothing

        in Visual Basic) for reference types.
    return:
      type: System.Boolean
      description: >-
        true if the key/value pair was added to the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>

        successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is  <strong>null</strong>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The dictionary already contains the maximum number of elements (<xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryAdd(TKey, TValue)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryGetValue
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 485
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Attempts to get the value associated with the specified key from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "Reviewed for thread safety")]

      public bool TryGetValue(TKey key, out TValue value)
    content.vb: >-
      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="Reviewed for thread safety")>

      Public Function TryGetValue(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the value to get.
    - id: value
      type: '{TValue}'
      description: >-
        When this method returns, <em>value</em> contains the object from

        the

        <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> with the specified key or the default value of

        <em>TValue</em>, if the operation failed.
    return:
      type: System.Boolean
      description: >-
        true if the key was found in the <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref>;

        otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is  <strong>null</strong>.</p>\n"
  implements:
  - System.Collections.Generic.IDictionary{{TKey},{TValue}}.TryGetValue({TKey},{TValue}@)
  - System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.TryGetValue({TKey},{TValue}@)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryGetValue(TKey, ByRef TValue)
  name.vb: TryGetValue(TKey, ByRef TValue)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)
  id: TryRemove(`0,`1@)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: TryRemove(TKey, out TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryRemove(TKey, out TValue)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryRemove
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 395
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Attempts to remove and return the value that has the specified key from the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to call the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)\" data-throw-if-not-resolved=\"false\"></xref> method:</p>System.Collections.Concurrent.ConcurrentDictionary#2"
  syntax:
    content: public bool TryRemove(TKey key, out TValue value)
    content.vb: Public Function TryRemove(key As TKey, ByRef value As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: The key of the element to remove and return.
    - id: value
      type: '{TValue}'
      description: >-
        When this method returns, <em>value</em> contains the object removed from the

        <xref href="System.Collections.Concurrent.ConcurrentDictionary`2" data-throw-if-not-resolved="false"></xref> or the default value of <em>TValue</em>

        if the operation failed.
    return:
      type: System.Boolean
      description: true if an object was removed successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is  <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryRemove(TKey, ByRef TValue)
  name.vb: TryRemove(TKey, ByRef TValue)
- uid: System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  commentId: M:System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)
  id: TryUpdate(`0,`1,`1)
  parent: System.Collections.Concurrent.ConcurrentDictionary`2
  langs:
  - csharp
  - vb
  name: TryUpdate(TKey, TValue, TValue)
  fullName: System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue>.TryUpdate(TKey, TValue, TValue)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryUpdate
    path: src/mscorlib/src/System/Collections/Concurrent/ConcurrentDictionary.cs
    startLine: 530
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Compares the existing value for the specified key with a specified value, and if they are equal, updates the key with a third value.</p>\n"
  example:
  - "\n<p>The following example shows how to call the <xref href=\"System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)\" data-throw-if-not-resolved=\"false\"></xref> method:</p>System.Collections.Concurrent.ConcurrentDictionary#2"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "Reviewed for thread safety")]

      public bool TryUpdate(TKey key, TValue newValue, TValue comparisonValue)
    content.vb: >-
      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="Reviewed for thread safety")>

      Public Function TryUpdate(key As TKey, newValue As TValue, comparisonValue As TValue) As Boolean
    parameters:
    - id: key
      type: '{TKey}'
      description: >-
        The key whose value is compared with <em>comparisonValue</em> and

        possibly replaced.
    - id: newValue
      type: '{TValue}'
      description: The value that replaces the value of the element with <em>key</em> if the comparison results in equality.
    - id: comparisonValue
      type: '{TValue}'
      description: >-
        The value that is compared to the value of the element with

        <em>key</em>.
    return:
      type: System.Boolean
      description: >-
        true if the value with <em>key</em> was equal to <em>comparisonValue</em> and replaced with <em>newValue</em>; otherwise,

        false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentDictionary(Of TKey, TValue).TryUpdate(TKey, TValue, TValue)
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: ICollection(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  name: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IReadOnlyCollection(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerable(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IDictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.ICollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    fullName: System.Collections.Generic.IReadOnlyDictionary
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Count
  name: Count
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Count
- uid: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Count
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.Generic.ICollection`1.Count
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  fullname.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  parent: System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Item({TKey})
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Item(`0)
  name: Item[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    fullName: '['
  - name: TKey
    fullName: TKey
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.Item({TKey})
  parent: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
  name: Item[TKey]
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item[TKey]
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    fullName: '['
  - name: TKey
    fullName: TKey
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: '{TKey}'
  isExternal: false
  name: TKey
  fullName: TKey
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
- uid: System.Collections.Generic.IDictionary`2.Item(`0)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: Item[TKey]
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item[TKey]
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    fullName: '['
  - name: TKey
    fullName: TKey
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: Item[TKey]
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item[TKey]
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Item(TKey)
  name.vb: Item(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item
    isExternal: true
  - name: '['
    fullName: '['
  - name: TKey
    fullName: TKey
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.Item(`0)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Item
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Keys
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Keys
  name: Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.ICollection{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TKey>
  fullName: System.Collections.Generic.ICollection<TKey>
  fullname.vb: System.Collections.Generic.ICollection(Of TKey)
  name.vb: ICollection(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Keys
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: Keys
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Keys
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.IsReadOnly
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.IsReadOnly
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  fullname.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.Keys
  parent: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2.Keys
  name: Keys
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.IEnumerable{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TKey>
  fullName: System.Collections.Generic.IEnumerable<TKey>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TKey)
  name.vb: IEnumerable(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Keys
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: Keys
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.Values
  parent: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2.Values
  name: Values
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.IEnumerable{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TValue>
  fullName: System.Collections.Generic.IEnumerable<TValue>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TValue)
  name.vb: IEnumerable(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2.Values
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: Values
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).Values
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IDictionary.IsFixedSize
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsFixedSize
  fullName: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.IDictionary.IsReadOnly
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsReadOnly
  fullName: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.IDictionary.Item(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Item[Object]
  fullName: System.Collections.IDictionary.Item[System.Object]
  fullname.vb: System.Collections.IDictionary.Item(System.Object)
  name.vb: Item(Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    fullName: '['
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Keys
  parent: System.Collections.IDictionary
  isExternal: true
  name: Keys
  fullName: System.Collections.IDictionary.Keys
- uid: System.Collections.IDictionary.Values
  parent: System.Collections.IDictionary
  isExternal: true
  name: Values
  fullName: System.Collections.IDictionary.Values
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Values
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Values
  name: Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.ICollection{{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<TValue>
  fullName: System.Collections.Generic.ICollection<TValue>
  fullname.vb: System.Collections.Generic.ICollection(Of TValue)
  name.vb: ICollection(Of TValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Values
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: Values
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Values
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Values
- uid: System.Func{{TKey},{TValue},{TValue}}
  parent: System
  definition: System.Func`3
  name: Func<TKey, TValue, TValue>
  fullName: System.Func<TKey, TValue, TValue>
  fullname.vb: System.Func(Of TKey, TValue, TValue)
  name.vb: Func(Of TKey, TValue, TValue)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Func`3
  parent: System
  isExternal: false
  name: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{{TKey},{TValue}}
  parent: System
  definition: System.Func`2
  name: Func<TKey, TValue>
  fullName: System.Func<TKey, TValue>
  fullname.vb: System.Func(Of TKey, TValue)
  name.vb: Func(Of TKey, TValue)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: false
  name: Func<T, TResult>
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Clear
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Clear
  name: Clear()
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: true
  name: Clear()
  fullName: System.Collections.IDictionary.Clear()
  spec.csharp:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Clear
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  fullname.vb: System.Collections.Generic.ICollection(Of T).Clear()
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection<T>.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Clear
    name: Clear
    fullName: System.Collections.Generic.ICollection(Of T).Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.ContainsKey({TKey})
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  name: ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.ContainsKey({TKey})
  parent: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
  name: ContainsKey(TKey)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: ContainsKey(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey(TKey)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: ContainsKey(TKey)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).ContainsKey(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.ContainsKey(`0)
    name: ContainsKey
    fullName: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).ContainsKey
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  fullname.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Add(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Add(`0)
  name: Add(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Add(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Add(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Add
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Add
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.KeyValuePair`2
  name: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Add(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection<T>.Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Add(`0)
    name: Add
    fullName: System.Collections.Generic.ICollection(Of T).Add
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair`2
  parent: System.Collections.Generic
  isExternal: false
  name: KeyValuePair<TKey, TValue>
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>
  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)
  name.vb: KeyValuePair(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Contains(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Contains(`0)
  name: Contains(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Contains(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Contains(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Contains
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Contains
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection<T>.Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Contains(`0)
    name: Contains
    fullName: System.Collections.Generic.ICollection(Of T).Contains
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.CopyTo(System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[],System.Int32)
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(KeyValuePair<TKey, TValue>[], Int32)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo(System.Collections.Generic.KeyValuePair<TKey, TValue>[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).CopyTo(System.Collections.Generic.KeyValuePair(Of TKey, TValue)(), System.Int32)
  name.vb: CopyTo(KeyValuePair(Of TKey, TValue)(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.CopyTo
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).CopyTo
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.KeyValuePair{{TKey},{TValue}}[]
  isExternal: true
  name: KeyValuePair<TKey, TValue>[]
  fullName: System.Collections.Generic.KeyValuePair<TKey, TValue>[]
  fullname.vb: System.Collections.Generic.KeyValuePair(Of TKey, TValue)()
  name.vb: KeyValuePair(Of TKey, TValue)()
  spec.csharp:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection`1
  isExternal: true
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection<T>.CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Generic.ICollection(Of T).CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}.Remove(System.Collections.Generic.KeyValuePair{{TKey},{TValue}})
  parent: System.Collections.Generic.ICollection{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  definition: System.Collections.Generic.ICollection`1.Remove(`0)
  name: Remove(KeyValuePair<TKey, TValue>)
  fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove(System.Collections.Generic.KeyValuePair<TKey, TValue>)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Remove(System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: Remove(KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Remove
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue)).Remove
  - name: (
    fullName: (
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    fullName: System.Collections.Generic.KeyValuePair
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  parent: System.Collections.Generic.ICollection`1
  isExternal: false
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  fullname.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection<T>.Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.ICollection(Of T).Remove
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Add({TKey},{TValue})
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  name: Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: Add(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add(TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Add(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Add
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Add(`0,`1)
    name: Add
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Add
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.Remove({TKey})
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.Remove(`0)
  name: Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.Remove(`0)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: Remove(TKey)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove(TKey)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove(TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.Remove
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.Remove(`0)
    name: Remove
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).Remove
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Add(Object, Object)
  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.Contains(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Contains(Object)
  fullName: System.Collections.IDictionary.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IDictionary.GetEnumerator
  parent: System.Collections.IDictionary
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.IDictionary.Remove(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Remove(Object)
  fullName: System.Collections.IDictionary.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Generic.IDictionary{{TKey},{TValue}}.TryGetValue({TKey},{TValue}@)
  parent: System.Collections.Generic.IDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}.TryGetValue({TKey},{TValue}@)
  parent: System.Collections.Generic.IReadOnlyDictionary{{TKey},{TValue}}
  definition: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
  name: TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IDictionary`2
  isExternal: true
  name: TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
  parent: System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  name: TryGetValue(TKey, TValue)
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, TValue)
  fullname.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2.TryGetValue(`0,`1@)
    name: TryGetValue
    fullName: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue).TryGetValue
    isExternal: true
  - name: (
    fullName: (
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.Collections.Generic.KeyNotFoundException
  isExternal: false
  name: KeyNotFoundException
  fullName: System.Collections.Generic.KeyNotFoundException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
