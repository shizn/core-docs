items:
- uid: System.Security.Cryptography.CspParameters
  commentId: T:System.Security.Cryptography.CspParameters
  id: CspParameters
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.CspParameters.#ctor
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  - System.Security.Cryptography.CspParameters.Flags
  - System.Security.Cryptography.CspParameters.KeyContainerName
  - System.Security.Cryptography.CspParameters.KeyNumber
  - System.Security.Cryptography.CspParameters.ParentWindowHandle
  - System.Security.Cryptography.CspParameters.ProviderName
  - System.Security.Cryptography.CspParameters.ProviderType
  langs:
  - csharp
  - vb
  name: CspParameters
  fullName: System.Security.Cryptography.CspParameters
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CspParameters
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 26
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Contains parameters that are passed to the cryptographic service provider (CSP) that performs cryptographic computations. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> class represents parameters that you can pass to managed cryptography classes that internally use Microsoft Cryptographic Service Providers (CSPs) from the unmanaged Microsoft Cryptography API (CAPI). Classes with names ending in \"CryptoServiceProvider\" are managed code wrappers for the corresponding CSP.</p>\n<p>Use the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> class to do the following:</p>\n<ul><li>\n<p>Specify a particular CSP by passing the provider type to the <xref href=\"System.Security.Cryptography.CspParameters.ProviderType\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Security.Cryptography.CspParameters.ProviderName\" data-throw-if-not-resolved=\"false\"></xref> property.  You can also specify a CSP using an overload of the constructor.</p>\n</li><li>\n<p>Create a key container where you can store cryptographic keys.  Key containers provide the most secure way to persist cryptographic keys and keep them secret from malicious third parties.  For more information about creating key containers, see How to: Store Asymmetric Keys in a Key Container. </p>\n</li><li>\n<p>Specify whether to create an asymmetric signature key or an asymmetric exchange key using the <xref href=\"System.Security.Cryptography.CspParameters.KeyNumber\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following code example creates a key container using the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> class and saves the key in the container. </p>capikey#1<p>The following code example uses the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> class to select a Smart Card Cryptographic Service Provider.  It then signs and verifies data using the smart card.</p>Cryptography.SmartCardCSP#1"
  syntax:
    content: public sealed class CspParameters
    content.vb: Public NotInheritable Class CspParameters
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.CspParameters.KeyContainerName
  commentId: F:System.Security.Cryptography.CspParameters.KeyContainerName
  id: KeyContainerName
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  - vb
  name: KeyContainerName
  fullName: System.Security.Cryptography.CspParameters.KeyContainerName
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeyContainerName
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 28
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the key container name for <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Security.Cryptography.CspParameters.KeyContainerName\" data-throw-if-not-resolved=\"false\"></xref> field to specify a name for your key container.  You can use the container name to retrieve the persisted key within that container. </p>\n<p>For more information about creating key containers, see How to: Store Asymmetric Keys in a Key Container. </p>\n"
  example:
  - "\n<p>The following code example creates a key container using the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> class and saves the key in the container. </p>capikey#1"
  syntax:
    content: public string KeyContainerName
    content.vb: Public KeyContainerName As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CspParameters.KeyNumber
  commentId: F:System.Security.Cryptography.CspParameters.KeyNumber
  id: KeyNumber
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  - vb
  name: KeyNumber
  fullName: System.Security.Cryptography.CspParameters.KeyNumber
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeyNumber
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 29
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Specifies whether an asymmetric key is created as a signature key or an exchange key.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Cryptography.CspParameters.KeyNumber\" data-throw-if-not-resolved=\"false\"></xref> field initializes the <xref href=\"System.Security.Cryptography.CspKeyContainerInfo.KeyNumber\" data-throw-if-not-resolved=\"false\"></xref> property when you initialize a <xref href=\"System.Security.Cryptography.CspKeyContainerInfo\" data-throw-if-not-resolved=\"false\"></xref> object with a <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> object.   </p>\n<p>An exchange key is an asymmetric key pair used to encrypt session keys so that they can be safely stored and exchanged with other users.  You can use the <xref href=\"System.Security.Cryptography.KeyNumber.Exchange\" data-throw-if-not-resolved=\"false\"></xref> value (<strong>1</strong>) to specify an exchange key.  This value corresponds to the <strong>AT_KEYEXCHANGE</strong> value used in the unmanaged Microsoft Cryptographic API (CAPI).  </p>\n<p>A signature key is an asymmetric key pair used for authenticating digitally signed messages or files.  You can use the <xref href=\"System.Security.Cryptography.KeyNumber.Signature\" data-throw-if-not-resolved=\"false\"></xref> value (<strong>2</strong>) to specify a signature key.  This value corresponds to the <strong>AT_SIGNATURE</strong> value used in CAPI.</p>\n<p>By default, the <xref href=\"System.Security.Cryptography.CspParameters.KeyNumber\" data-throw-if-not-resolved=\"false\"></xref> field specifies an exchange key.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.Security.Cryptography.KeyNumber\" data-throw-if-not-resolved=\"false\"></xref> enumeration to specify a key type for an <xref href=\"System.Security.Cryptography.RSACryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref> object.</p>Cryptography.KeyNumber#1"
  syntax:
    content: public int KeyNumber
    content.vb: Public KeyNumber As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CspParameters.ProviderName
  commentId: F:System.Security.Cryptography.CspParameters.ProviderName
  id: ProviderName
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  - vb
  name: ProviderName
  fullName: System.Security.Cryptography.CspParameters.ProviderName
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProviderName
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 30
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the provider name for <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>See the Microsoft Cryptography API (CAPI) documentation in the MSDN library for details on provider names.</p>\n"
  syntax:
    content: public string ProviderName
    content.vb: Public ProviderName As String
    return:
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CspParameters.ProviderType
  commentId: F:System.Security.Cryptography.CspParameters.ProviderType
  id: ProviderType
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  - vb
  name: ProviderType
  fullName: System.Security.Cryptography.CspParameters.ProviderType
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProviderType
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 31
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the provider type code for <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Security.Cryptography.CspParameters.ProviderType\" data-throw-if-not-resolved=\"false\"></xref> field to specify a provider type by passing a numeric value that represents that provider.  The numeric values that represent the default provider types are defined in the WinCrypt.h header file:</p>\n<ul><li>\n<p>To specify a provider compatible with the <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> class, pass a value of <strong>1</strong>.</p>\n</li><li>\n<p>To specify a provider compatible with the <xref href=\"System.Security.Cryptography.DSA\" data-throw-if-not-resolved=\"false\"></xref> class, pass a value of <strong>13</strong>.</p>\n</li></ul>\n<p>The following table lists the provider types and their corresponding numeric values defined in the WinCrypt.h header file.</p>\n<p>Provider Type</p>\n<p>Numeric Value </p>\n<table><tbody><tr><td>\n<p>\n<strong>PROV_RSA_FULL           </strong>\n</p>\n</td><td>\n<p>1</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_RSA_SIG            </strong>\n</p>\n</td><td>\n<p>2</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_DSS                </strong>\n</p>\n</td><td>\n<p>3</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_FORTEZZA           </strong>\n</p>\n</td><td>\n<p>4</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_MS_EXCHANGE        </strong>\n</p>\n</td><td>\n<p>5</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_SSL                </strong>\n</p>\n</td><td>\n<p>6</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_RSA_SCHANNEL       </strong>\n</p>\n</td><td>\n<p>12</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_DSS_DH             </strong>\n</p>\n</td><td>\n<p>13</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_EC_ECDSA_SIG       </strong>\n</p>\n</td><td>\n<p>14</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_EC_ECNRA_SIG       </strong>\n</p>\n</td><td>\n<p>15</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_EC_ECDSA_FULL      </strong>\n</p>\n</td><td>\n<p>16</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_EC_ECNRA_FULL      </strong>\n</p>\n</td><td>\n<p>17</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_DH_SCHANNEL        </strong>\n</p>\n</td><td>\n<p>18</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_SPYRUS_LYNKS       </strong>\n</p>\n</td><td>\n<p>20</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_RNG                </strong>\n</p>\n</td><td>\n<p>21</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_INTEL_SEC          </strong>\n</p>\n</td><td>\n<p>22</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_REPLACE_OWF        </strong>\n</p>\n</td><td>\n<p>23</p>\n</td></tr><tr><td>\n<p>\n<strong>PROV_RSA_AES            </strong>\n</p>\n</td><td>\n<p>24</p>\n</td></tr></tbody></table>\n<p>For more information about the default provider types and their behaviors, see the Microsoft Cryptography API (CAPI) documentation in the MSDN library.</p>\n"
  syntax:
    content: public int ProviderType
    content.vb: Public ProviderType As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CspParameters.#ctor
  commentId: M:System.Security.Cryptography.CspParameters.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  - vb
  name: CspParameters()
  fullName: System.Security.Cryptography.CspParameters.CspParameters()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 32
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This form of <xref href=\"System.Security.Cryptography.CspParameters.#ctor\" data-throw-if-not-resolved=\"false\"></xref> initializes the <xref href=\"System.Security.Cryptography.CspParameters.ProviderType\" data-throw-if-not-resolved=\"false\"></xref> field to a value of <strong>24</strong>, which specifies the PROV_RSA_AES provider.  This default provider is compatible with the <xref href=\"System.Security.Cryptography.Aes\" data-throw-if-not-resolved=\"false\"></xref> algorithm.  </p>\n<p>For information about other provider types, see the <xref href=\"System.Security.Cryptography.CspParameters.ProviderType\" data-throw-if-not-resolved=\"false\"></xref> field. </p>\n"
  example:
  - "\n<p>The following code example creates a key container using the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> class and saves the key in the container. </p>capikey#1"
  syntax:
    content: public CspParameters()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  commentId: M:System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  - vb
  name: CspParameters(Int32)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 33
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> class with the specified provider type code.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Security.Cryptography.CspParameters.#ctor(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> constructor to specify a provider type by passing a numeric value that represents that provider.  The numeric values that represent the default provider types are defined in the WinCrypt.h header file:</p>\n<ul><li>\n<p>To specify a provider compatible with the <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> algorithm, pass a value of <strong>1</strong>to the <em>dwTypeIn</em> parameter.</p>\n</li><li>\n<p>To specify a provider compatible with the <xref href=\"System.Security.Cryptography.DSA\" data-throw-if-not-resolved=\"false\"></xref> algorithm, pass a value of <strong>13</strong>to the <em>dwTypeIn</em> parameter.</p>\n</li></ul>\n<p>For information about other provider type values, see the <xref href=\"System.Security.Cryptography.CspParameters.ProviderType\" data-throw-if-not-resolved=\"false\"></xref> field.  For more information about the default provider types and their behaviors, see the Microsoft Cryptography API (CAPI) documentation in the MSDN library.</p>\n"
  example:
  - "\n<p>The following code example creates a key container using the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> class and saves the key in the container. </p>capikey#1"
  syntax:
    content: public CspParameters(int dwTypeIn)
    content.vb: Public Sub New(dwTypeIn As Integer)
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "\n<p>A provider type code that specifies the kind of provider to create. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  commentId: M:System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  id: '#ctor(System.Int32,System.String)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  - vb
  name: CspParameters(Int32, String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(System.Int32, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 34
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> class with the specified provider type code and name.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor to specify a provider type and name.  </p>\n<p>Specify a provider type by passing a numeric value that represents the desired provider type.  The numeric values that represent the default provider types are defined in the WinCrypt.h header file:</p>\n<ul><li>\n<p>To specify a provider compatible with the <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> algorithm, pass a value of <strong>1</strong>to the <em>dwTypeIn</em> parameter.</p>\n</li><li>\n<p>To specify a provider compatible with the <xref href=\"System.Security.Cryptography.DSA\" data-throw-if-not-resolved=\"false\"></xref> algorithm, pass a value of <strong>13</strong>to the <em>dwTypeIn</em> parameter.</p>\n</li></ul>\n<p>For information about other provider type values, see the <xref href=\"System.Security.Cryptography.CspParameters.ProviderType\" data-throw-if-not-resolved=\"false\"></xref> field.  For more information about the default provider types and their behaviors, see the Microsoft Cryptography API (CAPI) documentation in the MSDN library.</p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> class to select a Smart Card Cryptographic Service Provider.  It then signs and verifies data using the smart card.</p>Cryptography.SmartCardCSP#1"
  syntax:
    content: public CspParameters(int dwTypeIn, string strProviderNameIn)
    content.vb: Public Sub New(dwTypeIn As Integer, strProviderNameIn As String)
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "\n<p>A provider type code that specifies the kind of provider to create.</p>\n"
    - id: strProviderNameIn
      type: System.String
      description: "\n<p>A provider name. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  commentId: M:System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  id: '#ctor(System.Int32,System.String,System.String)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  - vb
  name: CspParameters(Int32, String, String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(System.Int32, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 35
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> class with the specified provider type code and name, and the specified container name.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor to specify a provider type, a provider name, and a container name.</p>\n<p>You can use the container name to retrieve a key within that container.     </p>\n<p>Specify a provider type by passing a numeric value that represents the desired provider type.  The numeric values that represent the default provider types are defined in the WinCrypt.h header file:</p>\n<ul><li>\n<p>To specify a provider compatible with the <xref href=\"System.Security.Cryptography.RSA\" data-throw-if-not-resolved=\"false\"></xref> algorithm, pass a value of <strong>1</strong>to the <em>dwTypeIn</em> parameter.</p>\n</li><li>\n<p>To specify a provider compatible with the <xref href=\"System.Security.Cryptography.DSA\" data-throw-if-not-resolved=\"false\"></xref> algorithm, pass a value of <strong>13</strong>to the <em>dwTypeIn</em> parameter.</p>\n</li></ul>\n<p>For information about other provider type values, see the <xref href=\"System.Security.Cryptography.CspParameters.ProviderType\" data-throw-if-not-resolved=\"false\"></xref> field.  For more information about the default provider types and their behaviors, see the Microsoft Cryptography API (CAPI) documentation in the MSDN library.</p>\n"
  syntax:
    content: public CspParameters(int dwTypeIn, string strProviderNameIn, string strContainerNameIn)
    content.vb: Public Sub New(dwTypeIn As Integer, strProviderNameIn As String, strContainerNameIn As String)
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "\n<p>The provider type code that specifies the kind of provider to create.</p>\n"
    - id: strProviderNameIn
      type: System.String
      description: "\n<p>A provider name. </p>\n"
    - id: strContainerNameIn
      type: System.String
      description: "\n<p>A container name. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CspParameters.Flags
  commentId: P:System.Security.Cryptography.CspParameters.Flags
  id: Flags
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  - vb
  name: Flags
  fullName: System.Security.Cryptography.CspParameters.Flags
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flags
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 36
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the flags for <xref href=\"System.Security.Cryptography.CspParameters\" data-throw-if-not-resolved=\"false\"></xref> that modify the behavior of the cryptographic service provider (CSP).</p>\n"
  syntax:
    content: public CspProviderFlags Flags { get; set; }
    content.vb: Public Property Flags As CspProviderFlags
    parameters: []
    return:
      type: System.Security.Cryptography.CspProviderFlags
      description: "\n<p>An enumeration value, or a bitwise combination of enumeration values.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Value is not a valid enumeration value.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle
  commentId: P:System.Security.Cryptography.CspParameters.ParentWindowHandle
  id: ParentWindowHandle
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  - vb
  name: ParentWindowHandle
  fullName: System.Security.Cryptography.CspParameters.ParentWindowHandle
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParentWindowHandle
    path: src/System.Security.Cryptography.Csp/ref/System.Security.Cryptography.Csp.cs
    startLine: 37
  assemblies:
  - System.Security.Cryptography.Csp
  namespace: System.Security.Cryptography
  summary: "\n<p>Gets or sets a handle to the unmanaged parent window for a smart card password dialog box.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Security.Cryptography.CspParameters.ParentWindowHandle\" data-throw-if-not-resolved=\"false\"></xref> property to specify a handle to the unmanaged parent window for a smart card password dialog box.  When you specify a handle using this property, a smart card password dialog box will be presented to the user.  </p>\n<p>You can avoid presenting a smart card password dialog box by explicitly specifying a password by using the <xref href=\"System.Security.Cryptography.CspParameters.KeyPassword\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - 
  syntax:
    content: public IntPtr ParentWindowHandle { get; set; }
    content.vb: Public Property ParentWindowHandle As IntPtr
    parameters: []
    return:
      type: System.IntPtr
      description: "\n<p>A handle to the parent window for a smart card password dialog box.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CspProviderFlags
  parent: System.Security.Cryptography
  isExternal: false
  name: CspProviderFlags
  fullName: System.Security.Cryptography.CspProviderFlags
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
