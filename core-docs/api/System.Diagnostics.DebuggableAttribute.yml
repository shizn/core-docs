items:
- uid: System.Diagnostics.DebuggableAttribute
  commentId: T:System.Diagnostics.DebuggableAttribute
  id: DebuggableAttribute
  parent: System.Diagnostics
  children:
  - System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)
  langs:
  - csharp
  - vb
  name: DebuggableAttribute
  fullName: System.Diagnostics.DebuggableAttribute
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DebuggableAttribute
    path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
    startLine: 59
  assemblies:
  - System.Runtime
  namespace: System.Diagnostics
  summary: "\n<p>Modifies code generation for runtime just-in-time (JIT) debugging. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Diagnostics.DebuggableAttribute\" data-throw-if-not-resolved=\"false\"></xref> controls how the runtime treats code within the module. The runtime might track extra information about generated code, and it might disable certain optimizations based on the values contained within this attribute.  </p>\n<p>A debugger might choose to ignore the <xref href=\"System.Diagnostics.DebuggableAttribute\" data-throw-if-not-resolved=\"false\"></xref> settings when loading an assembly. However, attaching a debugger to a running program may prevent the debugger from changing the settings because they have already been applied.</p>\n<p>To use the <xref href=\"System.Diagnostics.DebuggableAttribute\" data-throw-if-not-resolved=\"false\"></xref> with dynamic assemblies using the Reflection Emit <see cref=\"Overload:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule\"></see> methods, emit the <xref href=\"System.Diagnostics.DebuggableAttribute\" data-throw-if-not-resolved=\"false\"></xref> before calling the <see cref=\"Overload:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule\"></see> methods to ensure that the settings are applied to the entire assembly.</p>\n<p>For more information about using attributes, see Extending Metadata Using Attributes.</p>\n"
  syntax:
    content: >-
      [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Module, AllowMultiple = false)]

      [ComVisible(true)]

      public sealed class DebuggableAttribute : Attribute, _Attribute
    content.vb: >-
      <AttributeUsage(AttributeTargets.Assembly Or AttributeTargets.Module, AllowMultiple:=False)>

      <ComVisible(True)>

      Public NotInheritable Class DebuggableAttribute
          Inherits Attribute
          Implements _Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 3
    namedArguments:
    - name: AllowMultiple
      type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)
  commentId: M:System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)
  id: '#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)'
  parent: System.Diagnostics.DebuggableAttribute
  langs:
  - csharp
  - vb
  name: DebuggableAttribute(DebuggableAttribute.DebuggingModes)
  fullName: System.Diagnostics.DebuggableAttribute.DebuggableAttribute(System.Diagnostics.DebuggableAttribute.DebuggingModes)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
    startLine: 92
  assemblies:
  - System.Runtime
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.DebuggableAttribute\" data-throw-if-not-resolved=\"false\"></xref> class, using the specified debugging modes for the just-in-time (JIT) compiler. </p>\n"
  remarks: "\n<p>Calling the <xref href=\"System.Diagnostics.DebuggableAttribute.#ctor(System.Diagnostics.DebuggableAttribute.DebuggingModes)\" data-throw-if-not-resolved=\"false\"></xref> constructor with a <em>modes</em> parameter value of <xref href=\"System.Diagnostics.DebuggableAttribute.DebuggingModes.Default\" data-throw-if-not-resolved=\"false\"></xref> is equivalent to calling the <xref href=\"System.Diagnostics.DebuggableAttribute.#ctor(System.Boolean,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> constructor with an <em>isJITTrackingEnabled</em> parameter value of <strong>true</strong>. </p>\n"
  syntax:
    content: public DebuggableAttribute(DebuggableAttribute.DebuggingModes modes)
    content.vb: Public Sub New(modes As DebuggableAttribute.DebuggingModes)
    parameters:
    - id: modes
      type: System.Diagnostics.DebuggableAttribute.DebuggingModes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Diagnostics.DebuggableAttribute.DebuggingModes
  parent: System.Diagnostics
  isExternal: false
  name: DebuggableAttribute.DebuggingModes
  fullName: System.Diagnostics.DebuggableAttribute.DebuggingModes
