items:
- uid: System.Data.SqlClient.SqlConnection
  commentId: T:System.Data.SqlClient.SqlConnection
  id: SqlConnection
  parent: System.Data.SqlClient
  children:
  - System.Data.SqlClient.SqlConnection.#ctor
  - System.Data.SqlClient.SqlConnection.#ctor(System.String)
  - System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.SqlClient.SqlConnection.BeginTransaction
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  - System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  - System.Data.SqlClient.SqlConnection.ClearAllPools
  - System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlConnection.ClientConnectionId
  - System.Data.SqlClient.SqlConnection.Close
  - System.Data.SqlClient.SqlConnection.ConnectionString
  - System.Data.SqlClient.SqlConnection.ConnectionTimeout
  - System.Data.SqlClient.SqlConnection.CreateCommand
  - System.Data.SqlClient.SqlConnection.CreateDbCommand
  - System.Data.SqlClient.SqlConnection.Database
  - System.Data.SqlClient.SqlConnection.DataSource
  - System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  - System.Data.SqlClient.SqlConnection.InfoMessage
  - System.Data.SqlClient.SqlConnection.Open
  - System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlConnection.PacketSize
  - System.Data.SqlClient.SqlConnection.ResetStatistics
  - System.Data.SqlClient.SqlConnection.RetrieveStatistics
  - System.Data.SqlClient.SqlConnection.ServerVersion
  - System.Data.SqlClient.SqlConnection.State
  - System.Data.SqlClient.SqlConnection.StatisticsEnabled
  - System.Data.SqlClient.SqlConnection.WorkstationId
  langs:
  - csharp
  - vb
  name: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
  type: Class
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlConnection
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs
    startLine: 16
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: 'public sealed class SqlConnection : DbConnection, DbConnection'
    content.vb: >-
      Public NotInheritable Class SqlConnection
          Inherits DbConnection
          Implements DbConnection
  inheritance:
  - System.Object
  implements:
  - System.Data.Common.DbConnection
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Data.SqlClient.SqlConnection.#ctor
  commentId: M:System.Data.SqlClient.SqlConnection.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: SqlConnection()
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection()
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs
    startLine: 26
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>When a new instance of <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref href=\"System.Data.SqlClient.SqlConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>Properties </p>\n<p>Initial value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>empty string (\"\") </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlConnection.ConnectionTimeout\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>15 </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlConnection.Database\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>empty string (\"\") </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlConnection.DataSource\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>empty string (\"\") </p>\n</td></tr></tbody></table>\n<p>You can change the value for these properties only by using the <xref href=\"System.Data.SqlClient.SqlConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Data.SqlClient.SqlConnectionStringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class provides functionality for creating and managing the contents of connection strings.</p>\n"
  example:
  - "\n<p>The following example creates and opens a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic WebData SqlConnection.SqlConnection Example#1"
  syntax:
    content: public SqlConnection()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String)
  commentId: M:System.Data.SqlClient.SqlConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: SqlConnection(String)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 50
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> class when given a string that contains the connection string.</p>\n"
  remarks: "\n<p>When a new instance of <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> is created, the read/write properties are set to the following initial values unless they are specifically set using their associated keywords in the <xref href=\"System.Data.SqlClient.SqlConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>Properties </p>\n<p>Initial value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<em>connectionString</em>\n</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlConnection.ConnectionTimeout\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>15 </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlConnection.Database\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>empty string (\"\") </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Data.SqlClient.SqlConnection.DataSource\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>empty string (\"\") </p>\n</td></tr></tbody></table>\n<p>You can change the value for these properties only by using the <xref href=\"System.Data.SqlClient.SqlConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> class provides functionality for creating and managing the contents of connection strings.</p>\n"
  example:
  - "\n<p>The following example creates and opens a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic WebData SqlConnection.SqlConnection1 Example#1"
  syntax:
    content: public SqlConnection(string connectionString)
    content.vb: Public Sub New(connectionString As String)
    parameters:
    - id: connectionString
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId
  commentId: P:System.Data.SqlClient.SqlConnection.ClientConnectionId
  id: ClientConnectionId
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: ClientConnectionId
  fullName: System.Data.SqlClient.SqlConnection.ClientConnectionId
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClientConnectionId
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 245
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public Guid ClientConnectionId { get; }
    content.vb: Public ReadOnly Property ClientConnectionId As Guid
    parameters: []
    return:
      type: System.Guid
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlConnection.ConnectionString
  commentId: P:System.Data.SqlClient.SqlConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: ConnectionString
  fullName: System.Data.SqlClient.SqlConnection.ConnectionString
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectionString
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 156
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public override string ConnectionString { get; set; }
    content.vb: Public Overrides Property ConnectionString As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  commentId: P:System.Data.SqlClient.SqlConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: ConnectionTimeout
  fullName: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectionTimeout
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 170
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public override int ConnectionTimeout { get; }
    content.vb: Public Overrides ReadOnly Property ConnectionTimeout As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlConnection.Database
  commentId: P:System.Data.SqlClient.SqlConnection.Database
  id: Database
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: Database
  fullName: System.Data.SqlClient.SqlConnection.Database
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Database
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 179
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public override string Database { get; }
    content.vb: Public Overrides ReadOnly Property Database As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlConnection.DataSource
  commentId: P:System.Data.SqlClient.SqlConnection.DataSource
  id: DataSource
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: DataSource
  fullName: System.Data.SqlClient.SqlConnection.DataSource
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DataSource
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 202
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public override string DataSource { get; }
    content.vb: Public Overrides ReadOnly Property DataSource As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  commentId: P:System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  id: FireInfoMessageEventOnUserErrors
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: FireInfoMessageEventOnUserErrors
  fullName: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FireInfoMessageEventOnUserErrors
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 318
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public bool FireInfoMessageEventOnUserErrors { get; set; }
    content.vb: Public Property FireInfoMessageEventOnUserErrors As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnection.PacketSize
  commentId: P:System.Data.SqlClient.SqlConnection.PacketSize
  id: PacketSize
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: PacketSize
  fullName: System.Data.SqlClient.SqlConnection.PacketSize
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PacketSize
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 222
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public int PacketSize { get; }
    content.vb: Public ReadOnly Property PacketSize As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlConnection.ServerVersion
  commentId: P:System.Data.SqlClient.SqlConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: ServerVersion
  fullName: System.Data.SqlClient.SqlConnection.ServerVersion
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ServerVersion
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 267
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public override string ServerVersion { get; }
    content.vb: Public Overrides ReadOnly Property ServerVersion As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlConnection.State
  commentId: P:System.Data.SqlClient.SqlConnection.State
  id: State
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: State
  fullName: System.Data.SqlClient.SqlConnection.State
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: State
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 275
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public override ConnectionState State { get; }
    content.vb: Public Overrides ReadOnly Property State As ConnectionState
    parameters: []
    return:
      type: ConnectionState
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  commentId: P:System.Data.SqlClient.SqlConnection.StatisticsEnabled
  id: StatisticsEnabled
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: StatisticsEnabled
  fullName: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StatisticsEnabled
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 81
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public bool StatisticsEnabled { get; set; }
    content.vb: Public Property StatisticsEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnection.WorkstationId
  commentId: P:System.Data.SqlClient.SqlConnection.WorkstationId
  id: WorkstationId
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: WorkstationId
  fullName: System.Data.SqlClient.SqlConnection.WorkstationId
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WorkstationId
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 297
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: public string WorkstationId { get; }
    content.vb: Public ReadOnly Property WorkstationId As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlClient.SqlConnection.InfoMessage
  commentId: E:System.Data.SqlClient.SqlConnection.InfoMessage
  id: InfoMessage
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: InfoMessage
  fullName: System.Data.SqlClient.SqlConnection.InfoMessage
  type: Event
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InfoMessage
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 316
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Occurs when SQL Server returns a warning or informational message.</p>\n"
  remarks: "\n<p>Clients that want to process warnings or informational messages sent by the server should create an <xref href=\"System.Data.SqlClient.SqlInfoMessageEventHandler\" data-throw-if-not-resolved=\"false\"></xref> delegate to listen to this event.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection.InfoMessage\" data-throw-if-not-resolved=\"false\"></xref> event occurs when a message with a severity of 10 or less is returned by SQL Server. Messages that have a severity between 11 and 20 raise an error and messages that have a severity over 20 causes the connection to close. For more information on SQL Server error levels, see \"Database Engine Error Severities\" in SQL Server Books Online.</p>\n<p>For more information and an example, see Connection Events.</p>\n"
  syntax:
    content: public event SqlInfoMessageEventHandler InfoMessage
    content.vb: Public Event InfoMessage As SqlInfoMessageEventHandler
    return:
      type: System.Data.SqlClient.SqlInfoMessageEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  commentId: M:System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: BeginDbTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginDbTransaction
    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
    startLine: 338
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: protected override Common.DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
    content.vb: Protected Overrides Function BeginDbTransaction(isolationLevel As IsolationLevel) As Common.DbTransaction
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
    return:
      type: System.Data.Common.DbTransaction
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction
  commentId: M:System.Data.SqlClient.SqlConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: BeginTransaction()
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginTransaction
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 353
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Starts a database transaction.</p>\n"
  remarks: "\n<p>This command maps to the SQL Server implementation of BEGIN TRANSACTION.</p>\n<p>You must explicitly commit or roll back the transaction using the <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> method. To make sure that the .NET Framework Data Provider for SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.</p>\n<p>If you do not specify an isolation level, the default isolation level is used. To specify an isolation level with the <see cref=\"Overload:System.Data.SqlClient.SqlConnection.BeginTransaction\"></see> method, use the overload that takes the <em>iso</em> parameter (<xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)\" data-throw-if-not-resolved=\"false\"></xref>). The isolation level set for a transaction persists after the transaction is completed and until the connection is closed or disposed. Setting the isolation level to <strong>Snapshot</strong> in a database where the snapshot isolation level is not enabled does not throw an exception. The transaction will complete using the default isolation level.</p>\n<p>If a transaction is started and a level 16 or higher error occurs on the server, the transaction will not be rolled back until the <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method is invoked. No exception is thrown on <strong>ExecuteReader</strong>.</p>\n<p>When your query returns a large amount of data and calls <strong>BeginTransaction</strong>, a <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> is thrown because SQL Server does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.</p>\n<p>For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref>. It also demonstrates how to use the <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref>, a <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>Classic WebData SqlConnection.BeginTransaction Example#1"
  syntax:
    content: public SqlTransaction BeginTransaction()
    content.vb: Public Function BeginTransaction As SqlTransaction
    return:
      type: System.Data.SqlClient.SqlTransaction
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Parallel transactions are not supported. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  commentId: M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: BeginTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginTransaction
    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
    startLine: 340
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Starts a database transaction with the specified isolation level.</p>\n"
  remarks: "\n<p>This command maps to the SQL Server implementation of BEGIN TRANSACTION.</p>\n<p>You must explicitly commit or roll back the transaction using the <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> method. To make sure that the .NET Framework Data Provider for SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.</p>\n<p>After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the SQL Server default). This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row. To reset the isolation level to the default (READ COMMITTED), execute the Transact-SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref> followed immediately by <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref>. For more information on SQL Server isolation levels, see \"Isolation Levels in the Database Engine\" in SQL Server Books Online.</p>\n<p>For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.</p>\n<p>When your query returns a large amount of data and calls <strong>BeginTransaction</strong>, a <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> is thrown because SQL Server does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref>. It also demonstrates how to use the <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref>, a <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>Classic WebData SqlConnection.BeginTransaction1 Example#1"
  syntax:
    content: public SqlTransaction BeginTransaction(IsolationLevel iso)
    content.vb: Public Function BeginTransaction(iso As IsolationLevel) As SqlTransaction
    parameters:
    - id: iso
      type: System.Data.IsolationLevel
      description: "\n<p>The isolation level under which the transaction should run. </p>\n"
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "\n<p>An object representing the new transaction.</p>\n"
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Parallel transactions are not supported. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  commentId: M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  id: BeginTransaction(System.Data.IsolationLevel,System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: BeginTransaction(IsolationLevel, String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel, System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginTransaction
    path: src/System.Data.SqlClient/ref/System.Data.SqlClient.cs
    startLine: 341
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Starts a database transaction with the specified isolation level and transaction name.</p>\n"
  remarks: "\n<p>This command maps to the SQL Server implementation of BEGIN TRANSACTION.</p>\n<p>The value in the <em>transactionName</em> parameter can be used in later calls to <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> and in the <em>savePoint</em> parameter of the <xref href=\"System.Data.SqlClient.SqlTransaction.Save(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>You must explicitly commit or roll back the transaction using the <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> method. To make sure that the SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.</p>\n<p>After a transaction is committed or rolled back, the isolation level of the transaction persists for all subsequent commands that are in autocommit mode (the SQL Server default). This can produce unexpected results, such as an isolation level of REPEATABLE READ persisting and locking other users out of a row. To reset the isolation level to the default (READ COMMITTED), execute the Transact-SQL SET TRANSACTION ISOLATION LEVEL READ COMMITTED statement, or call <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref> followed immediately by <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref>. For more information on SQL Server isolation levels, see \"Isolation Levels in the Database Engine\" in SQL Server Books Online.</p>\n<p>For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.</p>\n<p>When your query returns a large amount of data and calls <strong>BeginTransaction</strong>, a <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> is thrown because SQL Server does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref>. It also demonstrates how to use the <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref>, a <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>Classic WebData SqlConnection.BeginTransaction3 Example#1"
  syntax:
    content: public SqlTransaction BeginTransaction(IsolationLevel iso, string transactionName)
    content.vb: Public Function BeginTransaction(iso As IsolationLevel, transactionName As String) As SqlTransaction
    parameters:
    - id: iso
      type: System.Data.IsolationLevel
      description: "\n<p>The isolation level under which the transaction should run. </p>\n"
    - id: transactionName
      type: System.String
      description: "\n<p>The name of the transaction. </p>\n"
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "\n<p>An object representing the new transaction.</p>\n"
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Parallel transactions are not supported. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  commentId: M:System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  id: BeginTransaction(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: BeginTransaction(String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginTransaction
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 365
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Starts a database transaction with the specified transaction name.</p>\n"
  remarks: "\n<p>This command maps to the SQL Server implementation of BEGIN TRANSACTION.</p>\n<p>The length of the <em>transactionName</em> parameter must not exceed 32 characters; otherwise an exception will be thrown.</p>\n<p>The value in the <em>transactionName</em> parameter can be used in later calls to <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> and in the <em>savePoint</em> parameter of the <xref href=\"System.Data.SqlClient.SqlTransaction.Save(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>You must explicitly commit or roll back the transaction using the <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> method. To make sure that the .NET Framework Data Provider for SQL Server transaction management model performs correctly, avoid using other transaction management models, such as the one provided by SQL Server.</p>\n<p>For more information on SQL Server transactions, see \"Explicit Transactions\" and \"Coding Efficient Transactions\" in SQL Server Books Online.</p>\n<p>When your query returns a large amount of data and calls <strong>BeginTransaction</strong>, a <xref href=\"System.Data.SqlClient.SqlException\" data-throw-if-not-resolved=\"false\"></xref> is thrown because SQL Server does not allow parallel transactions when using MARS. To avoid this problem, always associate a transaction with the command, the connection, or both before any readers are open.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> and a <xref href=\"System.Data.SqlClient.SqlTransaction\" data-throw-if-not-resolved=\"false\"></xref>. It also demonstrates how to use the <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref>, a <xref href=\"System.Data.SqlClient.SqlTransaction.Commit\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Data.SqlClient.SqlTransaction.Rollback\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>Classic WebData SqlConnection.BeginTransaction2 Example#1"
  syntax:
    content: public SqlTransaction BeginTransaction(string transactionName)
    content.vb: Public Function BeginTransaction(transactionName As String) As SqlTransaction
    parameters:
    - id: transactionName
      type: System.String
    return:
      type: System.Data.SqlClient.SqlTransaction
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>Parallel transactions are not allowed when using Multiple Active Result Sets (MARS).</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Parallel transactions are not supported. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  commentId: M:System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: ChangeDatabase(String)
  fullName: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChangeDatabase
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 420
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Changes the current database for an open <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The value supplied in the <em>database</em> parameter must be a valid database name. The <em>database</em> parameter cannot contain a null value, an empty string, or a string with only blank characters.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> and displays some of its read-only properties.</p>Classic WebData SqlConnection.Database Example#1"
  syntax:
    content: public override void ChangeDatabase(string database)
    content.vb: Public Overrides Sub ChangeDatabase(database As String)
    parameters:
    - id: database
      type: System.String
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The database name is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection is not open. </p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>Cannot change the database. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools
  commentId: M:System.Data.SqlClient.SqlConnection.ClearAllPools
  id: ClearAllPools
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: ClearAllPools()
  fullName: System.Data.SqlClient.SqlConnection.ClearAllPools()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClearAllPools
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 435
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Empties the connection pool.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Data.SqlClient.SqlConnection.ClearAllPools\" data-throw-if-not-resolved=\"false\"></xref> resets (or empties) the connection pool. If there are connections in use at the time of the call, they are marked appropriately and will be discarded (instead of being returned to the pool) when <xref href=\"System.Data.SqlClient.SqlConnection.Close\" data-throw-if-not-resolved=\"false\"></xref> is called on them.</p>\n"
  syntax:
    content: public static void ClearAllPools()
    content.vb: Public Shared Sub ClearAllPools
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  commentId: M:System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  id: ClearPool(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: ClearPool(SqlConnection)
  fullName: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClearPool
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 440
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Empties the connection pool associated with the specified connection.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)\" data-throw-if-not-resolved=\"false\"></xref> clears the connection pool that is associated with the <em>connection</em>. If additional connections associated with <em>connection</em> are in use at the time of the call, they are marked appropriately and are discarded (instead of being returned to the pool) when <xref href=\"System.Data.SqlClient.SqlConnection.Close\" data-throw-if-not-resolved=\"false\"></xref> is called on them. </p>\n"
  syntax:
    content: public static void ClearPool(SqlConnection connection)
    content.vb: Public Shared Sub ClearPool(connection As SqlConnection)
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlClient.SqlConnection.Close
  commentId: M:System.Data.SqlClient.SqlConnection.Close
  id: Close
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: Close()
  fullName: System.Data.SqlClient.SqlConnection.Close()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Close
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 462
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Closes the connection to the database. This is the preferred method of closing any open connection.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection.Close\" data-throw-if-not-resolved=\"false\"></xref> method rolls back any pending transactions. It then releases the connection to the connection pool, or closes the connection if connection pooling is disabled.</p>\n<p>Pending transactions started using Transact-SQL or <xref href=\"System.Data.SqlClient.SqlConnection.BeginTransaction\" data-throw-if-not-resolved=\"false\"></xref> are automatically rolled back when the connection is reset if connection pooling is enabled. If connection pooling is off, the transaction is rolled back after <strong>SqlConnection.Close</strong> is called. Transactions started through <xref href=\"System.Transactions\" data-throw-if-not-resolved=\"false\"></xref> are controlled through the <strong>System.Transactions</strong> infrastructure, and are not affected by <strong>SqlConnection.Close</strong>.</p>\n<p>An application can call <xref href=\"System.Data.SqlClient.SqlConnection.Close\" data-throw-if-not-resolved=\"false\"></xref> more than one time. No exception is generated.</p>\n<p>If the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling <strong>Close</strong> or <strong>Dispose</strong>. <strong>Close</strong> and <strong>Dispose</strong> are functionally equivalent. If the connection pooling value <strong>Pooling</strong> is set to <strong>true</strong> or <strong>yes</strong>, the underlying connection is returned back to the connection pool. On the other hand, if <strong>Pooling</strong> is set to <strong>false</strong> or <strong>no</strong>, the underlying connection to the server is closed.</p>\n<p>Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see SQL Server Connection Pooling (ADO.NET).</p>\n<p>Do not call <strong>Close</strong> or <strong>Dispose</strong> on a Connection, a DataReader, or any other managed object in the <strong>Finalize</strong> method of your class. In a finalizer, you should only release unmanaged resources that your class owns directly. If your class does not own any unmanaged resources, do not include a <strong>Finalize</strong> method in your class definition. For more information, see Garbage Collection.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>, opens it, displays some of its properties. The connection is automatically closed at the end of the <strong>using</strong> block.</p>Classic WebData SqlConnection.Open Example#1"
  syntax:
    content: public override void Close()
    content.vb: Public Overrides Sub Close
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>The connection-level error that occurred while opening the connection. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlConnection.CreateCommand
  commentId: M:System.Data.SqlClient.SqlConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: CreateCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateCommand()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateCommand
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 538
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Creates and returns a <xref href=\"System.Data.SqlClient.SqlCommand\" data-throw-if-not-resolved=\"false\"></xref> object associated with the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - SqlConnection_CreateCommand#1
  syntax:
    content: public SqlCommand CreateCommand()
    content.vb: Public Function CreateCommand As SqlCommand
    return:
      type: System.Data.SqlClient.SqlCommand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand
  commentId: M:System.Data.SqlClient.SqlConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: CreateDbCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateDbCommand()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateDbCommand
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs
    startLine: 132
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: protected override DbCommand CreateDbCommand()
    content.vb: Protected Overrides Function CreateDbCommand As DbCommand
    return:
      type: DbCommand
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Data.SqlClient.SqlConnection.Open
  commentId: M:System.Data.SqlClient.SqlConnection.Open
  id: Open
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: Open()
  fullName: System.Data.SqlClient.SqlConnection.Open()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Open
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 563
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Opens a database connection with the property settings specified by the <xref href=\"System.Data.SqlClient.SqlConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> draws an open connection from the connection pool if one is available. Otherwise, it establishes a new connection to an instance of SQL Server.</p>\n<p>If the <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> goes out of scope, it is not closed. Therefore, you must explicitly close the connection by calling <xref href=\"System.Data.SqlClient.SqlConnection.Close\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If you specify a port number other than 1433 when you are trying to connect to an instance of SQL Server and using a protocol other than TCP/IP, the <xref href=\"System.Data.SqlClient.SqlConnection.Open\" data-throw-if-not-resolved=\"false\"></xref> method fails. To specify a port number other than 1433, include \"server=machinename,port number\" in the connection string, and use the TCP/IP protocol.</p>\n<p>The .NET Framework Data Provider for SQL Server requires the Security permission with \"Allows calls to unmanaged assemblies\" enabled (<xref href=\"System.Security.Permissions.SecurityPermission\" data-throw-if-not-resolved=\"false\"></xref> with <xref href=\"System.Security.Permissions.SecurityPermissionFlag\" data-throw-if-not-resolved=\"false\"></xref> set to <strong>UnmanagedCode</strong>) to open a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref> with SQL Debugging enabled.</p>\n"
  example:
  - "\n<p>The following example creates a <xref href=\"System.Data.SqlClient.SqlConnection\" data-throw-if-not-resolved=\"false\"></xref>, opens it, and displays some of its properties. The connection is automatically closed at the end of the <strong>using</strong> block.</p>Classic WebData SqlConnection.Open Example#1"
  syntax:
    content: public override void Open()
    content.vb: Public Overrides Sub Open
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Cannot open a connection without specifying a data source or server.</p>\n<p>or</p>\n<p>The connection is already open.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>A connection-level error occurred while opening the connection. If the <xref href=\"System.Data.SqlClient.SqlException.Number\" data-throw-if-not-resolved=\"false\"></xref> property contains the value 18487 or 18488, this indicates that the specified password has expired or must be reset. See the <xref href=\"System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method for more information.</p>\n<p>The <strong><system.data.localdb></strong> tag in the app.config file has invalid or unknown elements.</p>\n"
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "\n<p>There are two entries with the same name in the <strong><localdbinstances></strong> section.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  commentId: M:System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: OpenAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenAsync
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 807
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.SqlClient.SqlConnection.Open\" data-throw-if-not-resolved=\"false\"></xref>, which opens a database connection with the property settings specified by the <xref href=\"System.Data.SqlClient.SqlConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref>. The cancellation token can be used to request that the operation be abandoned before the connection timeout elapses.  Exceptions will be propagated via the returned Task. If the connection timeout time elapses without successfully connecting, the returned Task will be marked as faulted with an Exception. The implementation returns a Task without blocking the calling thread for both pooled and non-pooled connections.</p>\n"
  remarks: "\n<p>After calling <xref href=\"System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Data.SqlClient.SqlConnection.State\" data-throw-if-not-resolved=\"false\"></xref> must return <xref href=\"System.Data.ConnectionState.Connecting\" data-throw-if-not-resolved=\"false\"></xref> until the returned <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> is completed. Then, if the connection was successful, <xref href=\"System.Data.SqlClient.SqlConnection.State\" data-throw-if-not-resolved=\"false\"></xref> must return <xref href=\"System.Data.ConnectionState.Open\" data-throw-if-not-resolved=\"false\"></xref>. If the connection fails, <xref href=\"System.Data.SqlClient.SqlConnection.State\" data-throw-if-not-resolved=\"false\"></xref> must return <xref href=\"System.Data.ConnectionState.Closed\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A call to <xref href=\"System.Data.SqlClient.SqlConnection.Close\" data-throw-if-not-resolved=\"false\"></xref> will attempt to cancel or close the corresponding <xref href=\"System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> call.</p>\n<p>For more information about asynchronous programming in the .NET Framework Data Provider for SQL Server, see Asynchronous Programming.</p>\n"
  syntax:
    content: public override Task OpenAsync(CancellationToken cancellationToken)
    content.vb: Public Overrides Function OpenAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Calling <xref href=\"System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> more than once for the same instance before task completion.</p>\n<p>\n<strong>Context Connection=true</strong> is specified in the connection string.</p>\n<p>A connection was not available from the connection pool before the connection time out elapsed.</p>\n"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "\n<p>Any error returned by SQL Server that occurred while opening the connection.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics
  commentId: M:System.Data.SqlClient.SqlConnection.ResetStatistics
  id: ResetStatistics
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: ResetStatistics()
  fullName: System.Data.SqlClient.SqlConnection.ResetStatistics()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResetStatistics
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 1231
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>If statistics gathering is enabled, all values are reset to zero.</p>\n"
  remarks: "\n<p>If statistics gathering is not enabled and this method is called, no error is thrown.</p>\n"
  syntax:
    content: public void ResetStatistics()
    content.vb: Public Sub ResetStatistics
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics
  commentId: M:System.Data.SqlClient.SqlConnection.RetrieveStatistics
  id: RetrieveStatistics
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: RetrieveStatistics()
  fullName: System.Data.SqlClient.SqlConnection.RetrieveStatistics()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RetrieveStatistics
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnection.cs
    startLine: 1244
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Returns a name value pair collection of statistics at the point in time the method is called.</p>\n"
  remarks: "\n<p>When this method is called, the values retrieved are those at the current point in time. If you continue using the connection, the values are incorrect. You need to re-execute the method to obtain the most current values.</p>\n"
  syntax:
    content: public IDictionary RetrieveStatistics()
    content.vb: Public Function RetrieveStatistics As IDictionary
    return:
      type: System.Collections.IDictionary
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  commentId: M:System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlConnectionHelper.cs
    startLine: 142
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Data.Common.DbConnection
  parent: System.Data.Common
  isExternal: false
  name: DbConnection
  fullName: System.Data.Common.DbConnection
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Data.Common
  isExternal: false
  name: System.Data.Common
  fullName: System.Data.Common
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  fullName: System.Guid
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data
  isExternal: false
  name: System.Data
  fullName: System.Data
- uid: System.Data.SqlClient.SqlInfoMessageEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlInfoMessageEventHandler
  fullName: System.Data.SqlClient.SqlInfoMessageEventHandler
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlCommand
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Data.SqlClient.SqlException
  isExternal: false
  name: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Configuration.ConfigurationErrorsException
