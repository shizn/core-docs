items:
- uid: System.Func`9
  commentId: T:System.Func`9
  id: Func`9
  parent: System
  children: []
  langs:
  - csharp
  - vb
  name: Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, T6, T7, T8, TResult>
  type: Delegate
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Func
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 896
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Encapsulates a method that has eight parameters and returns a value of the type specified by the <em>TResult</em> parameter.</p>\n"
  remarks: "\n<p>You can use this delegate to represent a method that can be passed as a parameter without explicitly declaring a custom delegate. The encapsulated method must correspond to the method signature that is defined by this delegate. This means that the encapsulated method must have eight parameters, each of which is passed to it by value, and that it must return a value.</p>\n<p>To reference a method that has eight parameters and returns <strong>void</strong> (or in Visual Basic, that is declared as a <strong>Sub</strong> rather than as a <strong>Function</strong>), use the generic <xref href=\"System.Action`8\" data-throw-if-not-resolved=\"false\"></xref> delegate instead. </p>\n<p>You can also use the <xref href=\"System.Func`9\" data-throw-if-not-resolved=\"false\"></xref> delegate with anonymous methods and lambda expressions.</p>\n<p>The underlying type of a lambda expression is one of the generic <strong>Func</strong> delegates. This makes it possible to pass a lambda expression as a parameter without explicitly assigning it to a delegate.</p>\n"
  example:
  - 
  syntax:
    content: public delegate TResult Func<in T1, in T2, in T3, in T4, in T5, in T6, in T7, in T8, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4, T5 arg5, T6 arg6, T7 arg7, T8 arg8);
    content.vb: Public Delegate Function Func(Of In T1, In T2, In T3, In T4, In T5, In T6, In T7, In T8, Out TResult)(arg1 As T1, arg2 As T2, arg3 As T3, arg4 As T4, arg5 As T5, arg6 As T6, arg7 As T7, arg8 As T8) As TResult
    parameters:
    - id: arg1
      type: '{T1}'
      description: "\n<p>The first parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg2
      type: '{T2}'
      description: "\n<p>The second parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg3
      type: '{T3}'
      description: "\n<p>The third parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg4
      type: '{T4}'
      description: "\n<p>The fourth parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg5
      type: '{T5}'
      description: "\n<p>The fifth parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg6
      type: '{T6}'
      description: "\n<p>The sixth parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg7
      type: '{T7}'
      description: "\n<p>The seventh parameter of the method that this delegate encapsulates.</p>\n"
    - id: arg8
      type: '{T8}'
      description: "\n<p>The eighth parameter of the method that this delegate encapsulates.</p>\n"
    typeParameters:
    - id: T1
      description: "\n<p>The type of the first parameter of the method that this delegate encapsulates.</p>\n"
    - id: T2
      description: "\n<p>The type of the second parameter of the method that this delegate encapsulates.</p>\n"
    - id: T3
      description: "\n<p>The type of the third parameter of the method that this delegate encapsulates.</p>\n"
    - id: T4
      description: "\n<p>The type of the fourth parameter of the method that this delegate encapsulates.</p>\n"
    - id: T5
      description: "\n<p>The type of the fifth parameter of the method that this delegate encapsulates.</p>\n"
    - id: T6
      description: "\n<p>The type of the sixth parameter of the method that this delegate encapsulates.</p>\n"
    - id: T7
      description: "\n<p>The type of the seventh parameter of the method that this delegate encapsulates.</p>\n"
    - id: T8
      description: "\n<p>The type of the eighth parameter of the method that this delegate encapsulates.</p>\n"
    - id: TResult
      description: "\n<p>The type of the return value of the method that this delegate encapsulates.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The return value of the method that this delegate encapsulates.</p>\n"
  seealso:
  - type: System.Action`8
    commentId: T:System.Action`8
  modifiers.csharp:
  - public
  - delegate
  modifiers.vb:
  - Public
  - Delegate
  fullName.vb: System.Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, T6, T7, T8, TResult)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{T1}'
  isExternal: false
  name: T1
  fullName: T1
- uid: '{T2}'
  isExternal: false
  name: T2
  fullName: T2
- uid: '{T3}'
  isExternal: false
  name: T3
  fullName: T3
- uid: '{T4}'
  isExternal: false
  name: T4
  fullName: T4
- uid: '{T5}'
  isExternal: false
  name: T5
  fullName: T5
- uid: '{T6}'
  isExternal: false
  name: T6
  fullName: T6
- uid: '{T7}'
  isExternal: false
  name: T7
  fullName: T7
- uid: '{T8}'
  isExternal: false
  name: T8
  fullName: T8
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
