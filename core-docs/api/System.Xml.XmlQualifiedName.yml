items:
- uid: System.Xml.XmlQualifiedName
  commentId: T:System.Xml.XmlQualifiedName
  id: XmlQualifiedName
  parent: System.Xml
  children:
  - System.Xml.XmlQualifiedName.#ctor
  - System.Xml.XmlQualifiedName.#ctor(System.String)
  - System.Xml.XmlQualifiedName.#ctor(System.String,System.String)
  - System.Xml.XmlQualifiedName.Empty
  - System.Xml.XmlQualifiedName.Equals(System.Object)
  - System.Xml.XmlQualifiedName.GetHashCode
  - System.Xml.XmlQualifiedName.IsEmpty
  - System.Xml.XmlQualifiedName.Name
  - System.Xml.XmlQualifiedName.Namespace
  - System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  - System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  - System.Xml.XmlQualifiedName.ToString
  - System.Xml.XmlQualifiedName.ToString(System.String,System.String)
  langs:
  - csharp
  - vb
  name: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
  type: Class
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlQualifiedName
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 213
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Represents an XML qualified name.</p>\n"
  remarks: "\n<p>An XML qualified name is a namespace qualified local name in the format of <strong>namespace:localname</strong>.</p>\n<p>Because prefixes are only required when XML is persisted or read, they are irrelevant for <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> objects. This class assumes that prefixes are irrelevant. It is the responsibility of the user to ensure the local name does not contain a \":\".</p>\n"
  example:
  - "\n<p>For an example using the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> class, see <xref href=\"System.Xml.Schema.XmlSchemaAll\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public class XmlQualifiedName
    content.vb: Public Class XmlQualifiedName
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Xml.XmlQualifiedName.Empty
  commentId: F:System.Xml.XmlQualifiedName.Empty
  id: Empty
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: Empty
  fullName: System.Xml.XmlQualifiedName.Empty
  type: Field
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 215
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Provides an empty <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static readonly XmlQualifiedName Empty
    content.vb: Public Shared ReadOnly Empty As XmlQualifiedName
    return:
      type: System.Xml.XmlQualifiedName
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Xml.XmlQualifiedName.#ctor
  commentId: M:System.Xml.XmlQualifiedName.#ctor
  id: '#ctor'
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: XmlQualifiedName()
  fullName: System.Xml.XmlQualifiedName.XmlQualifiedName()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 216
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>The object created has no name or namespace defined.</p>\n"
  syntax:
    content: public XmlQualifiedName()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlQualifiedName.#ctor(System.String)
  commentId: M:System.Xml.XmlQualifiedName.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: XmlQualifiedName(String)
  fullName: System.Xml.XmlQualifiedName.XmlQualifiedName(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 217
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> class with the specified name.</p>\n"
  remarks: "\n<p>The object created does not have a namespace defined.</p>\n"
  syntax:
    content: public XmlQualifiedName(string name)
    content.vb: Public Sub New(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The local name to use as the name of the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlQualifiedName.#ctor(System.String,System.String)
  commentId: M:System.Xml.XmlQualifiedName.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: XmlQualifiedName(String, String)
  fullName: System.Xml.XmlQualifiedName.XmlQualifiedName(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 218
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> class with the specified name and namespace.</p>\n"
  syntax:
    content: public XmlQualifiedName(string name, string ns)
    content.vb: Public Sub New(name As String, ns As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The local name to use as the name of the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace for the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlQualifiedName.IsEmpty
  commentId: P:System.Xml.XmlQualifiedName.IsEmpty
  id: IsEmpty
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: IsEmpty
  fullName: System.Xml.XmlQualifiedName.IsEmpty
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEmpty
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 219
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n"
  syntax:
    content: public bool IsEmpty { get; }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if name and namespace are empty strings; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.XmlQualifiedName.Name
  commentId: P:System.Xml.XmlQualifiedName.Name
  id: Name
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Xml.XmlQualifiedName.Name
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 220
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a string representation of the qualified name of the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A string representation of the qualified name or String.Empty if a name is not defined for the object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.XmlQualifiedName.Namespace
  commentId: P:System.Xml.XmlQualifiedName.Namespace
  id: Namespace
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: Namespace
  fullName: System.Xml.XmlQualifiedName.Namespace
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Namespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 221
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a string representation of the namespace of the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public string Namespace { get; }
    content.vb: Public ReadOnly Property Namespace As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A string representation of the namespace or String.Empty if a namespace is not defined for the object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.XmlQualifiedName.Equals(System.Object)
  commentId: M:System.Xml.XmlQualifiedName.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Xml.XmlQualifiedName.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 222
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Determines whether the specified <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> object is equal to the current <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  syntax:
    content: public override bool Equals(object other)
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>The <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two are the same instance object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlQualifiedName.GetHashCode
  commentId: M:System.Xml.XmlQualifiedName.GetHashCode
  id: GetHashCode
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Xml.XmlQualifiedName.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 223
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Returns the hash code for the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash code for this object.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  commentId: M:System.Xml.XmlQualifiedName.op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  id: op_Equality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: Equality(XmlQualifiedName, XmlQualifiedName)
  fullName: System.Xml.XmlQualifiedName.Equality(System.Xml.XmlQualifiedName, System.Xml.XmlQualifiedName)
  type: Operator
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 224
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Compares two <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  syntax:
    content: public static bool operator ==(XmlQualifiedName a, XmlQualifiedName b)
    content.vb: Public Shared Operator =(a As XmlQualifiedName, b As XmlQualifiedName) As Boolean
    parameters:
    - id: a
      type: System.Xml.XmlQualifiedName
      description: "\n<p>An <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> to compare. </p>\n"
    - id: b
      type: System.Xml.XmlQualifiedName
      description: "\n<p>An <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects have the same name and namespace values; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  commentId: M:System.Xml.XmlQualifiedName.op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  id: op_Inequality(System.Xml.XmlQualifiedName,System.Xml.XmlQualifiedName)
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: Inequality(XmlQualifiedName, XmlQualifiedName)
  fullName: System.Xml.XmlQualifiedName.Inequality(System.Xml.XmlQualifiedName, System.Xml.XmlQualifiedName)
  type: Operator
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 225
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Compares two <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  syntax:
    content: public static bool operator !=(XmlQualifiedName a, XmlQualifiedName b)
    content.vb: Public Shared Operator <>(a As XmlQualifiedName, b As XmlQualifiedName) As Boolean
    parameters:
    - id: a
      type: System.Xml.XmlQualifiedName
      description: "\n<p>An <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> to compare. </p>\n"
    - id: b
      type: System.Xml.XmlQualifiedName
      description: "\n<p>An <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the name and namespace values for the two objects differ; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlQualifiedName.ToString
  commentId: M:System.Xml.XmlQualifiedName.ToString
  id: ToString
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Xml.XmlQualifiedName.ToString()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 226
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Returns the string value of the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The string value of the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> in the format of <strong>namespace:localname</strong>. If the object does not have a namespace defined, this method returns just the local name.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.XmlQualifiedName.ToString(System.String,System.String)
  commentId: M:System.Xml.XmlQualifiedName.ToString(System.String,System.String)
  id: ToString(System.String,System.String)
  parent: System.Xml.XmlQualifiedName
  langs:
  - csharp
  - vb
  name: ToString(String, String)
  fullName: System.Xml.XmlQualifiedName.ToString(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 227
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Returns the string value of the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static string ToString(string name, string ns)
    content.vb: Public Shared Function ToString(name As String, ns As String) As String
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the object. </p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace of the object. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string value of the <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> in the format of <strong>namespace:localname</strong>. If the object does not have a namespace defined, this method returns just the local name.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Xml.XmlQualifiedName
  parent: System.Xml
  isExternal: false
  name: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
