items:
- uid: System.Security.AccessControl.FileSystemRights
  commentId: T:System.Security.AccessControl.FileSystemRights
  id: FileSystemRights
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.FileSystemRights.AppendData
  - System.Security.AccessControl.FileSystemRights.ChangePermissions
  - System.Security.AccessControl.FileSystemRights.CreateDirectories
  - System.Security.AccessControl.FileSystemRights.CreateFiles
  - System.Security.AccessControl.FileSystemRights.Delete
  - System.Security.AccessControl.FileSystemRights.DeleteSubdirectoriesAndFiles
  - System.Security.AccessControl.FileSystemRights.ExecuteFile
  - System.Security.AccessControl.FileSystemRights.FullControl
  - System.Security.AccessControl.FileSystemRights.ListDirectory
  - System.Security.AccessControl.FileSystemRights.Modify
  - System.Security.AccessControl.FileSystemRights.Read
  - System.Security.AccessControl.FileSystemRights.ReadAndExecute
  - System.Security.AccessControl.FileSystemRights.ReadAttributes
  - System.Security.AccessControl.FileSystemRights.ReadData
  - System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes
  - System.Security.AccessControl.FileSystemRights.ReadPermissions
  - System.Security.AccessControl.FileSystemRights.Synchronize
  - System.Security.AccessControl.FileSystemRights.TakeOwnership
  - System.Security.AccessControl.FileSystemRights.Traverse
  - System.Security.AccessControl.FileSystemRights.Write
  - System.Security.AccessControl.FileSystemRights.WriteAttributes
  - System.Security.AccessControl.FileSystemRights.WriteData
  - System.Security.AccessControl.FileSystemRights.WriteExtendedAttributes
  langs:
  - csharp
  - vb
  name: FileSystemRights
  fullName: System.Security.AccessControl.FileSystemRights
  type: Enum
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileSystemRights
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 78
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Defines the access rights to use when creating access and audit rules. </p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemRights\" data-throw-if-not-resolved=\"false\"></xref> enumeration specifies which file system actions are allowed for a particular user account and which file system actions are audited for a particular user account.      </p>\n<p>Use the <xref href=\"System.Security.AccessControl.FileSystemRights\" data-throw-if-not-resolved=\"false\"></xref> enumeration when creating an access rule with the <xref href=\"System.Security.AccessControl.FileSystemAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class or when creating an audit rule with the <xref href=\"System.Security.AccessControl.FileSystemAuditRule\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>This enumeration contains several granular system rights values and several values that are a combination of those granular values.  It is easier to use the combination values such as <xref href=\"System.Security.AccessControl.FileSystemRights.FullControl\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.AccessControl.FileSystemRights.Read\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.AccessControl.FileSystemRights.Write\" data-throw-if-not-resolved=\"false\"></xref>, rather than specifying each component value separately.  </p>\n"
  example:
  - "\n<p>The following code example uses the <xref href=\"System.Security.AccessControl.FileSystemRights\" data-throw-if-not-resolved=\"false\"></xref> enumeration to specify an access rule and then remove the access rule from a file.  You must supply a valid user or group account to run this example.</p>IO.File.GetAccessControl-SetAccessControl#1"
  syntax:
    content: 'public enum FileSystemRights : int'
    content.vb: Public Enum FileSystemRights As Integer
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Security.AccessControl.FileSystemRights.AppendData
  commentId: F:System.Security.AccessControl.FileSystemRights.AppendData
  id: AppendData
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: AppendData
  fullName: System.Security.AccessControl.FileSystemRights.AppendData
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AppendData
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 82
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to append data to the end of a file.</p>\n"
  syntax:
    content: AppendData = null
    content.vb: AppendData = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.ChangePermissions
  commentId: F:System.Security.AccessControl.FileSystemRights.ChangePermissions
  id: ChangePermissions
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: ChangePermissions
  fullName: System.Security.AccessControl.FileSystemRights.ChangePermissions
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChangePermissions
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 83
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to change the security and audit rules associated with a file or folder.</p>\n"
  syntax:
    content: ChangePermissions = null
    content.vb: ChangePermissions = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.CreateDirectories
  commentId: F:System.Security.AccessControl.FileSystemRights.CreateDirectories
  id: CreateDirectories
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: CreateDirectories
  fullName: System.Security.AccessControl.FileSystemRights.CreateDirectories
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateDirectories
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 84
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to create a folder.  </p>\n"
  remarks: "\n<p>This right requires the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> value.  Note that if you do not explicitly set the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> value when creating a file or folder, the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> value will be set automatically for you. </p>\n"
  syntax:
    content: CreateDirectories = null
    content.vb: CreateDirectories = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.CreateFiles
  commentId: F:System.Security.AccessControl.FileSystemRights.CreateFiles
  id: CreateFiles
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: CreateFiles
  fullName: System.Security.AccessControl.FileSystemRights.CreateFiles
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateFiles
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 85
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to create a file.  </p>\n"
  remarks: "\n<p>This right requires the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> value.  Note that if you do not explicitly set the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> value when creating a file or folder, the <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> value will be set automatically for you.</p>\n"
  syntax:
    content: CreateFiles = null
    content.vb: CreateFiles = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.Delete
  commentId: F:System.Security.AccessControl.FileSystemRights.Delete
  id: Delete
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: Delete
  fullName: System.Security.AccessControl.FileSystemRights.Delete
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Delete
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 86
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to delete a folder or file. </p>\n"
  syntax:
    content: Delete = null
    content.vb: Delete = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.DeleteSubdirectoriesAndFiles
  commentId: F:System.Security.AccessControl.FileSystemRights.DeleteSubdirectoriesAndFiles
  id: DeleteSubdirectoriesAndFiles
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: DeleteSubdirectoriesAndFiles
  fullName: System.Security.AccessControl.FileSystemRights.DeleteSubdirectoriesAndFiles
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteSubdirectoriesAndFiles
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 87
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to delete a folder and any files contained within that folder.</p>\n"
  syntax:
    content: DeleteSubdirectoriesAndFiles = null
    content.vb: DeleteSubdirectoriesAndFiles = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.ExecuteFile
  commentId: F:System.Security.AccessControl.FileSystemRights.ExecuteFile
  id: ExecuteFile
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: ExecuteFile
  fullName: System.Security.AccessControl.FileSystemRights.ExecuteFile
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExecuteFile
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 88
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to run an application file.</p>\n"
  syntax:
    content: ExecuteFile = null
    content.vb: ExecuteFile = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.FullControl
  commentId: F:System.Security.AccessControl.FileSystemRights.FullControl
  id: FullControl
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: FullControl
  fullName: System.Security.AccessControl.FileSystemRights.FullControl
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullControl
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 89
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to exert full control over a folder or file, and to modify access control and audit rules.  This value represents the right to do anything with a file and is the combination of all rights in this enumeration.</p>\n"
  syntax:
    content: FullControl = null
    content.vb: FullControl = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.ListDirectory
  commentId: F:System.Security.AccessControl.FileSystemRights.ListDirectory
  id: ListDirectory
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: ListDirectory
  fullName: System.Security.AccessControl.FileSystemRights.ListDirectory
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListDirectory
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 90
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to read the contents of a directory.</p>\n"
  syntax:
    content: ListDirectory = null
    content.vb: ListDirectory = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.Modify
  commentId: F:System.Security.AccessControl.FileSystemRights.Modify
  id: Modify
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: Modify
  fullName: System.Security.AccessControl.FileSystemRights.Modify
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modify
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 91
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to read, write, list folder contents, delete folders and files, and run application files.  This right includes the <xref href=\"System.Security.AccessControl.FileSystemRights.ReadAndExecute\" data-throw-if-not-resolved=\"false\"></xref> right, the <xref href=\"System.Security.AccessControl.FileSystemRights.Write\" data-throw-if-not-resolved=\"false\"></xref> right, and the <xref href=\"System.Security.AccessControl.FileSystemRights.Delete\" data-throw-if-not-resolved=\"false\"></xref> right.</p>\n"
  syntax:
    content: Modify = null
    content.vb: Modify = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.Read
  commentId: F:System.Security.AccessControl.FileSystemRights.Read
  id: Read
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: Read
  fullName: System.Security.AccessControl.FileSystemRights.Read
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 92
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to open and copy folders or files as read-only.  This right includes the <xref href=\"System.Security.AccessControl.FileSystemRights.ReadData\" data-throw-if-not-resolved=\"false\"></xref> right, <xref href=\"System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes\" data-throw-if-not-resolved=\"false\"></xref> right, <xref href=\"System.Security.AccessControl.FileSystemRights.ReadAttributes\" data-throw-if-not-resolved=\"false\"></xref> right, and <xref href=\"System.Security.AccessControl.FileSystemRights.ReadPermissions\" data-throw-if-not-resolved=\"false\"></xref> right.</p>\n"
  syntax:
    content: Read = null
    content.vb: Read = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.ReadAndExecute
  commentId: F:System.Security.AccessControl.FileSystemRights.ReadAndExecute
  id: ReadAndExecute
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: ReadAndExecute
  fullName: System.Security.AccessControl.FileSystemRights.ReadAndExecute
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAndExecute
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 93
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to open and copy folders or files as read-only, and to run application files.  This right includes the <xref href=\"System.Security.AccessControl.FileSystemRights.Read\" data-throw-if-not-resolved=\"false\"></xref> right and the <xref href=\"System.Security.AccessControl.FileSystemRights.ExecuteFile\" data-throw-if-not-resolved=\"false\"></xref> right.</p>\n"
  syntax:
    content: ReadAndExecute = null
    content.vb: ReadAndExecute = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.ReadAttributes
  commentId: F:System.Security.AccessControl.FileSystemRights.ReadAttributes
  id: ReadAttributes
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: ReadAttributes
  fullName: System.Security.AccessControl.FileSystemRights.ReadAttributes
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAttributes
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 94
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to open and copy file system attributes from a folder or file.  For example, this value specifies the right to view the file creation or modified date.  This does not include the right to read data, extended file system attributes, or access and audit rules.</p>\n"
  syntax:
    content: ReadAttributes = null
    content.vb: ReadAttributes = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.ReadData
  commentId: F:System.Security.AccessControl.FileSystemRights.ReadData
  id: ReadData
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: ReadData
  fullName: System.Security.AccessControl.FileSystemRights.ReadData
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadData
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 95
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to open and copy a file or folder.  This does not include the right to read file system attributes, extended file system attributes, or access and audit rules.</p>\n"
  syntax:
    content: ReadData = null
    content.vb: ReadData = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes
  commentId: F:System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes
  id: ReadExtendedAttributes
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: ReadExtendedAttributes
  fullName: System.Security.AccessControl.FileSystemRights.ReadExtendedAttributes
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadExtendedAttributes
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 96
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to open and copy extended file system attributes from a folder or file.  For example, this value specifies the right to view author and content information.  This does not include the right to read data, file system attributes, or access and audit rules.</p>\n"
  syntax:
    content: ReadExtendedAttributes = null
    content.vb: ReadExtendedAttributes = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.ReadPermissions
  commentId: F:System.Security.AccessControl.FileSystemRights.ReadPermissions
  id: ReadPermissions
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: ReadPermissions
  fullName: System.Security.AccessControl.FileSystemRights.ReadPermissions
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadPermissions
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 97
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to open and copy access and audit rules from a folder or file.  This does not include the right to read data, file system attributes, and extended file system attributes. </p>\n"
  syntax:
    content: ReadPermissions = null
    content.vb: ReadPermissions = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.Synchronize
  commentId: F:System.Security.AccessControl.FileSystemRights.Synchronize
  id: Synchronize
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: Synchronize
  fullName: System.Security.AccessControl.FileSystemRights.Synchronize
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Synchronize
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 98
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies whether the application can wait for a file handle to synchronize with the completion of an I/O operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.FileSystemRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> value is automatically set when allowing access, and automatically excluded when denying access.</p>\n<p>The right to create a file or folder requires this value.  Note that if you do not explicitly set this value when creating a file, the value will be set automatically for you.</p>\n"
  syntax:
    content: Synchronize = null
    content.vb: Synchronize = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.TakeOwnership
  commentId: F:System.Security.AccessControl.FileSystemRights.TakeOwnership
  id: TakeOwnership
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: TakeOwnership
  fullName: System.Security.AccessControl.FileSystemRights.TakeOwnership
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeOwnership
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 99
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to change the owner of a folder or file.  Note that owners of a resource have full access to that resource.</p>\n"
  syntax:
    content: TakeOwnership = null
    content.vb: TakeOwnership = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.Traverse
  commentId: F:System.Security.AccessControl.FileSystemRights.Traverse
  id: Traverse
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: Traverse
  fullName: System.Security.AccessControl.FileSystemRights.Traverse
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Traverse
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 100
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to list the contents of a folder and to run applications contained within that folder.</p>\n"
  syntax:
    content: Traverse = null
    content.vb: Traverse = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.Write
  commentId: F:System.Security.AccessControl.FileSystemRights.Write
  id: Write
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: Write
  fullName: System.Security.AccessControl.FileSystemRights.Write
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 101
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to create folders and files, and to add or remove data from files.  This right includes the <xref href=\"System.Security.AccessControl.FileSystemRights.WriteData\" data-throw-if-not-resolved=\"false\"></xref> right, <xref href=\"System.Security.AccessControl.FileSystemRights.AppendData\" data-throw-if-not-resolved=\"false\"></xref> right, <xref href=\"System.Security.AccessControl.FileSystemRights.WriteExtendedAttributes\" data-throw-if-not-resolved=\"false\"></xref> right, and <xref href=\"System.Security.AccessControl.FileSystemRights.WriteAttributes\" data-throw-if-not-resolved=\"false\"></xref> right. </p>\n"
  syntax:
    content: Write = null
    content.vb: Write = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.WriteAttributes
  commentId: F:System.Security.AccessControl.FileSystemRights.WriteAttributes
  id: WriteAttributes
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: WriteAttributes
  fullName: System.Security.AccessControl.FileSystemRights.WriteAttributes
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAttributes
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 102
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to open and write file system attributes to a folder or file. This does not include the ability to write data, extended attributes, or access and audit rules.</p>\n"
  syntax:
    content: WriteAttributes = null
    content.vb: WriteAttributes = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.WriteData
  commentId: F:System.Security.AccessControl.FileSystemRights.WriteData
  id: WriteData
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: WriteData
  fullName: System.Security.AccessControl.FileSystemRights.WriteData
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteData
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 103
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to open and write to a file or folder.  This does not include the right to open and write file system attributes, extended file system attributes, or access and audit rules.</p>\n"
  syntax:
    content: WriteData = null
    content.vb: WriteData = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.AccessControl.FileSystemRights.WriteExtendedAttributes
  commentId: F:System.Security.AccessControl.FileSystemRights.WriteExtendedAttributes
  id: WriteExtendedAttributes
  parent: System.Security.AccessControl.FileSystemRights
  langs:
  - csharp
  - vb
  name: WriteExtendedAttributes
  fullName: System.Security.AccessControl.FileSystemRights.WriteExtendedAttributes
  type: Field
  source:
    remote:
      path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteExtendedAttributes
    path: src/System.IO.FileSystem.AccessControl/ref/System.IO.FileSystem.AccessControl.cs
    startLine: 104
  assemblies:
  - System.IO.FileSystem.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Specifies the right to open and write extended file system attributes to a folder or file.  This does not include the ability to write data, attributes, or access and audit rules.</p>\n"
  syntax:
    content: WriteExtendedAttributes = null
    content.vb: WriteExtendedAttributes = Nothing
    return:
      type: System.Security.AccessControl.FileSystemRights
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Security.AccessControl.FileSystemRights
  parent: System.Security.AccessControl
  isExternal: false
  name: FileSystemRights
  fullName: System.Security.AccessControl.FileSystemRights
