items:
- uid: System.Security.Cryptography.IncrementalHash
  commentId: T:System.Security.Cryptography.IncrementalHash
  id: IncrementalHash
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.IncrementalHash.AlgorithmName
  - System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])
  - System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  - System.Security.Cryptography.IncrementalHash.Dispose
  - System.Security.Cryptography.IncrementalHash.GetHashAndReset
  langs:
  - csharp
  - vb
  name: IncrementalHash
  fullName: System.Security.Cryptography.IncrementalHash
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IncrementalHash
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
    startLine: 12
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: 'public sealed class IncrementalHash : IDisposable'
    content.vb: >-
      Public NotInheritable Class IncrementalHash
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.IncrementalHash.AlgorithmName
  commentId: P:System.Security.Cryptography.IncrementalHash.AlgorithmName
  id: AlgorithmName
  parent: System.Security.Cryptography.IncrementalHash
  langs:
  - csharp
  - vb
  name: AlgorithmName
  fullName: System.Security.Cryptography.IncrementalHash.AlgorithmName
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AlgorithmName
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
    startLine: 42
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public HashAlgorithmName AlgorithmName { get; }
    content.vb: Public ReadOnly Property AlgorithmName As HashAlgorithmName
    parameters: []
    return:
      type: HashAlgorithmName
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])
  commentId: M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])
  id: AppendData(System.Byte[])
  parent: System.Security.Cryptography.IncrementalHash
  langs:
  - csharp
  - vb
  name: AppendData(Byte[])
  fullName: System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AppendData
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
    startLine: 53
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public void AppendData(byte[] data)
    content.vb: Public Sub AppendData(data As Byte())
    parameters:
    - id: data
      type: System.Byte[]
      description: The data to process.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.IncrementalHash.AppendData(System.Byte())
  name.vb: AppendData(Byte())
- uid: System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)
  id: AppendData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.IncrementalHash
  langs:
  - csharp
  - vb
  name: AppendData(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AppendData
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
    startLine: 81
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public void AppendData(byte[] data, int offset, int count)
    content.vb: Public Sub AppendData(data As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: data
      type: System.Byte[]
      description: The data to process.
    - id: offset
      type: System.Int32
      description: The offset into the byte array from which to begin using data.
    - id: count
      type: System.Int32
      description: The number of bytes in the array to use as data.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.IncrementalHash.AppendData(System.Byte(), System.Int32, System.Int32)
  name.vb: AppendData(Byte(), Int32, Int32)
- uid: System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)
  id: CreateHash(System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.IncrementalHash
  langs:
  - csharp
  - vb
  name: CreateHash(HashAlgorithmName)
  fullName: System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/4.0/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateHash
    path: src/System.Security.Cryptography.Algorithms/ref/4.0/System.Security.Cryptography.Algorithms.cs
    startLine: 86
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public static IncrementalHash CreateHash(HashAlgorithmName hashAlgorithm)
    content.vb: Public Shared Function CreateHash(hashAlgorithm As HashAlgorithmName) As IncrementalHash
    parameters:
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
    return:
      type: System.Security.Cryptography.IncrementalHash
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  commentId: M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  id: CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])
  parent: System.Security.Cryptography.IncrementalHash
  langs:
  - csharp
  - vb
  name: CreateHMAC(HashAlgorithmName, Byte[])
  fullName: System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/4.0/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateHMAC
    path: src/System.Security.Cryptography.Algorithms/ref/4.0/System.Security.Cryptography.Algorithms.cs
    startLine: 87
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public static IncrementalHash CreateHMAC(HashAlgorithmName hashAlgorithm, byte[] key)
    content.vb: Public Shared Function CreateHMAC(hashAlgorithm As HashAlgorithmName, key As Byte()) As IncrementalHash
    parameters:
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
    - id: key
      type: System.Byte[]
    return:
      type: System.Security.Cryptography.IncrementalHash
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName, System.Byte())
  name.vb: CreateHMAC(HashAlgorithmName, Byte())
- uid: System.Security.Cryptography.IncrementalHash.Dispose
  commentId: M:System.Security.Cryptography.IncrementalHash.Dispose
  id: Dispose
  parent: System.Security.Cryptography.IncrementalHash
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Cryptography.IncrementalHash.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
    startLine: 136
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.IncrementalHash.GetHashAndReset
  commentId: M:System.Security.Cryptography.IncrementalHash.GetHashAndReset
  id: GetHashAndReset
  parent: System.Security.Cryptography.IncrementalHash
  langs:
  - csharp
  - vb
  name: GetHashAndReset()
  fullName: System.Security.Cryptography.IncrementalHash.GetHashAndReset()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashAndReset
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/IncrementalHash.cs
    startLine: 112
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public byte[] GetHashAndReset()
    content.vb: Public Function GetHashAndReset As Byte()
    return:
      type: System.Byte[]
      description: The computed hash or HMAC.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.IncrementalHash
  parent: System.Security.Cryptography
  isExternal: false
  name: IncrementalHash
  fullName: System.Security.Cryptography.IncrementalHash
