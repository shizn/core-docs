items:
- uid: System.Data.SqlClient.SqlBulkCopyColumnMapping
  commentId: T:System.Data.SqlClient.SqlBulkCopyColumnMapping
  id: SqlBulkCopyColumnMapping
  parent: System.Data.SqlClient
  children:
  - System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor
  - System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.Int32,System.Int32)
  - System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.Int32,System.String)
  - System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.String,System.Int32)
  - System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.String,System.String)
  - System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn
  - System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal
  - System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn
  - System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal
  langs:
  - csharp
  - vb
  name: SqlBulkCopyColumnMapping
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping
  type: Class
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlBulkCopyColumnMapping
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
    startLine: 14
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Defines the mapping between a column in a <xref href=\"System.Data.SqlClient.SqlBulkCopy\" data-throw-if-not-resolved=\"false\"></xref> instance's data source and a column in the instance's destination table. </p>\n"
  remarks: "\n<p>Column mappings define the mapping between data source and the target table.</p>\n<p>If mappings are not defined—that is, the <xref href=\"System.Data.SqlClient.SqlBulkCopy.ColumnMappings\" data-throw-if-not-resolved=\"false\"></xref> collection is empty—the columns are mapped implicitly based on ordinal position. For this to work, source and target schemas must match. If they do not, an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown.</p>\n<p>If the <xref href=\"System.Data.SqlClient.SqlBulkCopy.ColumnMappings\" data-throw-if-not-resolved=\"false\"></xref> collection is not empty, not every column present in the data source has to be specified. Those not mapped by the collection are ignored.</p>\n<p>You can refer to source and target columns by either name or ordinal. You can also mix by-name and by-ordinal column references in the same mappings collection.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, and each destination column is in the same ordinal position as its corresponding source column, the column names do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMapping#1"
  syntax:
    content: public sealed class SqlBulkCopyColumnMapping
    content.vb: Public NotInheritable Class SqlBulkCopyColumnMapping
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlBulkCopyColumnMapping
  langs:
  - csharp
  - vb
  name: SqlBulkCopyColumnMapping()
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping.SqlBulkCopyColumnMapping()
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
    startLine: 100
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Default constructor that initializes a new <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>If you use this constructor, you must then define the source for the mapping using the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn\" data-throw-if-not-resolved=\"false\"></xref> property or the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal\" data-throw-if-not-resolved=\"false\"></xref> property, and define the destination for the mapping using the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn\" data-throw-if-not-resolved=\"false\"></xref> property or the <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMapping#1"
  syntax:
    content: public SqlBulkCopyColumnMapping()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.Int32,System.Int32)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Data.SqlClient.SqlBulkCopyColumnMapping
  langs:
  - csharp
  - vb
  name: SqlBulkCopyColumnMapping(Int32, Int32)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping.SqlBulkCopyColumnMapping(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
    startLine: 123
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Creates a new column mapping, using column ordinals to refer to source and destination columns.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy based on the ordinal positions of the columns.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingOrdinal#1"
  syntax:
    content: public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, int destinationOrdinal)
    content.vb: Public Sub New(sourceColumnOrdinal As Integer, destinationOrdinal As Integer)
    parameters:
    - id: sourceColumnOrdinal
      type: System.Int32
    - id: destinationOrdinal
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.Int32,System.String)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.Int32,System.String)
  id: '#ctor(System.Int32,System.String)'
  parent: System.Data.SqlClient.SqlBulkCopyColumnMapping
  langs:
  - csharp
  - vb
  name: SqlBulkCopyColumnMapping(Int32, String)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping.SqlBulkCopyColumnMapping(System.Int32, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
    startLine: 111
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Creates a new column mapping, using a column ordinal to refer to the source column and a column name for the target column.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingOrdinalName#1"
  syntax:
    content: public SqlBulkCopyColumnMapping(int sourceColumnOrdinal, string destinationColumn)
    content.vb: Public Sub New(sourceColumnOrdinal As Integer, destinationColumn As String)
    parameters:
    - id: sourceColumnOrdinal
      type: System.Int32
    - id: destinationColumn
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.String,System.Int32)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Data.SqlClient.SqlBulkCopyColumnMapping
  langs:
  - csharp
  - vb
  name: SqlBulkCopyColumnMapping(String, Int32)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping.SqlBulkCopyColumnMapping(System.String, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
    startLine: 117
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Creates a new column mapping, using a column name to refer to the source column and a column ordinal for the target column.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingNameOrdinal#1"
  syntax:
    content: public SqlBulkCopyColumnMapping(string sourceColumn, int destinationOrdinal)
    content.vb: Public Sub New(sourceColumn As String, destinationOrdinal As Integer)
    parameters:
    - id: sourceColumn
      type: System.String
    - id: destinationOrdinal
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.String,System.String)
  commentId: M:System.Data.SqlClient.SqlBulkCopyColumnMapping.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Data.SqlClient.SqlBulkCopyColumnMapping
  langs:
  - csharp
  - vb
  name: SqlBulkCopyColumnMapping(String, String)
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping.SqlBulkCopyColumnMapping(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
    startLine: 105
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Creates a new column mapping, using column names to refer to source and destination columns.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMapping#1"
  syntax:
    content: public SqlBulkCopyColumnMapping(string sourceColumn, string destinationColumn)
    content.vb: Public Sub New(sourceColumn As String, destinationColumn As String)
    parameters:
    - id: sourceColumn
      type: System.String
    - id: destinationColumn
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn
  commentId: P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn
  id: DestinationColumn
  parent: System.Data.SqlClient.SqlBulkCopyColumnMapping
  langs:
  - csharp
  - vb
  name: DestinationColumn
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DestinationColumn
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
    startLine: 26
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Name of the column being mapped in the destination database table.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal\" data-throw-if-not-resolved=\"false\"></xref> properties are mutually exclusive. The last value set takes precedence.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingDestinationColumn#1"
  syntax:
    content: public string DestinationColumn { get; set; }
    content.vb: Public Property DestinationColumn As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal
  commentId: P:System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal
  id: DestinationOrdinal
  parent: System.Data.SqlClient.SqlBulkCopyColumnMapping
  langs:
  - csharp
  - vb
  name: DestinationOrdinal
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DestinationOrdinal
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
    startLine: 43
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Ordinal value of the destination column within the destination table.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationColumn\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping.DestinationOrdinal\" data-throw-if-not-resolved=\"false\"></xref> properties are mutually exclusive. The last value set takes precedence.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingDestinationOrdinal#1"
  syntax:
    content: public int DestinationOrdinal { get; set; }
    content.vb: Public Property DestinationOrdinal As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn
  commentId: P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn
  id: SourceColumn
  parent: System.Data.SqlClient.SqlBulkCopyColumnMapping
  langs:
  - csharp
  - vb
  name: SourceColumn
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SourceColumn
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
    startLine: 63
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>Name of the column being mapped in the data source.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal\" data-throw-if-not-resolved=\"false\"></xref> properties are mutually exclusive. The last value set takes precedence.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingDestinationColumn#1"
  syntax:
    content: public string SourceColumn { get; set; }
    content.vb: Public Property SourceColumn As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal
  commentId: P:System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal
  id: SourceOrdinal
  parent: System.Data.SqlClient.SqlBulkCopyColumnMapping
  langs:
  - csharp
  - vb
  name: SourceOrdinal
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SourceOrdinal
    path: src/System.Data.SqlClient/src/System/Data/SqlClient/SqlBulkCopyColumnMapping.cs
    startLine: 80
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlClient
  summary: "\n<p>The ordinal position of the source column within the data source.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceColumn\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping.SourceOrdinal\" data-throw-if-not-resolved=\"false\"></xref> properties are mutually exclusive. The last value set takes precedence.</p>\n"
  example:
  - "\n<p>The following example bulk copies data from a source table in the <strong>AdventureWorks</strong> sample database to a destination table in the same database. Although the number of columns in the destination matches the number of columns in the source, the column names and ordinal positions do not match. <xref href=\"System.Data.SqlClient.SqlBulkCopyColumnMapping\" data-throw-if-not-resolved=\"false\"></xref> objects are used to create a column map for the bulk copy.</p>\n<p>This sample will not run unless you have created the work tables as described in Bulk Copy Example Setup. This code is provided to demonstrate the syntax for using <strong>SqlBulkCopy</strong> only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL <code>INSERT … SELECT</code> statement to copy the data.</p>DataWorks SqlBulkCopy.ColumnMappingDestinationOrdinal#1"
  syntax:
    content: public int SourceOrdinal { get; set; }
    content.vb: Public Property SourceOrdinal As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Data.SqlClient
  isExternal: false
  name: System.Data.SqlClient
  fullName: System.Data.SqlClient
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
