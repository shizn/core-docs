items:
- uid: System.Threading.ExecutionContext
  commentId: T:System.Threading.ExecutionContext
  id: ExecutionContext
  parent: System.Threading
  children:
  - System.Threading.ExecutionContext.Capture
  - System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)
  langs:
  - csharp
  - vb
  name: ExecutionContext
  fullName: System.Threading.ExecutionContext
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ExecutionContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ExecutionContext
    path: src/mscorlib/src/System/Threading/ExecutionContext.cs
    startLine: 65
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Manages the execution context for the current thread. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Threading.ExecutionContext\" data-throw-if-not-resolved=\"false\"></xref> class provides a single container for all information relevant to a logical thread of execution. This includes security context, call context, and synchronization context.</p>\n<p>The <xref href=\"System.Threading.ExecutionContext\" data-throw-if-not-resolved=\"false\"></xref> class provides the functionality for user code to capture and transfer this context across user-defined asynchronous points. The common language runtime ensures that the <xref href=\"System.Threading.ExecutionContext\" data-throw-if-not-resolved=\"false\"></xref> is consistently transferred across runtime-defined asynchronous points within the managed process. </p>\n<p>An execution context is the managed equivalent of a COM apartment. Within an application domain, the entire execution context must be transferred whenever a thread is transferred. This situation occurs during transfers made by the <xref href=\"System.Threading.Thread.Start\" data-throw-if-not-resolved=\"false\"></xref> method, most thread pool operations, and Windows Forms thread marshaling through the Windows message pump. It does not occur in unsafe thread pool operations (such as the <xref href=\"System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method), which do not transfer the compressed stack. Wherever the compressed stack flows, the managed principal, synchronization, locale, and user context also flow. The <xref href=\"System.Threading.ExecutionContext\" data-throw-if-not-resolved=\"false\"></xref> class provides the <xref href=\"System.Threading.ExecutionContext.Capture\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.ExecutionContext.CreateCopy\" data-throw-if-not-resolved=\"false\"></xref> methods to get the execution context and the <xref href=\"System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to set the execution context for the current thread.</p>\n<p>An <xref href=\"System.Threading.ExecutionContext\" data-throw-if-not-resolved=\"false\"></xref> that is associated with a thread cannot be set on another thread. Attempting to do so will result in an exception being thrown. To propagate the <xref href=\"System.Threading.ExecutionContext\" data-throw-if-not-resolved=\"false\"></xref> from one thread to another, make a copy of the <xref href=\"System.Threading.ExecutionContext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Internally, the <xref href=\"System.Threading.ExecutionContext\" data-throw-if-not-resolved=\"false\"></xref> stores all data that is associated with the <xref href=\"System.Runtime.Remoting.Messaging.LogicalCallContext\" data-throw-if-not-resolved=\"false\"></xref>. This allows the <xref href=\"System.Runtime.Remoting.Messaging.LogicalCallContext\" data-throw-if-not-resolved=\"false\"></xref> data to be propagated when the <xref href=\"System.Threading.ExecutionContext\" data-throw-if-not-resolved=\"false\"></xref> is copied and transferred.</p>\n"
  example:
  - 
  syntax:
    content: 'public sealed class ExecutionContext : IDisposable'
    content.vb: >-
      Public NotInheritable Class ExecutionContext
          Implements IDisposable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Threading.ExecutionContext.Capture
  commentId: M:System.Threading.ExecutionContext.Capture
  id: Capture
  parent: System.Threading.ExecutionContext
  langs:
  - csharp
  - vb
  name: Capture()
  fullName: System.Threading.ExecutionContext.Capture()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ExecutionContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Capture
    path: src/mscorlib/src/System/Threading/ExecutionContext.cs
    startLine: 84
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Captures the execution context from the current thread.</p>\n"
  remarks: "\n<p>The captured execution context can be used as the <em>executionContext</em> parameter for the <xref href=\"System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static ExecutionContext Capture()
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Capture As ExecutionContext
    return:
      type: System.Threading.ExecutionContext
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)
  commentId: M:System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)
  id: Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)
  parent: System.Threading.ExecutionContext
  langs:
  - csharp
  - vb
  name: Run(ExecutionContext, ContextCallback, Object)
  fullName: System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext, System.Threading.ContextCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ExecutionContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/ExecutionContext.cs
    startLine: 90
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Runs a method in a specified execution context on the current thread.</p>\n"
  remarks: "\n<p>The execution context is returned to its previous state when the method completes.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SecurityCritical]

      [HandleProcessCorruptedStateExceptions]

      public static void Run(ExecutionContext executionContext, ContextCallback callback, object state)
    content.vb: >-
      <SecurityCritical>

      <HandleProcessCorruptedStateExceptions>

      Public Shared Sub Run(executionContext As ExecutionContext, callback As ContextCallback, state As Object)
    parameters:
    - id: executionContext
      type: System.Threading.ExecutionContext
    - id: callback
      type: System.Threading.ContextCallback
    - id: state
      type: System.Object
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>executionContext</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>executionContext</em> was not acquired through a capture operation. </p>\n<p>-or-</p>\n<p>\n<em>executionContext</em> has already been used as the argument to a <xref href=\"System.Threading.ExecutionContext.Run(System.Threading.ExecutionContext,System.Threading.ContextCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> call.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.ExecutionContext
  parent: System.Threading
  isExternal: false
  name: ExecutionContext
  fullName: System.Threading.ExecutionContext
- uid: System.Threading.ContextCallback
  parent: System.Threading
  isExternal: false
  name: ContextCallback
  fullName: System.Threading.ContextCallback
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
