items:
- uid: System.Dynamic.DynamicObject
  commentId: T:System.Dynamic.DynamicObject
  id: DynamicObject
  parent: System.Dynamic
  children:
  - System.Dynamic.DynamicObject.#ctor
  - System.Dynamic.DynamicObject.GetDynamicMemberNames
  - System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  - System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)
  - System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)
  - System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)
  - System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])
  - System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  - System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)
  - System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)
  - System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)
  - System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)
  - System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)
  - System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)
  - System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)
  langs:
  - csharp
  - vb
  name: DynamicObject
  fullName: System.Dynamic.DynamicObject
  type: Class
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DynamicObject
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 21
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides a base class for specifying dynamic behavior at run time. This class must be inherited from; you cannot instantiate it directly.</p>\n"
  remarks: "\n<p>The <strong>DynamicObject</strong> class enables you to define which operations can be performed on dynamic objects and how to perform those operations. For example, you can define what happens when you try to get or set an object property, call a method, or perform standard mathematical operations such as addition and multiplication.</p>\n<p>This class can be useful if you want to create a more convenient protocol for a library. For example, if users of your library have to use syntax like <code>Scriptobj.SetProperty(\"Count\", 1)</code>, you can provide the ability to use much simpler syntax, like <code>scriptobj.Count = 1</code>.</p>\n<p>You cannot directly create an instance of the <strong>DynamicObject</strong> class. To implement the dynamic behavior, you may want to inherit from the <strong>DynamicObject</strong> class and override necessary methods. For example, if you need only operations for setting and getting properties, you can override just the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n<p>In C#, to enable dynamic behavior for instances of classes derived from the <strong>DynamicObject</strong> class, you must use the <strong>dynamic</strong> keyword. For more information, see Using Type dynamic (C# Programming Guide).</p>\n<p>In Visual Basic, dynamic operations are supported by late binding. For more information, see Early and Late Binding (Visual Basic).</p>\n<p>The following code example demonstrates how to create an instance of a class that is derived from the <strong>DynamicObject</strong> class.</p>\n<pre><code class=\"c#\">public class SampleDynamicObject : DynamicObject {}\n//...\ndynamic sampleObject = new SampleDynamicObject ();</code></pre>\n<pre><code class=\"vb#\">Public Class SampleDynamicObject \nInherits DynamicObject\n'...\nDim sampleObject As Object = New SampleDynamicObject()</code></pre>\n<p>You can also add your own members to classes derived from the <strong>DynamicObject</strong> class. If your class defines properties and also overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>The <strong>DynamicObject</strong> class implements the DLR interface <xref href=\"System.Dynamic.IDynamicMetaObjectProvider\" data-throw-if-not-resolved=\"false\"></xref>, which enables you to share instances of the <strong>DynamicObject</strong> class between languages that support the DLR interoperability model. For example, you can create an instance of the <strong>DynamicObject</strong> class in C# and then pass it to an IronPython function. For more information, see Dynamic Language Runtime Overview and documentation on the <see href=\"http://go.microsoft.com/fwlink/?LinkId=141028\">CodePlex</see> Web site.</p>\n<p>If you have a simple scenario in which you need an object that can only add and remove members at run time but that does not need to define specific operations and does not have static members, use the <xref href=\"System.Dynamic.ExpandoObject\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>If you have a more advanced scenario in which you need to define how dynamic objects participate in the interoperability protocol, or you need to manage DLR fast dynamic dispatch caching, create your own implementation of the <xref href=\"System.Dynamic.IDynamicMetaObjectProvider\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  example:
  - "\n<p>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <code>sampleDictionary[\"Text\"] = \"Sample text\"</code> (<code>sampleDictionary(\"Text\") = \"Sample text\"</code> in Visual Basic), you can write <code>sampleDictionary.Text = \"Sample text\"</code>. Also, you want this syntax to be case-insensitive, so that <code>sampleDictionary.Text</code> is equivalent to <code>sampleDictionary.text</code>.</p>\n<p>The following code example demonstrates the <code>DynamicDictionary</code> class, which is derived from the <strong>DynamicObject</strong> class. The <code>DynamicDictionary</code> class contains an object of the <code>Dictionary<string, object></code> type (<code>Dictionary(Of String, Object)</code> in Visual Basic) to store the key-value pairs, and overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods to support the new syntax. It also provides a <code>Count</code> property, which shows how many dynamic properties the dictionary contains.</p>System.Dynamic.DynamicObject#1<p>For more examples, see <see href=\"http://go.microsoft.com/fwlink/?LinkId=169008\">Creating Wrappers with DynamicObject</see> on the C# Frequently Asked Questions blog.</p>"
  syntax:
    content: 'public class DynamicObject : IDynamicMetaObjectProvider'
    content.vb: >-
      Public Class DynamicObject
          Implements IDynamicMetaObjectProvider
  inheritance:
  - System.Object
  implements:
  - System.Dynamic.IDynamicMetaObjectProvider
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Dynamic.DynamicObject.#ctor
  commentId: M:System.Dynamic.DynamicObject.#ctor
  id: '#ctor'
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: DynamicObject()
  fullName: System.Dynamic.DynamicObject.DynamicObject()
  type: Constructor
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 27
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Enables derived types to initialize a new instance of the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  remarks: "\n<p>You cannot directly create an instance of the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class. To implement dynamic behavior, you have to inherit from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class and override necessary methods.</p>\n<p>In C#, to enable dynamic behavior for instances of the classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class, you must use the <strong>dynamic</strong> keyword. For more information, see Using Type dynamic (C# Programming Guide).</p>\n<p>In Visual Basic, dynamic operations are supported by late binding. For more information, see Early and Late Binding (Visual Basic).</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to create an instance of classes that are derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<pre><code class=\"c#\">public class SampleDynamicObject : DynamicObject {}\n//...\ndynamic sampleObject = new SampleDynamicObject ();</code></pre>\n<pre><code class=\"vb#\">Public Class SampleDynamicObject \nInherits DynamicObject\n'...\nDim sampleObject As Object = New SampleDynamicObject()</code></pre>\n"
  syntax:
    content: protected DynamicObject()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Dynamic.DynamicObject.GetDynamicMemberNames
  commentId: M:System.Dynamic.DynamicObject.GetDynamicMemberNames
  id: GetDynamicMemberNames
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: GetDynamicMemberNames()
  fullName: System.Dynamic.DynamicObject.GetDynamicMemberNames()
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDynamicMemberNames
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 215
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Returns the enumeration of all dynamic member names. </p>\n"
  remarks: "\n<p>This method exists for debugging purposes only.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")]

      public virtual IEnumerable<string> GetDynamicMemberNames()
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1024:UsePropertiesWhereAppropriate")>

      Public Overridable Function GetDynamicMemberNames As IEnumerable(Of String)
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: The list of dynamic member names.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  commentId: M:System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  id: GetMetaObject(System.Linq.Expressions.Expression)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: GetMetaObject(Expression)
  fullName: System.Dynamic.DynamicObject.GetMetaObject(System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMetaObject
    path: src/System.Dynamic.Runtime/ref/System.Dynamic.Runtime.cs
    startLine: 117
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides a <xref href=\"System.Dynamic.DynamicMetaObject\" data-throw-if-not-resolved=\"false\"></xref> that dispatches to the dynamic virtual methods. The object can be encapsulated inside another <xref href=\"System.Dynamic.DynamicMetaObject\" data-throw-if-not-resolved=\"false\"></xref> to provide custom behavior for individual actions. This method supports the Dynamic Language Runtime infrastructure for language implementers and it is not intended to be used directly from your code.</p>\n"
  example:
  - 
  syntax:
    content: public virtual DynamicMetaObject GetMetaObject(Expression parameter)
    content.vb: Public Overridable Function GetMetaObject(parameter As Expression) As DynamicMetaObject
    parameters:
    - id: parameter
      type: System.Linq.Expressions.Expression
      description: "\n<p>The expression that represents <xref href=\"System.Dynamic.DynamicMetaObject\" data-throw-if-not-resolved=\"false\"></xref> to dispatch to the dynamic virtual methods.</p>\n"
    return:
      type: System.Dynamic.DynamicMetaObject
      description: "\n<p>An object of the <xref href=\"System.Dynamic.DynamicMetaObject\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  implements:
  - System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)
  id: TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryBinaryOperation(BinaryOperationBinder, Object, out Object)
  fullName: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Object, out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryBinaryOperation
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 145
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides implementation for binary operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations such as addition and multiplication.</p>\n"
  remarks: "\n<p>Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify how binary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n<p>This method is called when you have binary operations such as addition or multiplication. For example, if the <xref href=\"System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method is overridden, it is automatically invoked for statements like <code>sum = first + second</code> or <code>multiply = first*second</code>, where <code>first</code> is derived from the <strong>DynamicObject</strong> class.</p>\n<p>You can get information about the type of the binary operation by using the <code>Operation</code> property of the <em>binder</em> parameter. </p>\n<p>If your dynamic object is used only in C# and Visual Basic, the <code>binder.Operation</code> property can have one of the following values from the <xref href=\"System.Linq.Expressions.ExpressionType\" data-throw-if-not-resolved=\"false\"></xref> enumeration. However, in other languages such as IronPython or IronRuby, you can have other values. For more information about <xref href=\"System.Linq.Expressions.ExpressionType\" data-throw-if-not-resolved=\"false\"></xref>, see documentation on the <see href=\"http://go.microsoft.com/fwlink/?LinkId=141028\">CodePlex</see> Web site.</p>\n<p>Value</p>\n<p>Description</p>\n<p>C#</p>\n<p>Visual Basic</p>\n<p>To implement <strong>OrElse</strong> (<code>a || b</code>) and <strong>AndAlso</strong> (<code>a && b</code>) operations for dynamic objects in C#, you may want to implement both the <xref href=\"System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The <strong>OrElse</strong> operation consists of the unary <strong>IsTrue</strong> operation and the binary <strong>Or</strong> operation. The <strong>Or</strong> operation is performed only if the result of the <strong>IsTrue</strong> operation is <strong>false</strong>.</p>\n<p>The <strong>AndAlso</strong> operation consists of the unary <strong>IsFalse</strong> operation and the binary <strong>And</strong> operation. The <strong>And</strong> operation is performed only if the result of the <strong>IsFalse</strong> operation is <strong>false</strong>.</p>\n"
  example:
  - "\n<p>Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define basic mathematical operations such as addition and subtraction for such data.</p>\n<p>The following code example demonstrates the <code>DynamicNumber</code> class, which is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class. <code>DynamicNumber</code> overrides the <xref href=\"System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method to enable mathematical operations. It also overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods to enable access to the elements. </p>\n<p>In this example, only addition and subtraction operations are supported. If you try to write a statement like <code>resultNumber = firstNumber*secondNumber</code>, a run-time exception is thrown.</p>System.Dynamic.DynamicObject#2<p></p>"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]

      public virtual bool TryBinaryOperation(BinaryOperationBinder binder, object arg, out object result)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")>

      Public Overridable Function TryBinaryOperation(binder As BinaryOperationBinder, arg As Object, ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.BinaryOperationBinder
      description: The binder provided by the call site.
    - id: arg
      type: System.Object
      description: The right operand for the operation.
    - id: result
      type: System.Object
      description: The result of the operation.
    return:
      type: System.Boolean
      description: true if the operation is complete, false if the call site should determine behavior.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder, System.Object, ByRef System.Object)
  name.vb: TryBinaryOperation(BinaryOperationBinder, Object, ByRef Object)
- uid: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)
  id: TryConvert(System.Dynamic.ConvertBinder,System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryConvert(ConvertBinder, out Object)
  fullName: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder, out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryConvert
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 97
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides implementation for type conversion operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations that convert an object from one type to another.</p>\n"
  remarks: "\n<p>Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify how a type conversion should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n<p>In C#, if this method is overridden, it is automatically invoked when you have an explicit or implicit conversion, as shown in the code example below.</p>\n<p>In Visual Basic, only explicit conversion is supported. If you override this method, you call it by using the <xref href=\"Microsoft.VisualBasic.Conversion.CTypeDynamic``1(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"Microsoft.VisualBasic.Conversion.CTypeDynamic(System.Object,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> functions.</p>\n<pre><code class=\"c#\">// Explicit conversion.\nString sampleExplicit = (String)sampleObject;\n// Implicit conversion.\nString sampleImplicit = sampleObject;</code></pre>\n<pre><code class=\"vb#\">// Explicit conversion - first variant.\nDim testExplicit1 = CTypeDynamic(Of String)(sampleObject)\n// Explicit conversion - second variant.\nDim testExplicit2 = CTypeDynamic(sampleObject, GetType(String))</code></pre>\n"
  example:
  - "\n<p>Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define conversions of this data structure to strings and integers.</p>\n<p>The following code example demonstrates the <code>DynamicNumber</code> class, which is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class. <code>DynamicNumber</code> overrides the <xref href=\"System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method to enable type conversion. It also overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods to enable access to the data elements. </p>\n<p>In this example, only conversion to strings and integers is supported. If you try to convert an object to any other type, a run-time exception is thrown.</p>System.Dynamic.DynamicObject#3"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]

      public virtual bool TryConvert(ConvertBinder binder, out object result)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")>

      Public Overridable Function TryConvert(binder As ConvertBinder, ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.ConvertBinder
      description: The binder provided by the call site.
    - id: result
      type: System.Object
      description: The result of the conversion.
    return:
      type: System.Boolean
      description: true if the operation is complete, false if the call site should determine behavior.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryConvert(System.Dynamic.ConvertBinder, ByRef System.Object)
  name.vb: TryConvert(ConvertBinder, ByRef Object)
- uid: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)
  id: TryCreateInstance(System.Dynamic.CreateInstanceBinder,System.Object[],System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryCreateInstance(CreateInstanceBinder, Object[], out Object)
  fullName: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder, System.Object[], out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryCreateInstance
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 113
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that initialize a new instance of a dynamic object. This method is not intended for use in C# or Visual Basic.</p>\n"
  remarks: "\n<p>Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify how a new instance of the dynamic object should be initialized. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n<p>C# and Visual Basic compilers never emit code to use this method because they do not support first-class types. This method is intended for languages that support the initialization of dynamic objects by using syntax like <code>dynamic new</code>.</p>\n"
  example:
  - 
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]

      public virtual bool TryCreateInstance(CreateInstanceBinder binder, object[] args, out object result)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")>

      Public Overridable Function TryCreateInstance(binder As CreateInstanceBinder, args As Object(), ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.CreateInstanceBinder
      description: The binder provided by the call site.
    - id: args
      type: System.Object[]
      description: The arguments used for creation.
    - id: result
      type: System.Object
      description: The created instance.
    return:
      type: System.Boolean
      description: true if the operation is complete, false if the call site should determine behavior.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryCreateInstance(System.Dynamic.CreateInstanceBinder, System.Object(), ByRef System.Object)
  name.vb: TryCreateInstance(CreateInstanceBinder, Object(), ByRef Object)
- uid: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])
  commentId: M:System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])
  id: TryDeleteIndex(System.Dynamic.DeleteIndexBinder,System.Object[])
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryDeleteIndex(DeleteIndexBinder, Object[])
  fullName: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryDeleteIndex
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 206
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that delete an object by index. This method is not intended for use in C# or Visual Basic.</p>\n"
  remarks: "\n<p>Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify how a value that has a specified index should be deleted. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n<p>C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting objects by index, such as <code>del sampleObject[1,2]</code> in Python.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool TryDeleteIndex(DeleteIndexBinder binder, object[] indexes)
    content.vb: Public Overridable Function TryDeleteIndex(binder As DeleteIndexBinder, indexes As Object()) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.DeleteIndexBinder
      description: The binder provided by the call site.
    - id: indexes
      type: System.Object[]
      description: The indexes to be deleted.
    return:
      type: System.Boolean
      description: true if the operation is complete, false if the call site should determine behavior.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryDeleteIndex(System.Dynamic.DeleteIndexBinder, System.Object())
  name.vb: TryDeleteIndex(DeleteIndexBinder, Object())
- uid: System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  commentId: M:System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  id: TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryDeleteMember(DeleteMemberBinder)
  fullName: System.Dynamic.DynamicObject.TryDeleteMember(System.Dynamic.DeleteMemberBinder)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryDeleteMember
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 68
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that delete an object member. This method is not intended for use in C# or Visual Basic.</p>\n"
  remarks: "\n<p>Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify how an object member should be deleted. When this method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n<p>C# and Visual Basic compilers never emit code to use this method because they do not support this kind of operation. This method is intended for languages that support syntax for deleting members, such as <code>del sampleObject.SampleMember</code> in Python.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool TryDeleteMember(DeleteMemberBinder binder)
    content.vb: Public Overridable Function TryDeleteMember(binder As DeleteMemberBinder) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.DeleteMemberBinder
      description: The binder provided by the call site.
    return:
      type: System.Boolean
      description: true if the operation is complete, false if the call site should determine behavior.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)
  id: TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryGetIndex(GetIndexBinder, Object[], out Object)
  fullName: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder, System.Object[], out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetIndex
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 176
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that get a value by index. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for indexing operations.</p>\n"
  remarks: "\n<p>Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify how getting a value by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</p>\n<p>If this method is overridden, it is automatically invoked when you have an operation like <code>sampleObject[3]</code> in C# or <code>sampleObject(3)</code> in Visual Basic, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>Assume that you want to create an object in which properties can be accessed either by names such as <code>Property0</code>, <code>Property1</code>, and so on, or by index, so that, for example, <code>sampleObject.Property0</code> is equivalent to <code>sampleObject[0]</code> in C# or <code>sampleObject(0)</code> in Visual Basic. </p>\n<p>The following code example demonstrates the <code>SampleDynamicObject</code> class, which is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class. The <code>SampleDynamicObject</code> class contains an object of the <code>Dictionary<string, object></code> type (<code>Dictionary(Of String, Object)</code> in Visual Basic) to store the key-value pairs. <code>SampleDynamicObject</code> overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods to enable access by index. It overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods to enable access by property name.</p>System.Dynamic.DynamicObject#4"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]

      public virtual bool TryGetIndex(GetIndexBinder binder, object[] indexes, out object result)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")>

      Public Overridable Function TryGetIndex(binder As GetIndexBinder, indexes As Object(), ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.GetIndexBinder
      description: The binder provided by the call site.
    - id: indexes
      type: System.Object[]
      description: The indexes to be used.
    - id: result
      type: System.Object
      description: The result of the operation.
    return:
      type: System.Boolean
      description: true if the operation is complete, false if the call site should determine behavior.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder, System.Object(), ByRef System.Object)
  name.vb: TryGetIndex(GetIndexBinder, Object(), ByRef Object)
- uid: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)
  id: TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryGetMember(GetMemberBinder, out Object)
  fullName: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder, out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryGetMember
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 41
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that get member values. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations such as getting a value for a property.</p>\n"
  remarks: "\n<p>Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify how operations that get member values should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</p>\n<p>This method is called when you have statements like <code>Console.WriteLine(sampleObject.SampleProperty)</code>, where <code>sampleObject</code> is an instance of the class derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>You can also add your own members to classes derived from the <strong>DynamicObject</strong> class. If your class defines properties and also overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <code>sampleDictionary[\"Text\"] = \"Sample text\"</code> (<code>sampleDictionary(\"Text\") = \"Sample text\"</code> in Visual Basic), you can write <code>sampleDictionary.Text = \"Sample text\"</code>. Also, this syntax must be case-insensitive, so that <code>sampleDictionary.Text</code> is equivalent to <code>sampleDictionary.text</code>.</p>\n<p>The following code example demonstrates the <code>DynamicDictionary</code> class, which is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class. The <code>DynamicDictionary</code> class contains an object of the <code>Dictionary<string, object></code> type (<code>Dictionary(Of String, Object)</code> in Visual Basic) to store the key-value pairs, and overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods to support the new syntax. It also provides a <code>Count</code> property, which shows how many dynamic properties the dictionary contains.</p>System.Dynamic.DynamicObject#1"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]

      public virtual bool TryGetMember(GetMemberBinder binder, out object result)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")>

      Public Overridable Function TryGetMember(binder As GetMemberBinder, ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.GetMemberBinder
      description: The binder provided by the call site.
    - id: result
      type: System.Object
      description: The result of the get operation.
    return:
      type: System.Boolean
      description: true if the operation is complete, false if the call site should determine behavior.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder, ByRef System.Object)
  name.vb: TryGetMember(GetMemberBinder, ByRef Object)
- uid: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)
  id: TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryInvoke(InvokeBinder, Object[], out Object)
  fullName: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder, System.Object[], out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryInvoke
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 129
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that invoke an object. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations such as invoking an object or a delegate.</p>\n"
  remarks: "\n<p>Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify how operations that invoke an object should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)</p>\n<p>If this method is overridden, it is automatically invoked when you have an operation like <code>sampleObject(100)</code>, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>The operation for invoking an object is supported in C# but not in Visual Basic. The Visual Basic compiler never emits code to use this method, and the Visual Basic language does not support syntax like <code>sampleObject(100)</code>.</p>\n"
  example:
  - "\n<p>Assume that you need a data structure to store textual and numeric representations of numbers. You want to be able to specify the value for each property individually and also to be able to initialize all properties in a single statement.</p>\n<p>The following code example demonstrates the <code>DynamicNumber</code> class, which is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class. <code>DynamicNumber</code> overrides the <xref href=\"System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method to enable initialization of all properties at one time. It also overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods to enable access to individual object properties. </p>System.Dynamic.DynamicObject#5"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]

      public virtual bool TryInvoke(InvokeBinder binder, object[] args, out object result)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")>

      Public Overridable Function TryInvoke(binder As InvokeBinder, args As Object(), ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.InvokeBinder
      description: The binder provided by the call site.
    - id: args
      type: System.Object[]
      description: The arguments to be used for the invocation.
    - id: result
      type: System.Object
      description: The result of the invocation.
    return:
      type: System.Boolean
      description: true if the operation is complete, false if the call site should determine behavior.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryInvoke(System.Dynamic.InvokeBinder, System.Object(), ByRef System.Object)
  name.vb: TryInvoke(InvokeBinder, Object(), ByRef Object)
- uid: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)
  id: TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryInvokeMember(InvokeMemberBinder, Object[], out Object)
  fullName: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object[], out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryInvokeMember
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 82
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that invoke a member. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations such as calling a method.</p>\n"
  remarks: "\n<p>Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify how operations that invoke an object member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n<p>If this method is overridden, it is automatically invoked when you perform an operation like <code>sampleObject.SampleMethod(100)</code>, where <code>sampleObject</code> is derived from the <strong>DynamicObject</strong> class.</p>\n<p>You can also add your own methods to classes that are derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class. For example, if you override the <xref href=\"System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method, the dynamic dispatch system first attempts to determine whether the specified method exists in the class. If it does not find the method, it uses the <xref href=\"System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n<p>This method does not support <strong>ref</strong> and <strong>out</strong> parameters. All parameters in the <em>args</em> array are passed by value.</p>\n"
  example:
  - "\n<p>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <code>sampleDictionary[\"Text\"] = \"Sample text\"</code> (<code>sampleDictionary(\"Text\") = \"Sample text\"</code> in Visual Basic), you can write <code>sampleDictionary.Text = \"Sample text\"</code>. Also, you want to be able to call all the standard dictionary methods on this dictionary.</p>\n<p>The following code example demonstrates the <code>DynamicDictionary</code> class, which is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class. The <code>DynamicDictionary</code> class contains an object of the <code>Dictionary<string, object></code> type (<code>Dictionary(Of String, Object)</code> in Visual Basic) to store the key-value pairs. It overrides the <xref href=\"System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method to support methods of the <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> class and overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods to support the new syntax. It also provides a <code>Print</code> method, which prints out all dictionary keys and values.</p>System.Dynamic.DynamicObject#6"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]

      public virtual bool TryInvokeMember(InvokeMemberBinder binder, object[] args, out object result)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")>

      Public Overridable Function TryInvokeMember(binder As InvokeMemberBinder, args As Object(), ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.InvokeMemberBinder
      description: The binder provided by the call site.
    - id: args
      type: System.Object[]
      description: The arguments to be used for the invocation.
    - id: result
      type: System.Object
      description: The result of the invocation.
    return:
      type: System.Boolean
      description: true if the operation is complete, false if the call site should determine behavior.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryInvokeMember(System.Dynamic.InvokeMemberBinder, System.Object(), ByRef System.Object)
  name.vb: TryInvokeMember(InvokeMemberBinder, Object(), ByRef Object)
- uid: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)
  commentId: M:System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)
  id: TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TrySetIndex(SetIndexBinder, Object[], Object)
  fullName: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder, System.Object[], System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrySetIndex
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 192
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that set a value by index. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations that access objects by a specified index.</p>\n"
  remarks: "\n<p>Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify how operations that access an object by index should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n<p>If this method is overridden, it is automatically invoked when you have an operation like <code>sampleObject[3] = 10</code> in C# or <code>sampleObject(3) = 10</code> in Visual Basic, where <code>sampleObject</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>Assume that you want to create an object in which properties can be accessed either by names such as <code>Property0</code>, <code>Property1</code>, and so on, or by index, so that, for example, <code>sampleObject.Property0</code> is equivalent to <code>sampleObject[0]</code> in C# or <code>sampleObject(0)</code> in Visual Basic. </p>\n<p>The following code example demonstrates the <code>SampleDynamicObject</code> class, which is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class. The <code>SampleDynamicObject</code> class contains an object of the <code>Dictionary<string, object></code> type (<code>Dictionary(Of String, Object)</code> in Visual Basic) to store the key-value pairs. <code>SampleDynamicObject</code> overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods to enable access by index. It overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods to enable access by property name.</p>System.Dynamic.DynamicObject#4<p></p>"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]

      public virtual bool TrySetIndex(SetIndexBinder binder, object[] indexes, object value)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")>

      Public Overridable Function TrySetIndex(binder As SetIndexBinder, indexes As Object(), value As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.SetIndexBinder
      description: The binder provided by the call site.
    - id: indexes
      type: System.Object[]
      description: The indexes to be used.
    - id: value
      type: System.Object
      description: The value to set.
    return:
      type: System.Boolean
      description: true if the operation is complete, false if the call site should determine behavior.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TrySetIndex(System.Dynamic.SetIndexBinder, System.Object(), System.Object)
  name.vb: TrySetIndex(SetIndexBinder, Object(), Object)
- uid: System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)
  commentId: M:System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)
  id: TrySetMember(System.Dynamic.SetMemberBinder,System.Object)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TrySetMember(SetMemberBinder, Object)
  fullName: System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrySetMember
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 56
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides the implementation for operations that set member values. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations such as setting a value for a property.</p>\n"
  remarks: "\n<p>Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify how operations that set a value to a member should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n<p>This method is called when you have statements like <code>sampleObject.SampleProperty = \"Test\"</code>, where <code>sampleObject</code> is an instance of the class that is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>You can also add your own members to classes derived from the <strong>DynamicObject</strong> class. If your class defines properties and also overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, the dynamic language runtime (DLR) first uses the language binder to look for a static definition of a property in the class. If there is no such property, the DLR calls the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>Assume that you want to provide alternative syntax for accessing values in a dictionary, so that instead of writing <code>sampleDictionary[\"Text\"] = \"Sample text\"</code> (<code>sampleDictionary(\"Text\") = \"Sample text\"</code> in Visual Basic), you can write <code>sampleDictionary.Text = \"Sample text\"</code>. Also, this syntax must be case-insensitive, so that <code>sampleDictionary.Text</code> is equivalent to <code>sampleDictionary.text</code>.</p>\n<p>The following code example demonstrates the <code>DynamicDictionary</code> class, which is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class. The <code>DynamicDictionary</code> class contains an object of the <code>Dictionary<string, object></code> type (<code>Dictionary(Of String, Object)</code> in Visual Basic) to store the key-value pairs, and overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods to support the new syntax. It also provides a <code>Count</code> property, which shows how many dynamic properties the dictionary contains.</p>System.Dynamic.DynamicObject#1"
  syntax:
    content: public virtual bool TrySetMember(SetMemberBinder binder, object value)
    content.vb: Public Overridable Function TrySetMember(binder As SetMemberBinder, value As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.SetMemberBinder
      description: The binder provided by the call site.
    - id: value
      type: System.Object
      description: The value to set.
    return:
      type: System.Boolean
      description: true if the operation is complete, false if the call site should determine behavior.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)
  commentId: M:System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)
  id: TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)
  parent: System.Dynamic.DynamicObject
  langs:
  - csharp
  - vb
  name: TryUnaryOperation(UnaryOperationBinder, out Object)
  fullName: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder, out System.Object)
  type: Method
  source:
    remote:
      path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryUnaryOperation
    path: src/System.Dynamic.Runtime/src/System/Dynamic/DynamicObject.cs
    startLine: 160
  assemblies:
  - System.Dynamic.Runtime
  namespace: System.Dynamic
  summary: "\n<p>Provides implementation for unary operations. Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify dynamic behavior for operations such as negation, increment, or decrement.</p>\n"
  remarks: "\n<p>Classes derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class can override this method to specify how unary operations should be performed for a dynamic object. When the method is not overridden, the run-time binder of the language determines the behavior. (In most cases, a language-specific run-time exception is thrown.)</p>\n<p>This method is called when you have unary operations such as negation, increment, or decrement. For example, if the <xref href=\"System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method is overridden, this method is automatically invoked for statements like <code>negativeNumber = -number</code>, where <code>number</code> is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>You can get information about the type of the unary operation by using the <code>Operation</code> property of the <em>binder</em> parameter. </p>\n<p>If your dynamic object is used only in C# and Visual Basic, the <code>binder.Operation</code> property can have one of the following values from the <xref href=\"System.Linq.Expressions.ExpressionType\" data-throw-if-not-resolved=\"false\"></xref> enumeration. However, in other languages such as IronPython or IronRuby, you can have other values. For more information about <xref href=\"System.Linq.Expressions.ExpressionType\" data-throw-if-not-resolved=\"false\"></xref>, see documentation on the <see href=\"http://go.microsoft.com/fwlink/?LinkId=141028\">CodePlex</see> Web site.</p>\n<p>Value</p>\n<p>Description</p>\n<p>C#</p>\n<p>Visual Basic</p>\n<p>To implement <strong>OrElse</strong> (<code>a || b</code>) and <strong>AndAlso</strong> (<code>a && b</code>) operations for dynamic objects in C#, you may want to implement both the <xref href=\"System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Dynamic.DynamicObject.TryBinaryOperation(System.Dynamic.BinaryOperationBinder,System.Object,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n<p>The <strong>OrElse</strong> operation consists of the unary <strong>IsTrue</strong> operation and the binary <strong>Or</strong> operation. The <strong>Or</strong> operation is performed only if the result of the <strong>IsTrue</strong> operation is <strong>false</strong>.</p>\n<p>The <strong>AndAlso</strong> operation consists of the unary <strong>IsFalse</strong> operation and the binary <strong>And</strong> operation. The <strong>And</strong> operation is performed only if the result of the <strong>IsFalse</strong> operation is <strong>false</strong>.</p>\n"
  example:
  - "\n<p>Assume that you need a data structure to store textual and numeric representations of numbers, and you want to define a mathematical negation operation for such data.</p>\n<p>The following code example demonstrates the <code>DynamicNumber</code> class, which is derived from the <xref href=\"System.Dynamic.DynamicObject\" data-throw-if-not-resolved=\"false\"></xref> class. <code>DynamicNumber</code> overrides the <xref href=\"System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> method to enable the mathematical negation operation. Is also overrides the <xref href=\"System.Dynamic.DynamicObject.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Dynamic.DynamicObject.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)\" data-throw-if-not-resolved=\"false\"></xref> methods to enable access to the elements. </p>\n<p>In this example, only the mathematical negation operation is supported. If you try to write a statement like <code>negativeNumber = +number</code>, a run-time exception occurs.</p>System.Dynamic.DynamicObject#7"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")]

      public virtual bool TryUnaryOperation(UnaryOperationBinder binder, out object result)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1007:UseGenericsWhereAppropriate")>

      Public Overridable Function TryUnaryOperation(binder As UnaryOperationBinder, ByRef result As Object) As Boolean
    parameters:
    - id: binder
      type: System.Dynamic.UnaryOperationBinder
      description: The binder provided by the call site.
    - id: result
      type: System.Object
      description: The result of the operation.
    return:
      type: System.Boolean
      description: true if the operation is complete, false if the call site should determine behavior.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Dynamic.DynamicObject.TryUnaryOperation(System.Dynamic.UnaryOperationBinder, ByRef System.Object)
  name.vb: TryUnaryOperation(UnaryOperationBinder, ByRef Object)
references:
- uid: System.Dynamic
  isExternal: false
  name: System.Dynamic
  fullName: System.Dynamic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Dynamic.IDynamicMetaObjectProvider
  parent: System.Dynamic
  isExternal: false
  name: IDynamicMetaObjectProvider
  fullName: System.Dynamic.IDynamicMetaObjectProvider
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  parent: System.Dynamic.IDynamicMetaObjectProvider
  isExternal: true
  name: GetMetaObject(Expression)
  fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
  spec.csharp:
  - uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
  - name: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject(System.Linq.Expressions.Expression)
    name: GetMetaObject
    fullName: System.Dynamic.IDynamicMetaObjectProvider.GetMetaObject
  - name: (
    fullName: (
  - uid: System.Linq.Expressions.Expression
    name: Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Dynamic.DynamicMetaObject
  parent: System.Dynamic
  isExternal: false
  name: DynamicMetaObject
  fullName: System.Dynamic.DynamicMetaObject
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Dynamic.BinaryOperationBinder
  parent: System.Dynamic
  isExternal: false
  name: BinaryOperationBinder
  fullName: System.Dynamic.BinaryOperationBinder
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Dynamic.ConvertBinder
  parent: System.Dynamic
  isExternal: false
  name: ConvertBinder
  fullName: System.Dynamic.ConvertBinder
- uid: System.Dynamic.CreateInstanceBinder
  parent: System.Dynamic
  isExternal: false
  name: CreateInstanceBinder
  fullName: System.Dynamic.CreateInstanceBinder
- uid: System.Object[]
  isExternal: true
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Dynamic.DeleteIndexBinder
  parent: System.Dynamic
  isExternal: false
  name: DeleteIndexBinder
  fullName: System.Dynamic.DeleteIndexBinder
- uid: System.Dynamic.DeleteMemberBinder
  parent: System.Dynamic
  isExternal: false
  name: DeleteMemberBinder
  fullName: System.Dynamic.DeleteMemberBinder
- uid: System.Dynamic.GetIndexBinder
  parent: System.Dynamic
  isExternal: false
  name: GetIndexBinder
  fullName: System.Dynamic.GetIndexBinder
- uid: System.Dynamic.GetMemberBinder
  parent: System.Dynamic
  isExternal: false
  name: GetMemberBinder
  fullName: System.Dynamic.GetMemberBinder
- uid: System.Dynamic.InvokeBinder
  parent: System.Dynamic
  isExternal: false
  name: InvokeBinder
  fullName: System.Dynamic.InvokeBinder
- uid: System.Dynamic.InvokeMemberBinder
  parent: System.Dynamic
  isExternal: false
  name: InvokeMemberBinder
  fullName: System.Dynamic.InvokeMemberBinder
- uid: System.Dynamic.SetIndexBinder
  parent: System.Dynamic
  isExternal: false
  name: SetIndexBinder
  fullName: System.Dynamic.SetIndexBinder
- uid: System.Dynamic.SetMemberBinder
  parent: System.Dynamic
  isExternal: false
  name: SetMemberBinder
  fullName: System.Dynamic.SetMemberBinder
- uid: System.Dynamic.UnaryOperationBinder
  parent: System.Dynamic
  isExternal: false
  name: UnaryOperationBinder
  fullName: System.Dynamic.UnaryOperationBinder
