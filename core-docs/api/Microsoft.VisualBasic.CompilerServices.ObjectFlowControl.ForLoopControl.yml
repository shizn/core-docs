items:
- uid: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl
  commentId: T:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl
  id: ObjectFlowControl.ForLoopControl
  parent: Microsoft.VisualBasic.CompilerServices
  children:
  - Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)
  - Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)
  - Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object,System.Object,System.Object@)
  - Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single,System.Single,System.Single)
  - Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double,System.Double,System.Double)
  langs:
  - csharp
  - vb
  name: ObjectFlowControl.ForLoopControl
  fullName: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl
  type: Class
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForLoopControl
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 139
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Provides services to the Visual Basic compiler for compiling <strong>For...Next</strong> loops.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public sealed class ForLoopControl
    content.vb: Public NotInheritable Class ForLoopControl
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)
  commentId: M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)
  id: ForLoopInitObj(System.Object,System.Object,System.Object,System.Object,System.Object@,System.Object@)
  parent: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl
  langs:
  - csharp
  - vb
  name: ForLoopInitObj(Object, Object, Object, Object, ref Object, ref Object)
  fullName: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object, System.Object, System.Object, System.Object, ref System.Object, ref System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForLoopInitObj
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 143
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Initializes a <strong>For...Next</strong> loop.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static bool ForLoopInitObj(object Counter, object Start, object Limit, object StepValue, ref object LoopForResult, ref object CounterResult)
    content.vb: Public Shared Function ForLoopInitObj(Counter As Object, Start As Object, Limit As Object, StepValue As Object, ByRef LoopForResult As Object, ByRef CounterResult As Object) As Boolean
    parameters:
    - id: Counter
      type: System.Object
      description: "\n<p>The loop counter variable.</p>\n"
    - id: Start
      type: System.Object
      description: "\n<p>The initial value of the loop counter.</p>\n"
    - id: Limit
      type: System.Object
      description: "\n<p>The value of the <strong>To</strong> option.</p>\n"
    - id: StepValue
      type: System.Object
      description: "\n<p>The value of the <strong>Step</strong> option.</p>\n"
    - id: LoopForResult
      type: System.Object
      description: "\n<p>An object that contains verified values for loop values.</p>\n"
    - id: CounterResult
      type: System.Object
      description: "\n<p>The counter value for the next loop iteration.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>False</strong> if the loop has terminated; otherwise, <strong>True</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForLoopInitObj(System.Object, System.Object, System.Object, System.Object, ByRef System.Object, ByRef System.Object)
  name.vb: ForLoopInitObj(Object, Object, Object, Object, ByRef Object, ByRef Object)
- uid: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)
  commentId: M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)
  id: ForNextCheckDec(System.Decimal,System.Decimal,System.Decimal)
  parent: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl
  langs:
  - csharp
  - vb
  name: ForNextCheckDec(Decimal, Decimal, Decimal)
  fullName: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckDec(System.Decimal, System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForNextCheckDec
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 144
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Checks for valid values for the loop counter, <strong>Step</strong>, and <strong>To</strong> values.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static bool ForNextCheckDec(decimal count, decimal limit, decimal StepValue)
    content.vb: Public Shared Function ForNextCheckDec(count As Decimal, limit As Decimal, StepValue As Decimal) As Boolean
    parameters:
    - id: count
      type: System.Decimal
      description: "\n<p>Required. A <strong>Decimal</strong> value that represents the initial value passed for the loop counter variable.</p>\n"
    - id: limit
      type: System.Decimal
      description: "\n<p>Required. A <strong>Decimal</strong> value that represents the value passed by using the <strong>To</strong> keyword.</p>\n"
    - id: StepValue
      type: System.Decimal
      description: "\n<p>Required. A <strong>Decimal</strong> value that represents the value passed by using the <strong>Step</strong> keyword.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>True</strong> if <em>StepValue</em> is greater than zero and <em>count</em> is less than or equal to <em>limit</em> or <em>StepValue</em> is less than or equal to zero and <em>count</em> is greater than or equal to <em>limit</em>; otherwise, <strong>False</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object,System.Object,System.Object@)
  commentId: M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object,System.Object,System.Object@)
  id: ForNextCheckObj(System.Object,System.Object,System.Object@)
  parent: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl
  langs:
  - csharp
  - vb
  name: ForNextCheckObj(Object, Object, ref Object)
  fullName: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object, System.Object, ref System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForNextCheckObj
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 145
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Increments a <strong>For...Next</strong> loop.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static bool ForNextCheckObj(object Counter, object LoopObj, ref object CounterResult)
    content.vb: Public Shared Function ForNextCheckObj(Counter As Object, LoopObj As Object, ByRef CounterResult As Object) As Boolean
    parameters:
    - id: Counter
      type: System.Object
      description: "\n<p>The loop counter variable.</p>\n"
    - id: LoopObj
      type: System.Object
      description: "\n<p>An object that contains verified values for loop values.</p>\n"
    - id: CounterResult
      type: System.Object
      description: "\n<p>The counter value for the next loop iteration.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>False</strong> if the loop has terminated; otherwise, <strong>True</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckObj(System.Object, System.Object, ByRef System.Object)
  name.vb: ForNextCheckObj(Object, Object, ByRef Object)
- uid: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single,System.Single,System.Single)
  commentId: M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single,System.Single,System.Single)
  id: ForNextCheckR4(System.Single,System.Single,System.Single)
  parent: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl
  langs:
  - csharp
  - vb
  name: ForNextCheckR4(Single, Single, Single)
  fullName: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR4(System.Single, System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForNextCheckR4
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 146
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Checks for valid values for the loop counter, <strong>Step</strong>, and <strong>To</strong> values.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static bool ForNextCheckR4(float count, float limit, float StepValue)
    content.vb: Public Shared Function ForNextCheckR4(count As Single, limit As Single, StepValue As Single) As Boolean
    parameters:
    - id: count
      type: System.Single
      description: "\n<p>Required. A <strong>Single</strong> value that represents the initial value passed for the loop counter variable.</p>\n"
    - id: limit
      type: System.Single
      description: "\n<p>Required. A <strong>Single</strong> value that represents the value passed by using the <strong>To</strong> keyword.</p>\n"
    - id: StepValue
      type: System.Single
      description: "\n<p>Required. A <strong>Single</strong> value that represents the value passed by using the <strong>Step</strong> keyword.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>True</strong> if <em>StepValue</em> is greater than zero and <em>count</em> is less than or equal to <em>limit</em>, or if <em>StepValue</em> is less than or equal to zero and <em>count</em> is greater than or equal to <em>limit</em>; otherwise, <strong>False</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double,System.Double,System.Double)
  commentId: M:Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double,System.Double,System.Double)
  id: ForNextCheckR8(System.Double,System.Double,System.Double)
  parent: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl
  langs:
  - csharp
  - vb
  name: ForNextCheckR8(Double, Double, Double)
  fullName: Microsoft.VisualBasic.CompilerServices.ObjectFlowControl.ForLoopControl.ForNextCheckR8(System.Double, System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForNextCheckR8
    path: src/Microsoft.VisualBasic/ref/Microsoft.VisualBasic.cs
    startLine: 147
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.CompilerServices
  summary: "\n<p>Checks for valid values for the loop counter, <strong>Step</strong>, and <strong>To</strong> values.</p>\n"
  remarks: "\n<p>This class supports the Visual Basic compiler and is not intended to be used directly from your code.</p>\n"
  syntax:
    content: public static bool ForNextCheckR8(double count, double limit, double StepValue)
    content.vb: Public Shared Function ForNextCheckR8(count As Double, limit As Double, StepValue As Double) As Boolean
    parameters:
    - id: count
      type: System.Double
      description: "\n<p>Required. A <strong>Double</strong> value that represents the initial value passed for the loop counter variable.</p>\n"
    - id: limit
      type: System.Double
      description: "\n<p>Required. A <strong>Double</strong> value that represents the value passed by using the <strong>To</strong> keyword.</p>\n"
    - id: StepValue
      type: System.Double
      description: "\n<p>Required. A <strong>Double</strong> value that represents the value passed by using the <strong>Step</strong> keyword.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>True</strong> if <em>StepValue</em> is greater than zero and <em>count</em> is less than or equal to <em>limit</em>, or if <em>StepValue</em> is less than or equal to zero and <em>count</em> is greater than or equal to <em>limit</em>; otherwise, <strong>False</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.VisualBasic.CompilerServices
  isExternal: false
  name: Microsoft.VisualBasic.CompilerServices
  fullName: Microsoft.VisualBasic.CompilerServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
