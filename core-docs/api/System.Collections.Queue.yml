items:
- uid: System.Collections.Queue
  commentId: T:System.Collections.Queue
  id: Queue
  parent: System.Collections
  children:
  - System.Collections.Queue.#ctor
  - System.Collections.Queue.#ctor(System.Collections.ICollection)
  - System.Collections.Queue.#ctor(System.Int32)
  - System.Collections.Queue.#ctor(System.Int32,System.Single)
  - System.Collections.Queue.Clear
  - System.Collections.Queue.Clone
  - System.Collections.Queue.Contains(System.Object)
  - System.Collections.Queue.CopyTo(System.Array,System.Int32)
  - System.Collections.Queue.Count
  - System.Collections.Queue.Dequeue
  - System.Collections.Queue.Enqueue(System.Object)
  - System.Collections.Queue.GetEnumerator
  - System.Collections.Queue.IsSynchronized
  - System.Collections.Queue.Peek
  - System.Collections.Queue.Synchronized(System.Collections.Queue)
  - System.Collections.Queue.SyncRoot
  - System.Collections.Queue.ToArray
  - System.Collections.Queue.TrimToSize
  langs:
  - csharp
  - vb
  name: Queue
  fullName: System.Collections.Queue
  type: Class
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Queue
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 20
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Represents a first-in, first-out collection of objects.</p>\n"
  remarks: "\n<p>This class implements a queue as a circular array. Objects stored in a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> are inserted at one end and removed from the other.</p>\n<p>Queues and stacks are useful when you need temporary storage for information; that is, when you might want to discard an element after retrieving its value. Use <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> if you need to access the information in the same order that it is stored in the collection. Use <xref href=\"System.Collections.Stack\" data-throw-if-not-resolved=\"false\"></xref> if you need to access the information in reverse order. Use <xref href=\"System.Collections.Concurrent.ConcurrentQueue`1\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.Concurrent.ConcurrentStack`1\" data-throw-if-not-resolved=\"false\"></xref> if you need to access the collection from multiple threads concurrently.</p>\n<p>Three main operations can be performed on a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> and its elements:  </p>\n<ul><li>\n<p>\n<xref href=\"System.Collections.Queue.Enqueue(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> adds an element to the end of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li><li>\n<p>\n<xref href=\"System.Collections.Queue.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> removes the oldest element from the start of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</li><li>\n<p>\n<xref href=\"System.Collections.Queue.Peek\" data-throw-if-not-resolved=\"false\"></xref> returns the oldest element that is at the start of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> but does not remove it from the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</li></ul>\n<p>The capacity of a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> can hold. As elements are added to a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref href=\"System.Collections.Queue.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is constructed. The default growth factor is 2.0. The capacity of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> will always increase by at least a minimum of four, regardless of the growth factor. For example, a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> with a growth factor of 1.0 will always increase in capacity by four when a greater capacity is required.</p>\n<p>\n<xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> accepts <strong>null</strong> as a valid value and allows duplicate elements.</p>\n<p>For the generic version of this collection, see <xref href=\"System.Collections.Generic.Queue`1\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  example:
  - "\n<p>The following example shows how to create and add values to a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> and how to print out its values.</p>Classic Queue Example#1"
  syntax:
    content: 'public class Queue : ICollection'
    content.vb: >-
      Public Class Queue
          Inherits ICollection
  seealso:
  - type: System.Collections.Generic.Queue`1
    commentId: T:System.Collections.Generic.Queue`1
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.Queue.#ctor
  commentId: M:System.Collections.Queue.#ctor
  id: '#ctor'
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: Queue()
  fullName: System.Collections.Queue.Queue()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 37
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the default initial capacity, and uses the default growth factor.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> can hold.  As elements are added to a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref href=\"System.Collections.Queue.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is constructed.</p>\n<p>This constructor is an O(1) operation.</p>\n"
  syntax:
    content: public Queue()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Queue.#ctor(System.Collections.ICollection)
  commentId: M:System.Collections.Queue.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: Queue(ICollection)
  fullName: System.Collections.Queue.Queue(System.Collections.ICollection)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 181
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified collection, has the same initial capacity as the number of elements copied, and uses the default growth factor.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> can hold.  As elements are added to a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref href=\"System.Collections.Queue.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is constructed.</p>\n<p>The elements are copied onto the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> in the same order they are read by the <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is the number of elements in <em>col</em>.</p>\n"
  syntax:
    content: public Queue(ICollection col)
    content.vb: Public Sub New(col As ICollection)
    parameters:
    - id: col
      type: System.Collections.ICollection
      description: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> to copy elements from. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>col</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Queue.#ctor(System.Int32)
  commentId: M:System.Collections.Queue.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: Queue(Int32)
  fullName: System.Collections.Queue.Queue(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 45
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified initial capacity, and uses the default growth factor.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> can hold.  As elements are added to a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref href=\"System.Collections.Queue.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is constructed.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  syntax:
    content: public Queue(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Queue.#ctor(System.Int32,System.Single)
  commentId: M:System.Collections.Queue.#ctor(System.Int32,System.Single)
  id: '#ctor(System.Int32,System.Single)'
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: Queue(Int32, Single)
  fullName: System.Collections.Queue.Queue(System.Int32, System.Single)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 53
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> class that is empty, has the specified initial capacity, and uses the specified growth factor.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> can hold.  As elements are added to a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref href=\"System.Collections.Queue.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is constructed. The capacity of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> from increasing in size.</p>\n<p>If the size of the collection can be estimated, specifying the initial capacity eliminates the need to perform a number of resizing operations while adding elements to the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This constructor is an O(<em>n</em>) operation, where <em>n</em> is <em>capacity</em>.</p>\n"
  syntax:
    content: public Queue(int capacity, float growFactor)
    content.vb: Public Sub New(capacity As Integer, growFactor As Single)
    parameters:
    - id: capacity
      type: System.Int32
    - id: growFactor
      type: System.Single
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>growFactor</em> is less than 1.0 or greater than 10.0. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Queue.Count
  commentId: P:System.Collections.Queue.Count
  id: Count
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Queue.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 82
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> can store. <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements that are actually in the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The capacity of a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is always greater than or equal to <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref>. If <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref> exceeds the capacity while adding elements, the capacity is automatically increased by reallocating the internal array before copying the old elements and adding the new elements. The new capacity is determined by multiplying the current capacity by the growth factor, which is determined when the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is constructed. The capacity of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> from increasing in size.</p>\n<p>The capacity can be decreased by calling <xref href=\"System.Collections.Queue.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Retrieving the value of this property is an O(1) operation.</p>\n"
  syntax:
    content: public virtual int Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Queue.IsSynchronized
  commentId: P:System.Collections.Queue.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: IsSynchronized
  fullName: System.Collections.Queue.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSynchronized
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 103
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe).</p>\n"
  remarks: "\n<p>To guarantee the thread safety of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, all operations must be done through the wrapper returned by the <xref href=\"System.Collections.Queue.Synchronized(System.Collections.Queue)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Queue.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration. Retrieving the value of this property is an O(1) operation. </p>Classic Queue.IsSynchronized Example#2<p>The following example shows how to synchronize a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, determine if a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is synchronized, and use a synchronized <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Queue.IsSynchronized Example#1"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.Collections.Queue.SyncRoot
    commentId: P:System.Collections.Queue.SyncRoot
  - type: System.Collections.Queue.Synchronized(System.Collections.Queue)
    commentId: M:System.Collections.Queue.Synchronized(System.Collections.Queue)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Queue.SyncRoot
  commentId: P:System.Collections.Queue.SyncRoot
  id: SyncRoot
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: SyncRoot
  fullName: System.Collections.Queue.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SyncRoot
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 108
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>To create a synchronized version of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, use the <xref href=\"System.Collections.Queue.Synchronized(System.Collections.Queue)\" data-throw-if-not-resolved=\"false\"></xref> method. However, derived classes can provide their own synchronized version of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Collections.Queue.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> property. The synchronizing code must perform operations on the <xref href=\"System.Collections.Queue.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, not directly on the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>. This ensures proper operation of collections that are derived from other objects. Specifically, it maintains proper synchronization with other threads that might be simultaneously modifying the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Queue.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration. Retrieving the value of this property is an O(1) operation.</p>Classic Queue.IsSynchronized Example#2"
  syntax:
    content: public virtual Object SyncRoot { get; }
    content.vb: Public Overridable ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: Object
  seealso:
  - type: System.Collections.Queue.IsSynchronized
    commentId: P:System.Collections.Queue.IsSynchronized
  - type: System.Collections.Queue.Synchronized(System.Collections.Queue)
    commentId: M:System.Collections.Queue.Synchronized(System.Collections.Queue)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.Queue.Clear
  commentId: M:System.Collections.Queue.Clear
  id: Clear
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Queue.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 121
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes all objects from the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref> is set to zero, and references to other objects from elements of the collection are also released.</p>\n<p>The capacity remains unchanged. To reset the capacity of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, call <xref href=\"System.Collections.Queue.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref>. Trimming an empty <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to clear the values of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Queue.Clear Example#1"
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  seealso:
  - type: System.Collections.Queue.TrimToSize
    commentId: M:System.Collections.Queue.TrimToSize
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Queue.Clone
  commentId: M:System.Collections.Queue.Clone
  id: Clone
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Collections.Queue.Clone()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 87
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Creates a shallow copy of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>A shallow copy of a collection copies only the elements of the collection, whether they are reference types or value types, but it does not copy the objects that the references refer to. The references in the new collection point to the same objects that the references in the original collection point to.</p>\n<p>In contrast, a deep copy of a collection copies the elements and everything directly or indirectly referenced by the elements.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual Object Clone()
    content.vb: Public Overridable Function Clone As Object
    return:
      type: Object
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Queue.Contains(System.Object)
  commentId: M:System.Collections.Queue.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: Contains(Object)
  fullName: System.Collections.Queue.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 189
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether an element is in the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method determines equality by calling <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method performs a linear search; therefore, this method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>obj</em> to determine whether <em>item</em> exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>obj</em> parameter on the objects in the collection.</p>\n"
  syntax:
    content: public virtual bool Contains(object obj)
    content.vb: Public Overridable Function Contains(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> is found in the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Queue.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Queue.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Collections.Queue.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 190
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> elements to an existing one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified array index.</p>\n"
  remarks: "\n<p>The elements are copied to the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> in the same order in which the enumerator iterates through the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to copy a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> into a one-dimensional array.</p>Classic Queue.CopyTo Example#1"
  syntax:
    content: public virtual void CopyTo(Array array, int index)
    content.vb: Public Overridable Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: "\n<p>The type of the source <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Queue.Dequeue
  commentId: M:System.Collections.Queue.Dequeue
  id: Dequeue
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: Dequeue()
  fullName: System.Collections.Queue.Dequeue()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dequeue
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 197
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes and returns the object at the beginning of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method is similar to the <xref href=\"System.Collections.Queue.Peek\" data-throw-if-not-resolved=\"false\"></xref> method, but <xref href=\"System.Collections.Queue.Peek\" data-throw-if-not-resolved=\"false\"></xref> does not modify the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>null</strong> can be added to the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> as a value. To distinguish between a null value and the end of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, check the <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref> property or catch the <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>, which is thrown when the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example shows how to add elements to the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, remove elements from the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, or view the element at the beginning of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Queue.Enqueue Example#1"
  syntax:
    content: public virtual Object Dequeue()
    content.vb: Public Overridable Function Dequeue As Object
    return:
      type: Object
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is empty. </p>\n"
  seealso:
  - type: System.Collections.Queue.Enqueue(System.Object)
    commentId: M:System.Collections.Queue.Enqueue(System.Object)
  - type: System.Collections.Queue.Peek
    commentId: M:System.Collections.Queue.Peek
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Queue.Enqueue(System.Object)
  commentId: M:System.Collections.Queue.Enqueue(System.Object)
  id: Enqueue(System.Object)
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: Enqueue(Object)
  fullName: System.Collections.Queue.Enqueue(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Enqueue
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 192
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Adds an object to the end of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The capacity of a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is the number of elements the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> can hold.  As elements are added to a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, the capacity is automatically increased as required through reallocation.  The capacity can be decreased by calling <xref href=\"System.Collections.Queue.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The growth factor is the number by which the current capacity is multiplied when a greater capacity is required.  The growth factor is determined when the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is constructed. The capacity of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> will always increase by a minimum value, regardless of the growth factor; a growth factor of 1.0 will not prevent the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> from increasing in size.</p>\n<p>If <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than the capacity of the internal array, this method is an O(1) operation. If the internal array needs to be reallocated to accommodate the new element, this method becomes an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to add elements to the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, remove elements from the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, or view the element at the beginning of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Queue.Enqueue Example#1"
  syntax:
    content: public virtual void Enqueue(object obj)
    content.vb: Public Overridable Sub Enqueue(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to add to the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.Queue.Dequeue
    commentId: M:System.Collections.Queue.Dequeue
  - type: System.Collections.Queue.Peek
    commentId: M:System.Collections.Queue.Peek
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Queue.GetEnumerator
  commentId: M:System.Collections.Queue.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Queue.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 190
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The <strong>foreach</strong> statement of the C# language (<strong>for each</strong> in Visual Basic) hides the complexity of the enumerators.  Therefore, using <strong>foreach</strong> is recommended, instead of directly manipulating the enumerator.</p>\n<p>Enumerators can be used to read the data in the collection, but they cannot be used to modify the underlying collection.</p>\n<p>Initially, the enumerator is positioned before the first element in the collection. <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> also brings the enumerator back to this position.  At this position, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. Therefore, you must call <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> to advance the enumerator to the first element of the collection before reading the value of <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> returns the same object until either <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> is called. <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> sets <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the next element.</p>\n<p>If <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> passes the end of the collection, the enumerator is positioned after the last element in the collection and <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>. When the enumerator is at this position, subsequent calls to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> also return <strong>false</strong>. If the last call to <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref> returned <strong>false</strong>, <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> is undefined. To set <xref href=\"System.Collections.IEnumerator.Current\" data-throw-if-not-resolved=\"false\"></xref> to the first element of the collection again, you can call <xref href=\"System.Collections.IEnumerator.Reset\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Collections.IEnumerator.MoveNext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An enumerator remains valid as long as the collection remains unchanged. If changes are made to the collection, such as adding, modifying, or deleting elements, the enumerator is irrecoverably invalidated and its behavior is undefined.</p>\n<p>The enumerator does not have exclusive access to the collection; therefore, enumerating through a collection is intrinsically not a thread-safe procedure.  To guarantee thread safety during enumeration, you can lock the collection during the entire enumeration.  To allow the collection to be accessed by multiple threads for reading and writing, you must implement your own synchronization.</p>\n<p>This method is an O(1) operation.</p>\n"
  syntax:
    content: public virtual IEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IEnumerator
    return:
      type: IEnumerator
  seealso:
  - type: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Queue.Peek
  commentId: M:System.Collections.Queue.Peek
  id: Peek
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: Peek()
  fullName: System.Collections.Queue.Peek()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Peek
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 214
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns the object at the beginning of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> without removing it.</p>\n"
  remarks: "\n<p>This method is similar to the <xref href=\"System.Collections.Queue.Dequeue\" data-throw-if-not-resolved=\"false\"></xref> method, but <xref href=\"System.Collections.Queue.Peek\" data-throw-if-not-resolved=\"false\"></xref> does not modify the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>null</strong> can be added to the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> as a value. To distinguish between a null value and the end of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, check the <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref> property or catch the <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>, which is thrown when the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n<p>This method is an O(1) operation.</p>\n"
  example:
  - "\n<p>The following example shows how to add elements to the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, remove elements from the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, or view the element at the beginning of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Queue.Enqueue Example#1"
  syntax:
    content: public virtual Object Peek()
    content.vb: Public Overridable Function Peek As Object
    return:
      type: Object
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is empty. </p>\n"
  seealso:
  - type: System.Collections.Queue.Enqueue(System.Object)
    commentId: M:System.Collections.Queue.Enqueue(System.Object)
  - type: System.Collections.Queue.Dequeue
    commentId: M:System.Collections.Queue.Dequeue
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Queue.Synchronized(System.Collections.Queue)
  commentId: M:System.Collections.Queue.Synchronized(System.Collections.Queue)
  id: Synchronized(System.Collections.Queue)
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: Synchronized(Queue)
  fullName: System.Collections.Queue.Synchronized(System.Collections.Queue)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Synchronized
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 227
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns a new <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> that wraps the original queue, and is thread safe.</p>\n"
  remarks: "\n<p>The wrapper returned by this method locks the queue before an operation is performed so that it is performed in a thread-safe manner.</p>\n<p>To guarantee the thread safety of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, all operations must be done through this wrapper only.</p>\n<p>Enumerating through a collection is intrinsically not a thread-safe procedure. Even when a collection is synchronized, other threads can still modify the collection, which causes the enumerator to throw an exception. To guarantee thread safety during enumeration, you can either lock the collection during the entire enumeration or catch the exceptions resulting from changes made by other threads.</p>\n"
  example:
  - "\n<p>The following code example shows how to lock the collection using the <xref href=\"System.Collections.Queue.SyncRoot\" data-throw-if-not-resolved=\"false\"></xref> during the entire enumeration. This method is an O(1) operation.</p>Classic Queue.IsSynchronized Example#2<p>The following example shows how to synchronize a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>, determine if a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is synchronized and use a synchronized <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>Classic Queue.IsSynchronized Example#1"
  syntax:
    content: public static Queue Synchronized(Queue queue)
    content.vb: Public Shared Function Synchronized(queue As Queue) As Queue
    parameters:
    - id: queue
      type: System.Collections.Queue
    return:
      type: System.Collections.Queue
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>queue</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Collections.Queue.IsSynchronized
    commentId: P:System.Collections.Queue.IsSynchronized
  - type: System.Collections.Queue.SyncRoot
    commentId: P:System.Collections.Queue.SyncRoot
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.Queue.ToArray
  commentId: M:System.Collections.Queue.ToArray
  id: ToArray
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.Collections.Queue.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 270
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> elements to a new array.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is not modified. The order of the elements in the new array is the same as the order of the elements from the beginning of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> to its end.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example shows how to copy a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> into a one-dimensional array.</p>Classic Queue.CopyTo Example#1"
  syntax:
    content: public virtual Object[] ToArray()
    content.vb: Public Overridable Function ToArray As Object()
    return:
      type: Object[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.Queue.TrimToSize
  commentId: M:System.Collections.Queue.TrimToSize
  id: TrimToSize
  parent: System.Collections.Queue
  langs:
  - csharp
  - vb
  name: TrimToSize()
  fullName: System.Collections.Queue.TrimToSize()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TrimToSize
    path: src/System.Collections.NonGeneric/src/System/Collections/Queue.cs
    startLine: 314
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method can be used to minimize a queue's memory overhead if no new elements will be added to the queue.</p>\n<p>To reset a <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> to its initial state, call the <xref href=\"System.Collections.Queue.Clear\" data-throw-if-not-resolved=\"false\"></xref> method before calling <xref href=\"System.Collections.Queue.TrimToSize\" data-throw-if-not-resolved=\"false\"></xref>. Trimming an empty <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> sets the capacity of the <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> to the default capacity.</p>\n<p>This method is an O(<em>n</em>) operation, where <em>n</em> is <xref href=\"System.Collections.Queue.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void TrimToSize()
    content.vb: Public Overridable Sub TrimToSize
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.Queue\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  seealso:
  - type: System.Collections.Queue.Clear
    commentId: M:System.Collections.Queue.Clear
  - type: System.Collections.Queue.Count
    commentId: P:System.Collections.Queue.Count
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Queue
  parent: System.Collections
  isExternal: false
  name: Queue
  fullName: System.Collections.Queue
- uid: System.Object[]
  isExternal: false
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ()
    fullName: ()
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArrayTypeMismatchException
  isExternal: false
  name: ArrayTypeMismatchException
  fullName: System.ArrayTypeMismatchException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
