items:
- uid: System.Threading.ManualResetEventSlim
  commentId: T:System.Threading.ManualResetEventSlim
  id: ManualResetEventSlim
  parent: System.Threading
  children:
  - System.Threading.ManualResetEventSlim.#ctor
  - System.Threading.ManualResetEventSlim.#ctor(System.Boolean)
  - System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)
  - System.Threading.ManualResetEventSlim.Dispose
  - System.Threading.ManualResetEventSlim.Dispose(System.Boolean)
  - System.Threading.ManualResetEventSlim.IsSet
  - System.Threading.ManualResetEventSlim.Reset
  - System.Threading.ManualResetEventSlim.Set
  - System.Threading.ManualResetEventSlim.SpinCount
  - System.Threading.ManualResetEventSlim.Wait
  - System.Threading.ManualResetEventSlim.Wait(System.Int32)
  - System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)
  - System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)
  - System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.ManualResetEventSlim.WaitHandle
  langs:
  - csharp
  - vb
  name: ManualResetEventSlim
  fullName: System.Threading.ManualResetEventSlim
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ManualResetEventSlim
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 47
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Provides a slimmed down version of <xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>You can use this class for better performance than <xref href=\"System.Threading.ManualResetEvent\" data-throw-if-not-resolved=\"false\"></xref> when wait times are expected to be very short, and when the event does not cross a process boundary. <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> uses busy spinning for a short time while it waits for the event to become signaled. When wait times are short, spinning can be much less expensive than waiting by using wait handles. However, if the event does not become signaled within a certain period of time, <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> resorts to a regular event handle wait.</p>\n"
  example:
  - "\n<p>The following example shows how to use a <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref>. For more information about the use of <strong>SpinCount</strong> and other best practices concerning the use of this type, see ManualResetEvent and ManualResetEventSlim.</p>System.Threading.ManualResetEventSlim#01"
  syntax:
    content: >-
      [ComVisible(false)]

      [DebuggerDisplay("Set = {IsSet}")]

      [HostProtection(Synchronization = true, ExternalThreading = true)]

      public class ManualResetEventSlim : IDisposable
    content.vb: >-
      <ComVisible(False)>

      <DebuggerDisplay("Set = {IsSet}")>

      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      Public Class ManualResetEventSlim
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.ManualResetEventSlim.#ctor
  commentId: M:System.Threading.ManualResetEventSlim.#ctor
  id: '#ctor'
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: ManualResetEventSlim()
  fullName: System.Threading.ManualResetEventSlim.ManualResetEventSlim()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 186
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> class with an initial state of nonsignaled.</p>\n"
  example:
  - 
  syntax:
    content: public ManualResetEventSlim()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ManualResetEventSlim.#ctor(System.Boolean)
  commentId: M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: ManualResetEventSlim(Boolean)
  fullName: System.Threading.ManualResetEventSlim.ManualResetEventSlim(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 198
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> class with a Boolean value indicating whether to set the intial state to signaled.</p>\n"
  example:
  - 
  syntax:
    content: public ManualResetEventSlim(bool initialState)
    content.vb: Public Sub New(initialState As Boolean)
    parameters:
    - id: initialState
      type: System.Boolean
      description: >-
        true to set the initial state signaled; false to set the initial state

        to nonsignaled.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)
  commentId: M:System.Threading.ManualResetEventSlim.#ctor(System.Boolean,System.Int32)
  id: '#ctor(System.Boolean,System.Int32)'
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: ManualResetEventSlim(Boolean, Int32)
  fullName: System.Threading.ManualResetEventSlim.ManualResetEventSlim(System.Boolean, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 216
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> class with a Boolean value indicating whether to set the intial state to signaled and a specified spin count.</p>\n"
  example:
  - 
  syntax:
    content: public ManualResetEventSlim(bool initialState, int spinCount)
    content.vb: Public Sub New(initialState As Boolean, spinCount As Integer)
    parameters:
    - id: initialState
      type: System.Boolean
      description: >-
        true to set the initial state to signaled; false to set the initial state

        to nonsignaled.
    - id: spinCount
      type: System.Int32
      description: >-
        The number of spin waits that will occur before falling back to a true

        wait.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>spinCount</em> is less than 0 or greater than the maximum allowed value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ManualResetEventSlim.IsSet
  commentId: P:System.Threading.ManualResetEventSlim.IsSet
  id: IsSet
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: IsSet
  fullName: System.Threading.ManualResetEventSlim.IsSet
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSet
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 121
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets whether the event is set.</p>\n"
  example:
  - 
  syntax:
    content: public bool IsSet { get; }
    content.vb: Public ReadOnly Property IsSet As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the event has is set; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.ManualResetEventSlim.SpinCount
  commentId: P:System.Threading.ManualResetEventSlim.SpinCount
  id: SpinCount
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: SpinCount
  fullName: System.Threading.ManualResetEventSlim.SpinCount
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SpinCount
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 137
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets the number of spin waits that will occur before falling back to a kernel-based wait operation.</p>\n"
  example:
  - 
  syntax:
    content: public int SpinCount { get; }
    content.vb: Public ReadOnly Property SpinCount As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.ManualResetEventSlim.WaitHandle
  commentId: P:System.Threading.ManualResetEventSlim.WaitHandle
  id: WaitHandle
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: WaitHandle
  fullName: System.Threading.ManualResetEventSlim.WaitHandle
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitHandle
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 101
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets the underlying <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> object for this <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Accessing this property forces initialization of an underlying event object if one hasn't already been created. To simply wait on this <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref>, the public Wait methods should be preferred. It is recommended to dispose the <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> instance after accessing this property, in order to prevent a resource leak.</p>\n"
  example:
  - 
  syntax:
    content: public WaitHandle WaitHandle { get; }
    content.vb: Public ReadOnly Property WaitHandle As WaitHandle
    parameters: []
    return:
      type: System.Threading.WaitHandle
      description: The underlying <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> event object fore this <xref href="System.Threading.ManualResetEventSlim" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.ManualResetEventSlim.Dispose
  commentId: M:System.Threading.ManualResetEventSlim.Dispose
  id: Dispose
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Threading.ManualResetEventSlim.Dispose()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 686
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Call <strong>Dispose</strong> when you are finished using the <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref>. The <strong>Dispose</strong> method leaves the <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <strong>Dispose</strong>, you must release all references to the <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> was occupying.</p>\n<p>For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</p>\n<p>Always call <strong>Dispose</strong> before you release your last reference to the <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Finalize</strong> method.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ManualResetEventSlim.Dispose(System.Boolean)
  commentId: M:System.Threading.ManualResetEventSlim.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Threading.ManualResetEventSlim.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 702
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref>, and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>Unlike most of the members of <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.ManualResetEventSlim.Dispose(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> is not thread-safe and may not be used concurrently with other members of this instance.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: >-
        true to release both managed and unmanaged resources;

        false to release only unmanaged resources.
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Threading.ManualResetEventSlim.Reset
  commentId: M:System.Threading.ManualResetEventSlim.Reset
  id: Reset
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Threading.ManualResetEventSlim.Reset()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reset
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 387
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Sets the state of the event to nonsignaled, which causes threads to block.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Threading.ManualResetEventSlim.Reset\" data-throw-if-not-resolved=\"false\"></xref> can be called concurrently with all members except <xref href=\"System.Threading.ManualResetEventSlim.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The object has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ManualResetEventSlim.Set
  commentId: M:System.Threading.ManualResetEventSlim.Set
  id: Set
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: Set()
  fullName: System.Threading.ManualResetEventSlim.Set()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Set
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 319
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Sets the state of the event to signaled, which allows one or more threads waiting on the event to proceed.</p>\n"
  example:
  - 
  syntax:
    content: public void Set()
    content.vb: Public Sub Set
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ManualResetEventSlim.Wait
  commentId: M:System.Threading.ManualResetEventSlim.Wait
  id: Wait
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: Wait()
  fullName: System.Threading.ManualResetEventSlim.Wait()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 421
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> is set.</p>\n"
  remarks: "\n<p>The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.</p>\n"
  example:
  - 
  syntax:
    content: public void Wait()
    content.vb: Public Sub Wait
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The maximum number of waiters has been exceeded.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The object has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ManualResetEventSlim.Wait(System.Int32)
  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: Wait(Int32)
  fullName: System.Threading.ManualResetEventSlim.Wait(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 516
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> is set, using a 32-bit signed integer to measure the time interval.</p>\n"
  example:
  - 
  syntax:
    content: public bool Wait(int millisecondsTimeout)
    content.vb: Public Function Wait(millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref>(-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: >-
        true if the <xref href="System.Threading.ManualResetEventSlim" data-throw-if-not-resolved="false"></xref> was set; otherwise,

        false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The maximum number of waiters has been exceeded.</p>\n<p></p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The object has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.Int32,System.Threading.CancellationToken)
  id: Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: Wait(Int32, CancellationToken)
  fullName: System.Threading.ManualResetEventSlim.Wait(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 539
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> is set, using a 32-bit signed integer to measure the time interval, while observing a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref>(-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to

        observe.
    return:
      type: System.Boolean
      description: >-
        true if the <xref href="System.Threading.ManualResetEventSlim" data-throw-if-not-resolved="false"></xref> was set; otherwise,

        false.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<em>cancellationToken</em> was canceled.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The maximum number of waiters has been exceeded.</p>\n<p></p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The object has already been disposed or the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)
  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)
  id: Wait(System.Threading.CancellationToken)
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: Wait(CancellationToken)
  fullName: System.Threading.ManualResetEventSlim.Wait(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 441
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> receives a signal, while observing a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The caller of this method blocks indefinitely until the current instance is set. The caller will return immediately if the event is currently in a set state.</p>\n"
  example:
  - 
  syntax:
    content: public void Wait(CancellationToken cancellationToken)
    content.vb: Public Sub Wait(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to

        observe.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The maximum number of waiters has been exceeded.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<em>cancellationToken</em> was canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The object has already been disposed or the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)
  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: Wait(TimeSpan)
  fullName: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 461
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> is set, using a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> to measure the time interval.</p>\n"
  example:
  - 
  syntax:
    content: public bool Wait(TimeSpan timeout)
    content.vb: Public Function Wait(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: >
        A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds

        to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: >-
        true if the <xref href="System.Threading.ManualResetEventSlim" data-throw-if-not-resolved="false"></xref> was set; otherwise,

        false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\n<p>-or-</p>\n<p>The number of milliseconds in <em>timeout</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The maximum number of waiters has been exceeded.</p>\n<p></p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The object has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Threading.ManualResetEventSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  id: Wait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.ManualResetEventSlim
  langs:
  - csharp
  - vb
  name: Wait(TimeSpan, CancellationToken)
  fullName: System.Threading.ManualResetEventSlim.Wait(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/ManualResetEventSlim.cs
    startLine: 492
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until the current <xref href=\"System.Threading.ManualResetEventSlim\" data-throw-if-not-resolved=\"false\"></xref> is set, using a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> to measure the time interval, while observing a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public bool Wait(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: >
        A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds

        to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: >-
        The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to

        observe.
    return:
      type: System.Boolean
      description: >-
        true if the <xref href="System.Threading.ManualResetEventSlim" data-throw-if-not-resolved="false"></xref> was set; otherwise,

        false.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<em>cancellationToken</em> was canceled.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\n<p>-or-</p>\n<p>The number of milliseconds in <em>timeout</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The maximum number of waiters has been exceeded. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The object has already been disposed or the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  fullName: System.OperationCanceledException
