items:
- uid: System.Security.Cryptography.X509Certificates.X509Store
  commentId: T:System.Security.Cryptography.X509Certificates.X509Store
  id: X509Store
  parent: System.Security.Cryptography.X509Certificates
  children:
  - System.Security.Cryptography.X509Certificates.X509Store.#ctor
  - System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)
  - System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  - System.Security.Cryptography.X509Certificates.X509Store.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)
  - System.Security.Cryptography.X509Certificates.X509Store.Certificates
  - System.Security.Cryptography.X509Certificates.X509Store.Dispose
  - System.Security.Cryptography.X509Certificates.X509Store.Location
  - System.Security.Cryptography.X509Certificates.X509Store.Name
  - System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)
  - System.Security.Cryptography.X509Certificates.X509Store.Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)
  langs:
  - csharp
  - vb
  name: X509Store
  fullName: System.Security.Cryptography.X509Certificates.X509Store
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: X509Store
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 425
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Represents an X.509 store, which is a physical store where certificates are persisted and managed. This class cannot be inherited.</p>\n"
  remarks: "\n<p>Use this class to work with an X.509 store.</p>\n<p>Starting with the .NET Framework 4.6, this type implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface. When you have finished using the type, you should dispose of it either directly or indirectly. To dispose of the type directly, call its <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref> method in a <strong>try</strong>/<strong>catch</strong> block. To dispose of it indirectly, use a language construct such as <strong>using</strong> (in C#) or <strong>Using</strong> (in Visual Basic). For more information, see the “Using an Object that Implements IDisposable” section in the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface topic.</p>\n<p>For apps that target the .NET Framework 4.5.2 and earlier versions, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> class does not implement the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface and therefore does not have a <strong>Dispose</strong> method. </p>\n"
  example:
  - "\n<p>This section contains two examples. The first example demonstrates how you can open standard X.509 stores and list the number of certificates in each. </p>\n<p>The second example demonstrates how you can add and remove single certificates and ranges of certificates. </p>\n<p>Example 1</p>\n<p>This example tries to open each standard store in each standard location on the current computer. It prints a summary that shows whether each store exists and, if so, the number of certificates it contains. </p>\n<p>The example creates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> object for each combination of standard name and standard location. It calls the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)\" data-throw-if-not-resolved=\"false\"></xref> method with the <xref href=\"System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly\" data-throw-if-not-resolved=\"false\"></xref> flag, which opens the physical store only if it already exists. If the physical store exists, the example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Name\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Location\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Certificates\" data-throw-if-not-resolved=\"false\"></xref> properties to display the number of certificates in the store. </p>x509store2#2<p>Example 2</p><p>This example opens an X.509 certificate store, adds and deletes certificates, and then closes the store. It assumes that you have three certificates to add to and remove from a local store.</p>x509store2#1"
  syntax:
    content: 'public sealed class X509Store : IDisposable'
    content.vb: >-
      Public NotInheritable Class X509Store
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.Cryptography.X509Certificates.X509Store.#ctor
  commentId: M:System.Security.Cryptography.X509Certificates.X509Store.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.X509Certificates.X509Store
  langs:
  - csharp
  - vb
  name: X509Store()
  fullName: System.Security.Cryptography.X509Certificates.X509Store.X509Store()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 427
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> class using the personal certificates of the current user store.</p>\n"
  remarks: "\n<p>Use this constructor to create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> object using the personal X.509 certificate store for the current user.</p>\n"
  example:
  - "\n<p>The following code example opens an X.509 certificate store, adds and deletes certificates, and then closes the store. It assumes that you have three certificates to add to and remove from a local store.</p>x509store2#1"
  syntax:
    content: public X509Store()
    content.vb: Public Sub New
  see:
  - type: System.Security.Permissions.StorePermission
    commentId: T:System.Security.Permissions.StorePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)
  id: '#ctor(System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.StoreLocation)'
  parent: System.Security.Cryptography.X509Certificates.X509Store
  langs:
  - csharp
  - vb
  name: X509Store(StoreName, StoreLocation)
  fullName: System.Security.Cryptography.X509Certificates.X509Store.X509Store(System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.StoreLocation)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 428
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> class using the specified <xref href=\"System.Security.Cryptography.X509Certificates.StoreName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Cryptography.X509Certificates.StoreLocation\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  remarks: "\n<p>Use this constructor to create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> object, specifying both the store name and the store location.</p>\n"
  example:
  - "\n<p>The following code example opens an X.509 certificate store, adds and deletes certificates, and then closes the store. It assumes that you have three certificates to add to and remove from a local store.</p>x509store2#1"
  syntax:
    content: public X509Store(StoreName storeName, StoreLocation storeLocation)
    content.vb: Public Sub New(storeName As StoreName, storeLocation As StoreLocation)
    parameters:
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
      description: "\n<p>One of the enumeration values that specifies the name of the X.509 certificate store. </p>\n"
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\n<p>One of the enumeration values that specifies the location of the X.509 certificate store. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>storeLocation</em> is not a valid location or <em>storeName</em> is not a valid name. </p>\n"
  see:
  - type: System.Security.Permissions.StorePermission
    commentId: T:System.Security.Permissions.StorePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Store.#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)
  id: '#ctor(System.String,System.Security.Cryptography.X509Certificates.StoreLocation)'
  parent: System.Security.Cryptography.X509Certificates.X509Store
  langs:
  - csharp
  - vb
  name: X509Store(String, StoreLocation)
  fullName: System.Security.Cryptography.X509Certificates.X509Store.X509Store(System.String, System.Security.Cryptography.X509Certificates.StoreLocation)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 429
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> class using a string that represents a value from the <xref href=\"System.Security.Cryptography.X509Certificates.StoreName\" data-throw-if-not-resolved=\"false\"></xref> enumeration and a value from the <xref href=\"System.Security.Cryptography.X509Certificates.StoreLocation\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  remarks: "\n<p>Use this constructor to create an <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> object using a store name and location. To create a new store, specify a name that does not exist. A new store will be created with that name.</p>\n"
  example:
  - "\n<p>The following code example opens an X.509 certificate store, adds and deletes certificates, and then closes the store. It assumes that you have three certificates to add to and remove from a local store.</p>x509store2#1"
  syntax:
    content: public X509Store(string storeName, StoreLocation storeLocation)
    content.vb: Public Sub New(storeName As String, storeLocation As StoreLocation)
    parameters:
    - id: storeName
      type: System.String
      description: "\n<p>A string that represents a value from the <xref href=\"System.Security.Cryptography.X509Certificates.StoreName\" data-throw-if-not-resolved=\"false\"></xref> enumeration. </p>\n"
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\n<p>One of the enumeration values that specifies the location of the X.509 certificate store. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>storeLocation</em> contains invalid values. </p>\n"
  see:
  - type: System.Security.Permissions.StorePermission
    commentId: T:System.Security.Permissions.StorePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Store.Certificates
  commentId: P:System.Security.Cryptography.X509Certificates.X509Store.Certificates
  id: Certificates
  parent: System.Security.Cryptography.X509Certificates.X509Store
  langs:
  - csharp
  - vb
  name: Certificates
  fullName: System.Security.Cryptography.X509Certificates.X509Store.Certificates
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Certificates
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 430
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Returns a collection of certificates located in an X.509 certificate store.</p>\n"
  remarks: "\n<p>This method returns a snapshot of the X.509 certificate store. Note that subsequent <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)\" data-throw-if-not-resolved=\"false\"></xref> operations performed on the store will not have any effect on the collection that is returned. This snapshot is recalculated each time the property is called, so the use of this property inside an iterative function is not recommended.</p>\n"
  example:
  - "\n<p>This section contains two examples. The first example demonstrates how you can open standard X.509 stores and list the number of certificates in each. </p>\n<p>The second example demonstrates how you can add and remove single certificates and ranges of certificates. </p>\n<p>Example 1</p>\n<p>This example tries to open each standard store in each standard location on the current computer. It prints a summary that shows whether each store exists and, if so, the number of certificates it contains. </p>\n<p>The example creates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> object for each combination of standard name and standard location. It calls the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)\" data-throw-if-not-resolved=\"false\"></xref> method with the <xref href=\"System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly\" data-throw-if-not-resolved=\"false\"></xref> flag, which opens the physical store only if it already exists. If the physical store exists, the example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Name\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Location\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Certificates\" data-throw-if-not-resolved=\"false\"></xref> properties to display the number of certificates in the store. </p>x509store2#2<p>Example 2</p><p>This example opens an X.509 certificate store, adds and deletes certificates, and then closes the store. It assumes that you have three certificates to add to and remove from a local store.</p>x509store2#1"
  syntax:
    content: public X509Certificate2Collection Certificates { get; }
    content.vb: Public ReadOnly Property Certificates As X509Certificate2Collection
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2Collection
      description: "\n<p>A collection of certificates.</p>\n"
  see:
  - type: System.Security.Permissions.StorePermission
    commentId: T:System.Security.Permissions.StorePermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Store.Location
  commentId: P:System.Security.Cryptography.X509Certificates.X509Store.Location
  id: Location
  parent: System.Security.Cryptography.X509Certificates.X509Store
  langs:
  - csharp
  - vb
  name: Location
  fullName: System.Security.Cryptography.X509Certificates.X509Store.Location
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Location
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 431
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the location of the X.509 certificate store.</p>\n"
  remarks: "\n<p>This property returns the X.509 certificate store location of either the store for the current user or the store for the local computer.</p>\n"
  example:
  - "\n<p>This section contains two examples. The first example demonstrates how you can open standard X.509 stores and list the number of certificates in each. </p>\n<p>The second example demonstrates how you can add and remove single certificates and ranges of certificates. </p>\n<p>Example 1</p>\n<p>This example tries to open each standard store in each standard location on the current computer. It prints a summary that shows whether each store exists and, if so, the number of certificates it contains. </p>\n<p>The example creates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> object for each combination of standard name and standard location. It calls the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)\" data-throw-if-not-resolved=\"false\"></xref> method with the <xref href=\"System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly\" data-throw-if-not-resolved=\"false\"></xref> flag, which opens the physical store only if it already exists. If the physical store exists, the example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Name\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Location\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Certificates\" data-throw-if-not-resolved=\"false\"></xref> properties to display the number of certificates in the store. </p>x509store2#2<p>Example 2</p><p>This example opens an X.509 certificate store, adds and deletes certificates, and then closes the store. It assumes that you have three certificates to add to and remove from a local store.</p>x509store2#1"
  syntax:
    content: public StoreLocation Location { get; }
    content.vb: Public ReadOnly Property Location As StoreLocation
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\n<p>The location of the certificate store.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Store.Name
  commentId: P:System.Security.Cryptography.X509Certificates.X509Store.Name
  id: Name
  parent: System.Security.Cryptography.X509Certificates.X509Store
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Security.Cryptography.X509Certificates.X509Store.Name
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 432
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the name of the X.509 certificate store.</p>\n"
  remarks: "\n<p>This property returns the X.509 certificate store name. This value can indicate the type of certificates stored, such as root certificates or certificates from trusted publishers.</p>\n"
  example:
  - "\n<p>This section contains two examples. The first example demonstrates how you can open standard X.509 stores and list the number of certificates in each. </p>\n<p>The second example demonstrates how you can add and remove single certificates and ranges of certificates. </p>\n<p>Example 1</p>\n<p>This example tries to open each standard store in each standard location on the current computer. It prints a summary that shows whether each store exists and, if so, the number of certificates it contains. </p>\n<p>The example creates an <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> object for each combination of standard name and standard location. It calls the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)\" data-throw-if-not-resolved=\"false\"></xref> method with the <xref href=\"System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly\" data-throw-if-not-resolved=\"false\"></xref> flag, which opens the physical store only if it already exists. If the physical store exists, the example uses the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Name\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Location\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Security.Cryptography.X509Certificates.X509Store.Certificates\" data-throw-if-not-resolved=\"false\"></xref> properties to display the number of certificates in the store. </p>x509store2#2<p>Example 2</p><p>This example opens an X.509 certificate store, adds and deletes certificates, and then closes the store. It assumes that you have three certificates to add to and remove from a local store.</p>x509store2#1"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the certificate store.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.X509Certificates.X509Store.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Store.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)
  id: Add(System.Security.Cryptography.X509Certificates.X509Certificate2)
  parent: System.Security.Cryptography.X509Certificates.X509Store
  langs:
  - csharp
  - vb
  name: Add(X509Certificate2)
  fullName: System.Security.Cryptography.X509Certificates.X509Store.Add(System.Security.Cryptography.X509Certificates.X509Certificate2)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 433
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Adds a certificate to an X.509 certificate store.</p>\n"
  remarks: "\n<p>Use this method to add a single certificate to an X.509 store.</p>\n"
  example:
  - "\n<p>The following code example opens an X.509 certificate store, adds and deletes certificates, and then closes the store. It assumes that you have three certificates to add to and remove from a local store.</p>x509store2#1"
  syntax:
    content: public void Add(X509Certificate2 certificate)
    content.vb: Public Sub Add(certificate As X509Certificate2)
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "\n<p>The certificate to add. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>certificate</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The certificate could not be added to the store.</p>\n"
  see:
  - type: System.Security.Permissions.StorePermission
    commentId: T:System.Security.Permissions.StorePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Store.Dispose
  commentId: M:System.Security.Cryptography.X509Certificates.X509Store.Dispose
  id: Dispose
  parent: System.Security.Cryptography.X509Certificates.X509Store
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Cryptography.X509Certificates.X509Store.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 434
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Releases the resources used by this <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.IDisposable\" data-throw-if-not-resolved=\"false\"></xref> interface starting with the .NET Framework 4.6; in previous versions of the .NET Framework, the <xref href=\"System.Security.Cryptography.X509Certificates.X509Store\" data-throw-if-not-resolved=\"false\"></xref> class does not implement this interface, and therefore the <strong>Dispose</strong> method does not exist. </p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)
  id: Open(System.Security.Cryptography.X509Certificates.OpenFlags)
  parent: System.Security.Cryptography.X509Certificates.X509Store
  langs:
  - csharp
  - vb
  name: Open(OpenFlags)
  fullName: System.Security.Cryptography.X509Certificates.X509Store.Open(System.Security.Cryptography.X509Certificates.OpenFlags)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Open
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 435
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Opens an X.509 certificate store or creates a new store, depending on <xref href=\"System.Security.Cryptography.X509Certificates.OpenFlags\" data-throw-if-not-resolved=\"false\"></xref> flag settings.</p>\n"
  remarks: "\n<p>Use this method to open an existing X.509 store. Note that you must have additional permissions, specified by <xref href=\"System.Security.Permissions.StorePermissionFlags\" data-throw-if-not-resolved=\"false\"></xref>, to enumerate the certificates in the store. You can create a new store by passing a store name that does not exist to the class constructor, and then using any of the <xref href=\"System.Security.Cryptography.X509Certificates.OpenFlags\" data-throw-if-not-resolved=\"false\"></xref> flags except <xref href=\"System.Security.Cryptography.X509Certificates.OpenFlags.OpenExistingOnly\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example opens an X.509 certificate store, adds and deletes certificates, and then closes the store. It assumes that you have three certificates to add to and remove from a local store.</p>x509store2#1"
  syntax:
    content: public void Open(OpenFlags flags)
    content.vb: Public Sub Open(flags As OpenFlags)
    parameters:
    - id: flags
      type: System.Security.Cryptography.X509Certificates.OpenFlags
      description: "\n<p>A bitwise combination of enumeration values that specifies the way to open the X.509 certificate store. </p>\n"
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The store is unreadable. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The store contains invalid values.</p>\n"
  see:
  - type: System.Security.Permissions.StorePermission
    commentId: T:System.Security.Permissions.StorePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.X509Certificates.X509Store.Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)
  commentId: M:System.Security.Cryptography.X509Certificates.X509Store.Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)
  id: Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)
  parent: System.Security.Cryptography.X509Certificates.X509Store
  langs:
  - csharp
  - vb
  name: Remove(X509Certificate2)
  fullName: System.Security.Cryptography.X509Certificates.X509Store.Remove(System.Security.Cryptography.X509Certificates.X509Certificate2)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 436
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Removes a certificate from an X.509 certificate store.</p>\n"
  remarks: "\n<p>Use this method to remove a single certificate from an X.509 store.</p>\n"
  example:
  - "\n<p>The following code example opens an X.509 certificate store, adds and deletes certificates, and then closes the store. It assumes that you have three certificates to add to and remove from a local store.</p>x509store2#1"
  syntax:
    content: public void Remove(X509Certificate2 certificate)
    content.vb: Public Sub Remove(certificate As X509Certificate2)
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "\n<p>The certificate to remove.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>certificate</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.StorePermission
    commentId: T:System.Security.Permissions.StorePermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Cryptography.X509Certificates.StoreName
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: StoreName
  fullName: System.Security.Cryptography.X509Certificates.StoreName
- uid: System.Security.Cryptography.X509Certificates.StoreLocation
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: StoreLocation
  fullName: System.Security.Cryptography.X509Certificates.StoreLocation
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2Collection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate2Collection
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2Collection
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.Cryptography.X509Certificates.OpenFlags
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: OpenFlags
  fullName: System.Security.Cryptography.X509Certificates.OpenFlags
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
