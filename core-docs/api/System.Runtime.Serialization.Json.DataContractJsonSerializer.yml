items:
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer
  commentId: T:System.Runtime.Serialization.Json.DataContractJsonSerializer
  id: DataContractJsonSerializer
  parent: System.Runtime.Serialization.Json
  children:
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)
  langs:
  - csharp
  - vb
  name: DataContractJsonSerializer
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer
  type: Class
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DataContractJsonSerializer
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 27
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Serializes objects to the JavaScript Object Notation (JSON) and deserializes JSON data to objects. This class cannot be inherited.</p>\n"
  remarks: "\n<p>Use the <xref href=\"System.Runtime.Serialization.Json.DataContractJsonSerializer\" data-throw-if-not-resolved=\"false\"></xref> class to serialize instances of a type into a JSON document and to deserialize a JSON document into an instance of a type. For example, you can create a type named <code>Person</code> with properties that contain essential data, such as a name and address. You can then create and manipulate an instance of the <code>Person</code> class and write all of its property values in a JSON document for later retrieval. This JSON document can later be deserialized into the <code>Person</code> class or another class with an equivalent data contract. </p>\n<p>If an error occurs during the serialization of an outgoing reply on the server or the reply operation throws an exception for some other reason, it may not get returned to the client as a fault. </p>\n"
  example:
  - 
  syntax:
    content: public sealed class DataContractJsonSerializer
    content.vb: Public NotInheritable Class DataContractJsonSerializer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)
  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: DataContractJsonSerializer(Type)
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractJsonSerializer(System.Type)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 29
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Serialization.Json.DataContractJsonSerializer\" data-throw-if-not-resolved=\"false\"></xref> class to serialize or deserialize an object of the specified type.</p>\n"
  example:
  - 
  syntax:
    content: public DataContractJsonSerializer(Type type)
    content.vb: Public Sub New(type As Type)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the instances that is serialized or deserialized.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})
  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})
  id: '#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})'
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: DataContractJsonSerializer(Type, IEnumerable<Type>)
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractJsonSerializer(System.Type, System.Collections.Generic.IEnumerable<System.Type>)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 30
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Serialization.Json.DataContractJsonSerializer\" data-throw-if-not-resolved=\"false\"></xref> class to serialize or deserialize an object of the specified type, with a collection of known types that may be present in the object graph. </p>\n"
  example:
  - 
  syntax:
    content: public DataContractJsonSerializer(Type type, IEnumerable<Type> knownTypes)
    content.vb: Public Sub New(type As Type, knownTypes As IEnumerable(Of Type))
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the instances that are serialized or deserialized.</p>\n"
    - id: knownTypes
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>  of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that contains the types that may be present in the object graph.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractJsonSerializer(System.Type, System.Collections.Generic.IEnumerable(Of System.Type))
  name.vb: DataContractJsonSerializer(Type, IEnumerable(Of Type))
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)
  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)
  id: '#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)'
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: DataContractJsonSerializer(Type, DataContractJsonSerializerSettings)
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractJsonSerializer(System.Type, System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 31
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Serialization.Json.DataContractJsonSerializer\" data-throw-if-not-resolved=\"false\"></xref> class to serialize or deserialize an object of the specified type and serializer settings.</p>\n"
  syntax:
    content: public DataContractJsonSerializer(Type type, DataContractJsonSerializerSettings settings)
    content.vb: Public Sub New(type As Type, settings As DataContractJsonSerializerSettings)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the instances that is serialized or deserialized.</p>\n"
    - id: settings
      type: System.Runtime.Serialization.Json.DataContractJsonSerializerSettings
      description: "\n<p>The serializer settings for the JSON serializer.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat
  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat
  id: DateTimeFormat
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: DateTimeFormat
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DateTimeFormat
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 32
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Gets the format of the date and time type items in object graph.</p>\n"
  syntax:
    content: public DateTimeFormat DateTimeFormat { get; }
    content.vb: Public ReadOnly Property DateTimeFormat As DateTimeFormat
    parameters: []
    return:
      type: System.Runtime.Serialization.DateTimeFormat
      description: "\n<p>The format of the date and time type items in object graph.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation
  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation
  id: EmitTypeInformation
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: EmitTypeInformation
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EmitTypeInformation
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 33
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Gets or sets the data contract JSON serializer settings to emit type information.</p>\n"
  syntax:
    content: public EmitTypeInformation EmitTypeInformation { get; }
    content.vb: Public ReadOnly Property EmitTypeInformation As EmitTypeInformation
    parameters: []
    return:
      type: System.Runtime.Serialization.EmitTypeInformation
      description: "\n<p>The data contract JSON serializer settings to emit type information.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes
  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes
  id: KnownTypes
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: KnownTypes
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KnownTypes
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 34
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Gets a collection of types that may be present in the object graph serialized using this instance of the <xref href=\"System.Runtime.Serialization.Json.DataContractJsonSerializer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public ReadOnlyCollection<Type> KnownTypes { get; }
    content.vb: Public ReadOnly Property KnownTypes As ReadOnlyCollection(Of Type)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Type}
      description: "\n<p>A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the expected types passed in as known types to the <xref href=\"System.Runtime.Serialization.Json.DataContractJsonSerializer\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes
  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes
  id: SerializeReadOnlyTypes
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: SerializeReadOnlyTypes
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SerializeReadOnlyTypes
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 35
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Gets or sets a value that specifies whether to serialize read only types.</p>\n"
  syntax:
    content: public bool SerializeReadOnlyTypes { get; }
    content.vb: Public ReadOnly Property SerializeReadOnlyTypes As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to serialize read only types; otherwise <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat
  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat
  id: UseSimpleDictionaryFormat
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: UseSimpleDictionaryFormat
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UseSimpleDictionaryFormat
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 36
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Gets or sets a value that specifies whether to use a simple dictionary format.</p>\n"
  syntax:
    content: public bool UseSimpleDictionaryFormat { get; }
    content.vb: Public ReadOnly Property UseSimpleDictionaryFormat As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to use a simple dictionary format; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)
  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)
  id: ReadObject(System.IO.Stream)
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: ReadObject(Stream)
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadObject
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 37
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Reads a document stream in the JSON (JavaScript Object Notation) format and returns the deserialized object.</p>\n"
  example:
  - 
  syntax:
    content: public object ReadObject(Stream stream)
    content.vb: Public Function ReadObject(stream As Stream) As Object
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> to be read.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The deserialized object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)
  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)
  id: WriteObject(System.IO.Stream,System.Object)
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: WriteObject(Stream, Object)
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteObject
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 38
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Serializes a specified object to JavaScript Object Notation (JSON) data and writes the resulting JSON to a stream.</p>\n"
  example:
  - 
  syntax:
    content: public void WriteObject(Stream stream, object graph)
    content.vb: Public Sub WriteObject(stream As Stream, graph As Object)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> that is written to.</p>\n"
    - id: graph
      type: System.Object
      description: "\n<p>The object that contains the data to write to the stream.</p>\n"
  exceptions:
  - type: System.Runtime.Serialization.InvalidDataContractException
    commentId: T:System.Runtime.Serialization.InvalidDataContractException
    description: "\n<p>The type being serialized does not conform to data contract rules. For example, the <xref href=\"System.Runtime.Serialization.DataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute has not been applied to the type.</p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>There is a problem with the instance being written.</p>\n"
  - type: System.ServiceModel.QuotaExceededException
    commentId: T:System.ServiceModel.QuotaExceededException
    description: "\n<p>The maximum number of objects to serialize has been exceeded. Check the <xref href=\"System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.Serialization.Json
  isExternal: false
  name: System.Runtime.Serialization.Json
  fullName: System.Runtime.Serialization.Json
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializerSettings
  parent: System.Runtime.Serialization.Json
  isExternal: false
  name: DataContractJsonSerializerSettings
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializerSettings
- uid: System.Runtime.Serialization.DateTimeFormat
  parent: System.Runtime.Serialization
  isExternal: false
  name: DateTimeFormat
  fullName: System.Runtime.Serialization.DateTimeFormat
- uid: System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Runtime.Serialization.EmitTypeInformation
  parent: System.Runtime.Serialization
  isExternal: false
  name: EmitTypeInformation
  fullName: System.Runtime.Serialization.EmitTypeInformation
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Type}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Type>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Type>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Type)
  name.vb: ReadOnlyCollection(Of Type)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Runtime.Serialization.InvalidDataContractException
  isExternal: false
  name: InvalidDataContractException
  fullName: System.Runtime.Serialization.InvalidDataContractException
- uid: System.Runtime.Serialization.SerializationException
  isExternal: false
  name: SerializationException
  fullName: System.Runtime.Serialization.SerializationException
- uid: System.ServiceModel.QuotaExceededException
