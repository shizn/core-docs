items:
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  id: ArgumentOutOfRangeException
  parent: System
  children:
  - System.ArgumentOutOfRangeException.#ctor
  - System.ArgumentOutOfRangeException.#ctor(System.String)
  - System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)
  - System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)
  - System.ArgumentOutOfRangeException.#ctor(System.String,System.String)
  - System.ArgumentOutOfRangeException.ActualValue
  - System.ArgumentOutOfRangeException.Message
  langs:
  - csharp
  - vb
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  type: Class
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArgumentOutOfRangeException
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 51
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.</p>\n"
  remarks: "\n<p>An \n<xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown when a method is invoked and at least one of the arguments passed to the method is not <strong>null</strong> and contains an invalid value that is not a member of the set of values expected for the argument. The <xref href=\"System.ArgumentException.ParamName\" data-throw-if-not-resolved=\"false\"></xref> property identifies the invalid argument, and the <xref href=\"System.ArgumentOutOfRangeException.ActualValue\" data-throw-if-not-resolved=\"false\"></xref> property, if a value is present, identifies the invalid value. </p>\n<p>Typically, an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> results from developer error. Instead of handling the exception in a <strong>try</strong>/<strong>catch</strong> block, you should eliminate the cause of the exception or, if the argument is returned by a method call or input by the user before being passed to the method that throws the exception, you should validate arguments before passing them to the method. </p>\n<p>\n<xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> is used extensively by: </p>\n<ul><li>\n<p>Classes in the <xref href=\"System.Collections\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IO\" data-throw-if-not-resolved=\"false\"></xref> namespaces.</p>\n</li><li>\n<p>The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n</li><li>\n<p>String manipulation methods in the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n</li></ul>\n<p>The conditions in which an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception\n    is thrown include the following: </p>You are retrieving the member of a collection by its index number, and the index number is invalid.<p>This is the most common cause of an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception.   Typically, the index number is invalid for one of three reasons:</p><ul><li><p>The collection has no members, and your code assumes that it does. The following example attempts to retrieve the first element of a collection that has no elements:</p>System.ArgumentOutOfRangeException#4<p>To prevent the exception, check whether the collection's <strong>Count</strong> property is greater than zero before attempting to retrieve any members, as the following code fragment does.</p>System.ArgumentOutOfRangeException#5<p>In some cases, this may occur because you are attempting to add a member to a collection by using an index that does not exist, rather than by calling the method, such as <code>Add</code>, that exists for this purpose.  The following example attempts to add an element to a collection by using a non-existent index rather than calling the <xref href=\"System.Collections.Generic.List`1.Add(`0)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>System.ArgumentOutOfRangeException#13<p>The following code fragment corrects this error:</p>System.ArgumentOutOfRangeException#14</li><li><p>You're attempting to retrieve an item whose index is negative. This usually occurs because you've searched a collection for the index of a particular element and have erroneously assumed that the search is successful. In the following example, the call to the <xref href=\"System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})\" data-throw-if-not-resolved=\"false\"></xref> method fails  to find a string equal to \"Z\" and so returns -1. However, this is an invalid index value.</p>System.ArgumentOutOfRangeException#6<p>To prevent the exception, check that the search is successful by making sure that the returned index is greater than or equal to zero before attempting to retrieve the item from the collection, as the following code fragment does.</p>System.ArgumentOutOfRangeException#7</li><li><p>You're attempting to retrieve an element whose index is equal to the value of the collection's <strong>Count</strong> property, as the following example illustrates. </p>System.ArgumentOutOfRangeException#8<p>Because collections in the .NET Framework use zero-based indexing, the first element of the collection is at index 0, and the last element is at index <strong>Count</strong> - 1. You can eliminate the error by ensuring that you access the last element at index  <strong>Count</strong> - 1, as the following code does. </p>System.ArgumentOutOfRangeException#9</li></ul>You are attempting to perform a string operation by calling a string manipulation method, and the starting index does not exist in the string. <p>Overloads of methods such as such as <xref href=\"System.String.Compare(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.String.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.String.IndexOfAny(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.String.Insert(System.Int32,System.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.String.LastIndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.String.LastIndexOfAny(System.Char[])\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.String.Remove(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>,  or <xref href=\"System.String.Substring(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> that allow you to specify the starting index of the operation require that the index be a valid position within the string. Valid indexes range from 0 to <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> - 1.</p><p>There are four common causes of this <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception:</p><ul><li><p>You are working with an empty string., or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. Because its <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> property returns 0, any attempt to manipulate it by index throws an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception. The following example, defines a <code>GetFirstCharacter</code> method that returns the first character of a string. If the string is empty, as the final string passed to the method is, the method throws an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>System.ArgumentOutOfRangeException#15<p>You can eliminate the exception by testing whether the string's <xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref> is greater than zero or by calling the <xref href=\"System.String.IsNullOrEmpty(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method to ensure that the string is not <strong>null</strong> or empty. The following code fragment does the latter. In this case, if the string is <strong>null</strong> or empty, the <code>GetFirstCharacter</code> method returns U+0000.</p>System.ArgumentOutOfRangeException#16</li><li><p>You're manipulating a string based on the position of a substring within that string, and you've failed to determine whether the substring was actually found.</p><p>The following example extracts the second word of a two-word phrase. It throws  an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception if the phrase consists of only one word, and therefore does not contain an embedded space character.  This occurs because the call to the <xref href=\"System.String.IndexOf(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method returns -1 to indicate that the search failed, and this invalid value is then passed to the  <xref href=\"System.String.Substring(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.ArgumentOutOfRangeException#17<p>To eliminate the exception, validate the value returned by the string search method before calling the string manipulation method.</p>System.ArgumentOutOfRangeException#18</li><li><p></p></li></ul>You've attempted to extract a substring that is outside the range of the current string. <p>The methods that extract substrings all require that you specify the starting position of the substring and, for substrings that do not continue to the end of the string, the number of characters in the substring. Note that this is not the <em>index</em> of the last character in the substring. </p><p>An <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception is typically thrown in this case because you've incorrectly calculated the number of characters in the substring.  If you are using a search method like <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> to identify the starting and ending positions of a substring:</p><ul><li><p>If the character in the ending position returned by <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> is to be included in the substring, the ending position of the substring is given by the formula</p><pre><code>endIndex - startIndex + 1</code></pre></li><li><p>If the character in the ending position returned by <xref href=\"System.String.IndexOf(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> is to be excluded from the substring, the ending position of the substring is given by the formula</p><pre><code>endIndex - startIndex </code></pre></li></ul><p>The following example defines a <code>FindWords</code> method that uses the <xref href=\"System.String.IndexOfAny(System.Char[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to identify space characters and punctuation marks in a string and returns an array that contains the words found in the string.</p>System.ArgumentOutOfRangeException#19You have passed a negative number to a method with an argument that requires only positive numbers and zero, or you have passed either a negative number or zero to a method with an argument that requires only positive numbers.<p>   For example, the <xref href=\"System.Array.CreateInstance(System.Type,System.Int32,System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method requires that you specify the number of elements in each dimension of a two-dimensional array; valid values for each dimension can range from 0 to <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. But because the dimension argument in the following example has a negative value, the method throws an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>System.ArgumentOutOfRangeException#1<p>To correct the error, ensure that the value of the invalid argument is non-negative. You can do this by providing a valid value, as the following code fragment does.</p>System.ArgumentOutOfRangeException#2<p>You can also validate the input and, if it is invalid, take some action. The following code fragment displays an error message instead of calling the method.</p>System.ArgumentOutOfRangeException#3A race condition exists in an app that is multithreaded or has tasks that  execute asynchronously and that updates an array or collection. <p>The following example uses a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object to populate a collection of <code>Continent</code> objects. It throws an  <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception if the example attempts to display the seven items in the collection before the collection is fully populated. </p>System.ArgumentOutOfRangeException#11<p> In this case, two resources are accessed from multiple threads: </p><ul><li><p>The <code>continents</code> collection. Its <xref href=\"System.Collections.Generic.List`1.Add(`0)\" data-throw-if-not-resolved=\"false\"></xref> method is called from multiple threads. In addition, the main or primary thread assumes the collection is fully populated with seven elements when it iterates its members.</p></li><li><p>The <code>msg</code> string, which is concatenated from multiple threads. </p></li></ul><p>To correct the error, ensure that shared state is accessed in a thread-safe way, as follows. </p><ul><li><p>if your app uses an array or collection object, consider using a thread-safe collection class, such as the types in the <xref href=\"System.Collections.Concurrent\" data-throw-if-not-resolved=\"false\"></xref> namespace or the System.Collections.Immutable out-of-band release. </p></li><li><p>Ensure that shared state (that is, resources that can be accessed by multiple threads) is accessed in a thread-safe way, so that only one thread at a time has exclusive access to the resources. A large number of classes, such as <xref href=\"System.Threading.CountdownEvent\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Interlocked\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref>, are available to synchronize access to resources. For more information, see Managed Threading. In addition, language support is available through the lock statement in C# and the SyncLock construct in Visual Basic. </p></li></ul><p>The following example addresses the <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception and the other issues from the previous example. It replaces the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> object with a   <xref href=\"System.Collections.Concurrent.ConcurrentBag`1\" data-throw-if-not-resolved=\"false\"></xref> object to ensure that access to the collection is thread-safe, uses a <xref href=\"System.Threading.CountdownEvent\" data-throw-if-not-resolved=\"false\"></xref> object to ensure that the application thread continues only after other threads have executed, and uses a lock to ensure that only one thread can  access the <code>msg</code> variable at a time.</p>System.ArgumentOutOfRangeException#12<p><xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> uses the HRESULT COR_E_ARGUMENTOUTOFRANGE, which has the value 0x80131502.</p><p>For a list of initial property values for an instance of <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>, see the <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> constructors.</p>"
  example:
  - "\n<p>The following example defines a class to contain information about an invited guest. If the guest is younger than 21, an <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> exception is thrown.</p>ArgumentOutOfRangeException#1"
  syntax:
    content: 'public class ArgumentOutOfRangeException : ArgumentException'
    content.vb: >-
      Public Class ArgumentOutOfRangeException
          Inherits ArgumentException
  seealso:
  - type: System.Exception
    commentId: T:System.Exception
  inheritance:
  - System.Object
  - System.Exception
  - System.ArgumentException
  inheritedMembers:
  - System.ArgumentException.ParamName
  - System.Exception.Data
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ArgumentOutOfRangeException.#ctor
  commentId: M:System.ArgumentOutOfRangeException.#ctor
  id: '#ctor'
  parent: System.ArgumentOutOfRangeException
  langs:
  - csharp
  - vb
  name: ArgumentOutOfRangeException()
  fullName: System.ArgumentOutOfRangeException.ArgumentOutOfRangeException()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 53
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.ArgumentException.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"Nonnegative number required.\" This message takes into account the current system culture.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.ArgumentOutOfRangeException.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The localized error message string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ArgumentOutOfRangeException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ArgumentOutOfRangeException.#ctor(System.String)
  commentId: M:System.ArgumentOutOfRangeException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ArgumentOutOfRangeException
  langs:
  - csharp
  - vb
  name: ArgumentOutOfRangeException(String)
  fullName: System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 54
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> class with the name of the parameter that causes this exception.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.ArgumentException.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance to a system-supplied message that describes the error, such as \"Nonnegative number required.\" This message takes into account the current system culture.</p>\n<p>This constructor initializes the <xref href=\"System.ArgumentException.ParamName\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance using the <em>paramName</em> parameter. The content of <em>paramName</em> is intended to be understood by humans.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.ArgumentOutOfRangeException.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The empty string (\"\"). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.ArgumentException.ParamName\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The parameter name string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ArgumentOutOfRangeException(string paramName)
    content.vb: Public Sub New(paramName As String)
    parameters:
    - id: paramName
      type: System.String
      description: "\n<p>The name of the parameter that causes this exception. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)
  commentId: M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.ArgumentOutOfRangeException
  langs:
  - csharp
  - vb
  name: ArgumentOutOfRangeException(String, Exception)
  fullName: System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 55
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and the exception that is the cause of this exception.</p>\n"
  example:
  - 
  syntax:
    content: public ArgumentOutOfRangeException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for this exception. </p>\n"
    - id: innerException
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception, or a null reference (<strong>Nothing</strong> in Visual Basic) if no inner exception is specified. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)
  commentId: M:System.ArgumentOutOfRangeException.#ctor(System.String,System.Object,System.String)
  id: '#ctor(System.String,System.Object,System.String)'
  parent: System.ArgumentOutOfRangeException
  langs:
  - csharp
  - vb
  name: ArgumentOutOfRangeException(String, Object, String)
  fullName: System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(System.String, System.Object, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 56
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> class with the parameter name, the value of the argument, and a specified error message.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.ArgumentException.ParamName\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance using the <em>paramName</em> parameter, the <xref href=\"System.ArgumentOutOfRangeException.ActualValue\" data-throw-if-not-resolved=\"false\"></xref> property using the <em>actualValue</em> parameter, and the <xref href=\"System.ArgumentException.Message\" data-throw-if-not-resolved=\"false\"></xref> property using the <em>message</em> parameter. The content of the <em>paramName</em> and <em>message</em> parameters is intended to be understood by humans. The caller of this constructor is required to ensure that these strings have been localized for the current system culture.</p>\n<p>The <em>actualValue</em> parameter is not used within the .NET Framework class library. However, the <xref href=\"System.ArgumentOutOfRangeException.ActualValue\" data-throw-if-not-resolved=\"false\"></xref> property is provided so that applications can use the available argument value.</p>\n<p>The <em>actualValue</em> parameter contains an invalid value that is passed to the method and causes this exception to be thrown. This value is stored in the <xref href=\"System.ArgumentOutOfRangeException.ActualValue\" data-throw-if-not-resolved=\"false\"></xref> property and its string representation is appended to the message string held in the <xref href=\"System.ArgumentOutOfRangeException.Message\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.ArgumentOutOfRangeException.ActualValue\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The argument value. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The null reference (<strong>Nothing</strong> in Visual Basic). </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.ArgumentOutOfRangeException.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.ArgumentException.ParamName\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The parameter name string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ArgumentOutOfRangeException(string paramName, object actualValue, string message)
    content.vb: Public Sub New(paramName As String, actualValue As Object, message As String)
    parameters:
    - id: paramName
      type: System.String
      description: "\n<p>The name of the parameter that caused the exception. </p>\n"
    - id: actualValue
      type: System.Object
      description: "\n<p>The value of the argument that causes this exception. </p>\n"
    - id: message
      type: System.String
      description: "\n<p>The message that describes the error. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ArgumentOutOfRangeException.#ctor(System.String,System.String)
  commentId: M:System.ArgumentOutOfRangeException.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.ArgumentOutOfRangeException
  langs:
  - csharp
  - vb
  name: ArgumentOutOfRangeException(String, String)
  fullName: System.ArgumentOutOfRangeException.ArgumentOutOfRangeException(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 57
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> class with the name of the parameter that causes this exception and a specified error message.</p>\n"
  remarks: "\n<p>This constructor initializes the <xref href=\"System.ArgumentOutOfRangeException.Message\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance using the value of the <em>message</em> parameter. The content of the <em>message</em> parameter is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</p>\n<p>This constructor initializes the <xref href=\"System.ArgumentException.ParamName\" data-throw-if-not-resolved=\"false\"></xref> property of the new instance using the <em>paramName</em> parameter. The content of <em>paramName</em> is intended to be understood by humans.</p>\n<p>The following table shows the initial property values for an instance of <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Property </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Exception.InnerException\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.ArgumentOutOfRangeException.Message\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The error message string. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.ArgumentException.ParamName\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The parameter name string. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ArgumentOutOfRangeException(string paramName, string message)
    content.vb: Public Sub New(paramName As String, message As String)
    parameters:
    - id: paramName
      type: System.String
      description: "\n<p>The name of the parameter that caused the exception. </p>\n"
    - id: message
      type: System.String
      description: "\n<p>The message that describes the error. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ArgumentOutOfRangeException.ActualValue
  commentId: P:System.ArgumentOutOfRangeException.ActualValue
  id: ActualValue
  parent: System.ArgumentOutOfRangeException
  langs:
  - csharp
  - vb
  name: ActualValue
  fullName: System.ArgumentOutOfRangeException.ActualValue
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ActualValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 58
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the argument value that causes this exception.</p>\n"
  remarks: "\n<p>Use this property to retrieve the invalid argument.</p>\n<p>The <strong>ActualValue</strong> property returns the same value that was passed to the constructor, or <strong>null</strong> if no value was supplied.</p>\n<p>The <xref href=\"System.ArgumentOutOfRangeException.ActualValue\" data-throw-if-not-resolved=\"false\"></xref> property is assigned a value at the time of object construction. If the <xref href=\"System.ArgumentOutOfRangeException.ActualValue\" data-throw-if-not-resolved=\"false\"></xref> property value is not <strong>null</strong>, a string representation of the value is appended to the message string held by the <xref href=\"System.ArgumentOutOfRangeException.Message\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The <xref href=\"System.ArgumentOutOfRangeException.ActualValue\" data-throw-if-not-resolved=\"false\"></xref> property is not used within the .NET Framework class library. It carries a null value in all the <xref href=\"System.ArgumentOutOfRangeException\" data-throw-if-not-resolved=\"false\"></xref> objects thrown by the .NET Framework class library. The <xref href=\"System.ArgumentOutOfRangeException.ActualValue\" data-throw-if-not-resolved=\"false\"></xref> property is provided so that applications can use the available argument value.</p>\n<p>This property is read-only and should be overridden only to customize the content or format of the value.</p>\n"
  syntax:
    content: public virtual object ActualValue { get; }
    content.vb: Public Overridable ReadOnly Property ActualValue As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An <strong>Object</strong> that contains the value of the parameter that caused the current <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.ArgumentOutOfRangeException.Message
  commentId: P:System.ArgumentOutOfRangeException.Message
  id: Message
  parent: System.ArgumentOutOfRangeException
  langs:
  - csharp
  - vb
  name: Message
  fullName: System.ArgumentOutOfRangeException.Message
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Message
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 59
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the error message and the string representation of the invalid argument value, or only the error message if the argument value is null.</p>\n"
  remarks: "\n<p>This property overrides <xref href=\"System.ArgumentException.Message\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The error message should describe the expected values of the parameter that causes this exception. The error message should be localized.</p>\n"
  syntax:
    content: public override string Message { get; }
    content.vb: Public Overrides ReadOnly Property Message As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The text message for this exception. The value of this property takes one of two forms, as follows.</p>\n<p>Condition </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>The <em>actualValue</em> is <strong>null</strong>. </p>\n</td><td>\n<p>The <em>message</em> string passed to the constructor. </p>\n</td></tr><tr><td>\n<p>The <em>actualValue</em> is not <strong>null</strong>. </p>\n</td><td>\n<p>The <em>message</em> string appended with the string representation of the invalid argument value. </p>\n</td></tr></tbody></table>\n"
  overridden: System.ArgumentException.Message
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentException.ParamName
  parent: System.ArgumentException
  isExternal: false
  name: ParamName
  fullName: System.ArgumentException.ParamName
- uid: System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  fullName: System.Exception.Data
- uid: System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  fullName: System.Exception.HResult
- uid: System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  fullName: System.Exception.Source
- uid: System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ArgumentException.Message
  parent: System.ArgumentException
  isExternal: false
  name: Message
  fullName: System.ArgumentException.Message
