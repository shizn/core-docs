items:
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  id: XmlReader
  parent: System.Xml
  children:
  - System.Xml.XmlReader.#ctor
  - System.Xml.XmlReader.AttributeCount
  - System.Xml.XmlReader.BaseURI
  - System.Xml.XmlReader.CanReadBinaryContent
  - System.Xml.XmlReader.CanReadValueChunk
  - System.Xml.XmlReader.CanResolveEntity
  - System.Xml.XmlReader.Create(System.IO.Stream)
  - System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)
  - System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  - System.Xml.XmlReader.Create(System.IO.TextReader)
  - System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)
  - System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  - System.Xml.XmlReader.Create(System.String)
  - System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)
  - System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
  - System.Xml.XmlReader.Depth
  - System.Xml.XmlReader.Dispose
  - System.Xml.XmlReader.Dispose(System.Boolean)
  - System.Xml.XmlReader.EOF
  - System.Xml.XmlReader.GetAttribute(System.Int32)
  - System.Xml.XmlReader.GetAttribute(System.String)
  - System.Xml.XmlReader.GetAttribute(System.String,System.String)
  - System.Xml.XmlReader.GetValueAsync
  - System.Xml.XmlReader.HasAttributes
  - System.Xml.XmlReader.HasValue
  - System.Xml.XmlReader.IsDefault
  - System.Xml.XmlReader.IsEmptyElement
  - System.Xml.XmlReader.IsName(System.String)
  - System.Xml.XmlReader.IsNameToken(System.String)
  - System.Xml.XmlReader.IsStartElement
  - System.Xml.XmlReader.IsStartElement(System.String)
  - System.Xml.XmlReader.IsStartElement(System.String,System.String)
  - System.Xml.XmlReader.Item(System.Int32)
  - System.Xml.XmlReader.Item(System.String)
  - System.Xml.XmlReader.Item(System.String,System.String)
  - System.Xml.XmlReader.LocalName
  - System.Xml.XmlReader.LookupNamespace(System.String)
  - System.Xml.XmlReader.MoveToAttribute(System.Int32)
  - System.Xml.XmlReader.MoveToAttribute(System.String)
  - System.Xml.XmlReader.MoveToAttribute(System.String,System.String)
  - System.Xml.XmlReader.MoveToContent
  - System.Xml.XmlReader.MoveToContentAsync
  - System.Xml.XmlReader.MoveToElement
  - System.Xml.XmlReader.MoveToFirstAttribute
  - System.Xml.XmlReader.MoveToNextAttribute
  - System.Xml.XmlReader.Name
  - System.Xml.XmlReader.NamespaceURI
  - System.Xml.XmlReader.NameTable
  - System.Xml.XmlReader.NodeType
  - System.Xml.XmlReader.Prefix
  - System.Xml.XmlReader.Read
  - System.Xml.XmlReader.ReadAsync
  - System.Xml.XmlReader.ReadAttributeValue
  - System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadContentAsBoolean
  - System.Xml.XmlReader.ReadContentAsDateTimeOffset
  - System.Xml.XmlReader.ReadContentAsDecimal
  - System.Xml.XmlReader.ReadContentAsDouble
  - System.Xml.XmlReader.ReadContentAsFloat
  - System.Xml.XmlReader.ReadContentAsInt
  - System.Xml.XmlReader.ReadContentAsLong
  - System.Xml.XmlReader.ReadContentAsObject
  - System.Xml.XmlReader.ReadContentAsObjectAsync
  - System.Xml.XmlReader.ReadContentAsString
  - System.Xml.XmlReader.ReadContentAsStringAsync
  - System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadElementContentAsBoolean
  - System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsDecimal
  - System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsDouble
  - System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsFloat
  - System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsInt
  - System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsLong
  - System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsObject
  - System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsObjectAsync
  - System.Xml.XmlReader.ReadElementContentAsString
  - System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsStringAsync
  - System.Xml.XmlReader.ReadEndElement
  - System.Xml.XmlReader.ReadInnerXml
  - System.Xml.XmlReader.ReadInnerXmlAsync
  - System.Xml.XmlReader.ReadOuterXml
  - System.Xml.XmlReader.ReadOuterXmlAsync
  - System.Xml.XmlReader.ReadStartElement
  - System.Xml.XmlReader.ReadStartElement(System.String)
  - System.Xml.XmlReader.ReadStartElement(System.String,System.String)
  - System.Xml.XmlReader.ReadState
  - System.Xml.XmlReader.ReadSubtree
  - System.Xml.XmlReader.ReadToDescendant(System.String)
  - System.Xml.XmlReader.ReadToDescendant(System.String,System.String)
  - System.Xml.XmlReader.ReadToFollowing(System.String)
  - System.Xml.XmlReader.ReadToFollowing(System.String,System.String)
  - System.Xml.XmlReader.ReadToNextSibling(System.String)
  - System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)
  - System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ResolveEntity
  - System.Xml.XmlReader.Settings
  - System.Xml.XmlReader.Skip
  - System.Xml.XmlReader.SkipAsync
  - System.Xml.XmlReader.Value
  - System.Xml.XmlReader.ValueType
  - System.Xml.XmlReader.XmlLang
  - System.Xml.XmlReader.XmlSpace
  langs:
  - csharp
  - vb
  name: XmlReader
  fullName: System.Xml.XmlReader
  type: Class
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlReader
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 229
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Represents a reader that provides fast, noncached, forward-only access to XML data.</p>\n<p>To browse the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Core/XmlReader.cs#086471e5cca0825f\">Reference Source</see>.</p>\n"
  remarks: "\n<p>To view the .NET Framework source code for this type, see the <see href=\"http://referencesource.microsoft.com/#System.Xml/Xml/System/Xml/Core/XmlReader.cs#086471e5cca0825f\">Reference Source</see>. You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see <see href=\"http://referencesource.microsoft.com/\">instructions</see>.</p>\n<p></p>\n<p>\n<xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> provides forward-only, read-only access to XML data in adocument or stream. This class conforms to the W3C <see href=\"http://www.w3.org/TR/2006/REC-xml-20060816/\">Extensible Markup Language (XML) 1.0 (fourth edition)</see> and the <see href=\"http://www.w3.org/TR/REC-xml-names/\">Namespaces in XML 1.0 (third edition)</see> recommendations.</p>\n<p>\n<xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>methods let you move through XML data and read the contents of a node. The properties of the class reflect the value of the current node, which is where the reader is positioned.The <xref href=\"System.Xml.XmlReader.ReadState\" data-throw-if-not-resolved=\"false\"></xref> property value indicates the current state of the XML reader. For example, the property is set to <xref href=\"System.Xml.ReadState.Initial\" data-throw-if-not-resolved=\"false\"></xref> by the <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method and <xref href=\"System.Xml.ReadState.Closed\" data-throw-if-not-resolved=\"false\"></xref> by the <xref href=\"System.Xml.XmlReader.Close\" data-throw-if-not-resolved=\"false\"></xref> method. <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> also provides data conformance checks and validation against a DTD or schema.</p>\n<p>\n<xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>uses a pull model to retrieve data. This model: </p>\n<ul><li>\n<p>Simplifies state management by a natural, top-down procedural refinement.</p>\n</li><li>\n<p>Supports multiple input streams and layering.</p>\n</li><li>\n<p>Enables the client to give the parser a buffer into which the string is directly written, and thus avoids the necessity of an extra string copy.</p>\n</li><li>\n<p>Supports selective processing. The client can skip items and process those that are of interest to the application. You can also set properties in advance to manage how the XML stream is processed (for example, normalization).</p>\n</li></ul>\n<p>In this section:</p>\n<p>Creating an XML readerValidating XML dataData conformanceNavigating through nodesReading XML elementsReading XML attributesReading XML contentConverting to CLR typesAsynchronous programmingSecurity considerations</p>\n"
  example:
  - <p>The following example code shows how to use the asynchronous APIto parse XML.</p>System.Xml.XmlReader.Class#6
  syntax:
    content: 'public abstract class XmlReader : IDisposable'
    content.vb: >-
      Public MustInherit Class XmlReader
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Xml.XmlReader.#ctor
  commentId: M:System.Xml.XmlReader.#ctor
  id: '#ctor'
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: XmlReader()
  fullName: System.Xml.XmlReader.XmlReader()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 231
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <strong>XmlReader</strong> class.</p>\n"
  remarks: "\n<p>This constructor is called by derived class constructors to initialize state in this type.</p>\n"
  example:
  - 
  syntax:
    content: protected XmlReader()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Xml.XmlReader.AttributeCount
  commentId: P:System.Xml.XmlReader.AttributeCount
  id: AttributeCount
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: AttributeCount
  fullName: System.Xml.XmlReader.AttributeCount
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AttributeCount
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 232
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the number of attributes on the current node.</p>\n"
  remarks: "\n<p>This property is relevant to <strong>Element</strong>, <strong>DocumentType</strong> and <strong>XmlDeclaration</strong> nodes only. (Other node types do not have attributes.) </p>\n"
  example:
  - "\n<p>The following example displays all attributes on the current node.</p>XmlReaderBasic#1"
  syntax:
    content: public abstract int AttributeCount { get; }
    content.vb: Public MustOverride ReadOnly Property AttributeCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of attributes on the current node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.BaseURI
  commentId: P:System.Xml.XmlReader.BaseURI
  id: BaseURI
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: BaseURI
  fullName: System.Xml.XmlReader.BaseURI
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseURI
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 233
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the base URI of the current node.</p>\n"
  remarks: "\n<p>A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places. DTD entities are an example of this, but this is not limited to DTDs. The base URI tells you where these nodes came from. If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), <strong>String.Empty</strong> is returned.</p>\n"
  syntax:
    content: public abstract string BaseURI { get; }
    content.vb: Public MustOverride ReadOnly Property BaseURI As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The base URI of the current node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.CanReadBinaryContent
  commentId: P:System.Xml.XmlReader.CanReadBinaryContent
  id: CanReadBinaryContent
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: CanReadBinaryContent
  fullName: System.Xml.XmlReader.CanReadBinaryContent
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanReadBinaryContent
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 234
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implements the binary content read methods.</p>\n"
  remarks: "\n<p>The binary content read methods include the <xref href=\"System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods. If this property returns <strong>false</strong> a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> is returned when any of the binary read methods is called.</p>\n<p>All Microsoft .NET Framework implementations of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> class return <strong>true</strong> for this property.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool CanReadBinaryContent { get; }
    content.vb: Public Overridable ReadOnly Property CanReadBinaryContent As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the binary content read methods are implemented; otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.CanReadValueChunk
  commentId: P:System.Xml.XmlReader.CanReadValueChunk
  id: CanReadValueChunk
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: CanReadValueChunk
  fullName: System.Xml.XmlReader.CanReadValueChunk
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanReadValueChunk
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 235
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  remarks: "\n<p>Text parsing <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> objects that were created from the static <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method always return <strong>true</strong>. All other Microsoft .NET Framework implementations of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> class, including the <xref href=\"System.Xml.XmlTextReader\" data-throw-if-not-resolved=\"false\"></xref> class, return <strong>false</strong>.</p>\n<p>If this property returns <strong>false</strong> a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> is returned when the <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool CanReadValueChunk { get; }
    content.vb: Public Overridable ReadOnly Property CanReadValueChunk As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method; otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.CanResolveEntity
  commentId: P:System.Xml.XmlReader.CanResolveEntity
  id: CanResolveEntity
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: CanResolveEntity
  fullName: System.Xml.XmlReader.CanResolveEntity
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanResolveEntity
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 236
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating whether this reader can parse and resolve entities.</p>\n"
  remarks: "\n<p>This property always returns <strong>false</strong> for implementations of <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> that do not support DTD information. In this case, calling <xref href=\"System.Xml.XmlReader.ResolveEntity\" data-throw-if-not-resolved=\"false\"></xref> throws an exception.</p>\n"
  syntax:
    content: public virtual bool CanResolveEntity { get; }
    content.vb: Public Overridable ReadOnly Property CanResolveEntity As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the reader can parse and resolve entities; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.Depth
  commentId: P:System.Xml.XmlReader.Depth
  id: Depth
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Depth
  fullName: System.Xml.XmlReader.Depth
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Depth
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 237
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the depth of the current node in the XML document.</p>\n"
  example:
  - "\n<p>See <xref href=\"System.Xml.XmlTextReader.Depth\" data-throw-if-not-resolved=\"false\"></xref> (in the <strong>XmlTextReader</strong> class) for an example using this property.</p>\n"
  syntax:
    content: public abstract int Depth { get; }
    content.vb: Public MustOverride ReadOnly Property Depth As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The depth of the current node in the XML document.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.EOF
  commentId: P:System.Xml.XmlReader.EOF
  id: EOF
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: EOF
  fullName: System.Xml.XmlReader.EOF
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EOF
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 238
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.</p>\n"
  syntax:
    content: public abstract bool EOF { get; }
    content.vb: Public MustOverride ReadOnly Property EOF As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the reader is positioned at the end of the stream; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.HasAttributes
  commentId: P:System.Xml.XmlReader.HasAttributes
  id: HasAttributes
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: HasAttributes
  fullName: System.Xml.XmlReader.HasAttributes
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasAttributes
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 239
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating whether the current node has any attributes.</p>\n"
  example:
  - "\n<p>The following example displays all attributes on the current node.</p>XmlReaderBasic#6"
  syntax:
    content: public virtual bool HasAttributes { get; }
    content.vb: Public Overridable ReadOnly Property HasAttributes As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current node has attributes; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.HasValue
  commentId: P:System.Xml.XmlReader.HasValue
  id: HasValue
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: HasValue
  fullName: System.Xml.XmlReader.HasValue
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 240
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the current node can have a <xref href=\"System.Xml.XmlReader.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The following table lists node types that have a value to return.</p>\n<p>Node Type </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<strong>Attribute</strong>\n</p>\n</td><td>\n<p>The value of the attribute. </p>\n</td></tr><tr><td>\n<p>\n<strong>CDATA</strong>\n</p>\n</td><td>\n<p>The content of the CDATA section. </p>\n</td></tr><tr><td>\n<p>\n<strong>Comment</strong>\n</p>\n</td><td>\n<p>The content of the comment. </p>\n</td></tr><tr><td>\n<p>\n<strong>DocumentType</strong>\n</p>\n</td><td>\n<p>The internal subset. </p>\n</td></tr><tr><td>\n<p>\n<strong>ProcessingInstruction</strong>\n</p>\n</td><td>\n<p>The entire content, excluding the target. </p>\n</td></tr><tr><td>\n<p>\n<strong>SignificantWhitespace</strong>\n</p>\n</td><td>\n<p>The white space between markup in a mixed content model. </p>\n</td></tr><tr><td>\n<p>\n<strong>Text</strong>\n</p>\n</td><td>\n<p>The content of the text node. </p>\n</td></tr><tr><td>\n<p>\n<strong>Whitespace</strong>\n</p>\n</td><td>\n<p>The white space between markup. </p>\n</td></tr><tr><td>\n<p>\n<strong>XmlDeclaration</strong>\n</p>\n</td><td>\n<p>The content of the declaration. </p>\n</td></tr></tbody></table>\n"
  example:
  - "\n<p>See <xref href=\"System.Xml.XmlTextReader.HasValue\" data-throw-if-not-resolved=\"false\"></xref> (in the <strong>XmlTextReader</strong> class) for a sample using this method.</p>\n"
  syntax:
    content: public virtual bool HasValue { get; }
    content.vb: Public Overridable ReadOnly Property HasValue As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the node on which the reader is currently positioned can have a <strong>Value</strong>; otherwise, <strong>false</strong>. If <strong>false</strong>, the node has a value of <strong>String.Empty</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.IsDefault
  commentId: P:System.Xml.XmlReader.IsDefault
  id: IsDefault
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsDefault
  fullName: System.Xml.XmlReader.IsDefault
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDefault
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 241
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</p>\n"
  remarks: "\n<p>\n<strong>IsDefault</strong> always returns <strong>false</strong> for implementations of <strong>XmlReader</strong> that do not support schema or DTD information. This property applies only to an attribute node.</p>\n"
  example:
  - "\n<p>The following example displays all attributes on the root element.</p>\n<pre><code>using System;\nusing System.IO;\nusing System.Xml;\n\npublic class Sample \n{\npublic static void Main(){\n\n// Create the reader.\nXmlReader reader = XmlReader.Create(\"book4.xml\");\n\nreader.MoveToContent();\n\n// Display each of the attribute nodes, including default attributes.\nwhile (reader.MoveToNextAttribute()){\nif (reader.IsDefault)\n  Console.Write(\"(default attribute) \");\nConsole.WriteLine(\"{0} = {1}\", reader.Name, reader.Value);  \n}           \n\n//Close the reader.\nreader.Close();     \n\n}\n} // End class</code></pre>\n<p>The example uses the following files as input.</p>\n<p>\n<strong>book4.xml</strong>\n</p>\n<pre><code><!DOCTYPE book SYSTEM 'book.dtd'>\n<book ISBN = '1-861001-57-5'>\n<title>Pride And Prejudice</title>\n<price>19.95</price>\n</book></code></pre>\n<p>\n<strong>book.dtd</strong>\n</p>\n<pre><code><!ELEMENT book (title,price)> \n<!ATTLIST book \ngenre CDATA \"novel\"\nISBN CDATA #REQUIRED>\n<!ELEMENT title (#PCDATA)>\n<!ELEMENT price (#PCDATA)></code></pre>\n"
  syntax:
    content: public virtual bool IsDefault { get; }
    content.vb: Public Overridable ReadOnly Property IsDefault As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; <strong>false</strong> if the attribute value was explicitly set.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.IsEmptyElement
  commentId: P:System.Xml.XmlReader.IsEmptyElement
  id: IsEmptyElement
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsEmptyElement
  fullName: System.Xml.XmlReader.IsEmptyElement
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEmptyElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 242
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, <code><MyElement/></code>).</p>\n"
  remarks: "\n<p>This property enables you to determine the difference between the following: </p>\n<p>\n<code><item num=\"123\"/></code> (<strong>IsEmptyElement</strong> is <strong>true</strong>).</p>\n<p>\n<code><item num=\"123\"></item></code> (<strong>IsEmptyElement</strong> is <strong>false</strong>, although element content is empty).</p>\n<p>A corresponding <strong>EndElement</strong> node is not generated for empty elements.</p>\n<p>If default content has been added to an element due to schema validation, <strong>IsEmptyElement</strong> still returns <strong>true</strong>. It has no bearing on whether or not the element has a default value. In other words, <strong>IsEmptyElement</strong> simply reports whether or not the element in the source document had an end element tag.</p>\n"
  example:
  - "\n<p>The following example displays the text content of each element.</p>XmlReaderBasic#10<p>The example uses the file, <strong>elems.xml</strong>, as input.</p>XML_Core_Files#3"
  syntax:
    content: public abstract bool IsEmptyElement { get; }
    content.vb: Public MustOverride ReadOnly Property IsEmptyElement As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current node is an element (<xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equals <strong>XmlNodeType.Element</strong>) that ends with <code>/></code>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.Item(System.Int32)
  commentId: P:System.Xml.XmlReader.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Xml.XmlReader.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 243
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the value of the attribute with the specified index.</p>\n"
  remarks: "\n<p>This property does not move the reader.</p>\n"
  example:
  - "\n<p>The following example displays all attributes on the current node.</p>XmlReaderBasic#1"
  syntax:
    content: public virtual string this[int i] { get; }
    content.vb: Public Overridable ReadOnly Property Item(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the attribute.</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.GetAttribute(System.Int32)
    commentId: M:System.Xml.XmlReader.GetAttribute(System.Int32)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.Xml.XmlReader.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Xml.XmlReader.Item(System.String)
  commentId: P:System.Xml.XmlReader.Item(System.String)
  id: Item(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Item[String]
  fullName: System.Xml.XmlReader.Item[System.String]
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 244
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the value of the attribute with the specified <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This property does not move the reader.</p>\n<p>If the reader is positioned on a <strong>DocumentType</strong> node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <code>reader[\"PUBLIC\"]</code></p>\n"
  example:
  - "\n<p>The following example gets the value of the ISBN attribute.</p>XmlReaderBasic#7"
  syntax:
    content: public virtual string this[string name] { get; }
    content.vb: Public Overridable ReadOnly Property Item(name As String) As String
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the attribute.</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute. If the attribute is not found, <strong>null</strong> is returned.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.GetAttribute(System.String)
    commentId: M:System.Xml.XmlReader.GetAttribute(System.String)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.Xml.XmlReader.Item(System.String)
  name.vb: Item(String)
- uid: System.Xml.XmlReader.Item(System.String,System.String)
  commentId: P:System.Xml.XmlReader.Item(System.String,System.String)
  id: Item(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Item[String, String]
  fullName: System.Xml.XmlReader.Item[System.String, System.String]
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 245
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the value of the attribute with the specified <xref href=\"System.Xml.XmlReader.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This property does not move the reader.</p>\n"
  syntax:
    content: public virtual string this[string name, string namespaceURI] { get; }
    content.vb: Public Overridable ReadOnly Property Item(name As String, namespaceURI As String) As String
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute.</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute. If the attribute is not found, <strong>null</strong> is returned.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.GetAttribute(System.String,System.String)
    commentId: M:System.Xml.XmlReader.GetAttribute(System.String,System.String)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.Xml.XmlReader.Item(System.String, System.String)
  name.vb: Item(String, String)
- uid: System.Xml.XmlReader.LocalName
  commentId: P:System.Xml.XmlReader.LocalName
  id: LocalName
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: LocalName
  fullName: System.Xml.XmlReader.LocalName
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalName
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 246
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the local name of the current node.</p>\n"
  example:
  - "\n<p>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</p>XmlReaderBasic#9<p>The example uses the file, book2.xml, as input.</p>XML_Core_Files#5"
  syntax:
    content: public abstract string LocalName { get; }
    content.vb: Public MustOverride ReadOnly Property LocalName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the current node with the prefix removed. For example, <strong>LocalName</strong> is <strong>book</strong> for the element <code><bk:book></code>.</p>\n<p>For node types that do not have a name (like <strong>Text</strong>, <strong>Comment</strong>, and so on), this property returns <strong>String.Empty</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.Name
    commentId: P:System.Xml.XmlReader.Name
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.Name
  commentId: P:System.Xml.XmlReader.Name
  id: Name
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Xml.XmlReader.Name
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 247
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the qualified name of the current node.</p>\n"
  example:
  - "\n<p>The following example reads an XML file and displays each of the nodes.</p>XmlReaderBasic#8<p>The sample uses the <strong>items.xml</strong> file.</p>XML_Core_Files#2"
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The qualified name of the current node. For example, <strong>Name</strong> is <strong>bk:book</strong> for the element <code><bk:book></code>.</p>\n<p>The name returned is dependent on the <xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> of the node. The following node types return the listed values. All other node types return an empty string.</p>\n<p>Node type </p>\n<p>Name </p>\n<table><tbody><tr><td>\n<p>\n<strong>Attribute</strong>\n</p>\n</td><td>\n<p>The name of the attribute. </p>\n</td></tr><tr><td>\n<p>\n<strong>DocumentType</strong>\n</p>\n</td><td>\n<p>The document type name. </p>\n</td></tr><tr><td>\n<p>\n<strong>Element</strong>\n</p>\n</td><td>\n<p>The tag name. </p>\n</td></tr><tr><td>\n<p>\n<strong>EntityReference</strong>\n</p>\n</td><td>\n<p>The name of the entity referenced. </p>\n</td></tr><tr><td>\n<p>\n<strong>ProcessingInstruction</strong>\n</p>\n</td><td>\n<p>The target of the processing instruction. </p>\n</td></tr><tr><td>\n<p>\n<strong>XmlDeclaration</strong>\n</p>\n</td><td>\n<p>The literal string <strong>xml</strong>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.LocalName
    commentId: P:System.Xml.XmlReader.LocalName
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.NamespaceURI
  commentId: P:System.Xml.XmlReader.NamespaceURI
  id: NamespaceURI
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: NamespaceURI
  fullName: System.Xml.XmlReader.NamespaceURI
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NamespaceURI
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 248
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</p>\n"
  remarks: "\n<p>This property is relevant to <strong>Element</strong> and <strong>Attribute</strong> nodes only.</p>\n"
  example:
  - "\n<p>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</p>XmlReaderBasic#9<p>The example uses the file, book2.xml, as input.</p>XML_Core_Files#5"
  syntax:
    content: public abstract string NamespaceURI { get; }
    content.vb: Public MustOverride ReadOnly Property NamespaceURI As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The namespace URI of the current node; otherwise an empty string.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.NameTable
  commentId: P:System.Xml.XmlReader.NameTable
  id: NameTable
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: NameTable
  fullName: System.Xml.XmlReader.NameTable
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NameTable
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 249
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> associated with this implementation.</p>\n"
  remarks: "\n<p>All node and attribute names returned from <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> are atomized using the <strong>NameTable</strong>. When the same name is returned multiple times (for example, <strong>Customer</strong>), then the same <strong>String</strong> object will be returned for that name. This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</p>\n"
  syntax:
    content: public abstract XmlNameTable NameTable { get; }
    content.vb: Public MustOverride ReadOnly Property NameTable As XmlNameTable
    parameters: []
    return:
      type: System.Xml.XmlNameTable
      description: "\n<p>The <strong>XmlNameTable</strong> enabling you to get the atomized version of a string within the node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlNameTable
    commentId: T:System.Xml.XmlNameTable
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.NodeType
  commentId: P:System.Xml.XmlReader.NodeType
  id: NodeType
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: NodeType
  fullName: System.Xml.XmlReader.NodeType
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeType
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 250
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the type of the current node.</p>\n"
  example:
  - "\n<p>The following example reads an XML file and displays each of the nodes.</p>XmlReaderBasic#8<p>The sample uses the <strong>items.xml</strong> file.</p>XML_Core_Files#2"
  syntax:
    content: public abstract XmlNodeType NodeType { get; }
    content.vb: Public MustOverride ReadOnly Property NodeType As XmlNodeType
    parameters: []
    return:
      type: System.Xml.XmlNodeType
      description: "\n<p>One of the enumeration values that specify the type of the current node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.Prefix
  commentId: P:System.Xml.XmlReader.Prefix
  id: Prefix
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Prefix
  fullName: System.Xml.XmlReader.Prefix
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Prefix
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 251
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the namespace prefix associated with the current node.</p>\n"
  example:
  - "\n<p>The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</p>XmlReaderBasic#9<p>The example uses the file, book2.xml, as input.</p>XML_Core_Files#5"
  syntax:
    content: public abstract string Prefix { get; }
    content.vb: Public MustOverride ReadOnly Property Prefix As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The namespace prefix associated with the current node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.ReadState
  commentId: P:System.Xml.XmlReader.ReadState
  id: ReadState
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadState
  fullName: System.Xml.XmlReader.ReadState
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadState
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 252
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the state of the reader.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.XmlReader.ReadState\" data-throw-if-not-resolved=\"false\"></xref>property has one of the following values:</p>\n<ul><li>\n<p>\n<xref href=\"System.Xml.ReadState.Initial\" data-throw-if-not-resolved=\"false\"></xref>, when the <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref>method is called.</p>\n</li><li>\n<p>\n<xref href=\"System.Xml.ReadState.Interactive\" data-throw-if-not-resolved=\"false\"></xref>, when the <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method has been called, and additional methods may be called on the reader.</p>\n</li><li>\n<p>\n<xref href=\"System.Xml.ReadState.EndOfFile\" data-throw-if-not-resolved=\"false\"></xref>, when the end of the XML document has been reached successfully.</p>\n</li><li>\n<p>\n<xref href=\"System.Xml.ReadState.Closed\" data-throw-if-not-resolved=\"false\"></xref>, when the <xref href=\"System.Xml.XmlReader.Close\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n</li><li>\n<p>\n<xref href=\"System.Xml.ReadState.Error\" data-throw-if-not-resolved=\"false\"></xref>, when an error is preventing the read operation from continuing.</p>\n</li></ul>\n"
  syntax:
    content: public abstract ReadState ReadState { get; }
    content.vb: Public MustOverride ReadOnly Property ReadState As ReadState
    parameters: []
    return:
      type: System.Xml.ReadState
      description: "\n<p>One of the enumeration values that specifies the state of the reader.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.Settings
  commentId: P:System.Xml.XmlReader.Settings
  id: Settings
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Settings
  fullName: System.Xml.XmlReader.Settings
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Settings
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 253
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object used to create this <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object can contain sensitive information such as user credentials. Applications must be careful when caching this object or passing it to another component.</p>\n<p>The <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> class is used to specify the set of features to support on the created reader instance. The <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object returned by this property cannot be modified. Any attempt to change individual settings results in an exception being thrown.</p>\n"
  example:
  - 
  syntax:
    content: public virtual XmlReaderSettings Settings { get; }
    content.vb: Public Overridable ReadOnly Property Settings As XmlReaderSettings
    parameters: []
    return:
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object used to create this reader instance. If this reader was not created using the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method, this property returns <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.Value
  commentId: P:System.Xml.XmlReader.Value
  id: Value
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Xml.XmlReader.Value
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 254
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the text value of the current node.</p>\n"
  remarks: "\n<p>For the asynchronous version of this property, see the <xref href=\"System.Xml.XmlReader.GetValueAsync\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example reads an XML file and displays each of the nodes.</p>XmlReaderBasic#8<p>The sample uses the <strong>items.xml</strong> file.</p>XML_Core_Files#2"
  syntax:
    content: public abstract string Value { get; }
    content.vb: Public MustOverride ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value returned depends on the <xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> of the node. The following table lists node types that have a value to return. All other node types return <strong>String.Empty</strong>.</p>\n<p>Node type </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<strong>Attribute</strong>\n</p>\n</td><td>\n<p>The value of the attribute. </p>\n</td></tr><tr><td>\n<p>\n<strong>CDATA</strong>\n</p>\n</td><td>\n<p>The content of the CDATA section. </p>\n</td></tr><tr><td>\n<p>\n<strong>Comment</strong>\n</p>\n</td><td>\n<p>The content of the comment. </p>\n</td></tr><tr><td>\n<p>\n<strong>DocumentType</strong>\n</p>\n</td><td>\n<p>The internal subset. </p>\n</td></tr><tr><td>\n<p>\n<strong>ProcessingInstruction</strong>\n</p>\n</td><td>\n<p>The entire content, excluding the target. </p>\n</td></tr><tr><td>\n<p>\n<strong>SignificantWhitespace</strong>\n</p>\n</td><td>\n<p>The white space between markup in a mixed content model. </p>\n</td></tr><tr><td>\n<p>\n<strong>Text</strong>\n</p>\n</td><td>\n<p>The content of the text node. </p>\n</td></tr><tr><td>\n<p>\n<strong>Whitespace</strong>\n</p>\n</td><td>\n<p>The white space between markup. </p>\n</td></tr><tr><td>\n<p>\n<strong>XmlDeclaration</strong>\n</p>\n</td><td>\n<p>The content of the declaration. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.ValueType
  commentId: P:System.Xml.XmlReader.ValueType
  id: ValueType
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ValueType
  fullName: System.Xml.XmlReader.ValueType
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueType
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 255
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets The Common Language Runtime (CLR) type for the current node.</p>\n"
  remarks: "\n<p>See Type Support in the System.Xml Classes for a list of the default mappings.</p>\n<p>An element of type <code>xs:int</code> has a <strong>ValueType</strong> of <strong>System.Int32</strong> by default. However, the <strong>ValueType</strong> could be one of the valid types that can be mapped to <code>xs:int</code>, such as <strong>System.Int16</strong> or <strong>System.Double</strong>.</p>\n<p>If a node is un-typed, or if the node is an element that contains mixed content, the node value is mapped to the <strong>System.String</strong> type.</p>\n"
  example:
  - 
  syntax:
    content: public virtual Type ValueType { get; }
    content.vb: Public Overridable ReadOnly Property ValueType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The CLR type that corresponds to the typed value of the node. The default is <strong>System.String</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.XmlLang
  commentId: P:System.Xml.XmlReader.XmlLang
  id: XmlLang
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: XmlLang
  fullName: System.Xml.XmlReader.XmlLang
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlLang
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 256
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the current <strong>xml:lang</strong> scope.</p>\n"
  remarks: "\n<p>This property represents the <strong>xml:lang</strong> scope within which the current node resides. For example, here is an XML fragment with <strong>xml:lang</strong> set to US English in the root element: </p>\n<pre><code><root xml:lang=\"en-us\"> \n<name>Fred</name> \n</root> </code></pre>\n<p>When the reader is positioned on the <strong>name</strong> element, you can use this property to find that it is in the scope of a US English <strong>xml:lang</strong> attribute.</p>\n"
  example:
  - "\n<p>See <xref href=\"System.Xml.XmlTextReader.XmlLang\" data-throw-if-not-resolved=\"false\"></xref> for an example of using this property.</p>\n"
  syntax:
    content: public virtual string XmlLang { get; }
    content.vb: Public Overridable ReadOnly Property XmlLang As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The current <strong>xml:lang</strong> scope.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.XmlSpace
    commentId: P:System.Xml.XmlReader.XmlSpace
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.XmlSpace
  commentId: P:System.Xml.XmlReader.XmlSpace
  id: XmlSpace
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: XmlSpace
  fullName: System.Xml.XmlReader.XmlSpace
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlSpace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 257
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the current <strong>xml:space</strong> scope.</p>\n"
  example:
  - "\n<p>See <xref href=\"System.Xml.XmlTextReader.XmlSpace\" data-throw-if-not-resolved=\"false\"></xref> (in the <strong>XmlTextReader</strong> class) for an example using this property.</p>\n"
  syntax:
    content: public virtual XmlSpace XmlSpace { get; }
    content.vb: Public Overridable ReadOnly Property XmlSpace As XmlSpace
    parameters: []
    return:
      type: System.Xml.XmlSpace
      description: "\n<p>One of the <xref href=\"System.Xml.XmlSpace\" data-throw-if-not-resolved=\"false\"></xref> values. If no <strong>xml:space</strong> scope exists, this property defaults to <strong>XmlSpace.None</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.XmlLang
    commentId: P:System.Xml.XmlReader.XmlLang
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.Create(System.IO.Stream)
  commentId: M:System.Xml.XmlReader.Create(System.IO.Stream)
  id: Create(System.IO.Stream)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(Stream)
  fullName: System.Xml.XmlReader.Create(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 258
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance using the specified stream with default settings.</p>\n"
  remarks: "\n<p>An <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object with default settings is used to create the reader. If you wish to specify the features to support on the created reader, use the overload that takes an <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object as one of its arguments, and pass in an <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object with the correct settings.</p>\n<p>A default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. </p>\n<p>Starting with the .NET Framework 4.5.2, no default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the external resource is located on a network resource that requires authentication, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> with the necessary credentials using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The created <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object expands entity references and performs XML normalization of new line characters.</p>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object that reads from a <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>XmlReader.Create#8"
  syntax:
    content: public static XmlReader Create(Stream input)
    content.vb: Public Shared Function Create(input As Stream) As XmlReader
    parameters:
    - id: input
      type: System.IO.Stream
      description: "\n<p>The stream that contains the XML data.</p>\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>input</em> value is <strong>null</strong>.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> does not have sufficient permissions to access the location of the XML data.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)
  commentId: M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)
  id: Create(System.IO.Stream,System.Xml.XmlReaderSettings)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(Stream, XmlReaderSettings)
  fullName: System.Xml.XmlReader.Create(System.IO.Stream, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 259
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified stream and settings.</p>\n"
  remarks: "\n<p>By default an <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. </p>\n<p>Starting with the .NET Framework 4.5.2, no default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the external resource is located on a network resource that requires authentication, use the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> with the necessary credentials.</p>\n<p>You can use one of the following methods to control which resources the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can access:</p>\n<ul><li>\n<p>Restrict the resources that the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can access by setting the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to an <xref href=\"System.Xml.XmlSecureResolver\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</li></ul>\n<p>-or-</p>\n<ul><li>\n<p>Do not allow the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to open any external resources by setting the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>null</strong>.</p>\n</li></ul>\n<p>The created <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object expands entity references and performs XML normalization of new line characters.</p>\n"
  example:
  - 
  syntax:
    content: public static XmlReader Create(Stream input, XmlReaderSettings settings)
    content.vb: Public Shared Function Create(input As Stream, settings As XmlReaderSettings) As XmlReader
    parameters:
    - id: input
      type: System.IO.Stream
      description: "\n<p>The stream that contains the XML data.</p>\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</p>\n"
    - id: settings
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The settings for the new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance. This value can be <strong>null</strong>.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>input</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  commentId: M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  id: Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(Stream, XmlReaderSettings, XmlParserContext)
  fullName: System.Xml.XmlReader.Create(System.IO.Stream, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 260
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance using the specified stream, settings, and context information for parsing.</p>\n"
  remarks: "\n<p>By default an <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. </p>\n<p>Starting with the .NET Framework 4.5.2, no default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the external resource is located on a network resource that requires authentication, use the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> with the necessary credentials.</p>\n<p>You can use one of the following methods to control which resources the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can access:</p>\n<ul><li>\n<p>Restrict the resources that the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can access by setting the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to an <xref href=\"System.Xml.XmlSecureResolver\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</li></ul>\n<p>-or-</p>\n<ul><li>\n<p>Do not allow the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to open any external resources by setting the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>null</strong>.</p>\n</li></ul>\n<p>The created <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object expands entity references and performs XML normalization of new line characters.</p>\n"
  example:
  - 
  syntax:
    content: public static XmlReader Create(Stream input, XmlReaderSettings settings, XmlParserContext inputContext)
    content.vb: Public Shared Function Create(input As Stream, settings As XmlReaderSettings, inputContext As XmlParserContext) As XmlReader
    parameters:
    - id: input
      type: System.IO.Stream
      description: "\n<p>The stream that contains the XML data. </p>\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</p>\n"
    - id: settings
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The settings for the new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance. This value can be <strong>null</strong>.</p>\n"
    - id: inputContext
      type: System.Xml.XmlParserContext
      description: "\n<p>The context information required to parse the XML fragment. The context information can include the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> to use, encoding, namespace scope, the current <code>xml:lang</code> and <code>xml:space</code> scope, base URI, and document type definition. </p>\n<p>This value can be <strong>null</strong>.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>input</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.IO.TextReader)
  commentId: M:System.Xml.XmlReader.Create(System.IO.TextReader)
  id: Create(System.IO.TextReader)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(TextReader)
  fullName: System.Xml.XmlReader.Create(System.IO.TextReader)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 261
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance by using the specified text reader.</p>\n"
  remarks: "\n<p>An <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object with default settings is used to create the reader. If you wish to specify the features to support on the created reader, use the overload that takes an <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object as one of its arguments, and pass in an <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object with the correct settings.</p>\n<p>A default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. </p>\n<p>Starting with the .NET Framework 4.5.2, no default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the external resource is located on a network resource that requires authentication, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref>with the necessary credentials using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The created <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object expands entity references and performs XML normalization of new line characters.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.IO.StringReader\" data-throw-if-not-resolved=\"false\"></xref> class to read an XML string.</p>XmlReader.Create#7"
  syntax:
    content: public static XmlReader Create(TextReader input)
    content.vb: Public Shared Function Create(input As TextReader) As XmlReader
    parameters:
    - id: input
      type: System.IO.TextReader
      description: "\n<p>The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration is not used by the XML reader to decode the data stream.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>input</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)
  commentId: M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)
  id: Create(System.IO.TextReader,System.Xml.XmlReaderSettings)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(TextReader, XmlReaderSettings)
  fullName: System.Xml.XmlReader.Create(System.IO.TextReader, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 262
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance by using the specified text reader and settings.</p>\n"
  remarks: "\n<p>By default an <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. </p>\n<p>Starting with the .NET Framework 4.5.2, no default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the external resource is located on a network resource that requires authentication, use the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> with the necessary credentials.</p>\n<p>You can use one of the following methods to control which resources the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can access:</p>\n<ul><li>\n<p>Restrict the resources that the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can access by setting the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to an <xref href=\"System.Xml.XmlSecureResolver\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</li></ul>\n<p>-or-</p>\n<ul><li>\n<p>Do not allow the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to open any external resources by setting the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>null</strong>.</p>\n</li></ul>\n<p>The created <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object expands entity references and performs XML normalization of new line characters.</p>\n"
  example:
  - 
  syntax:
    content: public static XmlReader Create(TextReader input, XmlReaderSettings settings)
    content.vb: Public Shared Function Create(input As TextReader, settings As XmlReaderSettings) As XmlReader
    parameters:
    - id: input
      type: System.IO.TextReader
      description: "\n<p>The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the XML reader to decode the data stream.</p>\n"
    - id: settings
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The settings for the new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. This value can be <strong>null</strong>.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>input</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  commentId: M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  id: Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(TextReader, XmlReaderSettings, XmlParserContext)
  fullName: System.Xml.XmlReader.Create(System.IO.TextReader, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 263
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance by using the specified text reader, settings, and context information for parsing.</p>\n"
  remarks: "\n<p>By default an <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. </p>\n<p>Starting with the .NET Framework 4.5.2, no default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the external resource is located on a network resource that requires authentication, use the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> with the necessary credentials.</p>\n<p>You can use one of the following methods to control which resources the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can access:</p>\n<ul><li>\n<p>Restrict the resources that the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can access by setting the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to an <xref href=\"System.Xml.XmlSecureResolver\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</li></ul>\n<p>-or-</p>\n<ul><li>\n<p>Do not allow the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to open any external resources by setting the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>null</strong>.</p>\n</li></ul>\n<p>The created <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object expands entity references and performs XML normalization of new line characters.</p>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object that reads an XML fragment.</p>XmlReader.Create#1"
  syntax:
    content: public static XmlReader Create(TextReader input, XmlReaderSettings settings, XmlParserContext inputContext)
    content.vb: Public Shared Function Create(input As TextReader, settings As XmlReaderSettings, inputContext As XmlParserContext) As XmlReader
    parameters:
    - id: input
      type: System.IO.TextReader
      description: "\n<p>The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the XML reader to decode the data stream.</p>\n"
    - id: settings
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The settings for the new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance. This value can be <strong>null</strong>.</p>\n"
    - id: inputContext
      type: System.Xml.XmlParserContext
      description: "\n<p>The context information required to parse the XML fragment. The context information can include the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> to use, encoding, namespace scope, the current <code>xml:lang</code> and <code>xml:space</code> scope, base URI, and document type definition.</p>\n<p>This value can be <strong>null</strong>.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>input</em> value is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.Xml.XmlReaderSettings.NameTable\" data-throw-if-not-resolved=\"false\"></xref>  and <xref href=\"System.Xml.XmlParserContext.NameTable\" data-throw-if-not-resolved=\"false\"></xref> properties both contain values. (Only one of these <strong>NameTable</strong> properties can be set and used).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.String)
  commentId: M:System.Xml.XmlReader.Create(System.String)
  id: Create(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(String)
  fullName: System.Xml.XmlReader.Create(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 264
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance with specified URI.</p>\n"
  remarks: "\n<p>An <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object with default settings is used to create the reader. If you wish to specify the features to support on the created reader, use the overload that takes an <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object as one of its arguments, and pass in an <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object with the correct settings.</p>\n<p>A default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. </p>\n<p>Starting with the .NET Framework 4.5.2, no default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the external resource is located on a network resource that requires authentication, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> with the necessary credentials using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The created <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object expands entity references and performs XML normalization of new line characters.</p>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object that reads XML data file specified by the URI.</p>XmlReader.Create#6"
  syntax:
    content: public static XmlReader Create(string inputUri)
    content.vb: Public Shared Function Create(inputUri As String) As XmlReader
    parameters:
    - id: inputUri
      type: System.String
      description: "\n<p>The URI for the file that contains the XML data. The <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> class is used to convert the path to a canonical data representation.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>inputUri</em> value is <strong>null</strong>.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> does not have sufficient permissions to access the location of the XML data.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file identified by the URI does not exist.</p>\n"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The URI format is not correct.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)
  commentId: M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)
  id: Create(System.String,System.Xml.XmlReaderSettings)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(String, XmlReaderSettings)
  fullName: System.Xml.XmlReader.Create(System.String, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 265
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance by using the specified URI and settings.</p>\n"
  remarks: "\n<p>By default an <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> with no credentials is used to access any external resources such as a document type definition (DTD), entities, schemas, and so on. </p>\n<p>Starting with the .NET Framework 4.5.2, no default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>This means that the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can access any locations that does not require authentication. If the external resource is located on a network resource that requires authentication, use the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> with the necessary credentials.</p>\n<p>You can restrict the resources that the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can access by setting the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to an <xref href=\"System.Xml.XmlSecureResolver\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>The created <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object expands entity references and performs XML normalization of new line characters.</p>\n"
  example:
  - "\n<p>The following example creates an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object that supports document type definition (DTD) validation.</p>XmlReader.Create#3"
  syntax:
    content: public static XmlReader Create(string inputUri, XmlReaderSettings settings)
    content.vb: Public Shared Function Create(inputUri As String, settings As XmlReaderSettings) As XmlReader
    parameters:
    - id: inputUri
      type: System.String
      description: "\n<p>The URI for the file containing the XML data. The <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> object on the <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object is used to convert the path to a canonical data representation. If <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>, a new <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> object is used.</p>\n"
    - id: settings
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The settings for the new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance. This value can be <strong>null</strong>.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>inputUri</em> value is <strong>null</strong>.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified by the URI cannot be found.</p>\n"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\n<p>In the <see href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</see> or the Portable Class Library, catch the base class exception, <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The URI format is not correct.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
  commentId: M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
  id: Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(XmlReader, XmlReaderSettings)
  fullName: System.Xml.XmlReader.Create(System.Xml.XmlReader, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 266
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance by using the specified XML reader and settings.</p>\n"
  remarks: "\n<p>This method allows you add additional features to an underlying <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object. The underlying <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object can be another <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object created by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method, or an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object created using one of the concrete <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implementations.</p>\n<p>A default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> with no credentials is used to access any external resources such as a schema. </p>\n<p>Starting with the .NET Framework 4.5.2, no default <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> is provided. If your solution targets the .NET Framework 4.5.2 or later versions, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the external resource is located on a network resource that requires authentication, specify an <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> with the necessary credentials using the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>You can use one of the following methods to control which resources the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can access:</p>\n<ul><li>\n<p>Restrict the resources that the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can access by setting the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to an <xref href=\"System.Xml.XmlSecureResolver\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</li></ul>\n<p>-or-</p>\n<ul><li>\n<p>Do not allow the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to open any external resources by setting the <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>null</strong>.</p>\n</li></ul>\n<p>The created <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object expands entity references and performs XML normalization of new line characters.</p>\n"
  example:
  - "\n<p>The following example creates a validating <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object that is wrapped around an <xref href=\"System.Xml.XmlNodeReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>XmlReader.Create#5"
  syntax:
    content: public static XmlReader Create(XmlReader reader, XmlReaderSettings settings)
    content.vb: Public Shared Function Create(reader As XmlReader, settings As XmlReaderSettings) As XmlReader
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "\n<p>The object that you want to use as the underlying XML reader.</p>\n"
    - id: settings
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The settings for the new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>The conformance level of the <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object must either match the conformance level of the underlying reader, or it must be set to <xref href=\"System.Xml.ConformanceLevel.Auto\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is wrapped around the specified <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>reader</em> value is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>If the <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object specifies a conformance level that is not consistent with conformance level of the underlying reader.</p>\n<p>-or-</p>\n<p>The underlying <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is in an <xref href=\"System.Xml.ReadState.Error\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Xml.ReadState.Closed\" data-throw-if-not-resolved=\"false\"></xref> state.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Dispose
  commentId: M:System.Xml.XmlReader.Dispose
  id: Dispose
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Xml.XmlReader.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 267
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReader.Dispose(System.Boolean)
  commentId: M:System.Xml.XmlReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Xml.XmlReader.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 268
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  example:
  - 
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Xml.XmlReader.GetAttribute(System.Int32)
  commentId: M:System.Xml.XmlReader.GetAttribute(System.Int32)
  id: GetAttribute(System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: GetAttribute(Int32)
  fullName: System.Xml.XmlReader.GetAttribute(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 269
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the value of the attribute with the specified index.</p>\n"
  example:
  - "\n<p>The following example gets the value of the third attribute.</p>XmlReaderBasic#2"
  syntax:
    content: public abstract string GetAttribute(int i)
    content.vb: Public MustOverride Function GetAttribute(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the attribute. The index is zero-based. (The first attribute has index 0.)</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute. This method does not move the reader.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>i</em> is out of range. It must be non-negative and less than the size of the attribute collection.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.GetAttribute(System.String)
  commentId: M:System.Xml.XmlReader.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: GetAttribute(String)
  fullName: System.Xml.XmlReader.GetAttribute(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 270
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the value of the attribute with the specified <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method does not move the reader.</p>\n<p>If the reader is positioned on a <strong>DocumentType</strong> node, this method can be used to get the PUBLIC and SYSTEM literals, for example, <code>reader.GetAttribute(\"PUBLIC\")</code></p>\n"
  example:
  - "\n<p>The following example gets the value of the ISBN attribute.</p>XmlReaderBasic#3"
  syntax:
    content: public abstract string GetAttribute(string name)
    content.vb: Public MustOverride Function GetAttribute(name As String) As String
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the attribute.</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute. If the attribute is not found or the value is <strong>String.Empty</strong>, <strong>null</strong> is returned.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.GetAttribute(System.String,System.String)
  commentId: M:System.Xml.XmlReader.GetAttribute(System.String,System.String)
  id: GetAttribute(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: GetAttribute(String, String)
  fullName: System.Xml.XmlReader.GetAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 271
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the value of the attribute with the specified <xref href=\"System.Xml.XmlReader.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The following XML contains an attribute in a specific namespace: </p>\n<pre><code><test xmlns:dt=\"urn:datatypes\" dt:type=\"int\"/></code></pre>\n<p>You can lookup the <strong>dt:type</strong> attribute using one argument (prefix and local name) or two arguments (local name and namespace URI): </p>\n<pre><code>String dt = reader.GetAttribute(\"dt:type\");\nString dt2 = reader.GetAttribute(\"type\",\"urn:datatypes\");</code></pre>\n<p>To lookup the <strong>xmlns:dt</strong> attribute, use one of the following arguments: </p>\n<pre><code>String dt3 = reader.GetAttribute(\"xmlns:dt\");\nString dt4 = reader.GetAttribute(\"dt\",http://www.w3.org/2000/xmlns/);</code></pre>\n<p>You can also get this information using the <xref href=\"System.Xml.XmlReader.Prefix\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public abstract string GetAttribute(string name, string namespaceURI)
    content.vb: Public MustOverride Function GetAttribute(name As String, namespaceURI As String) As String
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute.</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute. If the attribute is not found or the value is <strong>String.Empty</strong>, <strong>null</strong> is returned. This method does not move the reader.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.GetValueAsync
  commentId: M:System.Xml.XmlReader.GetValueAsync
  id: GetValueAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: GetValueAsync()
  fullName: System.Xml.XmlReader.GetValueAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValueAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 272
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously gets the value of the current node.</p>\n"
  remarks: "\n<p>To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<string> GetValueAsync()
    content.vb: Public Overridable Function GetValueAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The value of the current node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.IsName(System.String)
  commentId: M:System.Xml.XmlReader.IsName(System.String)
  id: IsName(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsName(String)
  fullName: System.Xml.XmlReader.IsName(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsName
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 273
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Returns a value indicating whether the string argument is a valid XML name.</p>\n"
  remarks: "\n<p>This method uses the <see href=\"http://go.microsoft.com/fwlink/?LinkId=49863\">W3C XML 1.0 Recommendation</see> to determine whether the name is valid.</p>\n"
  syntax:
    content: public static bool IsName(string str)
    content.vb: Public Shared Function IsName(str As String) As Boolean
    parameters:
    - id: str
      type: System.String
      description: "\n<p>The name to validate.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the name is valid; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>str</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.IsNameToken(System.String)
  commentId: M:System.Xml.XmlReader.IsNameToken(System.String)
  id: IsNameToken(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsNameToken(String)
  fullName: System.Xml.XmlReader.IsNameToken(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNameToken
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 274
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Returns a value indicating whether or not the string argument is a valid XML name token.</p>\n"
  remarks: "\n<p>This method uses the <see href=\"http://go.microsoft.com/fwlink/?LinkId=49863\">W3C XML 1.0 Recommendation</see> to determine whether the name token is valid.</p>\n"
  syntax:
    content: public static bool IsNameToken(string str)
    content.vb: Public Shared Function IsNameToken(str As String) As Boolean
    parameters:
    - id: str
      type: System.String
      description: "\n<p>The name token to validate.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if it is a valid name token; otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>str</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.IsStartElement
  commentId: M:System.Xml.XmlReader.IsStartElement
  id: IsStartElement
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsStartElement()
  fullName: System.Xml.XmlReader.IsStartElement()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 275
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Calls <xref href=\"System.Xml.XmlReader.MoveToContent\" data-throw-if-not-resolved=\"false\"></xref> and tests if the current content node is a start tag or empty element tag.</p>\n"
  remarks: "\n<p>This method skips white space, comments, and processing instructions until the reader is positioned on a content node. The method then tests if the current node is an element.</p>\n"
  example:
  - "\n<p>The following example displays the text content of each element.</p>XmlReaderBasic#10<p>The example uses the file, <strong>elems.xml</strong>, as input.</p>XML_Core_Files#3"
  syntax:
    content: public virtual bool IsStartElement()
    content.vb: Public Overridable Function IsStartElement As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <xref href=\"System.Xml.XmlReader.MoveToContent\" data-throw-if-not-resolved=\"false\"></xref> finds a start tag or empty element tag; <strong>false</strong> if a node type other than <strong>XmlNodeType.Element</strong> was found.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML is encountered in the input stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.MoveToContent
    commentId: M:System.Xml.XmlReader.MoveToContent
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.IsStartElement(System.String)
  commentId: M:System.Xml.XmlReader.IsStartElement(System.String)
  id: IsStartElement(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsStartElement(String)
  fullName: System.Xml.XmlReader.IsStartElement(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 276
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Calls <xref href=\"System.Xml.XmlReader.MoveToContent\" data-throw-if-not-resolved=\"false\"></xref> and tests if the current content node is a start tag or empty element tag and if the <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref> property of the element found matches the given argument.</p>\n"
  remarks: "\n<p>This method skips white space, comments, and processing instructions until the reader is positioned on a content node. The method then tests if the current node is an element.</p>\n"
  example:
  - "\n<p>The following example displays each price element.</p>XmlReaderBasic#17"
  syntax:
    content: public virtual bool IsStartElement(string name)
    content.vb: Public Overridable Function IsStartElement(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The string matched against the <strong>Name</strong> property of the element found.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the resulting node is an element and the <strong>Name</strong> property matches the specified string. <strong>false</strong> if a node type other than <strong>XmlNodeType.Element</strong> was found or if the element <strong>Name</strong> property does not match the specified string.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML is encountered in the input stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.MoveToContent
    commentId: M:System.Xml.XmlReader.MoveToContent
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.IsStartElement(System.String,System.String)
  commentId: M:System.Xml.XmlReader.IsStartElement(System.String,System.String)
  id: IsStartElement(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsStartElement(String, String)
  fullName: System.Xml.XmlReader.IsStartElement(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 277
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Calls <xref href=\"System.Xml.XmlReader.MoveToContent\" data-throw-if-not-resolved=\"false\"></xref> and tests if the current content node is a start tag or empty element tag and if the <xref href=\"System.Xml.XmlReader.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref> properties of the element found match the given strings.</p>\n"
  remarks: "\n<p>This method skips white space, comments, and processing instructions until the reader is positioned on a content node. The method then tests if the current node is an element.</p>\n"
  syntax:
    content: public virtual bool IsStartElement(string localname, string ns)
    content.vb: Public Overridable Function IsStartElement(localname As String, ns As String) As Boolean
    parameters:
    - id: localname
      type: System.String
      description: "\n<p>The string to match against the <strong>LocalName</strong> property of the element found.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The string to match against the <strong>NamespaceURI</strong> property of the element found.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the resulting node is an element. <strong>false</strong> if a node type other than <strong>XmlNodeType.Element</strong> was found or if the <strong>LocalName</strong> and <strong>NamespaceURI</strong> properties of the element do not match the specified strings.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML is encountered in the input stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.MoveToContent
    commentId: M:System.Xml.XmlReader.MoveToContent
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.LookupNamespace(System.String)
  commentId: M:System.Xml.XmlReader.LookupNamespace(System.String)
  id: LookupNamespace(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: LookupNamespace(String)
  fullName: System.Xml.XmlReader.LookupNamespace(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LookupNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 278
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, resolves a namespace prefix in the current element's scope.</p>\n"
  remarks: "\n<p>In the following XML string, if the reader is positioned on the <strong>href</strong> attribute, the prefix <code>a</code> is resolved by calling <code>reader.LookupNamespace(\"a\")</code>. The returned string is <code>urn:456</code>.</p>\n<pre><code><root xmlns:a=\"urn:456\">\n<item>\n<ref href=\"a:b\"/>\n</item>\n</root></code></pre>\n"
  syntax:
    content: public abstract string LookupNamespace(string prefix)
    content.vb: Public MustOverride Function LookupNamespace(prefix As String) As String
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. </p>\n"
    return:
      type: System.String
      description: "\n<p>The namespace URI to which the prefix maps or <strong>null</strong> if no matching prefix is found.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.MoveToAttribute(System.Int32)
  commentId: M:System.Xml.XmlReader.MoveToAttribute(System.Int32)
  id: MoveToAttribute(System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToAttribute(Int32)
  fullName: System.Xml.XmlReader.MoveToAttribute(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 279
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, moves to the attribute with the specified index.</p>\n"
  example:
  - "\n<p>The following example displays all attributes on the current node.</p>XmlReaderBasic#4"
  syntax:
    content: public virtual void MoveToAttribute(int i)
    content.vb: Public Overridable Sub MoveToAttribute(i As Integer)
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the attribute.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The parameter has a negative value.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.MoveToAttribute(System.String)
  commentId: M:System.Xml.XmlReader.MoveToAttribute(System.String)
  id: MoveToAttribute(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToAttribute(String)
  fullName: System.Xml.XmlReader.MoveToAttribute(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 280
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, moves to the attribute with the specified <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>After calling <strong>MoveToAttribute</strong>, the <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Xml.XmlReader.Prefix\" data-throw-if-not-resolved=\"false\"></xref> properties reflect the properties of that attribute.</p>\n"
  syntax:
    content: public abstract bool MoveToAttribute(string name)
    content.vb: Public MustOverride Function MoveToAttribute(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the attribute.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the attribute is found; otherwise, <strong>false</strong>. If <strong>false</strong>, the reader's position does not change.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The parameter is an empty string.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.MoveToAttribute(System.String,System.String)
  commentId: M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)
  id: MoveToAttribute(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToAttribute(String, String)
  fullName: System.Xml.XmlReader.MoveToAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 281
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, moves to the attribute with the specified <xref href=\"System.Xml.XmlReader.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>After calling <strong>MoveToAttribute</strong>, the <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Xml.XmlReader.Prefix\" data-throw-if-not-resolved=\"false\"></xref> properties reflect the properties of that attribute.</p>\n"
  syntax:
    content: public abstract bool MoveToAttribute(string name, string ns)
    content.vb: Public MustOverride Function MoveToAttribute(name As String, ns As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI of the attribute.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the attribute is found; otherwise, <strong>false</strong>. If <strong>false</strong>, the reader's position does not change.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Both parameter values are <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.MoveToContent
  commentId: M:System.Xml.XmlReader.MoveToContent
  id: MoveToContent
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToContent()
  fullName: System.Xml.XmlReader.MoveToContent()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToContent
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 282
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks whether the current node is a content (non-white space text, <strong>CDATA</strong>, <strong>Element</strong>, <strong>EndElement</strong>, <strong>EntityReference</strong>, or <strong>EndEntity</strong>) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: <strong>ProcessingInstruction</strong>, <strong>DocumentType</strong>, <strong>Comment</strong>, <strong>Whitespace</strong>, or <strong>SignificantWhitespace</strong>.</p>\n"
  remarks: "\n<p>If the current node is an attribute node, this method moves the reader back to the element that owns the attribute.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.MoveToContentAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>This is useful when you want to write code that can skip over random XML markup without breaking. For example, suppose you have the following code: </p>Classic WebData XmlReader.MoveToContent Example#1<p>This code can handle the following inputs without breaking: </p><pre><code><price>123.4</price></code></pre><p>and </p><pre><code><?xml version=\"1.0\"><!DOCTYPE price SYSTEM\n\"abc\"><price>123.4</price></code></pre><p>and </p><pre><code><?xml version=\"1.0\"><!DOCTYPE price SYSTEM \"abc\"\n[<!ENTTIY p\n\"123.4\">]><price>&p;</price></code></pre><p>and </p><pre><code><!-- some test comment --><?processing\ninstruction?><price>123.4</price></code></pre>"
  syntax:
    content: public virtual XmlNodeType MoveToContent()
    content.vb: Public Overridable Function MoveToContent As XmlNodeType
    return:
      type: System.Xml.XmlNodeType
      description: "\n<p>The <xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> of the current node found by the method or <strong>XmlNodeType.None</strong> if the reader has reached the end of the input stream.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML encountered in the input stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.MoveToContentAsync
  commentId: M:System.Xml.XmlReader.MoveToContentAsync
  id: MoveToContentAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToContentAsync()
  fullName: System.Xml.XmlReader.MoveToContentAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToContentAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 283
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously checks whether the current node is a content node. If the node is not a content node, the reader skips ahead to the next content node or end of file.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.MoveToContent\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<XmlNodeType> MoveToContentAsync()
    content.vb: Public Overridable Function MoveToContentAsync As Task(Of XmlNodeType)
    return:
      type: System.Threading.Tasks.Task{System.Xml.XmlNodeType}
      description: "\n<p>The <xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> of the current node found by the method or <strong>XmlNodeType.None</strong> if the reader has reached the end of the input stream.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.MoveToElement
  commentId: M:System.Xml.XmlReader.MoveToElement
  id: MoveToElement
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToElement()
  fullName: System.Xml.XmlReader.MoveToElement()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 284
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, moves to the element that contains the current attribute node.</p>\n"
  remarks: "\n<p>Use this method to return to an element after navigating through its attributes. This method moves the reader to one of the following node types: <strong>Element</strong>, <strong>DocumentType</strong>, or <strong>XmlDeclaration</strong>.</p>\n"
  example:
  - "\n<p>The following example displays all attributes on the current node.</p>XmlReaderBasic#4"
  syntax:
    content: public abstract bool MoveToElement()
    content.vb: Public MustOverride Function MoveToElement As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <strong>false</strong> if the reader is not positioned on an attribute (the position of the reader does not change).</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.MoveToFirstAttribute
  commentId: M:System.Xml.XmlReader.MoveToFirstAttribute
  id: MoveToFirstAttribute
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToFirstAttribute()
  fullName: System.Xml.XmlReader.MoveToFirstAttribute()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToFirstAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 285
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, moves to the first attribute.</p>\n"
  example:
  - "\n<p>The following example gets the value of the first attribute.</p>XmlReaderBasic#5"
  syntax:
    content: public abstract bool MoveToFirstAttribute()
    content.vb: Public MustOverride Function MoveToFirstAttribute As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an attribute exists (the reader moves to the first attribute); otherwise, <strong>false</strong> (the position of the reader does not change).</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.MoveToNextAttribute
  commentId: M:System.Xml.XmlReader.MoveToNextAttribute
  id: MoveToNextAttribute
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToNextAttribute()
  fullName: System.Xml.XmlReader.MoveToNextAttribute()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToNextAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 286
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, moves to the next attribute.</p>\n"
  remarks: "\n<p>If the current node is an element node, this method is equivalent to <xref href=\"System.Xml.XmlReader.MoveToFirstAttribute\" data-throw-if-not-resolved=\"false\"></xref>. If <strong>MoveToNextAttribute</strong> returns <strong>true</strong>, the reader moves to the next attribute; otherwise, the position of the reader does not change.</p>\n"
  example:
  - "\n<p>The following example displays all attributes on the current node.</p>XmlReaderBasic#6"
  syntax:
    content: public abstract bool MoveToNextAttribute()
    content.vb: Public MustOverride Function MoveToNextAttribute As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if there is a next attribute; <strong>false</strong> if there are no more attributes.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.Read
  commentId: M:System.Xml.XmlReader.Read
  id: Read
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Read()
  fullName: System.Xml.XmlReader.Read()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 287
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, reads the next node from the stream.</p>\n"
  remarks: "\n<p>When an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is first created and initialized, there is no information available. You must call <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> to read the first node. The <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method sets the state of the XML reader to initiate <xref href=\"System.Xml.ReadState.Initial\" data-throw-if-not-resolved=\"false\"></xref> and moves through the XML file sequentially until it reaches the end of the file, at which point the method returns a value of <strong>false</strong>.</p>\n<p>This method requires at least four bytes from the data stream in order to begin parsing. If fewer than four bytes are returned and there is no more data in the stream, the method returns <strong>false</strong>. If there is more data in the stream, the method will block parsing until receipt of the fourth byte.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example reads an XML file and displays each of the nodes.</p>XmlReaderBasic#8<p>The sample uses the <strong>items.xml</strong> file.</p>XML_Core_Files#2<p>Output:</p><pre><code><Item>Test with an entity: 123</Item><Item>Test with a child element <more> stuff</Item><Item>Test with a CDATA section <![CDATA[<456>]]> def</Item><Item>Test with a char entity: A</Item><!-- Fourteen chars in this element.--><Item>1234567890ABCD</Item></Items></code></pre>"
  syntax:
    content: public abstract bool Read()
    content.vb: Public MustOverride Function Read As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the next node was read successfully; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>An error occurred while parsing the XML.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.ReadAsync
  commentId: M:System.Xml.XmlReader.ReadAsync
  id: ReadAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadAsync()
  fullName: System.Xml.XmlReader.ReadAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 288
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the next node from the stream.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<bool> ReadAsync()
    content.vb: Public Overridable Function ReadAsync As Task(Of Boolean)
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>\n<strong>true</strong> if the next node was read successfully; <strong>false</strong> if there are no more nodes to read.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadAttributeValue
  commentId: M:System.Xml.XmlReader.ReadAttributeValue
  id: ReadAttributeValue
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadAttributeValue()
  fullName: System.Xml.XmlReader.ReadAttributeValue()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAttributeValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 289
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, parses the attribute value into one or more <strong>Text</strong>, <strong>EntityReference</strong>, or <strong>EndEntity</strong> nodes.</p>\n"
  remarks: "\n<p>Use this method after calling <xref href=\"System.Xml.XmlReader.MoveToAttribute(System.String)\" data-throw-if-not-resolved=\"false\"></xref> to read through the text or entity reference nodes that make up the attribute value. The <xref href=\"System.Xml.XmlReader.Depth\" data-throw-if-not-resolved=\"false\"></xref> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</p>\n"
  example:
  - 
  syntax:
    content: public abstract bool ReadAttributeValue()
    content.vb: Public MustOverride Function ReadAttributeValue As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if there are nodes to return.</p>\n<p>\n<strong>false</strong> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</p>\n<p>An empty attribute, such as, <code>misc=\"\"</code>, returns <strong>true</strong> with a single node with a value of <strong>String.Empty</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  commentId: M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  id: ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAs(Type, IXmlNamespaceResolver)
  fullName: System.Xml.XmlReader.ReadContentAs(System.Type, System.Xml.IXmlNamespaceResolver)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAs
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 290
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the content as an object of the type specified.</p>\n"
  remarks: "\n<p>This method reads the text content at the current reader position and converts it to the requested return type. Text, white space, significant white space and CDATA sections are concatenated. Comments and processing instructions are skipped and entity references are automatically resolved.</p>\n<p>This method is used to read, convert if necessary, and return atomic value items from the current node content. If the input type is a valid mappings for the type of the current node then an instance of the target type containing the value of the current node is returned. See the Remarks section in the<xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> referencepage for a list of the default mappings.</p>\n<p>For example, if you had the following XML text:</p>\n<pre><code><elem>123 <!-- comment --> <?pi my_text?> 456 <?pi another_pi?></elem></code></pre>\n<p>If the data is typed and a string array is supplied to the <xref href=\"System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)\" data-throw-if-not-resolved=\"false\"></xref> method call, then the integer values are converted from strings according to the list of valid CLR type mappings.</p>\n<p>If the data is untyped and a string array is supplied to the <xref href=\"System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)\" data-throw-if-not-resolved=\"false\"></xref> method call, then the content is parsed into separate strings. An array containing two strings is returned with the values \"123\" and \"456\". The spaces are not preserved from the content.</p>\n<p>In general when reading untyped data the content is parsed according to the supplied type. For example, if an integer array is supplied to the <xref href=\"System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)\" data-throw-if-not-resolved=\"false\"></xref> method call then the string is parsed into an array of integers {123,456}.</p>\n<p>In the following example the XML text is not separated by spaces</p>\n<pre><code><elem>123<!-- comment --><?pi my_text?>456789<?pi another_pi?></elem></code></pre>\n<p>If the content is untyped and a string array is supplied to the <xref href=\"System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)\" data-throw-if-not-resolved=\"false\"></xref> method call then an array containing one concatenated string is returned with the value \"123456789\".</p>\n<p>The following table describes how this method treats each node type. </p>\n<p>XmlNodeType</p>\n<p>Return value</p>\n<p>Reader behavior</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)\" data-throw-if-not-resolved=\"false\"></xref> method to return the contents of the colors element into an array of string objects.</p>XmlReader.ReadContentAs#2<p>The example uses the <strong>dataFile_2.xml</strong> file as input.</p>XmlReader.ReadContentAs#3"
  syntax:
    content: public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
    content.vb: Public Overridable Function ReadContentAs(returnType As Type, namespaceResolver As IXmlNamespaceResolver) As Object
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The type of the value to be returned.</p>\n<p>Note   With the release of the .NET Framework 3.5, the value of the <em>returnType</em> parameter can now be the <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
    - id: namespaceResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "\n<p>An <xref href=\"System.Xml.IXmlNamespaceResolver\" data-throw-if-not-resolved=\"false\"></xref> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> object to an <code>xs:string</code>.</p>\n<p>This value can be <strong>null</strong>.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The concatenated text content or attribute value converted to the requested type.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The content is not in the correct format for the target type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>returnType</em> value is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current node is not a supported node type. See the table below for details.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>Read <strong>Decimal.MaxValue</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  commentId: M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  id: ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsAsync(Type, IXmlNamespaceResolver)
  fullName: System.Xml.XmlReader.ReadContentAsAsync(System.Type, System.Xml.IXmlNamespaceResolver)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 291
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the content as an object of the type specified.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
    content.vb: Public Overridable Function ReadContentAsAsync(returnType As Type, namespaceResolver As IXmlNamespaceResolver) As Task(Of Object)
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The type of the value to be returned.</p>\n"
    - id: namespaceResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "\n<p>An <xref href=\"System.Xml.IXmlNamespaceResolver\" data-throw-if-not-resolved=\"false\"></xref> object that is used to resolve any namespace prefixes related to type conversion.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "\n<p>The concatenated text content or attribute value converted to the requested type.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  id: ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsBase64(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadContentAsBase64(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsBase64
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 292
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the content and returns the Base64 decoded binary bytes.</p>\n"
  remarks: "\n<p>This method streams the content, decodes the <strong>Base64</strong> content, and returns the decoded binary bytes (for example, an inline <strong>Base64</strong> encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text. For more information, see RFC 1521, \"MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies\". You can obtain RFCs from the <see href=\"http://go.microsoft.com/fwlink/?LinkId=37119\">Request for Comments Web site</see>.</p>\n<p>You should not access any of the reader properties between calls to the <xref href=\"System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method until the method returns the value <strong>0</strong>.</p>\n<p>This method has the following behavior:</p>\n<ul><li>\n<p>\n<xref href=\"System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns the value <strong>0</strong> when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.</p>\n</li><li>\n<p>If you ask for fewer, or the exact number of, bytes than are left in the stream the reader remains in its current position.</p>\n</li><li>\n<p>\n<xref href=\"System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is not supported on the following XML node types: <strong>Element</strong>, <strong>XmlDeclaration</strong>, <strong>None</strong>, <strong>Document</strong>, <strong>DocumentType</strong>, <strong>Notation</strong>, <strong>Entity</strong>, <strong>DocumentFragment</strong>.</p>\n</li></ul>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public virtual int ReadContentAsBase64(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadContentAsBase64(buffer As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> value is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is not supported on the current node.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implementation does not support this method.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  - type: System.Xml.XmlNodeType
    commentId: T:System.Xml.XmlNodeType
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadContentAsBase64(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadContentAsBase64(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  id: ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsBase64Async(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsBase64Async
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 293
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the content and returns the Base64 decoded binary bytes.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<int> ReadContentAsBase64Async(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadContentAsBase64Async(buffer As Byte(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadContentAsBase64Async(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  id: ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsBinHex(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsBinHex
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 294
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the content and returns the <strong>BinHex</strong> decoded binary bytes.</p>\n"
  remarks: "\n<p>This method streams the content, decodes the <strong>BinHex</strong> content, and returns the decoded binary bytes (for example, an inline <strong>BinHex</strong> encoded GIF image) into the buffer. This method can be called successively to read large streams of embedded text.</p>\n<p>You should not access any of the reader properties between calls to the <xref href=\"System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method until the method returns the value <strong>0</strong>.</p>\n<p>This method has the following behavior:</p>\n<ul><li>\n<p>\n<xref href=\"System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns the value <strong>0</strong> when it has reached the end of the byte stream it was operating on. The reader is positioned on the first non-content node.</p>\n</li><li>\n<p>If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</p>\n</li><li>\n<p>\n<xref href=\"System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is not supported on the following XML node types: <strong>Element</strong>, <strong>XmlDeclaration</strong>, <strong>None</strong>, <strong>Document</strong>, <strong>DocumentType</strong>, <strong>Notation, Entity</strong>, <strong>DocumentFragment</strong>.</p>\n</li></ul>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public virtual int ReadContentAsBinHex(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadContentAsBinHex(buffer As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> value is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is not supported on the current node.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implementation does not support this method.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  - type: System.Xml.XmlNodeType
    commentId: T:System.Xml.XmlNodeType
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadContentAsBinHex(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadContentAsBinHex(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  id: ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsBinHexAsync(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsBinHexAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 295
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the content and returns the <strong>BinHex</strong> decoded binary bytes.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<int> ReadContentAsBinHexAsync(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadContentAsBinHexAsync(buffer As Byte(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadContentAsBinHexAsync(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadContentAsBoolean
  commentId: M:System.Xml.XmlReader.ReadContentAsBoolean
  id: ReadContentAsBoolean
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsBoolean()
  fullName: System.Xml.XmlReader.ReadContentAsBoolean()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsBoolean
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 296
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a <strong>Boolean</strong>.</p>\n"
  remarks: "\n<p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</p>\n<p>If the content is typed <code>xsd:boolean</code>, the reader returns an unboxed <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object. If the content is not typed <code>xsd:boolean</code>, the reader attempts to convert it to a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>The following table describes how this method treats each node type. </p>\n<p>XmlNodeType</p>\n<p>Return value</p>\n<p>Reader behavior</p>\n<p>For more information, see the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Xml.XmlReader.ReadContentAsBoolean\" data-throw-if-not-resolved=\"false\"></xref> method to read the attribute as a B<strong>oolean</strong> value.</p>XmlReader.ReadContentAs#1<p>The example uses the <strong>dataFile_2.xml</strong> file as input.</p>XmlReader.ReadContentAs#3"
  syntax:
    content: public virtual bool ReadContentAsBoolean()
    content.vb: Public Overridable Function ReadContentAsBoolean As Boolean
    return:
      type: System.Boolean
      description: "\n<p>The text content as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsDateTimeOffset
  commentId: M:System.Xml.XmlReader.ReadContentAsDateTimeOffset
  id: ReadContentAsDateTimeOffset
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsDateTimeOffset()
  fullName: System.Xml.XmlReader.ReadContentAsDateTimeOffset()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsDateTimeOffset
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 297
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual DateTimeOffset ReadContentAsDateTimeOffset()
    content.vb: Public Overridable Function ReadContentAsDateTimeOffset As DateTimeOffset
    return:
      type: System.DateTimeOffset
      description: "\n<p>The text content as a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsDecimal
  commentId: M:System.Xml.XmlReader.ReadContentAsDecimal
  id: ReadContentAsDecimal
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsDecimal()
  fullName: System.Xml.XmlReader.ReadContentAsDecimal()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsDecimal
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 298
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</p>\n<p>If the content is typed <code>xsd:decimal</code>, the reader returns an unboxed <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object. If the content is not typed <code>xsd:decimal</code>, the reader attempts to convert it to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>The following table describes how this method treats each node type. </p>\n<p>XmlNodeType</p>\n<p>Return value</p>\n<p>Reader behavior</p>\n<p>For more information, see the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n"
  example:
  - 
  syntax:
    content: public virtual decimal ReadContentAsDecimal()
    content.vb: Public Overridable Function ReadContentAsDecimal As Decimal
    return:
      type: System.Decimal
      description: "\n<p>The text content at the current position as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsDouble
  commentId: M:System.Xml.XmlReader.ReadContentAsDouble
  id: ReadContentAsDouble
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsDouble()
  fullName: System.Xml.XmlReader.ReadContentAsDouble()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsDouble
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 299
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a double-precision floating-point number.</p>\n"
  remarks: "\n<p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</p>\n<p>If the content is typed <code>xsd:double</code>, the reader returns a double-precision floating-point number. If the content is not typed <code>xsd:double</code>, the reader attempts to convert it to a double-precision floating-point number according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>The following table describes how this method treats each node type. </p>\n<p>XmlNodeType</p>\n<p>Return value</p>\n<p>Reader behavior</p>\n<p>For more information, see the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n"
  example:
  - 
  syntax:
    content: public virtual double ReadContentAsDouble()
    content.vb: Public Overridable Function ReadContentAsDouble As Double
    return:
      type: System.Double
      description: "\n<p>The text content as a double-precision floating-point number.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsFloat
  commentId: M:System.Xml.XmlReader.ReadContentAsFloat
  id: ReadContentAsFloat
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsFloat()
  fullName: System.Xml.XmlReader.ReadContentAsFloat()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsFloat
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 300
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a single-precision floating point number.</p>\n"
  remarks: "\n<p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</p>\n<p>If the content is typed <code>xsd:float</code>, the reader returns an unboxed a single-precision floating point number. If the content is not typed <code>xsd:float</code>, the reader attempts to convert it to a single-precision floating point number according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>The following table describes how this method treats each node type. </p>\n<p>XmlNodeType</p>\n<p>Return value</p>\n<p>Reader behavior</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n"
  example:
  - 
  syntax:
    content: public virtual float ReadContentAsFloat()
    content.vb: Public Overridable Function ReadContentAsFloat As Single
    return:
      type: System.Single
      description: "\n<p>The text content at the current position as a single-precision floating point number.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsInt
  commentId: M:System.Xml.XmlReader.ReadContentAsInt
  id: ReadContentAsInt
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsInt()
  fullName: System.Xml.XmlReader.ReadContentAsInt()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsInt
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 301
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a 32-bit signed integer.</p>\n"
  remarks: "\n<p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</p>\n<p>If the content is typed <code>xsd:integer</code>, the reader returns an unboxed 32-bit signed integer. If the content is not typed <code>xsd:integer</code>, the reader attempts to convert it to a 32-bit signed integer according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>The following table describes how this method treats each node type. </p>\n<p>XmlNodeType</p>\n<p>Return value</p>\n<p>Reader behavior</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n"
  example:
  - 
  syntax:
    content: public virtual int ReadContentAsInt()
    content.vb: Public Overridable Function ReadContentAsInt As Integer
    return:
      type: System.Int32
      description: "\n<p>The text content as a 32-bit signed integer.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsLong
  commentId: M:System.Xml.XmlReader.ReadContentAsLong
  id: ReadContentAsLong
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsLong()
  fullName: System.Xml.XmlReader.ReadContentAsLong()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsLong
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 302
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a 64-bit signed integer.</p>\n"
  remarks: "\n<p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</p>\n<p>If the content is typed <code>xsd:long</code>, the reader returns an unboxed 64-bit signed integer. If the content is not typed <code>xsd:long</code>, the reader attempts to convert it to a 64-bit signed integer according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>The following table describes this method treats each node type. </p>\n<p>XmlNodeType</p>\n<p>Return value</p>\n<p>Reader behavior</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>reference page.</p>\n"
  example:
  - 
  syntax:
    content: public virtual long ReadContentAsLong()
    content.vb: Public Overridable Function ReadContentAsLong As Long
    return:
      type: System.Int64
      description: "\n<p>The text content as a 64-bit signed integer.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsObject
  commentId: M:System.Xml.XmlReader.ReadContentAsObject
  id: ReadContentAsObject
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsObject()
  fullName: System.Xml.XmlReader.ReadContentAsObject()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsObject
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 303
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</p>\n<p>If the content is typed, the reader returns a boxed CLR of the most appropriate type, specified by the <xref href=\"System.Xml.XmlReader.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property. If the content is a list type, the reader returns an array of boxed objects of the appropriate type.</p>\n<p>If a validation error occurs while parsing the content and the reader is an <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object created by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method, the reader returns the content as a string. In other words when a validation error or warning occurs, the content is considered to be untyped.</p>\n<p>If the content is not typed, the reader returns the content as a string.</p>\n<p>The following table describes how this method treats each node type. </p>\n<p>XmlNodeType</p>\n<p>Return value</p>\n<p>Reader behavior</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadContentAsObjectAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public virtual object ReadContentAsObject()
    content.vb: Public Overridable Function ReadContentAsObject As Object
    return:
      type: System.Object
      description: "\n<p>The text content as the most appropriate common language runtime (CLR) object.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsObjectAsync
  commentId: M:System.Xml.XmlReader.ReadContentAsObjectAsync
  id: ReadContentAsObjectAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsObjectAsync()
  fullName: System.Xml.XmlReader.ReadContentAsObjectAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsObjectAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 304
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the text content at the current position as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadContentAsObject\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<object> ReadContentAsObjectAsync()
    content.vb: Public Overridable Function ReadContentAsObjectAsync As Task(Of Object)
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "\n<p>The text content as the most appropriate common language runtime (CLR) object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsString
  commentId: M:System.Xml.XmlReader.ReadContentAsString
  id: ReadContentAsString
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsString()
  fullName: System.Xml.XmlReader.ReadContentAsString()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 305
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method concatenates text, white space, significant white space, and CDATA sections, and skips any comments or processing instructions. Entity references are automatically resolved.</p>\n<p>This method can be used convert typed values to a string, or to read the text content while skipping comments and processing instructions.</p>\n<p>The following table describes how this method treats each node type. </p>\n<p>XmlNodeType</p>\n<p>Return value</p>\n<p>Reader behavior</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadContentAsStringAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public virtual string ReadContentAsString()
    content.vb: Public Overridable Function ReadContentAsString As String
    return:
      type: System.String
      description: "\n<p>The text content as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsStringAsync
  commentId: M:System.Xml.XmlReader.ReadContentAsStringAsync
  id: ReadContentAsStringAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsStringAsync()
  fullName: System.Xml.XmlReader.ReadContentAsStringAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsStringAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 306
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the text content at the current position as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadContentAsString\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<string> ReadContentAsStringAsync()
    content.vb: Public Overridable Function ReadContentAsStringAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The text content as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  commentId: M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  id: ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAs(Type, IXmlNamespaceResolver)
  fullName: System.Xml.XmlReader.ReadElementContentAs(System.Type, System.Xml.IXmlNamespaceResolver)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAs
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 307
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the element content as the requested type.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)\" data-throw-if-not-resolved=\"false\"></xref> method to read the content of the <code>date</code> node.</p>XmlReader.ReadElementContentAs#5<p>The example uses the <strong>dataFile.xml</strong> file as input.</p>XmlReader.ReadElementContentAs#8"
  syntax:
    content: public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
    content.vb: Public Overridable Function ReadElementContentAs(returnType As Type, namespaceResolver As IXmlNamespaceResolver) As Object
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The type of the value to be returned.</p>\n<p>Note   With the release of the .NET Framework 3.5, the value of the <em>returnType</em> parameter can now be the <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
    - id: namespaceResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "\n<p>An <xref href=\"System.Xml.IXmlNamespaceResolver\" data-throw-if-not-resolved=\"false\"></xref> object that is used to resolve any namespace prefixes related to type conversion.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The element content converted to the requested typed object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to the requested type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>Read <strong>Decimal.MaxValue</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)
  id: ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAs(Type, IXmlNamespaceResolver, String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAs(System.Type, System.Xml.IXmlNamespaceResolver, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAs
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 308
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n"
  example:
  - 
  syntax:
    content: public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAs(returnType As Type, namespaceResolver As IXmlNamespaceResolver, localName As String, namespaceURI As String) As Object
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The type of the value to be returned.</p>\n<p>Note   With the release of the .NET Framework 3.5, the value of the <em>returnType</em> parameter can now be the <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
    - id: namespaceResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "\n<p>An <xref href=\"System.Xml.IXmlNamespaceResolver\" data-throw-if-not-resolved=\"false\"></xref> object that is used to resolve any namespace prefixes related to type conversion.</p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The element content converted to the requested typed object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to the requested type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>Read <strong>Decimal.MaxValue</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  id: ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsAsync(Type, IXmlNamespaceResolver)
  fullName: System.Xml.XmlReader.ReadElementContentAsAsync(System.Type, System.Xml.IXmlNamespaceResolver)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 309
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the element content as the requested type.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
    content.vb: Public Overridable Function ReadElementContentAsAsync(returnType As Type, namespaceResolver As IXmlNamespaceResolver) As Task(Of Object)
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The type of the value to be returned.</p>\n"
    - id: namespaceResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "\n<p>An <xref href=\"System.Xml.IXmlNamespaceResolver\" data-throw-if-not-resolved=\"false\"></xref> object that is used to resolve any namespace prefixes related to type conversion.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "\n<p>The element content converted to the requested typed object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  id: ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsBase64(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsBase64
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 310
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the element and decodes the <strong>Base64</strong> content.</p>\n"
  remarks: "\n<p>This method reads the element content, decodes it using <strong>Base64</strong> encoding, and returns the decoded binary bytes (for example, an inline <strong>Base64</strong>-encoded GIF image) into the buffer. For more information, see RFC 1521, \"MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies\". You can obtain RFCs from the <see href=\"http://go.microsoft.com/fwlink/?LinkId=37119\">Request for Comments Web site</see>.</p>\n<p>\n<xref href=\"System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.</p>\n<p>This method is very similar to the <xref href=\"System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method except that it can only be called on element node types.</p>\n<p>If the <em>count</em> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reads all the remaining bytes in the document and returns the number of bytes read. The next <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method call returns a zero and moves the reader to the node following the <strong>EndElement</strong>. </p>\n<p>If you call <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method was called. This means that the reader will read all the text until the end element is encountered. It will then read the end tag node, read the next node, and then position itself on the next subsequent node.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example reads an inline <strong>Base64</strong> encoded image. The <strong>Base64</strong> data is embedded within the <code><image></code> element. A <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> is used to create a new binary data file.</p>XmlReader_Read_Write_Binary#4"
  syntax:
    content: public virtual int ReadElementContentAsBase64(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadElementContentAsBase64(buffer As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> value is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current node is not an element node.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implementation does not support this method.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The element contains mixed-content.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The content cannot be converted to the requested type.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadElementContentAsBase64(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  id: ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsBase64Async(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsBase64Async
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 311
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the element and decodes the <strong>Base64</strong> content.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<int> ReadElementContentAsBase64Async(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadElementContentAsBase64Async(buffer As Byte(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadElementContentAsBase64Async(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  id: ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsBinHex(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsBinHex
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 312
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the element and decodes the <strong>BinHex</strong> content.</p>\n"
  remarks: "\n<p>This method reads the element content, decodes it using <strong>BinHex</strong> encoding, and returns the decoded binary bytes (for example, an inline <strong>BinHex</strong>-encoded GIF image) into the buffer.</p>\n<p>This method can only read simple-content elements. The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions. It can also contain entity references, which are automatically expanded. The element cannot have child elements.</p>\n<p>This method is very similar to the <xref href=\"System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method except that it can only be called on element node types.</p>\n<p>If the <em>count</em> value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reads all the remaining bytes in the document and returns the number of bytes read. The next <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method call returns a zero and moves the reader to the node following the <strong>EndElement</strong>. </p>\n<p>If you call <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method was called. This means that the reader will read all the text until the end element is encountered. It will then read the end tag node, read the next node, and then position itself on the next subsequent node.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example reads an inline <strong>BinHex</strong> encoded image. The <strong>BinHex</strong> data is embedded within the <code><image></code> element. A <xref href=\"System.IO.BinaryWriter\" data-throw-if-not-resolved=\"false\"></xref> is used to create a new binary data file.</p>XmlReader_Read_Write_Binary#2"
  syntax:
    content: public virtual int ReadElementContentAsBinHex(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadElementContentAsBinHex(buffer As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> value is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current node is not an element node.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implementation does not support this method.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The element contains mixed-content.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The content cannot be converted to the requested type.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadElementContentAsBinHex(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  id: ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsBinHexAsync(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsBinHexAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 313
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the element and decodes the <strong>BinHex</strong> content.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<int> ReadElementContentAsBinHexAsync(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadElementContentAsBinHexAsync(buffer As Byte(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadElementContentAsBinHexAsync(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadElementContentAsBoolean
  commentId: M:System.Xml.XmlReader.ReadElementContentAsBoolean
  id: ReadElementContentAsBoolean
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsBoolean()
  fullName: System.Xml.XmlReader.ReadElementContentAsBoolean()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsBoolean
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 314
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>If the element content is typed <code>xsd:boolean</code>, the reader returns an unboxed <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object. If the content is not typed <code>xsd:boolean</code>, the reader attempts to convert it to a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool ReadElementContentAsBoolean()
    content.vb: Public Overridable Function ReadElementContentAsBoolean As Boolean
    return:
      type: System.Boolean
      description: "\n<p>The element content as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)
  id: ReadElementContentAsBoolean(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsBoolean(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsBoolean(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsBoolean
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 315
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>If the content is typed <code>xsd:boolean</code>, the reader returns an unboxed <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object. If the content is not typed <code>xsd:boolean</code>, the reader attempts to convert it to a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsBoolean(localName As String, namespaceURI As String) As Boolean
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The element content as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to the requested type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsDecimal
  commentId: M:System.Xml.XmlReader.ReadElementContentAsDecimal
  id: ReadElementContentAsDecimal
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsDecimal()
  fullName: System.Xml.XmlReader.ReadElementContentAsDecimal()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsDecimal
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 316
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>The reader attempts to convert the element content to an <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - 
  syntax:
    content: public virtual decimal ReadElementContentAsDecimal()
    content.vb: Public Overridable Function ReadElementContentAsDecimal As Decimal
    return:
      type: System.Decimal
      description: "\n<p>The element content as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)
  id: ReadElementContentAsDecimal(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsDecimal(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsDecimal(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsDecimal
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 317
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>The reader attempts to convert the element content to an <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - 
  syntax:
    content: public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsDecimal(localName As String, namespaceURI As String) As Decimal
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The element content as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsDouble
  commentId: M:System.Xml.XmlReader.ReadElementContentAsDouble
  id: ReadElementContentAsDouble
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsDouble()
  fullName: System.Xml.XmlReader.ReadElementContentAsDouble()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsDouble
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 318
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as a double-precision floating-point number.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>If the content is typed <code>xsd:double</code>, the reader returns a double-precision floating-point number. If the content is not typed <code>xsd:double</code>, the reader attempts to convert it to a double-precision floating-point number according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - "\n<p>The following example uses the method to return the element content as a double-precision floating-point number.</p>XmlReader.ReadElementContentAs#7<p>The example uses the <strong>dataFile.xml</strong> file as input.</p>XmlReader.ReadElementContentAs#8"
  syntax:
    content: public virtual double ReadElementContentAsDouble()
    content.vb: Public Overridable Function ReadElementContentAsDouble As Double
    return:
      type: System.Double
      description: "\n<p>The element content as a double-precision floating-point number.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a double-precision floating-point number.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)
  id: ReadElementContentAsDouble(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsDouble(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsDouble(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsDouble
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 319
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>If the content is typed <code>xsd:double</code>, the reader returns a double-precision floating-point number. If the content is not typed <code>xsd:double</code>, the reader attempts to convert it to a double-precision floating-point number according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - 
  syntax:
    content: public virtual double ReadElementContentAsDouble(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsDouble(localName As String, namespaceURI As String) As Double
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The element content as a double-precision floating-point number.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to the requested type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsFloat
  commentId: M:System.Xml.XmlReader.ReadElementContentAsFloat
  id: ReadElementContentAsFloat
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsFloat()
  fullName: System.Xml.XmlReader.ReadElementContentAsFloat()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsFloat
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 320
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as single-precision floating-point number.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>The reader attempts to convert the element content to a single-precision floating point number according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - 
  syntax:
    content: public virtual float ReadElementContentAsFloat()
    content.vb: Public Overridable Function ReadElementContentAsFloat As Single
    return:
      type: System.Single
      description: "\n<p>The element content as a single-precision floating point number.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a single-precision floating-point number.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)
  id: ReadElementContentAsFloat(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsFloat(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsFloat(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsFloat
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 321
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>The reader attempts to convert the element content to a single-precision floating point number according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - 
  syntax:
    content: public virtual float ReadElementContentAsFloat(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsFloat(localName As String, namespaceURI As String) As Single
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The element content as a single-precision floating point number.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a single-precision floating-point number.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsInt
  commentId: M:System.Xml.XmlReader.ReadElementContentAsInt
  id: ReadElementContentAsInt
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsInt()
  fullName: System.Xml.XmlReader.ReadElementContentAsInt()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsInt
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 322
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as a 32-bit signed integer.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>If the content is typed <code>xsd:integer</code>, the reader returns an unboxed 32-bit signed integer. If the content is not typed <code>xsd:integer</code>, the reader attempts to convert it to a 32-bit signed integer according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - 
  syntax:
    content: public virtual int ReadElementContentAsInt()
    content.vb: Public Overridable Function ReadElementContentAsInt As Integer
    return:
      type: System.Int32
      description: "\n<p>The element content as a 32-bit signed integer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a 32-bit signed integer.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)
  id: ReadElementContentAsInt(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsInt(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsInt(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsInt
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 323
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>If the content is typed <code>xsd:integer</code>, the reader returns an unboxed 32-bit signed integer. If the content is not typed <code>xsd:integer</code>, the reader attempts to convert it to a 32-bit signed integer according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - 
  syntax:
    content: public virtual int ReadElementContentAsInt(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsInt(localName As String, namespaceURI As String) As Integer
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The element content as a 32-bit signed integer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a 32-bit signed integer.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsLong
  commentId: M:System.Xml.XmlReader.ReadElementContentAsLong
  id: ReadElementContentAsLong
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsLong()
  fullName: System.Xml.XmlReader.ReadElementContentAsLong()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsLong
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 324
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as a 64-bit signed integer.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>If the content is typed <code>xsd:long</code>, the reader returns an unboxed 64-bit signed integer. If the content is not typed <code>xsd:long</code>, the reader attempts to convert it to a 64-bit signed integer according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - "\n<p>The following example uses the <xref href=\"System.Xml.XmlReader.ReadElementContentAsLong\" data-throw-if-not-resolved=\"false\"></xref> method to read the content of the <code>longValue</code> element.</p>XmlReader.ReadElementContentAs#3<p>The example uses the <strong>dataFile.xml</strong> file as input.</p>XmlReader.ReadElementContentAs#8"
  syntax:
    content: public virtual long ReadElementContentAsLong()
    content.vb: Public Overridable Function ReadElementContentAsLong As Long
    return:
      type: System.Int64
      description: "\n<p>The element content as a 64-bit signed integer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a 64-bit signed integer.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)
  id: ReadElementContentAsLong(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsLong(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsLong(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsLong
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 325
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>If the content is typed <code>xsd:long</code>, the reader returns an unboxed 64-bit signed integer. If the content is not typed <code>xsd:long</code>, the reader attempts to convert it to a 64-bit signed integer according to the rules defined by the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page.</p>\n"
  example:
  - 
  syntax:
    content: public virtual long ReadElementContentAsLong(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsLong(localName As String, namespaceURI As String) As Long
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The element content as a 64-bit signed integer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a 64-bit signed integer.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsObject
  commentId: M:System.Xml.XmlReader.ReadElementContentAsObject
  id: ReadElementContentAsObject
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsObject()
  fullName: System.Xml.XmlReader.ReadElementContentAsObject()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsObject
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 326
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadElementContentAsObjectAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example uses the method to read the content of the <code>price</code> node. The reader uses the information in the schema to map the content to the correct data type.</p>XmlReader.ReadElementContentAs#6<p>The example uses the following two files as input.</p><p><strong>item.xml</strong></p>XmlReader.ReadElementContentAs#11<p><strong>item.xsd</strong></p>XmlReader.ReadElementContentAs#12"
  syntax:
    content: public virtual object ReadElementContentAsObject()
    content.vb: Public Overridable Function ReadElementContentAsObject As Object
    return:
      type: System.Object
      description: "\n<p>A boxed common language runtime (CLR) object of the most appropriate type. The <xref href=\"System.Xml.XmlReader.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to the requested type</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)
  id: ReadElementContentAsObject(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsObject(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsObject(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsObject
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 327
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n"
  example:
  - 
  syntax:
    content: public virtual object ReadElementContentAsObject(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsObject(localName As String, namespaceURI As String) As Object
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Object
      description: "\n<p>A boxed common language runtime (CLR) object of the most appropriate type. The <xref href=\"System.Xml.XmlReader.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to the requested type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsObjectAsync
  commentId: M:System.Xml.XmlReader.ReadElementContentAsObjectAsync
  id: ReadElementContentAsObjectAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsObjectAsync()
  fullName: System.Xml.XmlReader.ReadElementContentAsObjectAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsObjectAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 328
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the current element and returns the contents as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadElementContentAsObject\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<object> ReadElementContentAsObjectAsync()
    content.vb: Public Overridable Function ReadElementContentAsObjectAsync As Task(Of Object)
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "\n<p>A boxed common language runtime (CLR) object of the most appropriate type. The <xref href=\"System.Xml.XmlReader.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsString
  commentId: M:System.Xml.XmlReader.ReadElementContentAsString
  id: ReadElementContentAsString
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsString()
  fullName: System.Xml.XmlReader.ReadElementContentAsString()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 329
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadElementContentAsStringAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example reads the <code>stringValue</code> element and returns the text content (ignoring the comment and processing instruction).</p>XmlReader.ReadElementContentAs#1<p>The example uses the <strong>dataFile.xml</strong> file as input.</p>XmlReader.ReadElementContentAs#8"
  syntax:
    content: public virtual string ReadElementContentAsString()
    content.vb: Public Overridable Function ReadElementContentAsString As String
    return:
      type: System.String
      description: "\n<p>The element content as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)
  id: ReadElementContentAsString(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsString(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsString(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 330
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method reads the start tag, the contents of the element, and moves the reader past the end element tag. It expands entities and ignores processing instructions and comments. The element can only contain simple content. That is, it cannot have child elements.</p>\n<p>For more information, see the Remarks section of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> reference page and the <see href=\"http://go.microsoft.com/fwlink/?LinkId=4871\">W3C XML Schema Part 2: Datatypes</see> recommendation.</p>\n"
  example:
  - "\n<p>The following example reads the <code>stringValue</code> element and returns the text content (ignoring the comment and processing instruction).</p>XmlReader.ReadElementContentAs#2<p>The example uses the <strong>dataFile.xml</strong> file as input.</p>XmlReader.ReadElementContentAs#8"
  syntax:
    content: public virtual string ReadElementContentAsString(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsString(localName As String, namespaceURI As String) As String
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.String
      description: "\n<p>The element content as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsStringAsync
  commentId: M:System.Xml.XmlReader.ReadElementContentAsStringAsync
  id: ReadElementContentAsStringAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsStringAsync()
  fullName: System.Xml.XmlReader.ReadElementContentAsStringAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsStringAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 331
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the current element and returns the contents as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadElementContentAsString\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<string> ReadElementContentAsStringAsync()
    content.vb: Public Overridable Function ReadElementContentAsStringAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The element content as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadEndElement
  commentId: M:System.Xml.XmlReader.ReadEndElement
  id: ReadEndElement
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadEndElement()
  fullName: System.Xml.XmlReader.ReadEndElement()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadEndElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 332
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the current content node is an end tag and advances the reader to the next node.</p>\n"
  example:
  - "\n<p>The following example displays the text content of each element.</p>XmlReaderBasic#11<p>The example uses the <strong>book3.xml</strong> file.</p>XML_Core_Files#6"
  syntax:
    content: public virtual void ReadEndElement()
    content.vb: Public Overridable Sub ReadEndElement
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current node is not an end tag or if incorrect XML is encountered in the input stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.ReadStartElement
    commentId: M:System.Xml.XmlReader.ReadStartElement
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadInnerXml
  commentId: M:System.Xml.XmlReader.ReadInnerXml
  id: ReadInnerXml
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadInnerXml()
  fullName: System.Xml.XmlReader.ReadInnerXml()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadInnerXml
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 333
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, reads all the content, including markup, as a string.</p>\n"
  remarks: "\n<p>This method returns all the content of the current node including the markup. The current node (start tag) and corresponding end node (end tag) are not returned. For example, if you had the following: </p>\n<pre><code> <node>\nthis <child id=\"123\"/>\n</node></code></pre>\n<p>\n<strong>ReadInnerXml</strong> returns <code>this <child id=\"123\"/></code></p>\n<p>This method handles element and attribute nodes in the following manner: </p>\n<p>Node type </p>\n<p>Position before the call </p>\n<p>XML fragment </p>\n<p>Return value </p>\n<p>Position after the call </p>\n<p>If the reader is positioned on a leaf node, calling <strong>ReadInnerXml</strong> is equivalent to calling <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref>. The method returns <strong>String.Empty</strong> (except for attribute nodes, in which case the value of the attribute is returned).</p>\n<p>This method checks for well-formed XML. If <strong>ReadInnerXml</strong> is called from an <xref href=\"System.Xml.XmlValidatingReader\" data-throw-if-not-resolved=\"false\"></xref>, this method also validates the content returned.</p>\n<p>As implemented in the <xref href=\"System.Xml.XmlNodeReader\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlTextReader\" data-throw-if-not-resolved=\"false\"></xref> and <strong>XmlValidatingReader</strong> classes the <strong>ReadOuterXml</strong> method is namespace aware.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadInnerXmlAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example compares the <strong>ReadInnerXml</strong> and <xref href=\"System.Xml.XmlReader.ReadOuterXml\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>XmlReaderBasic#12<p>The example uses <strong>2books.xml</strong> file as input.</p>XML_Core_Files#7"
  syntax:
    content: public virtual string ReadInnerXml()
    content.vb: Public Overridable Function ReadInnerXml As String
    return:
      type: System.String
      description: "\n<p>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</p>\n<p>If the current node is neither an element nor attribute, an empty string is returned.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The XML was not well-formed, or an error occurred while parsing the XML.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadInnerXmlAsync
  commentId: M:System.Xml.XmlReader.ReadInnerXmlAsync
  id: ReadInnerXmlAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadInnerXmlAsync()
  fullName: System.Xml.XmlReader.ReadInnerXmlAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadInnerXmlAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 334
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads all the content, including markup, as a string.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadInnerXml\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<string> ReadInnerXmlAsync()
    content.vb: Public Overridable Function ReadInnerXmlAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadOuterXml
  commentId: M:System.Xml.XmlReader.ReadOuterXml
  id: ReadOuterXml
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadOuterXml()
  fullName: System.Xml.XmlReader.ReadOuterXml()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadOuterXml
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 335
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</p>\n"
  remarks: "\n<p>This method is similar to <xref href=\"System.Xml.XmlReader.ReadInnerXml\" data-throw-if-not-resolved=\"false\"></xref> except it also returns the start and end tags.</p>\n<p>This method handles element and attribute nodes in the following manner: </p>\n<p>Node type </p>\n<p>Position before the call </p>\n<p>XML fragment </p>\n<p>Return value </p>\n<p>Position After the Call </p>\n<p>If the reader is positioned on a leaf node, calling <strong>ReadOuterXml</strong> is equivalent to calling <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref>. The method returns <strong>String.Empty</strong> (except for attribute nodes, in which case the attribute markup is returned).</p>\n<p>This method checks for well-formed XML. If <strong>ReadOuterXml</strong> is called from an <xref href=\"System.Xml.XmlValidatingReader\" data-throw-if-not-resolved=\"false\"></xref>, this method also validates the content returned </p>\n<p>As implemented in the <xref href=\"System.Xml.XmlNodeReader\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlTextReader\" data-throw-if-not-resolved=\"false\"></xref> and <strong>XmlValidatingReader</strong> classes the <strong>ReadOuterXml</strong> method is namespace aware. Given the following XML text <code><A xmlns:S=\"urn:1\"><S:B>hello</S:B></A></code>, if the reader were positioned on the <strong>S:B</strong> start tag, <strong>ReadOuterXml</strong> returns <code><S:B xmlns:S=\"urn:1\">hello<S:B/></code>.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadOuterXmlAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example compares the <strong>ReadInnerXml</strong> and <strong>ReadOuterXml</strong> methods.</p>XmlReaderBasic#12<p>The example uses <strong>2books.xml</strong> file as input.</p>XML_Core_Files#7"
  syntax:
    content: public virtual string ReadOuterXml()
    content.vb: Public Overridable Function ReadOuterXml As String
    return:
      type: System.String
      description: "\n<p>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The XML was not well-formed, or an error occurred while parsing the XML.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadOuterXmlAsync
  commentId: M:System.Xml.XmlReader.ReadOuterXmlAsync
  id: ReadOuterXmlAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadOuterXmlAsync()
  fullName: System.Xml.XmlReader.ReadOuterXmlAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadOuterXmlAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 336
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the content, including markup, representing this node and all its children.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadOuterXml\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<string> ReadOuterXmlAsync()
    content.vb: Public Overridable Function ReadOuterXmlAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadStartElement
  commentId: M:System.Xml.XmlReader.ReadStartElement
  id: ReadStartElement
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadStartElement()
  fullName: System.Xml.XmlReader.ReadStartElement()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 337
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the current node is an element and advances the reader to the next node.</p>\n"
  remarks: "\n<p>This method calls <xref href=\"System.Xml.XmlReader.IsStartElement\" data-throw-if-not-resolved=\"false\"></xref> followed by <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> to position you on the content of that element found in the input stream.</p>\n"
  syntax:
    content: public virtual void ReadStartElement()
    content.vb: Public Overridable Sub ReadStartElement
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML was encountered in the input stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.ReadEndElement
    commentId: M:System.Xml.XmlReader.ReadEndElement
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadStartElement(System.String)
  commentId: M:System.Xml.XmlReader.ReadStartElement(System.String)
  id: ReadStartElement(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadStartElement(String)
  fullName: System.Xml.XmlReader.ReadStartElement(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 338
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the current content node is an element with the given <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref> and advances the reader to the next node.</p>\n"
  remarks: "\n<p>A call to this method corresponds to a call to <xref href=\"System.Xml.XmlReader.IsStartElement\" data-throw-if-not-resolved=\"false\"></xref> followed by a call to <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example displays the text content of each element.</p>XmlReaderBasic#11<p>The example uses the <strong>book3.xml</strong> file.</p>XML_Core_Files#6"
  syntax:
    content: public virtual void ReadStartElement(string name)
    content.vb: Public Overridable Sub ReadStartElement(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the element.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML was encountered in the input stream. </p>\n<p>-or- </p>\n<p>The <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref> of the element does not match the given <em>name</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.ReadEndElement
    commentId: M:System.Xml.XmlReader.ReadEndElement
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadStartElement(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)
  id: ReadStartElement(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadStartElement(String, String)
  fullName: System.Xml.XmlReader.ReadStartElement(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 339
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the current content node is an element with the given <xref href=\"System.Xml.XmlReader.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref> and advances the reader to the next node.</p>\n"
  remarks: "\n<p>A call to this method corresponds to a call to <xref href=\"System.Xml.XmlReader.IsStartElement\" data-throw-if-not-resolved=\"false\"></xref> followed by a call to <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void ReadStartElement(string localname, string ns)
    content.vb: Public Overridable Sub ReadStartElement(localname As String, ns As String)
    parameters:
    - id: localname
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML was encountered in the input stream.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Xml.XmlReader.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref> properties of the element found do not match the given arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.XmlReader.ReadEndElement
    commentId: M:System.Xml.XmlReader.ReadEndElement
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadSubtree
  commentId: M:System.Xml.XmlReader.ReadSubtree
  id: ReadSubtree
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadSubtree()
  fullName: System.Xml.XmlReader.ReadSubtree()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadSubtree
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 340
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Returns a new <strong>XmlReader</strong> instance that can be used to read the current node, and all its descendants.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Xml.XmlReader.ReadSubtree\" data-throw-if-not-resolved=\"false\"></xref> can be called only on element nodes. When the entire sub-tree has been read, calls to the <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>false</strong>. When the new XML reader has been closed, the original readeris positioned on the <strong>EndElement</strong> node of the sub-tree. Thus, if you called the <xref href=\"System.Xml.XmlReader.ReadSubtree\" data-throw-if-not-resolved=\"false\"></xref> method on the start tag of the book element, after the sub-tree has been read and the new XML reader has been closed, the original XML reader is positioned on the end tag of the book element.</p>\n<p>You should not perform any operations on the original reader until the new reader has been closed. This action is not supported and can result in unpredictable behavior.</p>\n<p>The <xref href=\"System.Xml.XmlReader.ReadSubtree\" data-throw-if-not-resolved=\"false\"></xref> method isn't intended for creatingcopies of the XML data that you can work with independently. It's designedto create a boundary around an XML element. This is useful if you want to pass data to another component for processing and you wish to limit how much of your data the component can access. When you pass an XML reader returned by the <xref href=\"System.Xml.XmlReader.ReadSubtree\" data-throw-if-not-resolved=\"false\"></xref> method to another application, the application can access only that XML element, not the entire XML document.</p>\n"
  example:
  - "\n<p>The following example shows how to use the <xref href=\"System.Xml.XmlReader.ReadSubtree\" data-throw-if-not-resolved=\"false\"></xref> method.</p>XmlReaderBasic#13<p>Use the following XML data to run the examples in this topic:</p><pre><code><?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<Books>\n<Book>\n<Title>A Brief History of Time</Title>\n</Book>\n<Book>\n<Title>Principle Of Relativity</Title>\n</Book>\n<Book>\n<Title>Victory of Reason</Title>\n</Book>\n<Book>\n<Title>The Unicorn that did not Fail</Title>\n</Book>\n<Book>\n<Title>Rational Ontology</Title>\n</Book>\n<Book>\n<Title>The Meaning of Pizza</Title>\n</Book>\n</Books></code></pre>"
  syntax:
    content: public virtual XmlReader ReadSubtree()
    content.vb: Public Overridable Function ReadSubtree As XmlReader
    return:
      type: System.Xml.XmlReader
      description: "\n<p>A new XML reader instance set to <xref href=\"System.Xml.ReadState.Initial\" data-throw-if-not-resolved=\"false\"></xref>. Calling the <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method positions the new reader on the node that was current before the call to the <xref href=\"System.Xml.XmlReader.ReadSubtree\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The XML reader isn't positioned on an element when this method is called.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadToDescendant(System.String)
  commentId: M:System.Xml.XmlReader.ReadToDescendant(System.String)
  id: ReadToDescendant(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadToDescendant(String)
  fullName: System.Xml.XmlReader.ReadToDescendant(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToDescendant
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 341
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Advances the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to the next descendant element with the specified qualified name.</p>\n"
  example:
  - "\n<p>The following example parses the second book node.</p>XmlReaderBasic#14<p>The example uses the file, <strong>2books.xml</strong>, as input.</p>XML_Core_Files#7"
  syntax:
    content: public virtual bool ReadToDescendant(string name)
    content.vb: Public Overridable Function ReadToDescendant(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the element you wish to move to.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching descendant element is found; otherwise <strong>false</strong>. If a matching child element is not found, the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is positioned on the end tag (<xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> is <strong>XmlNodeType.EndElement</strong>) of the element.</p>\n<p>If the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element when <xref href=\"System.Xml.XmlReader.ReadToDescendant(System.String)\" data-throw-if-not-resolved=\"false\"></xref> was called, this method returns <strong>false</strong> and the position of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not changed.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The parameter is an empty string.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadToDescendant(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)
  id: ReadToDescendant(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadToDescendant(String, String)
  fullName: System.Xml.XmlReader.ReadToDescendant(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToDescendant
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 342
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Advances the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to the next descendant element with the specified local name and namespace URI.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool ReadToDescendant(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadToDescendant(localName As String, namespaceURI As String) As Boolean
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element you wish to move to.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element you wish to move to.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching descendant element is found; otherwise <strong>false</strong>. If a matching child element is not found, the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is positioned on the end tag (<xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> is <strong>XmlNodeType.EndElement</strong>) of the element.</p>\n<p>If the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element when <xref href=\"System.Xml.XmlReader.ReadToDescendant(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> was called, this method returns <strong>false</strong> and the position of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not changed.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Both parameter values are <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadToFollowing(System.String)
  commentId: M:System.Xml.XmlReader.ReadToFollowing(System.String)
  id: ReadToFollowing(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadToFollowing(String)
  fullName: System.Xml.XmlReader.ReadToFollowing(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToFollowing
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 343
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads until an element with the specified qualified name is found.</p>\n"
  remarks: "\n<p>This method is functionally equivalent executing the <code>following::name</code> XPath expression from the current node. It provides a quick way to find a named element in the XML document. It advances the reader to the next following element that matches the specified name and returns <strong>true</strong> if a matching element is found. Using the example below, the reader would read to the first instance of the specified element while reading forward.</p>\n<pre><code class=\"xml\"><!--\"sample.xml\"-->\n<?xmlversion=\"1.0\">\n<items>\n<item xmls=\"urn:1\"/>\n</items>\n</xml></code></pre>\n<pre><code class=\"c#\">XmlTextReader reader = newXmlTextReader(\"sample.xml\");\n\nreader.ReadToFollowing(\"item\");</code></pre>\n<p>This method can be called on all node types.</p>\n"
  syntax:
    content: public virtual bool ReadToFollowing(string name)
    content.vb: Public Overridable Function ReadToFollowing(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the element.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching element is found; otherwise <strong>false</strong> and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is in an end of file state.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The parameter is an empty string.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadToFollowing(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)
  id: ReadToFollowing(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadToFollowing(String, String)
  fullName: System.Xml.XmlReader.ReadToFollowing(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToFollowing
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 344
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads until an element with the specified local name and namespace URI is found.</p>\n"
  remarks: "\n<p>This method is functionally equivalent executing the <code>following::name</code> XPath expression from the current node. It provides a quick way to find a named element in the XML document. It advances the reader to the next following element that matches the specified name and returns <strong>true</strong> if a matching element is found.</p>\n<pre><code class=\"xml\"><!--\"sample.xml\"-->\n<?xmlversion=\"1.0\">\n<items>\n<item xmls=\"urn:1\"/>\n</items>\n</xml></code></pre>\n<pre><code class=\"c#\">XmlTextReader reader = newXmlTextReader(\"sample.xml\");\n\nreader.ReadToFollowing(\"item\", \"urn:1\");</code></pre>\n<p>This method can be called on all node types.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool ReadToFollowing(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadToFollowing(localName As String, namespaceURI As String) As Boolean
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching element is found; otherwise <strong>false</strong> and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is in an end of file state.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Both parameter values are <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadToNextSibling(System.String)
  commentId: M:System.Xml.XmlReader.ReadToNextSibling(System.String)
  id: ReadToNextSibling(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadToNextSibling(String)
  fullName: System.Xml.XmlReader.ReadToNextSibling(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToNextSibling
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 345
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Advances the <strong>XmlReader</strong> to the next sibling element with the specified qualified name.</p>\n"
  remarks: "\n<p>Do not call <xref href=\"System.Xml.XmlReader.ReadToNextSibling(System.String)\" data-throw-if-not-resolved=\"false\"></xref> when the <strong>XmlReader</strong> is an initial state (<xref href=\"System.Xml.XmlReader.ReadState\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Xml.ReadState.Initial\" data-throw-if-not-resolved=\"false\"></xref>). You can call <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> to advance the <strong>XmlReader</strong> and then call the <xref href=\"System.Xml.XmlReader.ReadToNextSibling(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - "\n<p>The following example reads the ISBN attribute on each book node.</p>XmlReaderBasic#15"
  syntax:
    content: public virtual bool ReadToNextSibling(string name)
    content.vb: Public Overridable Function ReadToNextSibling(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the sibling element you wish to move to.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching sibling element is found; otherwise <strong>false</strong>. If a matching sibling element is not found, the <strong>XmlReader</strong> is positioned on the end tag (<xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> is <strong>XmlNodeType.EndElement</strong>) of the parent element.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The parameter is an empty string.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)
  id: ReadToNextSibling(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadToNextSibling(String, String)
  fullName: System.Xml.XmlReader.ReadToNextSibling(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToNextSibling
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 346
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Advances the <strong>XmlReader</strong> to the next sibling element with the specified local name and namespace URI.</p>\n"
  remarks: "\n<p>Do not call <xref href=\"System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> when the <strong>XmlReader</strong> is an initial state (<xref href=\"System.Xml.XmlReader.ReadState\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Xml.ReadState.Initial\" data-throw-if-not-resolved=\"false\"></xref>). You can call <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> to advance the <strong>XmlReader</strong> and then call the <xref href=\"System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  example:
  - 
  syntax:
    content: public virtual bool ReadToNextSibling(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadToNextSibling(localName As String, namespaceURI As String) As Boolean
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the sibling element you wish to move to.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the sibling element you wish to move to.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching sibling element is found; otherwise, <strong>false</strong>. If a matching sibling element is not found, the <strong>XmlReader</strong> is positioned on the end tag (<xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> is <strong>XmlNodeType.EndElement</strong>) of the parent element.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Both parameter values are <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)
  id: ReadValueChunk(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadValueChunk(Char[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadValueChunk(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadValueChunk
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 347
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads large streams of text embedded in an XML document.</p>\n"
  remarks: "\n<p>This method enables reading of very large streams of text embedded in an XML document in a streaming fashion, that is, a small number of characters at a time instead of allocating a single string for the whole value. This method can be called on any node that has a value (<xref href=\"System.Xml.XmlReader.HasValue\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>), however actual streaming of the node value only occurs when called on a text, white space and significant white space nodes. Other node type values are cached, including attributes and CDATA nodes.</p>\n<p>This method returns only the content of the <xref href=\"System.Xml.XmlReader.Value\" data-throw-if-not-resolved=\"false\"></xref> property and does not move the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This method reads the specified number of characters (<em>count</em>) of the node value into a character buffer (<em>buffer</em>) at a specified offset (<em>index</em>) and returns the number of characters written to the buffer. It returns the <strong>0</strong> when it has reached the end of the value. It cannot be restarted to read through the value again.</p>\n<p>In between calls to <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> properties do no change except for the <xref href=\"System.Xml.XmlReader.Value\" data-throw-if-not-resolved=\"false\"></xref> property. When the <xref href=\"System.Xml.XmlReader.Value\" data-throw-if-not-resolved=\"false\"></xref> property is accessed it may either return a partial value (with characters not yet returned by <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>) or a full value depending on the implementation. All the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implementations in the <xref href=\"System.Xml\" data-throw-if-not-resolved=\"false\"></xref> namespace return a partial value for the <xref href=\"System.Xml.XmlReader.Value\" data-throw-if-not-resolved=\"false\"></xref> property implementation.</p>\n<p>Any Read method can be called in between calls to <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. If this occurs, the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> moves to the next <xref href=\"System.Xml.XmlNodeType\" data-throw-if-not-resolved=\"false\"></xref> in the stream and any characters not yet returned are skipped. </p>\n<p>There may be a case when <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> returns less than the requested number of characters. For example, if you had a 200-character long value with a surrogate pair at positions 127 and 128 and you called <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> with a 128-character buffer, the method call would return 127 characters instead of the requested 128. The surrogate pair would then be returned in the next <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> call. In this case, <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> did not return the requested 128 characters because doing so would have resulted in an incomplete surrogate pair at the end of the buffer.</p>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - 
  syntax:
    content: public virtual int ReadValueChunk(char[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadValueChunk(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>The array of characters that serves as the buffer to which the text contents are written. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset within the buffer where the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can start to copy the results.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters read into the buffer. The value zero is returned when there is no more text content.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current node does not have a value (<xref href=\"System.Xml.XmlReader.HasValue\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>).</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> value is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The index into the buffer, or index + count is larger than the allocated buffer size.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implementation does not support this method.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The XML data is not well-formed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadValueChunk(System.Char(), System.Int32, System.Int32)
  name.vb: ReadValueChunk(Char(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)
  id: ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadValueChunkAsync(Char[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadValueChunkAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadValueChunkAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 348
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads large streams of text embedded in an XML document.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task<int> ReadValueChunkAsync(char[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadValueChunkAsync(buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>The array of characters that serves as the buffer to which the text contents are written. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset within the buffer where the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can start to copy the results.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>The number of characters read into the buffer. The value zero is returned when there is no more text content.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadValueChunkAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadValueChunkAsync(Char(), Int32, Int32)
- uid: System.Xml.XmlReader.ResolveEntity
  commentId: M:System.Xml.XmlReader.ResolveEntity
  id: ResolveEntity
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ResolveEntity()
  fullName: System.Xml.XmlReader.ResolveEntity()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResolveEntity
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 349
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, resolves the entity reference for <strong>EntityReference</strong> nodes.</p>\n"
  remarks: "\n<p>If the reader is positioned on an <strong>EntityReference</strong> node (<strong>XmlNodeType.EntityReference</strong>), if <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> is called after calling this method, the entity replacement text is parsed. When the entity replacement text is finished, an <strong>EndEntity</strong> node is returned to close the entity reference scope.</p>\n<p>After calling this method, if the entity is part of an attribute value, you must call <xref href=\"System.Xml.XmlReader.ReadAttributeValue\" data-throw-if-not-resolved=\"false\"></xref> to step into the entity.</p>\n"
  example:
  - 
  syntax:
    content: public abstract void ResolveEntity()
    content.vb: Public MustOverride Sub ResolveEntity
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The reader is not positioned on an <strong>EntityReference</strong> node; this implementation of the reader cannot resolve entities (<xref href=\"System.Xml.XmlReader.CanResolveEntity\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>).</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - type: System.Xml.EntityHandling
    commentId: T:System.Xml.EntityHandling
  - type: System.Xml.XmlReader.CanResolveEntity
    commentId: P:System.Xml.XmlReader.CanResolveEntity
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.Skip
  commentId: M:System.Xml.XmlReader.Skip
  id: Skip
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Skip()
  fullName: System.Xml.XmlReader.Skip()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Skip
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 350
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Skips the children of the current node.</p>\n"
  remarks: "\n<p>In the following XML input if the reader is positioned on the <code><a></code> node or any of its attributes, calling <strong>Skip</strong> positions the reader to the <code><b></code> node.</p>\n<p>If the reader is positioned on a leaf node already (such as the <code><x></code> node or the text node <code>abc</code>), calling <strong>Skip</strong> is the same as calling <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<pre><code> <a name=\"bob\" age=\"123\">\n<x/>abc<y/>\n</a>\n<b>\n...\n</b></code></pre>\n<p>This method checks for well-formed XML.</p>\n<p>If the reader is an <xref href=\"System.Xml.XmlValidatingReader\" data-throw-if-not-resolved=\"false\"></xref>, this method also validates the skipped content.</p>\n<p>The <strong>XmlReader</strong> implementation determines whether or not the <strong>Skip</strong> method will expand external entities. The following table describes whether the external entities are expanded for the various types of <strong>XmlReader</strong> objects.</p>\n<p>Type of XmlReader</p>\n<p>Expands external entities</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Xml.XmlTextReader\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>No.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance created by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method that is reading text data.</p>\n</td><td>\n<p>No.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance created by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method that is reading binary data.</p>\n</td><td>\n<p>Not applicable.</p>\n</td></tr><tr><td>\n<p>A schema validating <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance created by the <see cref=\"Overload:System.Xml.XmlReader.Create\"></see> method.</p>\n</td><td>\n<p>Yes.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlValidatingReader\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Yes.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance returned by a <xref href=\"System.Xml.XPath.XPathNavigator\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n</td><td>\n<p>Not applicable.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlNodeReader\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>No.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance wrapped around another <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n</td><td>\n<p>Depends on the implementation of the underlying <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. (The <strong>Skip</strong> method on the underlying <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is called).</p>\n</td></tr></tbody></table>\n<p>For the asynchronous version of this method, see <xref href=\"System.Xml.XmlReader.SkipAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example parses an XML file starting on the second book node.</p>XmlReaderBasic#14<p>The example uses the file, <strong>2books.xml</strong>, as input.</p>XML_Core_Files#7"
  syntax:
    content: public virtual void Skip()
    content.vb: Public Overridable Sub Skip
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.SkipAsync
  commentId: M:System.Xml.XmlReader.SkipAsync
  id: SkipAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: SkipAsync()
  fullName: System.Xml.XmlReader.SkipAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 351
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously skips the children of the current node.</p>\n"
  remarks: "\n<p>This is the asynchronous version of <xref href=\"System.Xml.XmlReader.Skip\" data-throw-if-not-resolved=\"false\"></xref>, with the same functionality. To use this method, you must set the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>.</p>\n"
  syntax:
    content: public virtual Task SkipAsync()
    content.vb: Public Overridable Function SkipAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The current node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: false
  name: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: false
  name: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.ReadState
  parent: System.Xml
  isExternal: false
  name: ReadState
  fullName: System.Xml.ReadState
- uid: System.Xml.XmlReaderSettings
  parent: System.Xml
  isExternal: false
  name: XmlReaderSettings
  fullName: System.Xml.XmlReaderSettings
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Xml.XmlSpace
  parent: System.Xml
  isExternal: false
  name: XmlSpace
  fullName: System.Xml.XmlSpace
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: false
  name: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Xml.XmlParserContext
  parent: System.Xml
  isExternal: false
  name: XmlParserContext
  fullName: System.Xml.XmlParserContext
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: false
  name: TextReader
  fullName: System.IO.TextReader
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task{System.Xml.XmlNodeType}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<XmlNodeType>
  fullName: System.Threading.Tasks.Task<System.Xml.XmlNodeType>
  fullname.vb: System.Threading.Tasks.Task(Of System.Xml.XmlNodeType)
  name.vb: Task(Of XmlNodeType)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Xml.XmlNodeType
    name: XmlNodeType
    fullName: System.Xml.XmlNodeType
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Xml.XmlNodeType
    name: XmlNodeType
    fullName: System.Xml.XmlNodeType
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Xml.IXmlNamespaceResolver
  parent: System.Xml
  isExternal: false
  name: IXmlNamespaceResolver
  fullName: System.Xml.IXmlNamespaceResolver
- uid: System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  fullname.vb: System.Threading.Tasks.Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.DateTimeOffset
  parent: System
  isExternal: false
  name: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Char[]
  isExternal: true
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.UriFormatException
  isExternal: false
  name: UriFormatException
  fullName: System.UriFormatException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Xml.XmlException
  isExternal: false
  name: XmlException
  fullName: System.Xml.XmlException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
