items:
- uid: System.Net.Http.MessageProcessingHandler
  commentId: T:System.Net.Http.MessageProcessingHandler
  id: MessageProcessingHandler
  parent: System.Net.Http
  children:
  - System.Net.Http.MessageProcessingHandler.#ctor
  - System.Net.Http.MessageProcessingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)
  - System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: MessageProcessingHandler
  fullName: System.Net.Http.MessageProcessingHandler
  type: Class
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/MessageProcessingHandler.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MessageProcessingHandler
    path: src/System.Net.Http/src/System/Net/Http/MessageProcessingHandler.cs
    startLine: 13
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: A base type for handlers which only do some small processing of request and/or response messages.
  syntax:
    content: 'public abstract class MessageProcessingHandler : DelegatingHandler'
    content.vb: >-
      Public MustInherit Class MessageProcessingHandler
          Inherits DelegatingHandler
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  - System.Net.Http.DelegatingHandler
  inheritedMembers:
  - System.Net.Http.DelegatingHandler.InnerHandler
  - System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpMessageHandler.Dispose
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Net.Http.MessageProcessingHandler.#ctor
  commentId: M:System.Net.Http.MessageProcessingHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  - vb
  name: MessageProcessingHandler()
  fullName: System.Net.Http.MessageProcessingHandler.MessageProcessingHandler()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/MessageProcessingHandler.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Http/src/System/Net/Http/MessageProcessingHandler.cs
    startLine: 15
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Creates an instance of a <xref href="System.Net.Http.MessageProcessingHandler" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: protected MessageProcessingHandler()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.Http.MessageProcessingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  commentId: M:System.Net.Http.MessageProcessingHandler.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  - vb
  name: MessageProcessingHandler(HttpMessageHandler)
  fullName: System.Net.Http.MessageProcessingHandler.MessageProcessingHandler(System.Net.Http.HttpMessageHandler)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/MessageProcessingHandler.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Http/src/System/Net/Http/MessageProcessingHandler.cs
    startLine: 19
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Creates an instance of a <xref href="System.Net.Http.MessageProcessingHandler" data-throw-if-not-resolved="false"></xref> class with a specific inner handler.
  syntax:
    content: protected MessageProcessingHandler(HttpMessageHandler innerHandler)
    content.vb: Protected Sub New(innerHandler As HttpMessageHandler)
    parameters:
    - id: innerHandler
      type: System.Net.Http.HttpMessageHandler
      description: The inner handler which is responsible for processing the HTTP response messages.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: ProcessRequest(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  - vb
  name: ProcessRequest(HttpRequestMessage, Threading.CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.ProcessRequest(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProcessRequest
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 202
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Performs processing on each request sent to the server.
  syntax:
    content: protected abstract HttpRequestMessage ProcessRequest(HttpRequestMessage request, Threading.CancellationToken cancellationToken)
    content.vb: Protected MustOverride Function ProcessRequest(request As HttpRequestMessage, cancellationToken As Threading.CancellationToken) As HttpRequestMessage
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to process.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Net.Http.HttpRequestMessage
      description: Returns <xref href="System.Net.Http.HttpRequestMessage" data-throw-if-not-resolved="false"></xref>.The HTTP request message that was processed.
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)
  id: ProcessResponse(System.Net.Http.HttpResponseMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  - vb
  name: ProcessResponse(HttpResponseMessage, Threading.CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.ProcessResponse(System.Net.Http.HttpResponseMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProcessResponse
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 203
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Perform processing on each response from the server.
  syntax:
    content: protected abstract HttpResponseMessage ProcessResponse(HttpResponseMessage response, Threading.CancellationToken cancellationToken)
    content.vb: Protected MustOverride Function ProcessResponse(response As HttpResponseMessage, cancellationToken As Threading.CancellationToken) As HttpResponseMessage
    parameters:
    - id: response
      type: System.Net.Http.HttpResponseMessage
      description: The HTTP response message to process.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Net.Http.HttpResponseMessage
      description: Returns <xref href="System.Net.Http.HttpResponseMessage" data-throw-if-not-resolved="false"></xref>.The HTTP response message that was processed.
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.MessageProcessingHandler
  langs:
  - csharp
  - vb
  name: SendAsync(HttpRequestMessage, Threading.CancellationToken)
  fullName: System.Net.Http.MessageProcessingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 204
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: Sends an HTTP request to the inner handler to send to the server as an asynchronous operation.
  syntax:
    content: protected override sealed Threading.Tasks.Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, Threading.CancellationToken cancellationToken)
    content.vb: Protected NotOverridable Overrides Function SendAsync(request As HttpRequestMessage, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of HttpResponseMessage)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: The HTTP request message to send to the server.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that can be used by other objects or threads to receive notice of cancellation.
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: Returns <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.The task object representing the asynchronous operation.
  overridden: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>request</em> was null.
  modifiers.csharp:
  - protected
  - override
  - sealed
  modifiers.vb:
  - Protected
  - Overrides
  - NotOverridable
references:
- uid: System.Net.Http
  isExternal: false
  name: System.Net.Http
  fullName: System.Net.Http
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Net.Http.HttpMessageHandler
  parent: System.Net.Http
  isExternal: false
  name: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
- uid: System.Net.Http.DelegatingHandler
  parent: System.Net.Http
  isExternal: false
  name: DelegatingHandler
  fullName: System.Net.Http.DelegatingHandler
- uid: System.Net.Http.DelegatingHandler.InnerHandler
  parent: System.Net.Http.DelegatingHandler
  isExternal: false
  name: InnerHandler
  fullName: System.Net.Http.DelegatingHandler.InnerHandler
- uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  parent: System.Net.Http.DelegatingHandler
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Net.Http.DelegatingHandler.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.DelegatingHandler.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Net.Http.DelegatingHandler.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Net.Http.HttpMessageHandler.Dispose
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
  spec.csharp:
  - uid: System.Net.Http.HttpMessageHandler.Dispose
    name: Dispose
    fullName: System.Net.Http.HttpMessageHandler.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageHandler.Dispose
    name: Dispose
    fullName: System.Net.Http.HttpMessageHandler.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Net.Http.HttpResponseMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpResponseMessage
  fullName: System.Net.Http.HttpResponseMessage
- uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.DelegatingHandler
  isExternal: true
  name: SendAsync(HttpRequestMessage, Threading.CancellationToken)
  fullName: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    name: SendAsync
    fullName: System.Net.Http.DelegatingHandler.SendAsync
  - name: (
    fullName: (
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.DelegatingHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    name: SendAsync
    fullName: System.Net.Http.DelegatingHandler.SendAsync
  - name: (
    fullName: (
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
  - name: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: Threading.CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)
  name.vb: Threading.Tasks.Task(Of HttpResponseMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
