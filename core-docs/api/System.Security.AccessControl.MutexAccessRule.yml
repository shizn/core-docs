items:
- uid: System.Security.AccessControl.MutexAccessRule
  commentId: T:System.Security.AccessControl.MutexAccessRule
  id: MutexAccessRule
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.MutexAccessRule.#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.MutexAccessRule.MutexRights
  langs:
  - csharp
  - vb
  name: MutexAccessRule
  fullName: System.Security.AccessControl.MutexAccessRule
  type: Class
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MutexAccessRule
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 23
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents a set of access rights allowed or denied for a user or group. This class cannot be inherited.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.AccessControl.MutexAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class is one of a set of classes that the .NET Framework provides for managing Windows access control security on named system mutexes. For an overview of these classes, and their relationship to the underlying Windows access control structures, see <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Windows access control security is meaningful only for named system mutexes. If a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object represents a local mutex, access control is irrelevant.</p>\n<p>To get a list of the rules currently applied to a named mutex, use the <xref href=\"System.Threading.Mutex.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method to get a <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, and then use its <xref href=\"System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method to obtain a collection of <xref href=\"System.Security.AccessControl.MutexAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n<p>\n<xref href=\"System.Security.AccessControl.MutexAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects do not map one-to-one with access control entries in the underlying discretionary access control list (DACL). When you get the set of all access rules for a mutex, the set contains the minimum number of rules currently required to express all the access control entries. </p>\n<p>The underlying access control entries change as you apply and remove rules. The information in rules is merged if possible, to maintain the smallest number of access control entries. Thus, when you read the current list of rules, it might not look exactly like the list of all the rules you have added.</p>\n<p>Use <xref href=\"System.Security.AccessControl.MutexAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects to specify access rights to allow or deny to a user or group. A <xref href=\"System.Security.AccessControl.MutexAccessRule\" data-throw-if-not-resolved=\"false\"></xref> object always represents either allowed access or denied access, never both.</p>\n<p>To apply a rule to a named system mutex, use the <xref href=\"System.Threading.Mutex.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> method to get the <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. Modify the <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref> object by using its methods to add the rule, and then use the <xref href=\"System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method to reattach the security object.</p>\n<p>Changes you make to a <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref> object do not affect the access levels of the named mutex until you call the <xref href=\"System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)\" data-throw-if-not-resolved=\"false\"></xref> method to assign the altered security object to the named mutex.</p>\n<p>\n<xref href=\"System.Security.AccessControl.MutexAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects are immutable. Security for a mutex is modified using the methods of the <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref> class to add or remove rules; as you do this, the underlying access control entries are modified. </p>\n<p>Security on synchronization objects is not supported for Windows 98 or Windows Millennium Edition.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the creation and use of <xref href=\"System.Security.AccessControl.MutexAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects. The example creates a <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rule.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <xref href=\"System.Threading.Mutex.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.MutexSecurity.AddAccessRule#1"
  syntax:
    content: >-
      [SecurityCritical]

      public sealed class MutexAccessRule : AccessRule
    content.vb: >-
      <SecurityCritical>

      Public NotInheritable Class MutexAccessRule
          Inherits AccessRule
  seealso:
  - type: System.Security.AccessControl.MutexSecurity
    commentId: T:System.Security.AccessControl.MutexSecurity
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.MutexAccessRule
  langs:
  - csharp
  - vb
  name: MutexAccessRule(IdentityReference, MutexRights, AccessControlType)
  fullName: System.Security.AccessControl.MutexAccessRule.MutexAccessRule(System.Security.Principal.IdentityReference, System.Security.AccessControl.MutexRights, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 26
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.MutexAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class, specifying the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</p>\n"
  remarks: "\n<p>To wait on a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> (by calling the <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see>, <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> or <see cref=\"Overload:System.Threading.WaitHandle.WaitAll\"></see> method), a user must have <xref href=\"System.Security.AccessControl.MutexRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> access. To release the mutex, by calling the <xref href=\"System.Threading.Mutex.ReleaseMutex\" data-throw-if-not-resolved=\"false\"></xref> method, the user must have <xref href=\"System.Security.AccessControl.MutexRights.Modify\" data-throw-if-not-resolved=\"false\"></xref> access.</p>\n"
  syntax:
    content: public MutexAccessRule(IdentityReference identity, MutexRights eventRights, AccessControlType type)
    content.vb: Public Sub New(identity As IdentityReference, eventRights As MutexRights, type As AccessControlType)
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "\n<p>The user or group the rule applies to. Must be of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> or a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: eventRights
      type: System.Security.AccessControl.MutexRights
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.MutexRights\" data-throw-if-not-resolved=\"false\"></xref> values specifying the rights allowed or denied.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values specifying whether the rights are allowed or denied.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>eventRights</em> specifies an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>type</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>eventRights</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identity</em> is neither of type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref> nor of a type such as <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> that can be converted to type <xref href=\"System.Security.Principal.SecurityIdentifier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.MutexAccessRule.#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  commentId: M:System.Security.AccessControl.MutexAccessRule.#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.MutexAccessRule
  langs:
  - csharp
  - vb
  name: MutexAccessRule(String, MutexRights, AccessControlType)
  fullName: System.Security.AccessControl.MutexAccessRule.MutexAccessRule(System.String, System.Security.AccessControl.MutexRights, System.Security.AccessControl.AccessControlType)
  type: Constructor
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 27
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.MutexAccessRule\" data-throw-if-not-resolved=\"false\"></xref> class, specifying the name of the user or group the rule applies to, the access rights, and whether the specified access rights are allowed or denied.</p>\n"
  remarks: "\n<p>To wait on a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> (by calling the <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see>, <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see> or <see cref=\"Overload:System.Threading.WaitHandle.WaitAll\"></see> method), a user must have <xref href=\"System.Security.AccessControl.MutexRights.Synchronize\" data-throw-if-not-resolved=\"false\"></xref> access. To release the mutex, by calling the <xref href=\"System.Threading.Mutex.ReleaseMutex\" data-throw-if-not-resolved=\"false\"></xref> methods, the user must have <xref href=\"System.Security.AccessControl.MutexRights.Modify\" data-throw-if-not-resolved=\"false\"></xref> access.</p>\n<p>This constructor is equivalent to creating an <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object, by passing <em>identity</em> to the <xref href=\"System.Security.Principal.NTAccount.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor, and passing the newly created <xref href=\"System.Security.Principal.NTAccount\" data-throw-if-not-resolved=\"false\"></xref> object to the <xref href=\"System.Security.AccessControl.MutexAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.MutexRights,System.Security.AccessControl.AccessControlType)\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of this constructor to create <xref href=\"System.Security.AccessControl.MutexAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects. The example creates a <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rule.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <xref href=\"System.Threading.Mutex.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.MutexSecurity.AddAccessRule#1"
  syntax:
    content: public MutexAccessRule(string identity, MutexRights eventRights, AccessControlType type)
    content.vb: Public Sub New(identity As String, eventRights As MutexRights, type As AccessControlType)
    parameters:
    - id: identity
      type: System.String
      description: "\n<p>The name of the user or group the rule applies to.</p>\n"
    - id: eventRights
      type: System.Security.AccessControl.MutexRights
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.MutexRights\" data-throw-if-not-resolved=\"false\"></xref> values specifying the rights allowed or denied.</p>\n"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "\n<p>One of the <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref> values specifying whether the rights are allowed or denied.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>eventRights</em> specifies an invalid value.</p>\n<p>-or-</p>\n<p>\n<em>type</em> specifies an invalid value.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventRights</em> is zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>identity</em> is a zero-length string.</p>\n<p>-or-</p>\n<p>\n<em>identity</em> is longer than 512 characters.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.MutexAccessRule.MutexRights
  commentId: P:System.Security.AccessControl.MutexAccessRule.MutexRights
  id: MutexRights
  parent: System.Security.AccessControl.MutexAccessRule
  langs:
  - csharp
  - vb
  name: MutexRights
  fullName: System.Security.AccessControl.MutexAccessRule.MutexRights
  type: Property
  source:
    remote:
      path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MutexRights
    path: src/System.Threading.AccessControl/ref/System.Threading.AccessControl.cs
    startLine: 28
  assemblies:
  - System.Threading.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the rights allowed or denied by the access rule.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Security.AccessControl.MutexAccessRule\" data-throw-if-not-resolved=\"false\"></xref> objects are immutable. You can create a new access rule representing a different user, different rights, or a different <xref href=\"System.Security.AccessControl.AccessControlType\" data-throw-if-not-resolved=\"false\"></xref>, but you cannot modify an existing access rule.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.Security.AccessControl.MutexAccessRule.MutexRights\" data-throw-if-not-resolved=\"false\"></xref> property to display the rights in the set of rules contained in a <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref> object. The example creates a <xref href=\"System.Security.AccessControl.MutexSecurity\" data-throw-if-not-resolved=\"false\"></xref> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref href=\"System.Security.AccessControl.AccessControlType.Allow\" data-throw-if-not-resolved=\"false\"></xref> rule.</p>\n<p>This example does not attach the security object to a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object. Examples that attach security objects can be found in <xref href=\"System.Threading.Mutex.GetAccessControl\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Mutex.SetAccessControl(System.Security.AccessControl.MutexSecurity)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Security.AccessControl.MutexSecurity.AddAccessRule#1"
  syntax:
    content: public MutexRights MutexRights { get; }
    content.vb: Public ReadOnly Property MutexRights As MutexRights
    parameters: []
    return:
      type: System.Security.AccessControl.MutexRights
      description: "\n<p>A bitwise combination of <xref href=\"System.Security.AccessControl.MutexRights\" data-throw-if-not-resolved=\"false\"></xref> values indicating the rights allowed or denied by the access rule.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.AccessControl.AuthorizationRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AuthorizationRule
  fullName: System.Security.AccessControl.AuthorizationRule
- uid: System.Security.AccessControl.AccessRule
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessRule
  fullName: System.Security.AccessControl.AccessRule
- uid: System.Security.AccessControl.AccessRule.AccessControlType
  parent: System.Security.AccessControl.AccessRule
  isExternal: false
  name: AccessControlType
  fullName: System.Security.AccessControl.AccessRule.AccessControlType
- uid: System.Security.AccessControl.AuthorizationRule.IdentityReference
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: IdentityReference
  fullName: System.Security.AccessControl.AuthorizationRule.IdentityReference
- uid: System.Security.AccessControl.AuthorizationRule.AccessMask
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: AccessMask
  fullName: System.Security.AccessControl.AuthorizationRule.AccessMask
- uid: System.Security.AccessControl.AuthorizationRule.IsInherited
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: IsInherited
  fullName: System.Security.AccessControl.AuthorizationRule.IsInherited
- uid: System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.AuthorizationRule.InheritanceFlags
- uid: System.Security.AccessControl.AuthorizationRule.PropagationFlags
  parent: System.Security.AccessControl.AuthorizationRule
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.AuthorizationRule.PropagationFlags
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.MutexRights
  parent: System.Security.AccessControl
  isExternal: false
  name: MutexRights
  fullName: System.Security.AccessControl.MutexRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
