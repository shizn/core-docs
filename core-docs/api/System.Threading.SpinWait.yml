items:
- uid: System.Threading.SpinWait
  commentId: T:System.Threading.SpinWait
  id: SpinWait
  parent: System.Threading
  children:
  - System.Threading.SpinWait.Count
  - System.Threading.SpinWait.NextSpinWillYield
  - System.Threading.SpinWait.Reset
  - System.Threading.SpinWait.SpinOnce
  - System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})
  - System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)
  - System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)
  langs:
  - csharp
  - vb
  name: SpinWait
  fullName: System.Threading.SpinWait
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinWait.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SpinWait
    path: src/mscorlib/src/System/Threading/SpinWait.cs
    startLine: 71
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Provides support for spin-based waiting.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Threading.SpinWait\" data-throw-if-not-resolved=\"false\"></xref> encapsulates common spinning logic. On single-processor machines, yields are always used instead of busy waits, and on computers with Intel processors employing Hyper-Threading technology, it helps to prevent hardware thread starvation. SpinWait encapsulates a good mixture of spinning and true yielding. </p>\n<p>\n<xref href=\"System.Threading.SpinWait\" data-throw-if-not-resolved=\"false\"></xref> is a value type, which means that low-level code can utilize SpinWait without fear of unnecessary allocation overheads. SpinWait is not generally useful for ordinary applications. In most cases, you should use the synchronization classes provided by the .NET Framework, such as <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref>. For most purposes where spin waiting is required, however, the <xref href=\"System.Threading.SpinWait\" data-throw-if-not-resolved=\"false\"></xref> type should be preferred over the <xref href=\"System.Threading.Thread.SpinWait(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  example:
  - "\n<p>The following example shows how to use a <xref href=\"System.Threading.SpinWait\" data-throw-if-not-resolved=\"false\"></xref>:</p>System.Threading.SpinWait#01"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      public struct SpinWait
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      Public Structure SpinWait
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Threading.SpinWait.Count
  commentId: P:System.Threading.SpinWait.Count
  id: Count
  parent: System.Threading.SpinWait
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Threading.SpinWait.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinWait.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/Threading/SpinWait.cs
    startLine: 89
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets the number of times <xref href=\"System.Threading.SpinWait.SpinOnce\" data-throw-if-not-resolved=\"false\"></xref> has been called on this instance.</p>\n"
  example:
  - 
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.SpinWait.NextSpinWillYield
  commentId: P:System.Threading.SpinWait.NextSpinWillYield
  id: NextSpinWillYield
  parent: System.Threading.SpinWait
  langs:
  - csharp
  - vb
  name: NextSpinWillYield
  fullName: System.Threading.SpinWait.NextSpinWillYield
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinWait.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NextSpinWillYield
    path: src/mscorlib/src/System/Threading/SpinWait.cs
    startLine: 104
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets whether the next call to <xref href=\"System.Threading.SpinWait.SpinOnce\" data-throw-if-not-resolved=\"false\"></xref> will yield the processor, triggering a forced context switch.</p>\n"
  remarks: "\n<p>On a single-CPU machine, <xref href=\"System.Threading.SpinWait.SpinOnce\" data-throw-if-not-resolved=\"false\"></xref> always yields the processor. On machines with multiple CPUs, <xref href=\"System.Threading.SpinWait.SpinOnce\" data-throw-if-not-resolved=\"false\"></xref> may yield after an unspecified number of calls.</p>\n"
  example:
  - 
  syntax:
    content: public bool NextSpinWillYield { get; }
    content.vb: Public ReadOnly Property NextSpinWillYield As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: >-
        Whether the next call to <xref href="System.Threading.SpinWait.SpinOnce" data-throw-if-not-resolved="false"></xref> will yield the processor, triggering a

        forced context switch.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.SpinWait.Reset
  commentId: M:System.Threading.SpinWait.Reset
  id: Reset
  parent: System.Threading.SpinWait
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Threading.SpinWait.Reset()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinWait.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reset
    path: src/mscorlib/src/System/Threading/SpinWait.cs
    startLine: 181
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SpinWait.SpinOnce
  commentId: M:System.Threading.SpinWait.SpinOnce
  id: SpinOnce
  parent: System.Threading.SpinWait
  langs:
  - csharp
  - vb
  name: SpinOnce()
  fullName: System.Threading.SpinWait.SpinOnce()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinWait.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SpinOnce
    path: src/mscorlib/src/System/Threading/SpinWait.cs
    startLine: 116
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public void SpinOnce()
    content.vb: Public Sub SpinOnce
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})
  commentId: M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean})
  id: SpinUntil(System.Func{System.Boolean})
  parent: System.Threading.SpinWait
  langs:
  - csharp
  - vb
  name: SpinUntil(Func<Boolean>)
  fullName: System.Threading.SpinWait.SpinUntil(System.Func<System.Boolean>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinWait.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SpinUntil
    path: src/mscorlib/src/System/Threading/SpinWait.cs
    startLine: 192
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public static void SpinUntil(Func<bool> condition)
    content.vb: Public Shared Sub SpinUntil(condition As Func(Of Boolean))
    parameters:
    - id: condition
      type: System.Func{System.Boolean}
      description: A delegate to be executed over and over until it returns true.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.SpinWait.SpinUntil(System.Func(Of System.Boolean))
  name.vb: SpinUntil(Func(Of Boolean))
- uid: System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)
  commentId: M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.Int32)
  id: SpinUntil(System.Func{System.Boolean},System.Int32)
  parent: System.Threading.SpinWait
  langs:
  - csharp
  - vb
  name: SpinUntil(Func<Boolean>, Int32)
  fullName: System.Threading.SpinWait.SpinUntil(System.Func<System.Boolean>, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinWait.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SpinUntil
    path: src/mscorlib/src/System/Threading/SpinWait.cs
    startLine: 239
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public static bool SpinUntil(Func<bool> condition, int millisecondsTimeout)
    content.vb: Public Shared Function SpinUntil(condition As Func(Of Boolean), millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: condition
      type: System.Func{System.Boolean}
      description: A delegate to be executed over and over until it returns true.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: True if the condition is satisfied within the timeout; otherwise, false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.SpinWait.SpinUntil(System.Func(Of System.Boolean), System.Int32)
  name.vb: SpinUntil(Func(Of Boolean), Int32)
- uid: System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)
  commentId: M:System.Threading.SpinWait.SpinUntil(System.Func{System.Boolean},System.TimeSpan)
  id: SpinUntil(System.Func{System.Boolean},System.TimeSpan)
  parent: System.Threading.SpinWait
  langs:
  - csharp
  - vb
  name: SpinUntil(Func<Boolean>, TimeSpan)
  fullName: System.Threading.SpinWait.SpinUntil(System.Func<System.Boolean>, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SpinWait.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SpinUntil
    path: src/mscorlib/src/System/Threading/SpinWait.cs
    startLine: 215
  assemblies:
  - System.Threading
  namespace: System.Threading
  syntax:
    content: public static bool SpinUntil(Func<bool> condition, TimeSpan timeout)
    content.vb: Public Shared Function SpinUntil(condition As Func(Of Boolean), timeout As TimeSpan) As Boolean
    parameters:
    - id: condition
      type: System.Func{System.Boolean}
      description: A delegate to be executed over and over until it returns true.
    - id: timeout
      type: System.TimeSpan
      description: "\nA <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, \nor a TimeSpan that represents -1 milliseconds to wait indefinitely."
    return:
      type: System.Boolean
      description: True if the condition is satisfied within the timeout; otherwise, false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.SpinWait.SpinUntil(System.Func(Of System.Boolean), System.TimeSpan)
  name.vb: SpinUntil(Func(Of Boolean), TimeSpan)
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Func{System.Boolean}
  parent: System
  definition: System.Func`1
  name: Func<Boolean>
  fullName: System.Func<System.Boolean>
  fullname.vb: System.Func(Of System.Boolean)
  name.vb: Func(Of Boolean)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<TResult>
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
