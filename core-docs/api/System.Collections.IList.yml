items:
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  id: IList
  parent: System.Collections
  children:
  - System.Collections.IList.Add(System.Object)
  - System.Collections.IList.Clear
  - System.Collections.IList.Contains(System.Object)
  - System.Collections.IList.IndexOf(System.Object)
  - System.Collections.IList.Insert(System.Int32,System.Object)
  - System.Collections.IList.IsFixedSize
  - System.Collections.IList.IsReadOnly
  - System.Collections.IList.Item(System.Int32)
  - System.Collections.IList.Remove(System.Object)
  - System.Collections.IList.RemoveAt(System.Int32)
  langs:
  - csharp
  - vb
  name: IList
  fullName: System.Collections.IList
  type: Interface
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IList
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2337
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Represents a non-generic collection of objects that can be individually accessed by index.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is a descendant of the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> interface and is the base interface of all non-generic lists. <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> implementations fall into three categories: read-only, fixed-size, and variable-size. A read-only <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> cannot be modified. A fixed-size <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> does not allow the addition or removal of elements, but it allows the modification of existing elements. A variable-size <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> allows the addition, removal, and modification of elements.</p>\n<p>For the generic version of this interface, see <xref href=\"System.Collections.Generic.IList`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the implementation of the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface to create a simple list, fixed-size list.</p>System.Collections.IList_Implementation#01"
  syntax:
    content: 'public interface IList : ICollection, IEnumerable'
    content.vb: >-
      Public Interface IList
          Inherits ICollection, IEnumerable
  seealso:
  - type: System.Collections.ArrayList
    commentId: T:System.Collections.ArrayList
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Collections.Generic.IList`1
    commentId: T:System.Collections.Generic.IList`1
  inheritedMembers:
  - System.Collections.ICollection.Count
  - System.Collections.ICollection.IsSynchronized
  - System.Collections.ICollection.SyncRoot
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.IList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.IList
  langs:
  - csharp
  - vb
  name: IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFixedSize
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2339
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  remarks: "\n<p>A collection with a fixed size does not allow the addition or removal of elements after the collection is created, but it allows the modification of existing elements.</p>\n"
  example:
  - "\n<p>The following example demonstrates the implementation of the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections.IList_Implementation#02"
  syntax:
    content: bool IsFixedSize { get; }
    content.vb: ReadOnly Property IsFixedSize As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.IList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.IList
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2340
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  remarks: "\n<p>A collection that is read-only does not allow the addition, removal, or modification of elements after the collection is created.</p>\n"
  example:
  - "\n<p>The following example demonstrates the implementation of the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections.IList_Implementation#02"
  syntax:
    content: bool IsReadOnly { get; }
    content.vb: ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is read-only; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: System.Collections.IList.Item(System.Int32)
  commentId: P:System.Collections.IList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.IList
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2341
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Gets or sets the element at the specified index.</p>\n"
  remarks: "\n<p>This property provides the ability to access a specific element in the collection by using the following syntax: <code>myCollection[index]</code>.</p>\n<p>The C# language uses the  keyword to define the indexers instead of implementing the <xref href=\"System.Collections.IList.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> property. Visual Basic implements <xref href=\"System.Collections.IList.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> as a default property, which provides the same indexing functionality.</p>\n"
  example:
  - "\n<p>The following example demonstrates the implementation of the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections.IList_Implementation#02"
  syntax:
    content: object this[int index] { get; set; }
    content.vb: Property Item(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to get or set. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The element at the specified index.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a valid index in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is set and the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.IList.Add(System.Object)
  commentId: M:System.Collections.IList.Add(System.Object)
  id: Add(System.Object)
  parent: System.Collections.IList
  langs:
  - csharp
  - vb
  name: Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2342
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Adds an item to the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the implementation of the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface to create a simple, fixed-size list. This code is part of a larger example for the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections.IList_Implementation#02"
  syntax:
    content: int Add(object value)
    content.vb: Function Add(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to add to the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The position into which the new element was inserted, or -1 to indicate that the item was not inserted into the collection.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
- uid: System.Collections.IList.Clear
  commentId: M:System.Collections.IList.Clear
  id: Clear
  parent: System.Collections.IList
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.IList.Clear()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2343
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Removes all items from the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Implementations of this method can vary in how they handle the <xref href=\"System.Collections.ICollection.Count\" data-throw-if-not-resolved=\"false\"></xref> and the capacity of a collection. Typically, the count is set to zero, and references to other objects from elements of the collection are also released. The capacity can be set to zero or a default value, or it can remain unchanged.</p>\n"
  example:
  - "\n<p>The following example demonstrates the implementation of the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections.IList_Implementation#02"
  syntax:
    content: void Clear()
    content.vb: Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
- uid: System.Collections.IList.Contains(System.Object)
  commentId: M:System.Collections.IList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.IList
  langs:
  - csharp
  - vb
  name: Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2344
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> contains a specific value.</p>\n"
  remarks: "\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following example demonstrates the implementation of the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections.IList_Implementation#02"
  syntax:
    content: bool Contains(object value)
    content.vb: Function Contains(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to locate in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is found in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
- uid: System.Collections.IList.IndexOf(System.Object)
  commentId: M:System.Collections.IList.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.Collections.IList
  langs:
  - csharp
  - vb
  name: IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2345
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Determines the index of a specific item in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>Starting with the .NET Framework 2.0, this method uses the collection’s objects’ <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods on <em>item</em> to determine whether item exists. In the earlier versions of the .NET Framework, this determination was made by using the <xref href=\"System.Object.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.IComparable.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods of the <em>item</em> parameter on the objects in the collection.</p>\n"
  example:
  - "\n<p>The following example demonstrates the implementation of the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections.IList_Implementation#02"
  syntax:
    content: int IndexOf(object value)
    content.vb: Function IndexOf(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to locate in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of <em>value</em> if found in the list; otherwise, -1.</p>\n"
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  langs:
  - csharp
  - vb
  name: Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2346
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Inserts an item to the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  remarks: "\n<p>If <em>index</em> equals the number of items in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>, then <em>value</em> is appended to the end.</p>\n<p>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n"
  example:
  - "\n<p>The following example demonstrates the implementation of the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections.IList_Implementation#02"
  syntax:
    content: void Insert(int index, object value)
    content.vb: Sub Insert(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which <em>value</em> should be inserted. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to insert into the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a valid index in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>\n<em>value</em> is null reference in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
- uid: System.Collections.IList.Remove(System.Object)
  commentId: M:System.Collections.IList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.IList
  langs:
  - csharp
  - vb
  name: Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2347
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Removes the first occurrence of a specific object from the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table. If <em>value</em> is not found in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> remains unchanged and no exception is thrown.</p>\n"
  example:
  - "\n<p>The following example demonstrates the implementation of the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections.IList_Implementation#02"
  syntax:
    content: void Remove(object value)
    content.vb: Sub Remove(value As Object)
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to remove from the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
- uid: System.Collections.IList.RemoveAt(System.Int32)
  commentId: M:System.Collections.IList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.IList
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2348
  assemblies:
  - System.Runtime
  namespace: System.Collections
  summary: "\n<p>Removes the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> item at the specified index.</p>\n"
  remarks: "\n<p>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hash table.</p>\n"
  example:
  - "\n<p>The following example demonstrates the implementation of the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface to create a simple list, fixed-size list. This code is part of a larger example for the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>System.Collections.IList_Implementation#02"
  syntax:
    content: void RemoveAt(int index)
    content.vb: Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the item to remove. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a valid index in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
references:
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: false
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: Collections.ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  fullName: System.NullReferenceException
