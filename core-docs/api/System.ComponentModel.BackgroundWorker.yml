items:
- uid: System.ComponentModel.BackgroundWorker
  commentId: T:System.ComponentModel.BackgroundWorker
  id: BackgroundWorker
  parent: System.ComponentModel
  children:
  - System.ComponentModel.BackgroundWorker.#ctor
  - System.ComponentModel.BackgroundWorker.CancelAsync
  - System.ComponentModel.BackgroundWorker.CancellationPending
  - System.ComponentModel.BackgroundWorker.Dispose
  - System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)
  - System.ComponentModel.BackgroundWorker.DoWork
  - System.ComponentModel.BackgroundWorker.IsBusy
  - System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)
  - System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)
  - System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)
  - System.ComponentModel.BackgroundWorker.ProgressChanged
  - System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)
  - System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)
  - System.ComponentModel.BackgroundWorker.RunWorkerAsync
  - System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)
  - System.ComponentModel.BackgroundWorker.RunWorkerCompleted
  - System.ComponentModel.BackgroundWorker.WorkerReportsProgress
  - System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation
  langs:
  - csharp
  - vb
  name: BackgroundWorker
  fullName: System.ComponentModel.BackgroundWorker
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BackgroundWorker
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 10
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Executes an operation on a separate thread.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class allows you to run an operation on a separate, dedicated thread. Time-consuming operations like downloads and database transactions can cause your user interface (UI) to seem as though it has stopped responding while they are running. When you want a responsive UI and you are faced with long delays associated with such operations, the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class provides a convenient solution.</p>\n<p>To execute a time-consuming operation in the background, create a <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> and listen for events that report the progress of your operation and signal when your operation is finished. You can create the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> programmatically or you can drag it onto your form from the Components tab of the Toolbox. If you create the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> in the Windows Forms Designer, it will appear in the Component Tray, and its properties will be displayed in the Properties window.</p>\n<p>To set up for a background operation, add an event handler for the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event. Call your time-consuming operation in this event handler. To start the operation, call <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\" data-throw-if-not-resolved=\"false\"></xref>. To receive notifications of progress updates, handle the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref> event. To receive a notification when the operation is completed, handle the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n<p>You must be careful not to manipulate any user-interface objects in your <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler. Instead, communicate to the user interface through the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n<p>\n<xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> events are not marshaled across <xref href=\"System.AppDomain\" data-throw-if-not-resolved=\"false\"></xref> boundaries. Do not use a <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> component to perform multithreaded operations in more than one <xref href=\"System.AppDomain\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If your background operation requires a parameter, call <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\" data-throw-if-not-resolved=\"false\"></xref> with your parameter. Inside the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler, you can extract the parameter from the <xref href=\"System.ComponentModel.DoWorkEventArgs.Argument\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>For more information about <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref>, see How to: Run an Operation in the Background.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the basics of the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class for executing a time-consuming operation asynchronously. The following illustration shows an example of the output.</p>\n<p>To try this code, create a Windows Forms application. Add a <xref href=\"System.Windows.Forms.Label\" data-throw-if-not-resolved=\"false\"></xref> control named <code>resultLabel</code> and add two <xref href=\"System.Windows.Forms.Button\" data-throw-if-not-resolved=\"false\"></xref> controls named <code>startAsyncButton</code> and <code>cancelAsyncButton</code>. Create <xref href=\"System.Windows.Forms.Control.Click\" data-throw-if-not-resolved=\"false\"></xref> event handlers for both buttons. From the Components tab of the Toolbox, add a <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> component named <code>backgroundWorker1</code>. Create <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event handlers for the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref>. In the code for the form, replace the existing code with the following code.</p>System.ComponentModel.BackgroundWorkerSimple#1"
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class for executing a time-consuming operation asynchronously. The following illustration shows an example of the output.</p>\n<p>The operation computes the selected Fibonacci number, reports progress updates as the calculation proceeds, and permits a pending calculation to be canceled.</p>System.ComponentModel.BackgroundWorker#1"
  syntax:
    content: 'public class BackgroundWorker : IDisposable'
    content.vb: >-
      Public Class BackgroundWorker
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ComponentModel.BackgroundWorker.#ctor
  commentId: M:System.ComponentModel.BackgroundWorker.#ctor
  id: '#ctor'
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: BackgroundWorker()
  fullName: System.ComponentModel.BackgroundWorker.BackgroundWorker()
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 21
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>This constructor initializes a <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public BackgroundWorker()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.BackgroundWorker.CancellationPending
  commentId: P:System.ComponentModel.BackgroundWorker.CancellationPending
  id: CancellationPending
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: CancellationPending
  fullName: System.ComponentModel.BackgroundWorker.CancellationPending
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CancellationPending
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 39
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether the application has requested cancellation of a background operation.</p>\n"
  remarks: "\n<p>If <xref href=\"System.ComponentModel.BackgroundWorker.CancellationPending\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>, then the <xref href=\"System.ComponentModel.BackgroundWorker.CancelAsync\" data-throw-if-not-resolved=\"false\"></xref> method has been called on the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>This property is meant for use by the worker thread, which should periodically check <xref href=\"System.ComponentModel.BackgroundWorker.CancellationPending\" data-throw-if-not-resolved=\"false\"></xref> and abort the background operation when it is set to <strong>true</strong>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.BackgroundWorker.CancellationPending\" data-throw-if-not-resolved=\"false\"></xref> property to query a <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> about its cancellation state. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.BackgroundWorker#8"
  syntax:
    content: public bool CancellationPending { get; }
    content.vb: Public ReadOnly Property CancellationPending As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.BackgroundWorker.IsBusy
  commentId: P:System.ComponentModel.BackgroundWorker.IsBusy
  id: IsBusy
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: IsBusy
  fullName: System.ComponentModel.BackgroundWorker.IsBusy
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsBusy
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 59
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> is running an asynchronous operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> starts an asynchronous operation when you call <see cref=\"Overload:System.ComponentModel.BackgroundWorker.RunWorkerAsync\"></see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates how to use the <xref href=\"System.ComponentModel.BackgroundWorker.IsBusy\" data-throw-if-not-resolved=\"false\"></xref> property to wait for completion of a <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> operation. This code example is part of a larger example described in How to: Download a File in the Background.</p>System.ComponentModel.BackgroundWorker.IsBusy#2"
  syntax:
    content: public bool IsBusy { get; }
    content.vb: Public ReadOnly Property IsBusy As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.ComponentModel.BackgroundWorker.RunWorkerCompleted
    commentId: E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted
  - type: System.EventArgs
    commentId: T:System.EventArgs
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.BackgroundWorker.WorkerReportsProgress
  commentId: P:System.ComponentModel.BackgroundWorker.WorkerReportsProgress
  id: WorkerReportsProgress
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: WorkerReportsProgress
  fullName: System.ComponentModel.BackgroundWorker.WorkerReportsProgress
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WorkerReportsProgress
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 155
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets a value indicating whether the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> can report progress updates.</p>\n"
  remarks: "\n<p>Set the <xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>true</strong> if you want the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> to support progress updates. When this property is <strong>true</strong>, user code can call the <xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to raise the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: public bool WorkerReportsProgress { get; set; }
    content.vb: Public Property WorkerReportsProgress As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)
    commentId: M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation
  commentId: P:System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation
  id: WorkerSupportsCancellation
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: WorkerSupportsCancellation
  fullName: System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WorkerSupportsCancellation
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 168
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets a value indicating whether the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> supports asynchronous cancellation.</p>\n"
  remarks: "\n<p>Set the <xref href=\"System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>true</strong> if you want the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> to support cancellation. When this property is <strong>true</strong>, you can call the <xref href=\"System.ComponentModel.BackgroundWorker.CancelAsync\" data-throw-if-not-resolved=\"false\"></xref> method to interrupt a background operation.</p>\n"
  syntax:
    content: public bool WorkerSupportsCancellation { get; set; }
    content.vb: Public Property WorkerSupportsCancellation As Boolean
    parameters: []
    return:
      type: System.Boolean
  seealso:
  - type: System.ComponentModel.BackgroundWorker.CancelAsync
    commentId: M:System.ComponentModel.BackgroundWorker.CancelAsync
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.ComponentModel.BackgroundWorker.DoWork
  commentId: E:System.ComponentModel.BackgroundWorker.DoWork
  id: DoWork
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: DoWork
  fullName: System.ComponentModel.BackgroundWorker.DoWork
  type: Event
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DoWork
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 57
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Occurs when <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n"
  remarks: "\n<p>This event is raised when you call the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\" data-throw-if-not-resolved=\"false\"></xref> method. This is where you start the operation that performs the potentially time-consuming work.</p>\n<p>Your code in the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler should periodically check the <xref href=\"System.ComponentModel.BackgroundWorker.CancellationPending\" data-throw-if-not-resolved=\"false\"></xref> property value and abort the operation if it is <strong>true</strong>. When this occurs, you can set the <xref href=\"System.ComponentModel.CancelEventArgs.Cancel\" data-throw-if-not-resolved=\"false\"></xref> flag of <xref href=\"System.ComponentModel.DoWorkEventArgs\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong>, and the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\" data-throw-if-not-resolved=\"false\"></xref> flag of <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> in your <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event handler will be set to <strong>true</strong>.</p>\n<p>Be aware that your code in the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref href=\"System.ComponentModel.BackgroundWorker.CancellationPending\" data-throw-if-not-resolved=\"false\"></xref> being set to <strong>true</strong>. In this case, the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\" data-throw-if-not-resolved=\"false\"></xref> flag of <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> in your <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event handler will not be set to <strong>true</strong>, even though a cancellation request was made. This situation is called a race condition and is a common concern in multithreaded programming. For more information about multithreading design issues, see Managed Threading Best Practices.</p>\n<p>If your operation produces a result, you can assign the result to the <xref href=\"System.ComponentModel.DoWorkEventArgs.Result\" data-throw-if-not-resolved=\"false\"></xref> property. This will be available to the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event handler in the <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs.Result\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>If the operation raises an exception that your code does not handle, the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> catches the exception and passes it into the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event handler, where it is exposed as the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref>. If you are running under the Visual Studio debugger, the debugger will break at the point in the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler where the unhandled exception was raised. If you have more than one <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref>, you should not reference any of them directly, as this would couple your <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler to a specific instance of <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref>. Instead, you should access your <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> by casting the <em>sender</em> parameter in your <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler.</p>\n<p>You must be careful not to manipulate any user-interface objects in your <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler. Instead, communicate to the user interface through the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> events.</p>\n<p>For more information about handling events, see NIB: Consuming Events.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event to start an asynchronous operation. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.BackgroundWorker#5"
  syntax:
    content: public event DoWorkEventHandler DoWork
    content.vb: Public Event DoWork As DoWorkEventHandler
    return:
      type: System.ComponentModel.DoWorkEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.BackgroundWorker.ProgressChanged
  commentId: E:System.ComponentModel.BackgroundWorker.ProgressChanged
  id: ProgressChanged
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: ProgressChanged
  fullName: System.ComponentModel.BackgroundWorker.ProgressChanged
  type: Event
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProgressChanged
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 94
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Occurs when <xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is called.</p>\n"
  remarks: "\n<p>This event is raised when you call the <see cref=\"Overload:System.ComponentModel.BackgroundWorker.ReportProgress\"></see> method.</p>\n<p>For more information about handling events, see NIB: Consuming Events.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref> event to report the progress of an asynchronous operation to the user. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.BackgroundWorker#7"
  syntax:
    content: public event ProgressChangedEventHandler ProgressChanged
    content.vb: Public Event ProgressChanged As ProgressChangedEventHandler
    return:
      type: System.ComponentModel.ProgressChangedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.BackgroundWorker.RunWorkerCompleted
  commentId: E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted
  id: RunWorkerCompleted
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: RunWorkerCompleted
  fullName: System.ComponentModel.BackgroundWorker.RunWorkerCompleted
  type: Event
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RunWorkerCompleted
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 153
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Occurs when the background operation has completed, has been canceled, or has raised an exception.</p>\n"
  remarks: "\n<p>This event is raised when the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler returns.</p>\n<p>If the operation completes successfully and its result is assigned in the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler, you can access the result through the <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs.Result\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>The <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> indicates that an exception was thrown by the operation.</p>\n<p>The <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\" data-throw-if-not-resolved=\"false\"></xref> property of <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> indicates whether a cancellation request was processed by the background operation. If your code in the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler detects a cancellation request by checking the <xref href=\"System.ComponentModel.BackgroundWorker.CancellationPending\" data-throw-if-not-resolved=\"false\"></xref> flag and setting the <xref href=\"System.ComponentModel.CancelEventArgs.Cancel\" data-throw-if-not-resolved=\"false\"></xref> flag of <xref href=\"System.ComponentModel.DoWorkEventArgs\" data-throw-if-not-resolved=\"false\"></xref> to <strong>true</strong>, the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\" data-throw-if-not-resolved=\"false\"></xref> flag of <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> also will be set to <strong>true</strong>.</p>\n<p>Be aware that your code in the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref href=\"System.ComponentModel.BackgroundWorker.CancellationPending\" data-throw-if-not-resolved=\"false\"></xref> being set to <strong>true</strong>. In this case, the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\" data-throw-if-not-resolved=\"false\"></xref> flag of <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> in your <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event handler will not be set to <strong>true</strong>, even though a cancellation request was made. This situation is called a race condition and is a common concern in multithreaded programming. For more information about multithreading design issues, see Managed Threading Best Practices.</p>\n<p>Your <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event handler should always check the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Error\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\" data-throw-if-not-resolved=\"false\"></xref> properties before accessing the <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs.Result\" data-throw-if-not-resolved=\"false\"></xref> property. If an exception was raised or if the operation was canceled, accessing the <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs.Result\" data-throw-if-not-resolved=\"false\"></xref> property raises an exception. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event to handle the result of an asynchronous operation. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.BackgroundWorker#6"
  syntax:
    content: public event RunWorkerCompletedEventHandler RunWorkerCompleted
    content.vb: Public Event RunWorkerCompleted As RunWorkerCompletedEventHandler
    return:
      type: System.ComponentModel.RunWorkerCompletedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.BackgroundWorker.CancelAsync
  commentId: M:System.ComponentModel.BackgroundWorker.CancelAsync
  id: CancelAsync
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: CancelAsync()
  fullName: System.ComponentModel.BackgroundWorker.CancelAsync()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CancelAsync
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 47
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Requests cancellation of a pending background operation.</p>\n"
  remarks: "\n<p>\n<xref href=\"System.ComponentModel.BackgroundWorker.CancelAsync\" data-throw-if-not-resolved=\"false\"></xref> submits a request to terminate the pending background operation and sets the <xref href=\"System.ComponentModel.BackgroundWorker.CancellationPending\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>true</strong>.</p>\n<p>When you call <xref href=\"System.ComponentModel.BackgroundWorker.CancelAsync\" data-throw-if-not-resolved=\"false\"></xref>, your worker method has an opportunity to stop its execution and exit. The worker code should periodically check the <xref href=\"System.ComponentModel.BackgroundWorker.CancellationPending\" data-throw-if-not-resolved=\"false\"></xref> property to see if it has been set to <strong>true</strong>.</p>\n<p>Be aware that your code in the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event handler may finish its work as a cancellation request is being made, and your polling loop may miss <xref href=\"System.ComponentModel.BackgroundWorker.CancellationPending\" data-throw-if-not-resolved=\"false\"></xref> being set to <strong>true</strong>. In this case, the <xref href=\"System.ComponentModel.AsyncCompletedEventArgs.Cancelled\" data-throw-if-not-resolved=\"false\"></xref> flag of <xref href=\"System.ComponentModel.RunWorkerCompletedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> in your <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event handler will not be set to <strong>true</strong>, even though a cancellation request was made. This situation is called a race condition and is a common concern in multithreaded programming. For more information about multithreading design issues, see Managed Threading Best Practices.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.BackgroundWorker.CancelAsync\" data-throw-if-not-resolved=\"false\"></xref> method to cancel an asynchronous (\"background\") operation. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.BackgroundWorker#4"
  syntax:
    content: public void CancelAsync()
    content.vb: Public Sub CancelAsync
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.ComponentModel.BackgroundWorker.WorkerSupportsCancellation\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)
  commentId: M:System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)
  id: OnDoWork(System.ComponentModel.DoWorkEventArgs)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: OnDoWork(DoWorkEventArgs)
  fullName: System.ComponentModel.BackgroundWorker.OnDoWork(System.ComponentModel.DoWorkEventArgs)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnDoWork
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 67
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Raises the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event. </p>\n"
  syntax:
    content: protected virtual void OnDoWork(DoWorkEventArgs e)
    content.vb: Protected Overridable Sub OnDoWork(e As DoWorkEventArgs)
    parameters:
    - id: e
      type: System.ComponentModel.DoWorkEventArgs
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)
  commentId: M:System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)
  id: OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: OnProgressChanged(ProgressChangedEventArgs)
  fullName: System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnProgressChanged
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 85
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Raises the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  remarks: "\n<p>Raising an event invokes the event handler through a delegate. For more information, see NIB: Raising an Event.</p>\n<p>The <xref href=\"System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.BackgroundWorker.OnProgressChanged(System.ComponentModel.ProgressChangedEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method to report the progress of an asynchronous operation. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.AsyncOperationManager\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.AsyncOperationManager#24"
  syntax:
    content: protected virtual void OnProgressChanged(ProgressChangedEventArgs e)
    content.vb: Protected Overridable Sub OnProgressChanged(e As ProgressChangedEventArgs)
    parameters:
    - id: e
      type: System.ComponentModel.ProgressChangedEventArgs
  seealso:
  - type: System.ComponentModel.BackgroundWorker.ProgressChanged
    commentId: E:System.ComponentModel.BackgroundWorker.ProgressChanged
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)
  commentId: M:System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)
  id: OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: OnRunWorkerCompleted(RunWorkerCompletedEventArgs)
  fullName: System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnRunWorkerCompleted
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 76
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Raises the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerCompleted\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  remarks: "\n<p>Raising an event invokes the event handler through a delegate. For more information, see NIB: Raising an Event.</p>\n<p>The <xref href=\"System.ComponentModel.BackgroundWorker.OnRunWorkerCompleted(System.ComponentModel.RunWorkerCompletedEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method also allows derived classes to handle the event without attaching a delegate. This is the preferred technique for handling the event in a derived class.</p>\n"
  syntax:
    content: protected virtual void OnRunWorkerCompleted(RunWorkerCompletedEventArgs e)
    content.vb: Protected Overridable Sub OnRunWorkerCompleted(e As RunWorkerCompletedEventArgs)
    parameters:
    - id: e
      type: System.ComponentModel.RunWorkerCompletedEventArgs
  seealso:
  - type: System.ComponentModel.BackgroundWorker.RunWorkerCompleted
    commentId: E:System.ComponentModel.BackgroundWorker.RunWorkerCompleted
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)
  commentId: M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)
  id: ReportProgress(System.Int32)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: ReportProgress(Int32)
  fullName: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReportProgress
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 103
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Raises the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  remarks: "\n<p>If you need the background operation to report on its progress, you can call the <xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to raise the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref> event. The <xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\" data-throw-if-not-resolved=\"false\"></xref> property value must be <strong>true</strong>, or <xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> will throw an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</p>\n<p>The call to the <xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is asynchronous and returns immediately. The <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref> event handler executes on the thread that created the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to report the progress of an asynchronous operation to the user. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.BackgroundWorker#8"
  syntax:
    content: public void ReportProgress(int percentProgress)
    content.vb: Public Sub ReportProgress(percentProgress As Integer)
    parameters:
    - id: percentProgress
      type: System.Int32
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)
  commentId: M:System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)
  id: ReportProgress(System.Int32,System.Object)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: ReportProgress(Int32, Object)
  fullName: System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReportProgress
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 109
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Raises the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  remarks: "\n<p>If you need the background operation to report on its progress, you can call the <xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to raise the <xref href=\"System.ComponentModel.BackgroundWorker.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref> event. The <xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\" data-throw-if-not-resolved=\"false\"></xref> property value must <strong>true</strong>, or <xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> will throw an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>It is up to you to implement a meaningful way of measuring your background operation's progress as a percentage of the total task completed.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.BackgroundWorker.ReportProgress(System.Int32,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method to report the progress of an asynchronous operation to the user. This code example is part of a larger example provided for the <xref href=\"System.Windows.Forms.ToolStripProgressBar\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.Windows.Forms.ToolStripProgressBar#10"
  syntax:
    content: public void ReportProgress(int percentProgress, object userState)
    content.vb: Public Sub ReportProgress(percentProgress As Integer, userState As Object)
    parameters:
    - id: percentProgress
      type: System.Int32
    - id: userState
      type: System.Object
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.ComponentModel.BackgroundWorker.WorkerReportsProgress\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync
  commentId: M:System.ComponentModel.BackgroundWorker.RunWorkerAsync
  id: RunWorkerAsync
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: RunWorkerAsync()
  fullName: System.ComponentModel.BackgroundWorker.RunWorkerAsync()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RunWorkerAsync
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 128
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Starts execution of a background operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\" data-throw-if-not-resolved=\"false\"></xref> method submits a request to start the operation running asynchronously. When the request is serviced, the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event is raised, which in turn starts execution of your background operation.</p>\n<p>If the background operation is already running, calling <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\" data-throw-if-not-resolved=\"false\"></xref> again will raise an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\" data-throw-if-not-resolved=\"false\"></xref> method to start an asynchronous operation. It is part of a larger example described in How to: Download a File in the Background.</p>System.ComponentModel.BackgroundWorker.IsBusy#2"
  syntax:
    content: public void RunWorkerAsync()
    content.vb: Public Sub RunWorkerAsync
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.ComponentModel.BackgroundWorker.IsBusy\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>.</p>\n"
  seealso:
  - type: System.ComponentModel.BackgroundWorker.DoWork
    commentId: E:System.ComponentModel.BackgroundWorker.DoWork
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)
  commentId: M:System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)
  id: RunWorkerAsync(System.Object)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: RunWorkerAsync(Object)
  fullName: System.ComponentModel.BackgroundWorker.RunWorkerAsync(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RunWorkerAsync
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 133
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  summary: "\n<p>Starts execution of a background operation.</p>\n"
  remarks: "\n<p>The <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\" data-throw-if-not-resolved=\"false\"></xref> method submits a request to start the operation running asynchronously. When the request is serviced, the <xref href=\"System.ComponentModel.BackgroundWorker.DoWork\" data-throw-if-not-resolved=\"false\"></xref> event is raised, which in turn starts execution of your background operation.</p>\n<p>If your operation requires a parameter, you can provide it as the <em>argument</em> parameter to <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the background operation is already running, calling <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\" data-throw-if-not-resolved=\"false\"></xref> again will raise an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the use of the <xref href=\"System.ComponentModel.BackgroundWorker.RunWorkerAsync\" data-throw-if-not-resolved=\"false\"></xref> method to start an asynchronous operation. This code example is part of a larger example provided for the <xref href=\"System.ComponentModel.BackgroundWorker\" data-throw-if-not-resolved=\"false\"></xref> class.</p>System.ComponentModel.BackgroundWorker#3"
  syntax:
    content: public void RunWorkerAsync(object argument)
    content.vb: Public Sub RunWorkerAsync(argument As Object)
    parameters:
    - id: argument
      type: System.Object
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.ComponentModel.BackgroundWorker.IsBusy\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>. </p>\n"
  seealso:
  - type: System.ComponentModel.BackgroundWorker.DoWork
    commentId: E:System.ComponentModel.BackgroundWorker.DoWork
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.BackgroundWorker.Dispose
  commentId: M:System.ComponentModel.BackgroundWorker.Dispose
  id: Dispose
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.ComponentModel.BackgroundWorker.Dispose()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 211
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)
  commentId: M:System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.BackgroundWorker
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.ComponentModel.BackgroundWorker.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.ComponentModel.EventBasedAsync/src/System/ComponentModel/BackgroundWorker.cs
    startLine: 217
  assemblies:
  - System.ComponentModel.EventBasedAsync
  namespace: System.ComponentModel
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.DoWorkEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: DoWorkEventHandler
  fullName: System.ComponentModel.DoWorkEventHandler
- uid: System.ComponentModel.ProgressChangedEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: ProgressChangedEventHandler
  fullName: System.ComponentModel.ProgressChangedEventHandler
- uid: System.ComponentModel.RunWorkerCompletedEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: RunWorkerCompletedEventHandler
  fullName: System.ComponentModel.RunWorkerCompletedEventHandler
- uid: System.ComponentModel.DoWorkEventArgs
  parent: System.ComponentModel
  isExternal: false
  name: DoWorkEventArgs
  fullName: System.ComponentModel.DoWorkEventArgs
- uid: System.ComponentModel.ProgressChangedEventArgs
  parent: System.ComponentModel
  isExternal: false
  name: ProgressChangedEventArgs
  fullName: System.ComponentModel.ProgressChangedEventArgs
- uid: System.ComponentModel.RunWorkerCompletedEventArgs
  parent: System.ComponentModel
  isExternal: false
  name: RunWorkerCompletedEventArgs
  fullName: System.ComponentModel.RunWorkerCompletedEventArgs
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
