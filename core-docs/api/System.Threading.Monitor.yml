items:
- uid: System.Threading.Monitor
  commentId: T:System.Threading.Monitor
  id: Monitor
  parent: System.Threading
  children:
  - System.Threading.Monitor.Enter(System.Object)
  - System.Threading.Monitor.Enter(System.Object,System.Boolean@)
  - System.Threading.Monitor.Exit(System.Object)
  - System.Threading.Monitor.IsEntered(System.Object)
  - System.Threading.Monitor.Pulse(System.Object)
  - System.Threading.Monitor.PulseAll(System.Object)
  - System.Threading.Monitor.TryEnter(System.Object)
  - System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)
  - System.Threading.Monitor.TryEnter(System.Object,System.Int32)
  - System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)
  - System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)
  - System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  - System.Threading.Monitor.Wait(System.Object)
  - System.Threading.Monitor.Wait(System.Object,System.Int32)
  - System.Threading.Monitor.Wait(System.Object,System.TimeSpan)
  langs:
  - csharp
  - vb
  name: Monitor
  fullName: System.Threading.Monitor
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Monitor
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 28
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Provides a mechanism that synchronizes access to objects.
  syntax:
    content: 'public class Monitor : object'
    content.vb: >-
      Public Class Monitor
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.Monitor.Enter(System.Object)
  commentId: M:System.Threading.Monitor.Enter(System.Object)
  id: Enter(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Enter(Object)
  fullName: System.Threading.Monitor.Enter(System.Object)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Acquires an exclusive lock on the specified object.
  syntax:
    content: public static void Enter(object obj)
    content.vb: Public Shared Sub Enter(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object on which to acquire the monitor lock. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.Enter(System.Object,System.Boolean@)
  commentId: M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)
  id: Enter(System.Object,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Enter(Object, ref Boolean)
  fullName: System.Threading.Monitor.Enter(System.Object, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Enter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 50
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.
  syntax:
    content: public static void Enter(object obj, ref bool lockTaken)
    content.vb: Public Shared Sub Enter(obj As Object, ByRef lockTaken As Boolean)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object on which to wait. '
    - id: lockTaken
      type: System.Boolean
      description: "The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is set even if an exception occurs during the attempt to acquire the lock. Note   If no exception occurs, the output of this method is always true."
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The input to <em>lockTaken</em> is true.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Monitor.Enter(System.Object, ByRef System.Boolean)
  name.vb: Enter(Object, ByRef Boolean)
- uid: System.Threading.Monitor.Exit(System.Object)
  commentId: M:System.Threading.Monitor.Exit(System.Object)
  id: Exit(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Exit(Object)
  fullName: System.Threading.Monitor.Exit(System.Object)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases an exclusive lock on the specified object.
  syntax:
    content: public static void Exit(object obj)
    content.vb: Public Shared Sub Exit(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object on which to release the lock. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: 'The current thread does not own the lock for the specified object. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.IsEntered(System.Object)
  commentId: M:System.Threading.Monitor.IsEntered(System.Object)
  id: IsEntered(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: IsEntered(Object)
  fullName: System.Threading.Monitor.IsEntered(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsEntered
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 160
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'Determines whether the current thread holds the lock on the specified object. '
  syntax:
    content: public static bool IsEntered(object obj)
    content.vb: Public Shared Function IsEntered(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The object to test. '
    return:
      type: System.Boolean
      description: true if the current thread holds the lock on <em>obj</em>; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>obj</em> is null. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.Pulse(System.Object)
  commentId: M:System.Threading.Monitor.Pulse(System.Object)
  id: Pulse(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Pulse(Object)
  fullName: System.Threading.Monitor.Pulse(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Pulse
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 225
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Notifies a thread in the waiting queue of a change in the locked object's state.
  syntax:
    content: public static void Pulse(object obj)
    content.vb: Public Shared Sub Pulse(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object a thread is waiting for. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: 'The calling thread does not own the lock for the specified object. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.PulseAll(System.Object)
  commentId: M:System.Threading.Monitor.PulseAll(System.Object)
  id: PulseAll(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: PulseAll(Object)
  fullName: System.Threading.Monitor.PulseAll(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PulseAll
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 243
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Notifies all waiting threads of a change in the object's state.
  syntax:
    content: public static void PulseAll(object obj)
    content.vb: Public Shared Sub PulseAll(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object that sends the pulse. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: 'The calling thread does not own the lock for the specified object. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.TryEnter(System.Object)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object)
  id: TryEnter(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object)
  fullName: System.Threading.Monitor.TryEnter(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 91
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Attempts to acquire an exclusive lock on the specified object.
  syntax:
    content: public static bool TryEnter(object obj)
    content.vb: Public Shared Function TryEnter(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The object on which to acquire the lock. '
    return:
      type: System.Boolean
      description: true if the current thread acquires the lock; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)
  id: TryEnter(System.Object,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, ref Boolean)
  fullName: System.Threading.Monitor.TryEnter(System.Object, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 100
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.
  syntax:
    content: public static void TryEnter(object obj, ref bool lockTaken)
    content.vb: Public Shared Sub TryEnter(obj As Object, ByRef lockTaken As Boolean)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object on which to acquire the lock. '
    - id: lockTaken
      type: System.Boolean
      description: The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is set even if an exception occurs during the attempt to acquire the lock.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The input to <em>lockTaken</em> is true.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Monitor.TryEnter(System.Object, ByRef System.Boolean)
  name.vb: TryEnter(Object, ByRef Boolean)
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Int32)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)
  id: TryEnter(System.Object,System.Int32)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, Int32)
  fullName: System.Threading.Monitor.TryEnter(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 118
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.
  syntax:
    content: public static bool TryEnter(object obj, int millisecondsTimeout)
    content.vb: Public Shared Function TryEnter(obj As Object, millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The object on which to acquire the lock. '
    - id: millisecondsTimeout
      type: System.Int32
      description: 'The number of milliseconds to wait for the lock. '
    return:
      type: System.Boolean
      description: true if the current thread acquires the lock; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is negative, and not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)
  id: TryEnter(System.Object,System.Int32,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, Int32, ref Boolean)
  fullName: System.Threading.Monitor.TryEnter(System.Object, System.Int32, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 140
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.
  syntax:
    content: public static void TryEnter(object obj, int millisecondsTimeout, ref bool lockTaken)
    content.vb: Public Shared Sub TryEnter(obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object on which to acquire the lock. '
    - id: millisecondsTimeout
      type: System.Int32
      description: 'The number of milliseconds to wait for the lock. '
    - id: lockTaken
      type: System.Boolean
      description: The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is set even if an exception occurs during the attempt to acquire the lock.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The input to <em>lockTaken</em> is true.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is negative, and not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Monitor.TryEnter(System.Object, System.Int32, ByRef System.Boolean)
  name.vb: TryEnter(Object, Int32, ByRef Boolean)
- uid: System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)
  id: TryEnter(System.Object,System.TimeSpan)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, TimeSpan)
  fullName: System.Threading.Monitor.TryEnter(System.Object, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 133
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.
  syntax:
    content: public static bool TryEnter(object obj, TimeSpan timeout)
    content.vb: Public Shared Function TryEnter(obj As Object, timeout As TimeSpan) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The object on which to acquire the lock. '
    - id: timeout
      type: System.TimeSpan
      description: "A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> representing the amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait."
    return:
      type: System.Boolean
      description: true if the current thread acquires the lock; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value of <em>timeout</em> in milliseconds is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (–1 millisecond), or is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  id: TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, TimeSpan, ref Boolean)
  fullName: System.Threading.Monitor.TryEnter(System.Object, System.TimeSpan, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 148
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.
  syntax:
    content: public static void TryEnter(object obj, TimeSpan timeout, ref bool lockTaken)
    content.vb: Public Shared Sub TryEnter(obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object on which to acquire the lock. '
    - id: timeout
      type: System.TimeSpan
      description: "The amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait."
    - id: lockTaken
      type: System.Boolean
      description: The result of the attempt to acquire the lock, passed by reference. The input must be false. The output is true if the lock is acquired; otherwise, the output is false. The output is set even if an exception occurs during the attempt to acquire the lock.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The input to <em>lockTaken</em> is true.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value of <em>timeout</em> in milliseconds is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (–1 millisecond), or is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Monitor.TryEnter(System.Object, System.TimeSpan, ByRef System.Boolean)
  name.vb: TryEnter(Object, TimeSpan, ByRef Boolean)
- uid: System.Threading.Monitor.Wait(System.Object)
  commentId: M:System.Threading.Monitor.Wait(System.Object)
  id: Wait(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Wait(Object)
  fullName: System.Threading.Monitor.Wait(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 211
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases the lock on an object and blocks the current thread until it reacquires the lock.
  syntax:
    content: public static bool Wait(object obj)
    content.vb: Public Shared Function Wait(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The object on which to wait. '
    return:
      type: System.Boolean
      description: true if the call returned because the caller reacquired the lock for the specified object. This method does not return if the lock is not reacquired.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: 'The calling thread does not own the lock for the specified object. '
  - type: System.Threading.ThreadInterruptedException
    commentId: T:System.Threading.ThreadInterruptedException
    description: 'The thread that invokes Wait is later interrupted from the waiting state. This happens when another thread calls this thread''s <xref href="System.Threading.Thread.Interrupt" data-throw-if-not-resolved="false"></xref> method. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.Wait(System.Object,System.Int32)
  commentId: M:System.Threading.Monitor.Wait(System.Object,System.Int32)
  id: Wait(System.Object,System.Int32)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Wait(Object, Int32)
  fullName: System.Threading.Monitor.Wait(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 201
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.
  syntax:
    content: public static bool Wait(object obj, int millisecondsTimeout)
    content.vb: Public Shared Function Wait(obj As Object, millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The object on which to wait. '
    - id: millisecondsTimeout
      type: System.Int32
      description: 'The number of milliseconds to wait before the thread enters the ready queue. '
    return:
      type: System.Boolean
      description: true if the lock was reacquired before the specified time elapsed; false if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: 'The calling thread does not own the lock for the specified object. '
  - type: System.Threading.ThreadInterruptedException
    commentId: T:System.Threading.ThreadInterruptedException
    description: 'The thread that invokes Wait is later interrupted from the waiting state. This happens when another thread calls this thread''s <xref href="System.Threading.Thread.Interrupt" data-throw-if-not-resolved="false"></xref> method. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: 'The value of the <em>millisecondsTimeout</em> parameter is negative, and is not equal to <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref>. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.Wait(System.Object,System.TimeSpan)
  commentId: M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)
  id: Wait(System.Object,System.TimeSpan)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Wait(Object, TimeSpan)
  fullName: System.Threading.Monitor.Wait(System.Object, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 206
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.
  syntax:
    content: public static bool Wait(object obj, TimeSpan timeout)
    content.vb: Public Shared Function Wait(obj As Object, timeout As TimeSpan) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The object on which to wait. '
    - id: timeout
      type: System.TimeSpan
      description: 'A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> representing the amount of time to wait before the thread enters the ready queue. '
    return:
      type: System.Boolean
      description: true if the lock was reacquired before the specified time elapsed; false if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>obj</em> parameter is null. '
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: 'The calling thread does not own the lock for the specified object. '
  - type: System.Threading.ThreadInterruptedException
    commentId: T:System.Threading.ThreadInterruptedException
    description: 'The thread that invokes Wait is later interrupted from the waiting state. This happens when another thread calls this thread''s <xref href="System.Threading.Thread.Interrupt" data-throw-if-not-resolved="false"></xref> method. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value of the <em>timeout</em> parameter in milliseconds is negative and does not represent <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (–1 millisecond), or is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Threading.SynchronizationLockException
  isExternal: false
  name: SynchronizationLockException
  fullName: System.Threading.SynchronizationLockException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Threading.ThreadInterruptedException
