items:
- uid: System.Threading.Monitor
  commentId: T:System.Threading.Monitor
  id: Monitor
  parent: System.Threading
  children:
  - System.Threading.Monitor.Enter(System.Object)
  - System.Threading.Monitor.Enter(System.Object,System.Boolean@)
  - System.Threading.Monitor.Exit(System.Object)
  - System.Threading.Monitor.IsEntered(System.Object)
  - System.Threading.Monitor.Pulse(System.Object)
  - System.Threading.Monitor.PulseAll(System.Object)
  - System.Threading.Monitor.TryEnter(System.Object)
  - System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)
  - System.Threading.Monitor.TryEnter(System.Object,System.Int32)
  - System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)
  - System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)
  - System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  - System.Threading.Monitor.Wait(System.Object)
  - System.Threading.Monitor.Wait(System.Object,System.Int32)
  - System.Threading.Monitor.Wait(System.Object,System.TimeSpan)
  langs:
  - csharp
  - vb
  name: Monitor
  fullName: System.Threading.Monitor
  type: Class
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Monitor
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 183
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Provides a mechanism that synchronizes access to objects.</p>\n"
  remarks: "\n<p>\nThe <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> class allows you to synchronize access to a region of code by taking and releasing a lock on a particular object by calling the <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Monitor.TryEnter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Threading.Monitor.Exit(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods. Object locks provide the ability to restrict access to a block of code, commonly called a critical section. While a thread owns the lock for an object, no other thread can acquire that lock. You can also use the <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> class to ensure that no other thread is allowed to access a section of application code being executed by the lock owner, unless the other thread is executing the code using a different locked object.</p>\n<p>In this article:</p>\n<p>The Monitor class: An overviewThe lock objectThe critical sectionPulse, PulseAll, and WaitMonitors and wait handles</p>\n"
  example:
  - <p>The following example uses the <xref href="System.Threading.Monitor" data-throw-if-not-resolved="false"></xref> class to synchronize access to a single instance of a random number generator represented by the <xref href="System.Random" data-throw-if-not-resolved="false"></xref> class. The example creates ten tasks, each of which executes asynchronously on a thread pool thread. Each task generates 10,000 random numbers, calculates their average, and updates two procedure-level variables that maintain a running total of the number of random numbers generated and their sum. After all tasks have executed, these two values are then used to calculate the overall mean. </p>System.Threading.Monitor.Class#1<p>Because they can be accessed from any task running on a thread pool thread, access to the variables <code>total</code> and <code>n</code> must also be synchronized. The <xref href="System.Threading.Interlocked.Add(System.Int64@,System.Int64)" data-throw-if-not-resolved="false"></xref> method is used for this purpose. </p>
  - '<p>The following example demonstrates the combined use of the <xref href="System.Threading.Monitor" data-throw-if-not-resolved="false"></xref> class (implemented with the <strong>lock</strong> or <strong>SyncLock</strong> language construct), the <xref href="System.Threading.Interlocked" data-throw-if-not-resolved="false"></xref> class, and the <xref href="System.Threading.AutoResetEvent" data-throw-if-not-resolved="false"></xref> class. It defines two <strong>internal</strong> (in C#) or <strong>Friend</strong> (in Visual Basic) classes, <code>SyncResource</code> and <code>UnSyncResource</code>, that respectively provide synchronized and unsynchronized access to a resource. To ensure that the example illustrates the difference between the synchronized and unsynchronized access (which could be the case if each method call completes rapidly), the method includes a random delay: for threads whose <xref href="System.Threading.Thread.ManagedThreadId" data-throw-if-not-resolved="false"></xref> property is even, the method calls <xref href="System.Threading.Thread.Sleep(System.Int32)" data-throw-if-not-resolved="false"></xref> to introduce a delay of 2,000 milliseconds. Note that, because the <code>SyncResource</code> class is not public, none of the client code takes a lock on the synchronized resource; the internal class itself takes the lock. This prevents malicious code from taking a lock on a public object. </p>Conceptual.Monitors#1<p>The example defines a variable, <code>numOps</code>, that defines the number of threads that will attempt to access the resource. The application thread calls the <xref href="System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)" data-throw-if-not-resolved="false"></xref> method for synchronized and unsynchronized access five times each. The <xref href="System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)" data-throw-if-not-resolved="false"></xref> method has a single parameter, a delegate that accepts no parameters and returns no value. For synchronized access, it invokes the <code>SyncUpdateResource</code> method; for unsynchronized access, it invokes the <code>UnSyncUpdateResource</code> method. After each set of method calls, the application thread calls the <see href="https://msdn.microsoft.com/library/58195swd.aspx">AutoResetEvent.WaitOne</see> method so that it blocks until the <xref href="System.Threading.AutoResetEvent" data-throw-if-not-resolved="false"></xref> instance is signaled. </p><p>Each call to the <code>SyncUpdateResource</code> method calls the internal <code>SyncResource.Access</code> method and then calls the <xref href="System.Threading.Interlocked.Decrement(System.Int64@)" data-throw-if-not-resolved="false"></xref> method to decrement the <code>numOps</code> counter. The <xref href="System.Threading.Interlocked.Decrement(System.Int64@)" data-throw-if-not-resolved="false"></xref> method Is used to decrement the counter, because otherwise you cannot be certain that a second thread will access the value before a first thread''s decremented value has been stored in the variable. When the last synchronized worker thread decrements the counter to zero, indicating that all synchronized threads have completed accessing the resource, the <code>SyncUpdateResource</code> method calls the <see href="https://msdn.microsoft.com/library/system.threading.eventwaithandle.set.aspx">EventWaitHandle.Set</see> method, which signals the main thread to continue execution. </p><p>Each call to the <code>UnSyncUpdateResource</code> method calls the internal <code>UnSyncResource.Access</code> method and then calls the <xref href="System.Threading.Interlocked.Decrement(System.Int64@)" data-throw-if-not-resolved="false"></xref> method to decrement the <code>numOps</code> counter. Once again, the <xref href="System.Threading.Interlocked.Decrement(System.Int64@)" data-throw-if-not-resolved="false"></xref> method Is used to decrement the counter to ensure that a second thread does not access the value before a first thread''s decremented value has been assigned to the variable. When the last unsynchronized worker thread decrements the counter to zero, indicating that no more unsynchronized threads need to access the resource, the <code>UnSyncUpdateResource</code> method calls the <see href="https://msdn.microsoft.com/library/system.threading.eventwaithandle.set.aspx">EventWaitHandle.Set</see> method, which signals the main thread to continue execution.</p><p>As the output from  the example shows, synchronized access ensures that the calling thread exits the protected resource before another thread can access it; each thread waits on its predecessor. On the other hand, without the lock, the <code>UnSyncResource.Access</code> method is called in the order in which threads reach it. </p>'
  syntax:
    content: 'public class Monitor : object'
    content.vb: >-
      Public Class Monitor
          Inherits Object
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.Monitor.Enter(System.Object)
  commentId: M:System.Threading.Monitor.Enter(System.Object)
  id: Enter(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Enter(Object)
  fullName: System.Threading.Monitor.Enter(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Enter
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 185
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Acquires an exclusive lock on the specified object.</p>\n"
  remarks: "\n<p>Use <strong>Enter</strong> to acquire the <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> on the object passed as the parameter. If another thread has executed an <strong>Enter</strong> on the object but has not yet executed the corresponding <xref href=\"System.Threading.Monitor.Exit(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, the current thread will block until the other thread releases the object. It is legal for the same thread to invoke <strong>Enter</strong> more than once without it blocking; however, an equal number of <strong>Exit</strong> calls must be invoked before other threads waiting on the object will unblock.</p>\n<p>Use <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> to lock objects (that is, reference types), not value types. When you pass a value type variable to <strong>Enter</strong>, it is boxed as an object. If you pass the same variable to <strong>Enter</strong> again, it is boxed as a separate object, and the thread does not block. In this case, the code that <strong>Monitor</strong> is supposedly protecting is not protected. Furthermore, when you pass the variable to <strong>Exit</strong>, still another separate object is created. Because the object passed to <strong>Exit</strong> is different from the object passed to <strong>Enter</strong>, <strong>Monitor</strong> throws <xref href=\"System.Threading.SynchronizationLockException\" data-throw-if-not-resolved=\"false\"></xref>. For more information, see the conceptual topic Monitors.</p>\n<p>\n<xref href=\"System.Threading.Thread.Interrupt\" data-throw-if-not-resolved=\"false\"></xref> can interrupt threads that are waiting to enter a <strong>Monitor</strong> on an object. A <xref href=\"System.Threading.ThreadInterruptedException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown.</p>\n<p>Use a C# <strong>try</strong>…<strong>finally</strong> block (<strong>Try</strong>…<strong>Finally</strong> in Visual Basic) to ensure that you release the monitor, or use the C# <strong>lock</strong> statement (<strong>SyncLock</strong> statement in Visual Basic), which wraps the <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Threading.Monitor.Exit(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> methods in a <strong>try</strong>…<strong>finally</strong> block.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <strong>Enter</strong> method.</p>MonitorExmpl2#1"
  syntax:
    content: public static void Enter(object obj)
    content.vb: Public Shared Sub Enter(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the monitor lock. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.Enter(System.Object,System.Boolean@)
  commentId: M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)
  id: Enter(System.Object,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Enter(Object, ref Boolean)
  fullName: System.Threading.Monitor.Enter(System.Object, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Enter
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 186
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n"
  remarks: "\n<p>Use <strong>Enter</strong> to acquire the <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> on the object passed as the <em>obj</em> parameter. If another thread has executed an <strong>Enter</strong> on the object but has not yet executed the corresponding <xref href=\"System.Threading.Monitor.Exit(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, the current thread will block until the other thread releases the object. It is legal for the same thread to invoke <strong>Enter</strong> more than once without it blocking; however, an equal number of <strong>Exit</strong> calls must be invoked before other threads waiting on the object will unblock.</p>\n<p>If the lock was not taken because an exception was thrown, the variable specified for the <em>lockTaken</em> parameter is <strong>false</strong> after this method ends. This allows the program to determine, in all cases, whether it is necessary to release the lock. If this method returns without throwing an exception, the variable specified for the <em>lockTaken</em> parameter is always <strong>true</strong>, and there is no need to test it.</p>\n<p>Use <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> to lock objects (that is, reference types), not value types. When you pass a value type variable to <strong>Enter</strong>, it is boxed as an object. If you pass the same variable to <strong>Enter</strong> again, it is boxed as a separate object, and the thread does not block. In this case, the code that <strong>Monitor</strong> is supposedly protecting is not protected. Furthermore, when you pass the variable to <strong>Exit</strong>, another separate object is created. Because the object passed to <strong>Exit</strong> is different from the object passed to <strong>Enter</strong>, <strong>Monitor</strong> throws <xref href=\"System.Threading.SynchronizationLockException\" data-throw-if-not-resolved=\"false\"></xref>. For more information, see the conceptual topic Monitors.</p>\n<p>\n<xref href=\"System.Threading.Thread.Interrupt\" data-throw-if-not-resolved=\"false\"></xref> can interrupt threads that are waiting to enter a <strong>Monitor</strong> on an object. A <xref href=\"System.Threading.ThreadInterruptedException\" data-throw-if-not-resolved=\"false\"></xref> will be thrown.</p>\n"
  example:
  - "\n<p>The following code shows the basic pattern for using the <xref href=\"System.Threading.Monitor.Enter(System.Object,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method overload. This overload always sets the value of the variable that is passed to the <strong>ref</strong> parameter (<strong>ByRef</strong> in Visual Basic) <em>lockTaken</em>, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</p>System.Threading.Monitor.Enter#2"
  syntax:
    content: public static void Enter(object obj, ref bool lockTaken)
    content.vb: Public Shared Sub Enter(obj As Object, ByRef lockTaken As Boolean)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to wait. </p>\n"
    - id: lockTaken
      type: System.Boolean
      description: "\n<p>The result of the attempt to acquire the lock, passed by reference. The input must be <strong>false</strong>. The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>. The output is set even if an exception occurs during the attempt to acquire the lock. </p>\n<p>Note   If no exception occurs, the output of this method is always <strong>true</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Monitor.Enter(System.Object, ByRef System.Boolean)
  name.vb: Enter(Object, ByRef Boolean)
- uid: System.Threading.Monitor.Exit(System.Object)
  commentId: M:System.Threading.Monitor.Exit(System.Object)
  id: Exit(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Exit(Object)
  fullName: System.Threading.Monitor.Exit(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exit
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 187
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases an exclusive lock on the specified object.</p>\n"
  remarks: "\n<p>The calling thread must own the lock on the <em>obj</em> parameter. If the calling thread owns the lock on the specified object, and has made an equal number of <strong>Exit</strong> and <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> calls for the object, then the lock is released. If the calling thread has not invoked <strong>Exit</strong> as many times as <strong>Enter</strong>, the lock is not released.</p>\n<p>If the lock is released and other threads are in the ready queue for the object, one of the threads acquires the lock. If other threads are in the waiting queue waiting to acquire the lock, they are not automatically moved to the ready queue when the owner of the lock calls <strong>Exit</strong>. To move one or more waiting threads into the ready queue, call <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> before invoking <strong>Exit</strong>.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <strong>Exit</strong> method.</p>MonitorExmpl2#1"
  syntax:
    content: public static void Exit(object obj)
    content.vb: Public Shared Sub Exit(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to release the lock. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>The current thread does not own the lock for the specified object. </p>\n"
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.IsEntered(System.Object)
  commentId: M:System.Threading.Monitor.IsEntered(System.Object)
  id: IsEntered(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: IsEntered(Object)
  fullName: System.Threading.Monitor.IsEntered(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEntered
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 188
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Determines whether the current thread holds the lock on the specified object. </p>\n"
  remarks: "\n<p>This method works only for locks that are acquired by using the methods of the <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> class, or by using the C# <strong>lock</strong> statement or the Visual Basic <strong>SyncLock</strong> statement, which are implemented with <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>Use this method with diagnostic tools, such as the <xref href=\"System.Diagnostics.Debug.Assert(System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> method and the <xref href=\"System.Diagnostics.Contracts.Contract\" data-throw-if-not-resolved=\"false\"></xref> class, to debug locking issues that involve the <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref>class. </p>\n"
  syntax:
    content: public static bool IsEntered(object obj)
    content.vb: Public Shared Function IsEntered(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to test. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current thread holds the lock on <em>obj</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>obj</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.Pulse(System.Object)
  commentId: M:System.Threading.Monitor.Pulse(System.Object)
  id: Pulse(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Pulse(Object)
  fullName: System.Threading.Monitor.Pulse(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pulse
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 189
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Notifies a thread in the waiting queue of a change in the locked object's state.</p>\n"
  remarks: "\n<p>Only the current owner of the lock can signal a waiting object using <strong>Pulse</strong>.</p>\n<p>The thread that currently owns the lock on the specified object invokes this method to signal the next thread in line for the lock. Upon receiving the pulse, the waiting thread is moved to the ready queue. When the thread that invoked <strong>Pulse</strong> releases the lock, the next thread in the ready queue (which is not necessarily the thread that was pulsed) acquires the lock.</p>\n<p>The <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> class does not maintain state indicating that the <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method has been called. Thus, if you call <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> when no threads are waiting, the next thread that calls <see cref=\"Overload:System.Threading.Monitor.Wait\"></see> blocks as if <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> had never been called. If two threads are using <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> and <see cref=\"Overload:System.Threading.Monitor.Wait\"></see> to interact, this could result in a deadlock. Contrast this with the behavior of the <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> class: If you signal an <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> by calling its <xref href=\"System.Threading.EventWaitHandle.Set\" data-throw-if-not-resolved=\"false\"></xref> method, and there are no threads waiting, the <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> remains in a signaled state until a thread calls <see cref=\"Overload:System.Threading.WaitHandle.WaitOne\"></see>, <see cref=\"Overload:System.Threading.WaitHandle.WaitAny\"></see>, or <see cref=\"Overload:System.Threading.WaitHandle.WaitAll\"></see>. The <xref href=\"System.Threading.AutoResetEvent\" data-throw-if-not-resolved=\"false\"></xref> releases that thread and returns to the unsignaled state.</p>\n<p>Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state. </p>\n<p>The <strong>Pulse</strong>, <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> methods must be invoked from within a synchronized block of code. </p>\n<p>To signal multiple threads, use the <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public static void Pulse(object obj)
    content.vb: Public Shared Sub Pulse(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object a thread is waiting for. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>The calling thread does not own the lock for the specified object. </p>\n"
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.PulseAll(System.Object)
  commentId: M:System.Threading.Monitor.PulseAll(System.Object)
  id: PulseAll(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: PulseAll(Object)
  fullName: System.Threading.Monitor.PulseAll(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PulseAll
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 190
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Notifies all waiting threads of a change in the object's state.</p>\n"
  remarks: "\n<p>The thread that currently owns the lock on the specified object invokes this method to signal all threads waiting to acquire the lock on the object. After the signal is sent, the waiting threads are moved to the ready queue. When the thread that invoked <strong>PulseAll</strong> releases the lock, the next thread in the ready queue acquires the lock.</p>\n<p>Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state. </p>\n<p>The <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <strong>PulseAll</strong>, and <xref href=\"System.Threading.Monitor.Wait(System.Object,System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> methods must be invoked from within a synchronized block of code.</p>\n<p>The remarks for the <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method explain what happens if <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> is called when no threads are waiting.</p>\n<p>To signal a single thread, use the <strong>Pulse</strong> method.</p>\n"
  syntax:
    content: public static void PulseAll(object obj)
    content.vb: Public Shared Sub PulseAll(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object that sends the pulse. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>The calling thread does not own the lock for the specified object. </p>\n"
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.TryEnter(System.Object)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object)
  id: TryEnter(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object)
  fullName: System.Threading.Monitor.TryEnter(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryEnter
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 191
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts to acquire an exclusive lock on the specified object.</p>\n"
  remarks: "\n<p>If successful, this method acquires an exclusive lock on the <em>obj</em> parameter. This method returns immediately, whether or not the lock is available.</p>\n<p>This method is similar to <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, but it will never block the current thread. If the thread cannot enter without blocking, the method returns <strong>false,</strong>.</p>\n<p>Use <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> to lock objects (that is, reference types), not value types. For details, see the <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> article.</p>\n<p>To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is <strong>true</strong>. The following code fragment shows the pattern used to call this method. Note that you should call <xref href=\"System.Threading.Monitor.Exit(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> in a <strong>finally</strong> block to ensure that the calling thread releases its lock on the critical section if an exception occurs. </p>System.Threading.Monitor.TryEnter#1"
  example:
  - "\n<p>The following code example demonstrates how to use the <strong>TryEnter</strong> method.</p>MonitorExmpl2#1"
  syntax:
    content: public static bool TryEnter(object obj)
    content.vb: Public Shared Function TryEnter(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the lock. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current thread acquires the lock; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)
  id: TryEnter(System.Object,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, ref Boolean)
  fullName: System.Threading.Monitor.TryEnter(System.Object, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryEnter
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 192
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n"
  remarks: "\n<p>If successful, this method acquires an exclusive lock on the <em>obj</em> parameter. This method returns immediately, whether or not the lock is available.</p>\n<p>If the lock was not taken because an exception was thrown, the variable specified for the <em>lockTaken</em> parameter is <strong>false</strong> after this method ends. This allows the program to determine, in all cases, whether it is necessary to release the lock.</p>\n<p>This method is similar to <xref href=\"System.Threading.Monitor.Enter(System.Object,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref>, but it will never block the current thread. If the thread cannot enter without blocking, the <em>lockTaken</em> argument is set to <strong>false</strong> when the method returns. </p>\n<p>Use <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> to lock objects (that is, reference types), not value types. For more information, see the <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> article.</p>\n<p>To ensure that the thread does not enter the critical section, you should examine the value of <em>lockTaken</em> and  execute code in the critical section only if its value is <strong>true</strong>. The following code fragment shows the pattern used to call this method. Note that you should call <xref href=\"System.Threading.Monitor.Exit(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> in a <strong>finally</strong> block to ensure that the calling thread releases its lock on the critical section if an exception occurs. </p>System.Threading.Monitor.TryEnter#2"
  example:
  - "\n<p>The following code shows the basic pattern for using the <xref href=\"System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method overload. This overload always sets the value of the variable that is passed to the <strong>ref</strong> parameter (<strong>ByRef</strong> in Visual Basic) <em>lockTaken</em>, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</p>System.Threading.Monitor.Enter#3"
  syntax:
    content: public static void TryEnter(object obj, ref bool lockTaken)
    content.vb: Public Shared Sub TryEnter(obj As Object, ByRef lockTaken As Boolean)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the lock. </p>\n"
    - id: lockTaken
      type: System.Boolean
      description: "\n<p>The result of the attempt to acquire the lock, passed by reference. The input must be <strong>false</strong>. The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>. The output is set even if an exception occurs during the attempt to acquire the lock.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Monitor.TryEnter(System.Object, ByRef System.Boolean)
  name.vb: TryEnter(Object, ByRef Boolean)
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Int32)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)
  id: TryEnter(System.Object,System.Int32)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, Int32)
  fullName: System.Threading.Monitor.TryEnter(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryEnter
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 193
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</p>\n"
  remarks: "\n<p>If the <em>millisecondsTimeout</em> parameter equals <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>, this method is equivalent to <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. If <em>millisecondsTimeout</em> equals 0, this method is equivalent to <xref href=\"System.Threading.Monitor.TryEnter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> to lock objects (that is, reference types), not value types. For details, see the <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> article.</p>\n<p>To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is <strong>true</strong>. The following code fragment shows the pattern used to call this method. Note that you should call <xref href=\"System.Threading.Monitor.Exit(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> in a <strong>finally</strong> block to ensure that the calling thread releases its lock on the critical section if an exception occurs. </p>System.Threading.Monitor.TryEnter#3"
  syntax:
    content: public static bool TryEnter(object obj, int millisecondsTimeout)
    content.vb: Public Shared Function TryEnter(obj As Object, millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the lock. </p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait for the lock. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current thread acquires the lock; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is negative, and not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)
  id: TryEnter(System.Object,System.Int32,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, Int32, ref Boolean)
  fullName: System.Threading.Monitor.TryEnter(System.Object, System.Int32, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryEnter
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 194
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n"
  remarks: "\n<p>If the <em>millisecondsTimeout</em> parameter equals <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>, this method is equivalent to <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. If <em>millisecondsTimeout</em> equals 0, this method is equivalent to <xref href=\"System.Threading.Monitor.TryEnter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the lock was not taken because an exception was thrown, the variable specified for the <em>lockTaken</em> parameter is <strong>false</strong> after this method ends. This allows the program to determine, in all cases, whether it is necessary to release the lock.</p>\n<p>Use <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> to lock objects (that is, reference types), not value types. For more information, see the <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> class topic. </p>\n<p>To ensure that the thread does not enter the critical section, you should examine the value of <em>lockTaken</em> and  execute code in the critical section only if its value is <strong>true</strong>. The following code fragment shows the pattern used to call this method. Note that you should call <xref href=\"System.Threading.Monitor.Exit(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> in a <strong>finally</strong> block to ensure that the calling thread releases its lock on the critical section if an exception occurs. </p>System.Threading.Monitor.TryEnter#4"
  example:
  - "\n<p>The following code shows the basic pattern for using the <xref href=\"System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)\" data-throw-if-not-resolved=\"false\"></xref> method overload. This overload always sets the value of the variable that is passed to the <strong>ref</strong> parameter (<strong>ByRef</strong> in Visual Basic) <em>lockTaken</em>, even if the method throws an exception, so the value of the variable is a reliable way to test whether the lock has to be released.</p>System.Threading.Monitor.Enter#4"
  syntax:
    content: public static void TryEnter(object obj, int millisecondsTimeout, ref bool lockTaken)
    content.vb: Public Shared Sub TryEnter(obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the lock. </p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait for the lock. </p>\n"
    - id: lockTaken
      type: System.Boolean
      description: "\n<p>The result of the attempt to acquire the lock, passed by reference. The input must be <strong>false</strong>. The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>. The output is set even if an exception occurs during the attempt to acquire the lock.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is negative, and not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Monitor.TryEnter(System.Object, System.Int32, ByRef System.Boolean)
  name.vb: TryEnter(Object, Int32, ByRef Boolean)
- uid: System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)
  id: TryEnter(System.Object,System.TimeSpan)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, TimeSpan)
  fullName: System.Threading.Monitor.TryEnter(System.Object, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryEnter
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 195
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</p>\n"
  remarks: "\n<p>If the value of the <em>timeout</em> parameter converted to milliseconds equals –1, this method is equivalent to <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. If the value of <em>timeout</em> equals 0, this method is equivalent to <xref href=\"System.Threading.Monitor.TryEnter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>Use <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> to lock objects (that is, reference types), not value types. For details, see the <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> class topic. </p>\n<p>To ensure that the thread does not enter the critical section, you should examine the method's return value and  execute code in the critical section only if its return value is <strong>true</strong>. The following code fragment shows the pattern used to call this method. Note that you should call <xref href=\"System.Threading.Monitor.Exit(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> in a <strong>finally</strong> block to ensure that the calling thread releases its lock on the critical section if an exception occurs. </p>System.Threading.Monitor.TryEnter#5"
  syntax:
    content: public static bool TryEnter(object obj, TimeSpan timeout)
    content.vb: Public Shared Function TryEnter(obj As Object, timeout As TimeSpan) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the lock. </p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> representing the amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current thread acquires the lock; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of <em>timeout</em> in milliseconds is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (–1 millisecond), or is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  id: TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, TimeSpan, ref Boolean)
  fullName: System.Threading.Monitor.TryEnter(System.Object, System.TimeSpan, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryEnter
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 196
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n"
  remarks: "\n<p>If the value of the <em>timeout</em> parameter converted to milliseconds equals –1, this method is equivalent to <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. If the value of <em>timeout</em> equals 0, this method is equivalent to <xref href=\"System.Threading.Monitor.TryEnter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>If the lock was not taken because an exception was thrown, the variable specified for the <em>lockTaken</em> parameter is <strong>false</strong> after this method ends. This allows the program to determine, in all cases, whether it is necessary to release the lock.</p>\n<p>Use <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> to lock objects (that is, reference types), not value types. For more information, see the <xref href=\"System.Threading.Monitor\" data-throw-if-not-resolved=\"false\"></xref> class topic.</p>\n<p>To ensure that the thread does not enter the critical section, you should examine the value of <em>lockTaken</em> and  execute code in the critical section only if its value is <strong>true</strong>. The following code fragment shows the pattern used to call this method. Note that you should call <xref href=\"System.Threading.Monitor.Exit(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> in a <strong>finally</strong> block to ensure that the calling thread releases its lock on the critical section if an exception occurs. </p>System.Threading.Monitor.TryEnter#6"
  example:
  - 
  syntax:
    content: public static void TryEnter(object obj, TimeSpan timeout, ref bool lockTaken)
    content.vb: Public Shared Sub TryEnter(obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the lock. </p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</p>\n"
    - id: lockTaken
      type: System.Boolean
      description: "\n<p>The result of the attempt to acquire the lock, passed by reference. The input must be <strong>false</strong>. The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>. The output is set even if an exception occurs during the attempt to acquire the lock.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of <em>timeout</em> in milliseconds is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (–1 millisecond), or is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Monitor.TryEnter(System.Object, System.TimeSpan, ByRef System.Boolean)
  name.vb: TryEnter(Object, TimeSpan, ByRef Boolean)
- uid: System.Threading.Monitor.Wait(System.Object)
  commentId: M:System.Threading.Monitor.Wait(System.Object)
  id: Wait(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Wait(Object)
  fullName: System.Threading.Monitor.Wait(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Wait
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 197
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the lock on an object and blocks the current thread until it reacquires the lock.</p>\n"
  remarks: "\n<p>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</p>\n<p>When a thread calls <strong>Wait</strong>, it releases the lock on the object and enters the object's waiting queue. The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object. All threads that call <strong>Wait</strong> remain in the waiting queue until they receive a signal from <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, sent by the owner of the lock. If <strong>Pulse</strong> is sent, only the thread at the head of the waiting queue is affected. If <strong>PulseAll</strong> is sent, all threads that are waiting for the object are affected. When the signal is received, one or more threads leave the waiting queue and enter the ready queue. A thread in the ready queue is permitted to reacquire the lock.</p>\n<p>This method returns when the calling thread reacquires the lock on the object. Note that this method blocks indefinitely if the holder of the lock does not call <strong>Pulse</strong> or <strong>PulseAll</strong>.</p>\n<p>The caller executes <strong>Wait</strong> once, regardless of the number of times <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> has been invoked for the specified object. Conceptually, the <strong>Wait</strong> method stores the number of times the caller invoked <strong>Enter</strong> on the object and invokes <strong>Exit</strong> as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls <strong>Enter</strong> as many times as necessary to restore the saved <strong>Enter</strong> count for the caller. Calling <strong>Wait</strong> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</p>\n<p>Note that a synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state. </p>\n<p>The <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and <strong>Wait</strong> methods must be invoked from within a synchronized block of code.</p>\n<p>The remarks for the <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method explain what happens if <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> is called when no threads are waiting.</p>\n"
  syntax:
    content: public static bool Wait(object obj)
    content.vb: Public Shared Function Wait(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to wait. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the call returned because the caller reacquired the lock for the specified object. This method does not return if the lock is not reacquired.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>The calling thread does not own the lock for the specified object. </p>\n"
  - type: System.Threading.ThreadInterruptedException
    commentId: T:System.Threading.ThreadInterruptedException
    description: "\n<p>The thread that invokes <strong>Wait</strong> is later interrupted from the waiting state. This happens when another thread calls this thread's <xref href=\"System.Threading.Thread.Interrupt\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.Wait(System.Object,System.Int32)
  commentId: M:System.Threading.Monitor.Wait(System.Object,System.Int32)
  id: Wait(System.Object,System.Int32)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Wait(Object, Int32)
  fullName: System.Threading.Monitor.Wait(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Wait
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 198
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</p>\n"
  remarks: "\n<p>This method does not return until it reacquires an exclusive lock on the <em>obj</em> parameter.</p>\n<p>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</p>\n<p>The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner. The thread can test the return value of the <xref href=\"System.Threading.Monitor.Wait(System.Object,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref href=\"System.Threading.Monitor.Wait(System.Object,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method again.</p>\n<p>When a thread calls <strong>Wait</strong>, it releases the lock on the object and enters the object's waiting queue. The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object. The thread that invoked <strong>Wait</strong> remains in the waiting queue until either a thread that holds the lock invokes <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, or it is the next in the queue and a thread that holds the lock invokes <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. However, if <em>millisecondsTimeout</em> elapses before another thread invokes this object's <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, the original thread is moved to the ready queue in order to regain the lock. </p>\n<p>If <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> is specified for the <em>millisecondsTimeout</em> parameter, this method blocks indefinitely unless the holder of the lock calls <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. If <em>millisecondsTimeout</em> equals 0, the thread that calls <strong>Wait</strong> releases the lock and then immediately enters the ready queue in order to regain the lock.</p>\n<p>The caller executes <strong>Wait</strong> once, regardless of the number of times <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> has been invoked for the specified object. Conceptually, the <strong>Wait</strong> method stores the number of times the caller invoked <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> on the object and invokes <xref href=\"System.Threading.Monitor.Exit(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> as many times as necessary to restore the saved <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> count for the caller. Calling <strong>Wait</strong> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</p>\n<p>A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</p>\n<p>The <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and <strong>Wait</strong> methods must be invoked from within a synchronized block of code.</p>\n<p>The remarks for the <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method explain what happens if <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> is called when no threads are waiting.</p>\n"
  syntax:
    content: public static bool Wait(object obj, int millisecondsTimeout)
    content.vb: Public Shared Function Wait(obj As Object, millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to wait. </p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait before the thread enters the ready queue. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the lock was reacquired before the specified time elapsed; <strong>false</strong> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>The calling thread does not own the lock for the specified object. </p>\n"
  - type: System.Threading.ThreadInterruptedException
    commentId: T:System.Threading.ThreadInterruptedException
    description: "\n<p>The thread that invokes <strong>Wait</strong> is later interrupted from the waiting state. This happens when another thread calls this thread's <xref href=\"System.Threading.Thread.Interrupt\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of the <em>millisecondsTimeout</em> parameter is negative, and is not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.Wait(System.Object,System.TimeSpan)
  commentId: M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)
  id: Wait(System.Object,System.TimeSpan)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Wait(Object, TimeSpan)
  fullName: System.Threading.Monitor.Wait(System.Object, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Threading/ref/System.Threading.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Wait
    path: src/System.Threading/ref/System.Threading.cs
    startLine: 199
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</p>\n"
  remarks: "\n<p>This method does not return until it reacquires an exclusive lock on the <em>obj</em> parameter.</p>\n<p>The thread that currently owns the lock on the specified object invokes this method in order to release the object so that another thread can access it. The caller is blocked while waiting to reacquire the lock. This method is called when the caller needs to wait for a state change that will occur as a result of another thread's operations.</p>\n<p>The time-out ensures that the current thread does not block indefinitely if another thread releases the lock without first calling the <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method. It also moves the thread to the ready queue, bypassing other threads ahead of it in the wait queue, so that it can reacquire the lock sooner. The thread can test the return value of the <xref href=\"System.Threading.Monitor.Wait(System.Object,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> method to determine whether it reacquired the lock prior to the time-out. The thread can evaluate the conditions that caused it to enter the wait, and if necessary call the <xref href=\"System.Threading.Monitor.Wait(System.Object,System.TimeSpan)\" data-throw-if-not-resolved=\"false\"></xref> method again.</p>\n<p>When a thread calls <strong>Wait</strong>, it releases the lock on the object and enters the object's waiting queue. The next thread in the object's ready queue (if there is one) acquires the lock and has exclusive use of the object. The thread that invoked <strong>Wait</strong> remains in the waiting queue until either a thread that holds the lock invokes <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, or it is the next in the queue and a thread that holds the lock invokes <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. However, if <em>timeout</em> elapses before another thread invokes this object's <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method, the original thread is moved to the ready queue in order to regain the lock. </p>\n<p>If a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> representing –1 millisecond is specified for the <em>timeout</em> parameter, this method blocks indefinitely unless the holder of the lock calls <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>. If <em>timeout</em> is 0 milliseconds, the thread that calls <strong>Wait</strong> releases the lock and then immediately enters the ready queue in order to regain the lock.</p>\n<p>The caller executes <strong>Wait</strong> once, regardless of the number of times <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> has been invoked for the specified object. Conceptually, the <strong>Wait</strong> method stores the number of times the caller invoked <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> on the object and invokes <xref href=\"System.Threading.Monitor.Exit(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> as many times as necessary to fully release the locked object. The caller then blocks while waiting to reacquire the object. When the caller reacquires the lock, the system calls <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> as many times as necessary to restore the saved <xref href=\"System.Threading.Monitor.Enter(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> count for the caller. Calling <strong>Wait</strong> releases the lock for the specified object only; if the caller is the owner of locks on other objects, these locks are not released.</p>\n<p>A synchronized object holds several references, including a reference to the thread that currently holds the lock, a reference to the ready queue, which contains the threads that are ready to obtain the lock, and a reference to the waiting queue, which contains the threads that are waiting for notification of a change in the object's state.</p>\n<p>The <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Threading.Monitor.PulseAll(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>, and <strong>Wait</strong> methods must be invoked from within a synchronized block of code.</p>\n<p>The remarks for the <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method explain what happens if <xref href=\"System.Threading.Monitor.Pulse(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> is called when no threads are waiting.</p>\n"
  syntax:
    content: public static bool Wait(object obj, TimeSpan timeout)
    content.vb: Public Shared Function Wait(obj As Object, timeout As TimeSpan) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to wait. </p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> representing the amount of time to wait before the thread enters the ready queue. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the lock was reacquired before the specified time elapsed; <strong>false</strong> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>The calling thread does not own the lock for the specified object. </p>\n"
  - type: System.Threading.ThreadInterruptedException
    commentId: T:System.Threading.ThreadInterruptedException
    description: "\n<p>The thread that invokes <strong>Wait</strong> is later interrupted from the waiting state. This happens when another thread calls this thread's <xref href=\"System.Threading.Thread.Interrupt\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of the <em>timeout</em> parameter in milliseconds is negative and does not represent <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (–1 millisecond), or is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Threading.SynchronizationLockException
  isExternal: false
  name: SynchronizationLockException
  fullName: System.Threading.SynchronizationLockException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Threading.ThreadInterruptedException
