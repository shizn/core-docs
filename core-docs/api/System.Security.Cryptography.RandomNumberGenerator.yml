items:
- uid: System.Security.Cryptography.RandomNumberGenerator
  commentId: T:System.Security.Cryptography.RandomNumberGenerator
  id: RandomNumberGenerator
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.RandomNumberGenerator.#ctor
  - System.Security.Cryptography.RandomNumberGenerator.Create
  - System.Security.Cryptography.RandomNumberGenerator.Dispose
  - System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  langs:
  - csharp
  - vb
  name: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RandomNumberGenerator.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RandomNumberGenerator
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RandomNumberGenerator.cs
    startLine: 8
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the abstract class from which all implementations of cryptographic random number generators derive.</p>\n"
  remarks: "\n<p>Cryptographic random number generators create cryptographically strong random values.</p>\n<p>Application code does not directly use this class. This abstract class is provided as the base class for all cryptographic random number generators.</p>\n<p>For an implementation of a cryptographic random number generator, use the derived class <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: 'public abstract class RandomNumberGenerator : IDisposable'
    content.vb: >-
      Public MustInherit Class RandomNumberGenerator
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  - vb
  name: RandomNumberGenerator()
  fullName: System.Security.Cryptography.RandomNumberGenerator.RandomNumberGenerator()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RandomNumberGenerator.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RandomNumberGenerator.cs
    startLine: 10
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>You cannot create an instance of an abstract class. Application code will create a new instance of a derived class. For an implementation of a cryptographic random number generator, use the derived class <xref href=\"System.Security.Cryptography.RNGCryptoServiceProvider\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected RandomNumberGenerator()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.RandomNumberGenerator.Create
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Create
  id: Create
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  - vb
  name: Create()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RandomNumberGenerator.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RandomNumberGenerator.cs
    startLine: 14
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, creates an instance of the default implementation of a cryptographic random number generator that can be used to generate random data.</p>\n"
  syntax:
    content: public static RandomNumberGenerator Create()
    content.vb: Public Shared Function Create As RandomNumberGenerator
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Dispose
  id: Dispose
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RandomNumberGenerator.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RandomNumberGenerator.cs
    startLine: 19
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  remarks: "\n<p>Call <strong>Dispose</strong> when you are finished using the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref>. The <strong>Dispose</strong> method leaves the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref> in an unusable state. After calling <strong>Dispose</strong>, you must release all references to the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref> so the garbage collector can reclaim the memory that the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref> was occupying.</p>\n<p>For more information, see Cleaning Up Unmanaged Resources and Implementing a Dispose Method.</p>\n<p>Always call <strong>Dispose</strong> before you release your last reference to the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref>. Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref> object's <strong>Finalize</strong> method.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RandomNumberGenerator.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RandomNumberGenerator.cs
    startLine: 26
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  remarks: "\n<p>This method is called by the public <strong>Dispose()</strong> method and the <strong>Finalize</strong> method. <strong>Dispose()</strong> invokes the protected <strong>Dispose(Boolean)</strong> method with the <em>disposing</em> parameter set to <strong>true</strong>. <strong>Finalize</strong> invokes <strong>Dispose</strong> with <em>disposing</em> set to <strong>false</strong>.</p>\n<p>When the <em>disposing</em> parameter is <strong>true</strong>, this method releases all resources held by any managed objects that this <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref> references. This method invokes the <strong>Dispose()</strong> method of each referenced object.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  id: GetBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  - vb
  name: GetBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RandomNumberGenerator.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/RandomNumberGenerator.cs
    startLine: 31
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of values.</p>\n"
  remarks: "\n<p>The length of the byte array determines how many random bytes are produced.</p>\n"
  example:
  - "\n<p>The following example creates a random sequence 100 bytes long and stores it in <code>random</code>.</p>Classic RandomNumberGenerator.GetBytes Example#1"
  syntax:
    content: public abstract void GetBytes(byte[] data)
    content.vb: Public MustOverride Sub GetBytes(data As Byte())
    parameters:
    - id: data
      type: System.Byte[]
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte())
  name.vb: GetBytes(Byte())
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Cryptography.RandomNumberGenerator
  parent: System.Security.Cryptography
  isExternal: false
  name: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
