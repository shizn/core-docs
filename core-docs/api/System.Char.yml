items:
- uid: System.Char
  commentId: T:System.Char
  id: Char
  parent: System
  children:
  - System.Char.CompareTo(System.Char)
  - System.Char.ConvertFromUtf32(System.Int32)
  - System.Char.ConvertToUtf32(System.Char,System.Char)
  - System.Char.ConvertToUtf32(System.String,System.Int32)
  - System.Char.Equals(System.Char)
  - System.Char.Equals(System.Object)
  - System.Char.GetHashCode
  - System.Char.GetNumericValue(System.Char)
  - System.Char.GetNumericValue(System.String,System.Int32)
  - System.Char.IsControl(System.Char)
  - System.Char.IsControl(System.String,System.Int32)
  - System.Char.IsDigit(System.Char)
  - System.Char.IsDigit(System.String,System.Int32)
  - System.Char.IsHighSurrogate(System.Char)
  - System.Char.IsHighSurrogate(System.String,System.Int32)
  - System.Char.IsLetter(System.Char)
  - System.Char.IsLetter(System.String,System.Int32)
  - System.Char.IsLetterOrDigit(System.Char)
  - System.Char.IsLetterOrDigit(System.String,System.Int32)
  - System.Char.IsLower(System.Char)
  - System.Char.IsLower(System.String,System.Int32)
  - System.Char.IsLowSurrogate(System.Char)
  - System.Char.IsLowSurrogate(System.String,System.Int32)
  - System.Char.IsNumber(System.Char)
  - System.Char.IsNumber(System.String,System.Int32)
  - System.Char.IsPunctuation(System.Char)
  - System.Char.IsPunctuation(System.String,System.Int32)
  - System.Char.IsSeparator(System.Char)
  - System.Char.IsSeparator(System.String,System.Int32)
  - System.Char.IsSurrogate(System.Char)
  - System.Char.IsSurrogate(System.String,System.Int32)
  - System.Char.IsSurrogatePair(System.Char,System.Char)
  - System.Char.IsSurrogatePair(System.String,System.Int32)
  - System.Char.IsSymbol(System.Char)
  - System.Char.IsSymbol(System.String,System.Int32)
  - System.Char.IsUpper(System.Char)
  - System.Char.IsUpper(System.String,System.Int32)
  - System.Char.IsWhiteSpace(System.Char)
  - System.Char.IsWhiteSpace(System.String,System.Int32)
  - System.Char.MaxValue
  - System.Char.MinValue
  - System.Char.Parse(System.String)
  - System.Char.System#IComparable#CompareTo(System.Object)
  - System.Char.System#IConvertible#GetTypeCode
  - System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)
  - System.Char.System#IConvertible#ToByte(System.IFormatProvider)
  - System.Char.System#IConvertible#ToChar(System.IFormatProvider)
  - System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)
  - System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)
  - System.Char.System#IConvertible#ToDouble(System.IFormatProvider)
  - System.Char.System#IConvertible#ToInt16(System.IFormatProvider)
  - System.Char.System#IConvertible#ToInt32(System.IFormatProvider)
  - System.Char.System#IConvertible#ToInt64(System.IFormatProvider)
  - System.Char.System#IConvertible#ToSByte(System.IFormatProvider)
  - System.Char.System#IConvertible#ToSingle(System.IFormatProvider)
  - System.Char.System#IConvertible#ToString(System.IFormatProvider)
  - System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  - System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)
  - System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)
  - System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)
  - System.Char.ToLower(System.Char)
  - System.Char.ToLowerInvariant(System.Char)
  - System.Char.ToString
  - System.Char.ToString(System.Char)
  - System.Char.ToUpper(System.Char)
  - System.Char.ToUpperInvariant(System.Char)
  - System.Char.TryParse(System.String,System.Char@)
  langs:
  - csharp
  - vb
  name: Char
  fullName: System.Char
  type: Struct
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Char
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 320
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a character as a UTF-16 code unit.</p>\n"
  remarks: "\n<p>The .NET Framework uses the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> structure to represent a Unicode character. The Unicode Standard identifies each Unicode character with a unique 21-bit scalar number called a code point, and defines the UTF-16 encoding form that specifies how a code point is encoded into a sequence of one or more 16-bit values. Each 16-bit value ranges from hexadecimal 0x0000 through 0xFFFF and is stored in a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> structure.  The value of a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object is its 16-bit numeric (ordinal) value.</p>\n<p>The following sections examine the relationship between a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object and a character and discuss some common tasks performed with <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> instances. </p>\n<p>Char objects, Unicode characters, and stringsCharacters and character categoriesCharacters and text elementsCommon operationsChar values and interop</p>\n"
  example:
  - <p>The following code example demonstrates some of the methods in <xref href="System.Char" data-throw-if-not-resolved="false"></xref>.</p>System.Char [Type Level]#23
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      public struct Char : IComparable, IComparable<char>, IConvertible, IEquatable<char>
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      Public Structure Char
          Implements IComparable, IComparable(Of Char), IConvertible, IEquatable(Of Char)
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.IConvertible
    commentId: T:System.IConvertible
  - type: System.String
    commentId: T:System.String
  implements:
  - System.IComparable
  - System.IComparable{System.Char}
  - System.IConvertible
  - System.IEquatable{System.Char}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.ReferenceEquals(System.Object,System.Object)
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Char.MaxValue
  commentId: F:System.Char.MaxValue
  id: MaxValue
  parent: System.Char
  langs:
  - csharp
  - vb
  name: MaxValue
  fullName: System.Char.MaxValue
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 323
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the largest possible value of a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref>. This field is constant.</p>\n"
  remarks: "\n<p>The value of this constant is hexadecimal 0xFFFF.</p>\n"
  syntax:
    content: public const char MaxValue = '\uffff'
    content.vb: Public Const MaxValue As Char = ChrW(65535)
    return:
      type: System.Char
  seealso:
  - type: System.Char.MinValue
    commentId: F:System.Char.MinValue
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Char.MinValue
  commentId: F:System.Char.MinValue
  id: MinValue
  parent: System.Char
  langs:
  - csharp
  - vb
  name: MinValue
  fullName: System.Char.MinValue
  type: Field
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MinValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 324
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the smallest possible value of a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref>. This field is constant.</p>\n"
  remarks: "\n<p>The value of this constant is hexadecimal 0x00.</p>\n"
  syntax:
    content: public const char MinValue = '\0'
    content.vb: Public Const MinValue As Char = vbNullChar
    return:
      type: System.Char
  seealso:
  - type: System.Char.MaxValue
    commentId: F:System.Char.MaxValue
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Char.CompareTo(System.Char)
  commentId: M:System.Char.CompareTo(System.Char)
  id: CompareTo(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: CompareTo(Char)
  fullName: System.Char.CompareTo(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 325
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares this instance to a specified <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method implements the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> interface and performs slightly better than the <xref href=\"System.Char.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method because it does not have to convert the <em>value</em> parameter to an object.</p>\n<p>The comparison performed by this method is based on the encoded values of this instance and <em>value</em>, not their lexicographical characteristics.</p>\n<p>If the <xref href=\"System.Char.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method parameter type has fewer bits (is narrower) than the instance type, some programming languages perform an implicit widening conversion that transforms the value of the parameter into a value with more bits.</p>\n<p>For example, suppose the instance type is <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> and the parameter type is <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>. The Microsoft C# compiler generates instructions to represent the value of the parameter as an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> object, then generates a <xref href=\"System.Int32.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method that compares the values of the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> instance and the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> parameter representation.</p>\n<p>Typically, implicit widening conversions are performed on numeric types. Consult your programming language's documentation to determine if its compiler performs widening conversions. If the instance and parameter types mismatch and a suitable conversion is not available, the compiler generates instructions to box the parameter and invoke the <xref href=\"System.Char.CompareTo(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> overload that takes an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> parameter.</p>\n"
  example:
  - "\n<p>The following code example demonstrates generic and non-generic versions of the <strong>CompareTo</strong> method for several value and reference types.</p>T.CompareTo#1"
  syntax:
    content: public int CompareTo(char value)
    content.vb: Public Function CompareTo(value As Char) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>A <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed number indicating the position of this instance in the sort order in relation to the <em>value</em> parameter.</p>\n<p>Return Value </p>\n<p>Description </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>This instance precedes <em>value</em>. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>This instance has the same position in the sort order as <em>value</em>. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>This instance follows <em>value</em>. </p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Char.Equals(System.Object)
    commentId: M:System.Char.Equals(System.Object)
  implements:
  - System.IComparable{System.Char}.CompareTo(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Char.ConvertFromUtf32(System.Int32)
  commentId: M:System.Char.ConvertFromUtf32(System.Int32)
  id: ConvertFromUtf32(System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: ConvertFromUtf32(Int32)
  fullName: System.Char.ConvertFromUtf32(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertFromUtf32
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 326
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the specified Unicode code point into a UTF-16 encoded string.</p>\n"
  remarks: "\n<p>Use this method to convert a 21-bit Unicode code point to a UTF-16 encoded string before testing the string with methods such as <xref href=\"System.Char.IsLowSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Char.IsHighSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A valid code point outside the Basic Multilingual Plane (BMP) always yields a valid surrogate pair. However, a valid code point within the BMP might not yield a valid result according to the Unicode standard because no linguistic processing is used in the conversion. For that reason, use the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> class to convert bulk UTF-32 data into bulk UTF-16 data.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Char.ConvertToUtf32(System.Char,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Char.ConvertFromUtf32(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>char.cvtutf32#1"
  syntax:
    content: public static string ConvertFromUtf32(int utf32)
    content.vb: Public Shared Function ConvertFromUtf32(utf32 As Integer) As String
    parameters:
    - id: utf32
      type: System.Int32
      description: "\n<p>A 21-bit Unicode code point. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string consisting of one <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object or a surrogate pair of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects equivalent to the code point specified by the <em>utf32</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>utf32</em> is not a valid 21-bit Unicode code point ranging from U+0 through U+10FFFF, excluding the surrogate pair range from U+D800 through U+DFFF. </p>\n"
  seealso:
  - type: System.Char.ConvertToUtf32(System.Char,System.Char)
    commentId: M:System.Char.ConvertToUtf32(System.Char,System.Char)
  - type: System.Text.UTF32Encoding
    commentId: T:System.Text.UTF32Encoding
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.ConvertToUtf32(System.Char,System.Char)
  commentId: M:System.Char.ConvertToUtf32(System.Char,System.Char)
  id: ConvertToUtf32(System.Char,System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: ConvertToUtf32(Char, Char)
  fullName: System.Char.ConvertToUtf32(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToUtf32
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 327
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of a UTF-16 encoded surrogate pair into a Unicode code point.</p>\n"
  remarks: "\n<p>Use this method to convert a surrogate pair into a 21-bit Unicode code point. To convert UTF-16 data into UTF-32 data, use the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Ordinarily, UTF-16 encoding represents a single Unicode character as a 16-bit code unit. However, it also supports surrogate pairs, which allow a single abstract character to be represented as two 16-bit code units. These two <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects must have code units that range from U+D800 to U+DBFF for the first (high) surrogate and from U+DC00 to U+DFFF for the second (low) surrogate. Surrogate pairs are supported only by UTF-16 encoding. This method allows a character represented by a UTF-16 surrogate pair to be converted to a character using UTF-32 encoding. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Char.ConvertToUtf32(System.Char,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Char.ConvertFromUtf32(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>char.cvtutf32#1"
  syntax:
    content: public static int ConvertToUtf32(char highSurrogate, char lowSurrogate)
    content.vb: Public Shared Function ConvertToUtf32(highSurrogate As Char, lowSurrogate As Char) As Integer
    parameters:
    - id: highSurrogate
      type: System.Char
      description: "\n<p>A high surrogate code unit (that is, a code unit ranging from U+D800 through U+DBFF). </p>\n"
    - id: lowSurrogate
      type: System.Char
      description: "\n<p>A low surrogate code unit (that is, a code unit ranging from U+DC00 through U+DFFF). </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The 21-bit Unicode code point represented by the <em>highSurrogate</em> and <em>lowSurrogate</em> parameters.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>highSurrogate</em> is not in the range U+D800 through U+DBFF, or <em>lowSurrogate</em> is not in the range U+DC00 through U+DFFF. </p>\n"
  seealso:
  - type: System.Char.ConvertFromUtf32(System.Int32)
    commentId: M:System.Char.ConvertFromUtf32(System.Int32)
  - type: System.Text.UTF32Encoding
    commentId: T:System.Text.UTF32Encoding
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.ConvertToUtf32(System.String,System.Int32)
  commentId: M:System.Char.ConvertToUtf32(System.String,System.Int32)
  id: ConvertToUtf32(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: ConvertToUtf32(String, Int32)
  fullName: System.Char.ConvertToUtf32(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertToUtf32
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 328
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of a UTF-16 encoded character or surrogate pair at a specified position in a string into a Unicode code point.</p>\n"
  remarks: "\n<p>Use this method to convert a character or surrogate pair into a 21-bit Unicode code point. To convert UTF-16 data into UTF-32 data, use the <xref href=\"System.Text.UTF32Encoding\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Char.ConvertToUtf32(System.Char,System.Char)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Char.ConvertFromUtf32(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>char.cvtutf32#1"
  syntax:
    content: public static int ConvertToUtf32(string s, int index)
    content.vb: Public Shared Function ConvertToUtf32(s As String, index As Integer) As Integer
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string that contains a character or surrogate pair. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index position of the character or surrogate pair in <em>s</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The 21-bit Unicode code point represented by the character or surrogate pair at the position in the <em>s</em> parameter specified by the <em>index</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a position within <em>s</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified index position contains a surrogate pair, and either the first character in the pair is not a valid high surrogate or the second character in the pair is not a valid low surrogate. </p>\n"
  seealso:
  - type: System.Char.ConvertFromUtf32(System.Int32)
    commentId: M:System.Char.ConvertFromUtf32(System.Int32)
  - type: System.Text.UTF32Encoding
    commentId: T:System.Text.UTF32Encoding
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.Equals(System.Char)
  commentId: M:System.Char.Equals(System.Char)
  id: Equals(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: Equals(Char)
  fullName: System.Char.Equals(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 329
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether this instance is equal to the specified <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  remarks: "\n<p>This method implements the <xref href=\"System.IEquatable`1\" data-throw-if-not-resolved=\"false\"></xref> interface, and performs slightly better than <xref href=\"System.Char.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref> because it does not need to unbox the <em>obj</em> parameter.</p>\n"
  example:
  - 
  syntax:
    content: public bool Equals(char obj)
    content.vb: Public Function Equals(obj As Char) As Boolean
    parameters:
    - id: obj
      type: System.Char
      description: "\n<p>An object to compare to this instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>obj</em> parameter equals the value of this instance; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Char.Equals(System.Object)
    commentId: M:System.Char.Equals(System.Object)
  implements:
  - System.IEquatable{System.Char}.Equals(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Char.Equals(System.Object)
  commentId: M:System.Char.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Char.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 330
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  remarks: "\n<p>The comparison performed by this method is based on the encoded values of this instance and <em>obj</em>, not necessarily their lexicographical characteristics.</p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.Equals(System.Object)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.Equals#20"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with this instance or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> is an instance of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> and equals the value of this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  seealso:
  - type: System.Char.CompareTo(System.Object)
    commentId: M:System.Char.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Char.GetHashCode
  commentId: M:System.Char.GetHashCode
  id: GetHashCode
  parent: System.Char
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Char.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 331
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Char.GetNumericValue(System.Char)
  commentId: M:System.Char.GetNumericValue(System.Char)
  id: GetNumericValue(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: GetNumericValue(Char)
  fullName: System.Char.GetNumericValue(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNumericValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 332
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the specified numeric Unicode character to a double-precision floating point number.</p>\n"
  remarks: "\n<p>The <em>c</em> parameter must be the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> representation of a numeric value. For example, if <em>c</em> is \"5\", the return value is 5. However, if <em>c</em> is \"z\", the return value is -1.0.</p>\n<p>A character has an associated numeric value if and only if it is a member of one of the following <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> categories: <strong>DecimalDigitNumber</strong>, <strong>LetterNumber</strong>, or <strong>OtherNumber</strong>.</p>\n<p>The <xref href=\"System.Char.GetNumericValue(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method assumes that <em>c</em> corresponds to a single linguistic character and checks whether that character can be converted to a decimal digit. However, some numbers in the Unicode standard are represented by two <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref href=\"System.Char.ConvertFromUtf32(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the <xref href=\"System.Char.GetNumericValue(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method returns -1 if it is passed either a high surrogate or a low surrogate of this character.</p>System.Char.GetNumericValue#2"
  example:
  - "\n<p>The following example demonstrates <xref href=\"System.Char.GetNumericValue(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.GetNumericValue#1"
  syntax:
    content: public static double GetNumericValue(char c)
    content.vb: Public Shared Function GetNumericValue(c As Char) As Double
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The numeric value of <em>c</em> if that character represents a number; otherwise, -1.0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.GetNumericValue(System.String,System.Int32)
  commentId: M:System.Char.GetNumericValue(System.String,System.Int32)
  id: GetNumericValue(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: GetNumericValue(String, Int32)
  fullName: System.Char.GetNumericValue(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNumericValue
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 333
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the numeric Unicode character at the specified position in a specified string to a double-precision floating point number.</p>\n"
  remarks: "\n<p>The <em>s</em> parameter must be the string representation of a numeric value. For example, if the character at position <em>index</em> in <em>s</em> is \"5\", the return value is 5. However, if the character at position <em>index</em> in <em>s</em> is \"z\", the return value is -1.</p>\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>A character has an associated numeric value if and only if it is a member of one of the following <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref> categories: <strong>DecimalDigitNumber</strong>, <strong>LetterNumber</strong>, or <strong>OtherNumber</strong>.</p>\n<p>If the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object at position <em>index</em> is the first character of a valid surrogate pair, the <xref href=\"System.Char.GetNumericValue(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method determines whether the surrogate pair forms a numeric digit. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref href=\"System.Char.ConvertFromUtf32(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a string that represents each Aegean number. As the output from the example shows, the <xref href=\"System.Char.GetNumericValue(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns the correct numeric value if it is passed the high surrogate of an Aegean number. However, if it is passed the low surrogate, it considers only the low surrogate in isolation and returns -1.</p>System.Char.GetNumericValue#3"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.GetNumericValue(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.GetNumericValue#1"
  syntax:
    content: public static double GetNumericValue(string s, int index)
    content.vb: Public Shared Function GetNumericValue(s As String, index As Integer) As Double
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The character position in <em>s</em>. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The numeric value of the character at position <em>index</em> in <em>s</em> if that character represents a number; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsControl(System.Char)
  commentId: M:System.Char.IsControl(System.Char)
  id: IsControl(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsControl(Char)
  fullName: System.Char.IsControl(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsControl
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 334
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified Unicode character is categorized as a control character.</p>\n"
  remarks: "\n<p>Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT. T The Unicode standard assigns code points from \\U0000 to \\U001F, \\U007F, and from \\U0080 to \\U009F to control characters. According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application. Valid control characters are members of the <xref href=\"System.Globalization.UnicodeCategory.Control\" data-throw-if-not-resolved=\"false\"></xref> category. </p>\n"
  example:
  - "\n<p>The following example lists the Unicode code point of each of the control characters.</p>System.Char.IsControl#1"
  syntax:
    content: public static bool IsControl(char c)
    content.vb: Public Shared Function IsControl(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>c</em> is a control character; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsControl(System.String,System.Int32)
  commentId: M:System.Char.IsControl(System.String,System.Int32)
  id: IsControl(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsControl(String, Int32)
  fullName: System.Char.IsControl(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsControl
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 335
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the character at the specified position in a specified string is categorized as a control character.</p>\n"
  remarks: "\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>Control characters are formatting and other non-printing characters, such as ACK, BEL, CR, FF, LF, and VT. The Unicode standard assigns code points from \\U0000 to \\U001F, \\U007F, and from \\U0080 to \\U009F to control characters. According to the Unicode standard, these values are to be interpreted as control characters unless their use is otherwise defined by an application. Valid control characters are members of the <xref href=\"System.Globalization.UnicodeCategory.Control\" data-throw-if-not-resolved=\"false\"></xref> category. </p>\n"
  example:
  - "\n<p>The following example enumerates the characters in a string and determines whether any are control characters.</p>System.Char.IsControl#2"
  syntax:
    content: public static bool IsControl(string s, int index)
    content.vb: Public Shared Function IsControl(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a control character; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsDigit(System.Char)
  commentId: M:System.Char.IsDigit(System.Char)
  id: IsDigit(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsDigit(Char)
  fullName: System.Char.IsDigit(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDigit
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 336
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified Unicode character is categorized as a decimal digit.</p>\n"
  remarks: "\n<p>This method determines whether a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> is a radix-10 digit. This contrasts with <xref href=\"System.Char.IsNumber(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, which determines whether a <strong>Char</strong> is of any numeric Unicode category. Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</p>\n<p>Valid digits are members of the <xref href=\"System.Globalization.UnicodeCategory.DecimalDigitNumber\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsDigit(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsDigit#4"
  syntax:
    content: public static bool IsDigit(char c)
    content.vb: Public Shared Function IsDigit(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>c</em> is a decimal digit; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.Char.IsNumber(System.Char)
    commentId: M:System.Char.IsNumber(System.Char)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsDigit(System.String,System.Int32)
  commentId: M:System.Char.IsDigit(System.String,System.Int32)
  id: IsDigit(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsDigit(String, Int32)
  fullName: System.Char.IsDigit(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDigit
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 337
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the character at the specified position in a specified string is categorized as a decimal digit.</p>\n"
  remarks: "\n<p>This method determines whether a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> is a radix-10 digit. This contrasts with <xref href=\"System.Char.IsNumber(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, which determines whether a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> is of any numeric Unicode category. Numbers include characters such as fractions, subscripts, superscripts, Roman numerals, currency numerators, encircled numbers, and script-specific digits.</p>\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>Valid digits are members of the <xref href=\"System.Globalization.UnicodeCategory.DecimalDigitNumber\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsDigit(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsDigit#4"
  syntax:
    content: public static bool IsDigit(string s, int index)
    content.vb: Public Shared Function IsDigit(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a decimal digit; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.Char.IsNumber(System.Char)
    commentId: M:System.Char.IsNumber(System.Char)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsHighSurrogate(System.Char)
  commentId: M:System.Char.IsHighSurrogate(System.Char)
  id: IsHighSurrogate(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsHighSurrogate(Char)
  fullName: System.Char.IsHighSurrogate(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsHighSurrogate
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 338
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object is a high surrogate.</p>\n"
  remarks: "\n<p>In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The first element in this pair is the high surrogate. Its code point can range from U+D800 to U+DBFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Char.IsHighSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Char.IsLowSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Char.IsSurrogatePair(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>char.surrogate#1"
  syntax:
    content: public static bool IsHighSurrogate(char c)
    content.vb: Public Shared Function IsHighSurrogate(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the numeric value of the <em>c</em> parameter ranges from U+D800 through U+DBFF; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsHighSurrogate(System.String,System.Int32)
  commentId: M:System.Char.IsHighSurrogate(System.String,System.Int32)
  id: IsHighSurrogate(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsHighSurrogate(String, Int32)
  fullName: System.Char.IsHighSurrogate(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsHighSurrogate
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 339
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object at the specified position in a string is a high surrogate.</p>\n"
  remarks: "\n<p>The <em>index</em> parameter is zero-based.</p>\n<p>In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The first element in this pair is the high surrogate. Its code point can range from U+D800 to U+DBFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Char.IsHighSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Char.IsLowSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Char.IsSurrogatePair(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>char.surrogate#1"
  syntax:
    content: public static bool IsHighSurrogate(string s, int index)
    content.vb: Public Shared Function IsHighSurrogate(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the numeric value of the specified character in the <em>s</em> parameter ranges from U+D800 through U+DBFF; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a position within <em>s</em>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsLetter(System.Char)
  commentId: M:System.Char.IsLetter(System.Char)
  id: IsLetter(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsLetter(Char)
  fullName: System.Char.IsLetter(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLetter
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 340
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified Unicode character is categorized as a Unicode letter. </p>\n"
  remarks: "\n<p>This method determines whether a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> is a member of any category of Unicode letter. Unicode letters include the following:</p>\n<ul><li>\n<p>Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA). These characters are members of the <xref href=\"System.Globalization.UnicodeCategory.UppercaseLetter\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n</li><li>\n<p>Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS). These characters are members of the <xref href=\"System.Globalization.UnicodeCategory.LowercaseLetter\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n</li><li>\n<p>Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI). These characters are members of the <xref href=\"System.Globalization.UnicodeCategory.TitlecaseLetter\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n</li><li>\n<p>Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI). These characters are members of the <xref href=\"System.Globalization.UnicodeCategory.ModifierLetter\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n</li><li>\n<p>Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (<CJK Ideograph, First>) through U+9FC3 (<CJK Ideograph, Last>). These characters are members of the <xref href=\"System.Globalization.UnicodeCategory.OtherLetter\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsLetter(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsLetter#5"
  syntax:
    content: public static bool IsLetter(char c)
    content.vb: Public Shared Function IsLetter(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>c</em> is a letter; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsLetter(System.String,System.Int32)
  commentId: M:System.Char.IsLetter(System.String,System.Int32)
  id: IsLetter(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsLetter(String, Int32)
  fullName: System.Char.IsLetter(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLetter
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 341
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the character at the specified position in a specified string is categorized as a Unicode letter.</p>\n"
  remarks: "\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>This method determines whether the character at a specified index position in a string is a member of any category of Unicode letter. Unicode letters include the following:</p>\n<ul><li>\n<p>Uppercase letters, such as U+0041 (LATIN CAPITAL LETTER A) through U+005A (LATIN CAPITAL LETTER Z), or U+0400 (CYRILLIC CAPITAL LETTER IE WITH GRAVE) through U+042F (CYRILLIC CAPITAL LETTER YA). These characters are members of the <xref href=\"System.Globalization.UnicodeCategory.UppercaseLetter\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n</li><li>\n<p>Lowercase letters, such as U+0061 (LATIN SMALL LETTER A) through U+007A (LATIN SMALL LETTER Z), or U+03AC (GREEK SMALL LETTER ALPHA WITH TONOS) through U+03CE (GREEK SMALL LETTER OMEGA WITH TONOS). These characters are members of the <xref href=\"System.Globalization.UnicodeCategory.LowercaseLetter\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n</li><li>\n<p>Title case letters, such as U+01C5 (LATIN CAPITAL LETTER D WITH SMALL LETTER Z WITH CARON) or U+1FFC (GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI). These characters are members of the <xref href=\"System.Globalization.UnicodeCategory.TitlecaseLetter\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n</li><li>\n<p>Modifiers, such as U+02B0 (MODIFIER LETTER SMALL H) through U+02C1 (MODIFIER LETTER REVERSED GLOTTAL STOP), or U+1D2C (MODIFIER LETTER CAPITAL A) through U+1D61 (MODIFIER LETTER SMALL CHI). These characters are members of the <xref href=\"System.Globalization.UnicodeCategory.ModifierLetter\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n</li><li>\n<p>Other letters, such as U+05D0 (HEBREW LETTER ALEF) through U+05EA (HEBREW LETTER TAV), U+0621 (ARABIC LETTER HAMZA) through U+063A (ARABIC LETTER GHAIN), or U+4E00 (<CJK Ideograph, First>) through U+9FC3 (<CJK Ideograph, Last>). These characters are members of the <xref href=\"System.Globalization.UnicodeCategory.OtherLetter\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsLetter(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsLetter#5"
  syntax:
    content: public static bool IsLetter(string s, int index)
    content.vb: Public Shared Function IsLetter(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a letter; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsLetterOrDigit(System.Char)
  commentId: M:System.Char.IsLetterOrDigit(System.Char)
  id: IsLetterOrDigit(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsLetterOrDigit(Char)
  fullName: System.Char.IsLetterOrDigit(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLetterOrDigit
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 342
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified Unicode character is categorized as a letter or a decimal digit.</p>\n"
  remarks: "\n<p>Valid letters and decimal digits are members of the following categories in <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref>: <strong>UppercaseLetter</strong>, <strong>LowercaseLetter</strong>, <strong>TitlecaseLetter</strong>, <strong>ModifierLetter</strong>, <strong>OtherLetter</strong>, or <strong>DecimalDigitNumber</strong>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsLetterOrDigit(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsLetterOrDigit#6"
  syntax:
    content: public static bool IsLetterOrDigit(char c)
    content.vb: Public Shared Function IsLetterOrDigit(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>c</em> is a letter or a decimal digit; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsLetterOrDigit(System.String,System.Int32)
  commentId: M:System.Char.IsLetterOrDigit(System.String,System.Int32)
  id: IsLetterOrDigit(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsLetterOrDigit(String, Int32)
  fullName: System.Char.IsLetterOrDigit(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLetterOrDigit
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 343
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the character at the specified position in a specified string is categorized as a letter or a decimal digit.</p>\n"
  remarks: "\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>Valid letters and decimal digits are members of the following categories in <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref>: <strong>UppercaseLetter</strong>, <strong>LowercaseLetter</strong>, <strong>TitlecaseLetter</strong>, <strong>ModifierLetter</strong>, <strong>OtherLetter</strong>, or <strong>DecimalDigitNumber</strong>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsLetterOrDigit(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsLetterOrDigit#6"
  syntax:
    content: public static bool IsLetterOrDigit(string s, int index)
    content.vb: Public Shared Function IsLetterOrDigit(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a letter or a decimal digit; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsLower(System.Char)
  commentId: M:System.Char.IsLower(System.Char)
  id: IsLower(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsLower(Char)
  fullName: System.Char.IsLower(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLower
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 344
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified Unicode character is categorized as a lowercase letter.</p>\n"
  remarks: "\n<p>Valid lowercase letters are members of the following category in <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref>: <strong>LowercaseLetter</strong>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsLower(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsLower#7"
  syntax:
    content: public static bool IsLower(char c)
    content.vb: Public Shared Function IsLower(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>c</em> is a lowercase letter; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.Char.IsUpper(System.Char)
    commentId: M:System.Char.IsUpper(System.Char)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsLower(System.String,System.Int32)
  commentId: M:System.Char.IsLower(System.String,System.Int32)
  id: IsLower(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsLower(String, Int32)
  fullName: System.Char.IsLower(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLower
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 345
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the character at the specified position in a specified string is categorized as a lowercase letter.</p>\n"
  remarks: "\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>Valid lowercase letters are members of the following category in <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref>: <strong>LowercaseLetter</strong>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsLower(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsLower#7"
  syntax:
    content: public static bool IsLower(string s, int index)
    content.vb: Public Shared Function IsLower(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a lowercase letter; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.String
    commentId: T:System.String
  - type: System.Char.IsUpper(System.Char)
    commentId: M:System.Char.IsUpper(System.Char)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsLowSurrogate(System.Char)
  commentId: M:System.Char.IsLowSurrogate(System.Char)
  id: IsLowSurrogate(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsLowSurrogate(Char)
  fullName: System.Char.IsLowSurrogate(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLowSurrogate
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 346
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object is a low surrogate.</p>\n"
  remarks: "\n<p>In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The second element in this pair is the low surrogate. Its code point can range from U+DC00 to U+DFFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Char.IsHighSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Char.IsLowSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Char.IsSurrogatePair(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>char.surrogate#1"
  syntax:
    content: public static bool IsLowSurrogate(char c)
    content.vb: Public Shared Function IsLowSurrogate(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the numeric value of the <em>c</em> parameter ranges from U+DC00 through U+DFFF; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsLowSurrogate(System.String,System.Int32)
  commentId: M:System.Char.IsLowSurrogate(System.String,System.Int32)
  id: IsLowSurrogate(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsLowSurrogate(String, Int32)
  fullName: System.Char.IsLowSurrogate(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLowSurrogate
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 347
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object at the specified position in a string is a low surrogate.</p>\n"
  remarks: "\n<p>The <em>index</em> parameter is zero-based.</p>\n<p>In addition to representing single characters using a 16-bit code point, UTF-16 encoding allows abstract characters to be represented using two 16-bit code points, which is known as a surrogate pair. The second element in this pair is the low surrogate. Its code point can range from U+DC00 to U+DFFF. An individual surrogate has no interpretation of its own; it is meaningful only when used as part of a surrogate pair.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Char.IsHighSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Char.IsLowSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Char.IsSurrogatePair(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>char.surrogate#1"
  syntax:
    content: public static bool IsLowSurrogate(string s, int index)
    content.vb: Public Shared Function IsLowSurrogate(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the numeric value of the specified character in the <em>s</em> parameter ranges from U+DC00 through U+DFFF; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a position within <em>s</em>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsNumber(System.Char)
  commentId: M:System.Char.IsNumber(System.Char)
  id: IsNumber(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsNumber(Char)
  fullName: System.Char.IsNumber(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNumber
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 348
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified Unicode character is categorized as a number.</p>\n"
  remarks: "\n<p>This method determines whether a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> is of any numeric Unicode category. In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers. This method contrasts with the <xref href=\"System.Char.IsDigit(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, which determines whether a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> is a radix-10 digit.</p>\n<p>The <xref href=\"System.Char.IsNumber(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string). To determine whether a string consists of numeric characters, call one of the overloads of the <strong>TryParse</strong> method (such as <see cref=\"Overload:System.Int32.TryParse\"></see> or <see cref=\"Overload:System.Double.TryParse\"></see> of an integral or floating point type.</p>\n<p>Valid numbers are members of the <xref href=\"System.Globalization.UnicodeCategory.DecimalDigitNumber\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.UnicodeCategory.LetterNumber\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Globalization.UnicodeCategory.OtherNumber\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n<p>The <xref href=\"System.Char.IsNumber(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method assumes that <em>c</em> corresponds to a single linguistic character and checks whether that character represents a number. However, some numbers in the Unicode standard are represented by two <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects that form a surrogate pair. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref href=\"System.Char.ConvertFromUtf32(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the <xref href=\"System.Char.IsNumber(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>false</strong> if it is passed either a high surrogate or a low surrogate of this character.</p>System.Char.IsNumber#1"
  example:
  - "\n<p>The following example demonstrates <xref href=\"System.Char.IsNumber(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsNumber#8"
  syntax:
    content: public static bool IsNumber(char c)
    content.vb: Public Shared Function IsNumber(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>c</em> is a number; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.Char.IsDigit(System.Char)
    commentId: M:System.Char.IsDigit(System.Char)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsNumber(System.String,System.Int32)
  commentId: M:System.Char.IsNumber(System.String,System.Int32)
  id: IsNumber(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsNumber(String, Int32)
  fullName: System.Char.IsNumber(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNumber
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 349
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the character at the specified position in a specified string is categorized as a number.</p>\n"
  remarks: "\n<p>This method determines whether a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> is of any numeric Unicode category. In addition to including digits, numbers include characters, fractions, subscripts, superscripts, Roman numerals, currency numerators, and encircled numbers. This method contrasts with the <xref href=\"System.Char.IsDigit(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method, which determines whether a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> is a radix-10 digit.</p>\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>The <xref href=\"System.Char.IsNumber(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method is not intended to determine whether a string consists of numeric characters (for example, by calling the method for each character in a string). To determine whether a string consists of numeric characters, call one of the overloads of the<strong> TryParse</strong> method (such as <see cref=\"Overload:System.Int32.TryParse\"></see> or <see cref=\"Overload:System.Double.TryParse\"></see> of an integral or floating point type.</p>\n<p>Valid numbers are members of the <xref href=\"System.Globalization.UnicodeCategory.DecimalDigitNumber\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.UnicodeCategory.LetterNumber\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Globalization.UnicodeCategory.OtherNumber\" data-throw-if-not-resolved=\"false\"></xref> category.</p>\n<p>If the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object at position <em>index</em> is the first character of a valid surrogate pair, the <xref href=\"System.Char.IsNumber(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method determines whether the surrogate pair forms a numeric digit. For example, the Aegean numbering system consists of code points U+10107 through U+10133. The following example uses the <xref href=\"System.Char.ConvertFromUtf32(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method to instantiate a string that represents AEGEAN NUMBER ONE. As the output from the example shows, the <xref href=\"System.Char.IsNumber(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method returns <strong>true</strong> if it is passed the high surrogate of AEGEAN NUMBER ONE. However, if it is passed the low surrogate, it considers only the category of the low surrogate and returns <strong>false</strong>.</p>System.Char.IsNumber#2"
  example:
  - "\n<p>The following example demonstrates <xref href=\"System.Char.IsNumber(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsNumber#8"
  syntax:
    content: public static bool IsNumber(string s, int index)
    content.vb: Public Shared Function IsNumber(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a number; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.String
    commentId: T:System.String
  - type: System.Char.IsDigit(System.Char)
    commentId: M:System.Char.IsDigit(System.Char)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsPunctuation(System.Char)
  commentId: M:System.Char.IsPunctuation(System.Char)
  id: IsPunctuation(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsPunctuation(Char)
  fullName: System.Char.IsPunctuation(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPunctuation
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 350
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified Unicode character is categorized as a punctuation mark.</p>\n"
  remarks: "\n<p>Valid punctuation marks are members of the following categories in <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref>: <strong>ConnectorPunctuation</strong>, <strong>DashPunctuation</strong>, <strong>OpenPunctuation</strong>, <strong>ClosePunctuation</strong>, <strong>InititalQuotePunctuation</strong>, <strong>FinalQuotePunctuation</strong>, or <strong>OtherPunctuation</strong>. They include characters with the Unicode code points listed in the following table. </p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsPunctuation(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsPunctuation#9"
  syntax:
    content: public static bool IsPunctuation(char c)
    content.vb: Public Shared Function IsPunctuation(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>c</em> is a punctuation mark; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsPunctuation(System.String,System.Int32)
  commentId: M:System.Char.IsPunctuation(System.String,System.Int32)
  id: IsPunctuation(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsPunctuation(String, Int32)
  fullName: System.Char.IsPunctuation(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPunctuation
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 351
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the character at the specified position in a specified string is categorized as a punctuation mark.</p>\n"
  remarks: "\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>Valid punctuation marks are members of the following categories in <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref>: <strong>ConnectorPunctuation</strong>, <strong>DashPunctuation</strong>, <strong>OpenPunctuation</strong>, <strong>ClosePunctuation</strong>, <strong>InititalQuotePunctuation</strong>, <strong>FinalQuotePunctuation</strong>, or <strong>OtherPunctuation</strong>. They include characters with the Unicode code points listed in the following table.</p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsPunctuation(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsPunctuation#9"
  syntax:
    content: public static bool IsPunctuation(string s, int index)
    content.vb: Public Shared Function IsPunctuation(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a punctuation mark; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsSeparator(System.Char)
  commentId: M:System.Char.IsSeparator(System.Char)
  id: IsSeparator(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsSeparator(Char)
  fullName: System.Char.IsSeparator(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSeparator
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 352
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified Unicode character is categorized as a separator character.</p>\n"
  remarks: "\n<p>The Unicode standard recognizes three subcategories of separators: </p>\n<ul><li>\n<p>Space separators (the <xref href=\"System.Globalization.UnicodeCategory.SpaceSeparator\" data-throw-if-not-resolved=\"false\"></xref> category), which includes characters such as \\u0020.</p>\n</li><li>\n<p>Line separators (the <xref href=\"System.Globalization.UnicodeCategory.LineSeparator\" data-throw-if-not-resolved=\"false\"></xref> category), which includes \\u2028.</p>\n</li><li>\n<p>Paragraph separators (the <xref href=\"System.Globalization.UnicodeCategory.ParagraphSeparator\" data-throw-if-not-resolved=\"false\"></xref> category), which includes \\u2029. </p>\n</li></ul>\n<p>The Unicode standard classifies the characters \\u000A (LF), \\u000C (FF), and \\u000D (CR) as control characters (members of the <xref href=\"System.Globalization.UnicodeCategory.Control\" data-throw-if-not-resolved=\"false\"></xref> category), not as separator characters. </p>\n"
  example:
  - "\n<p>The following example lists the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects that are classified as separator characters.</p>System.Char.IsSeparator#1"
  syntax:
    content: public static bool IsSeparator(char c)
    content.vb: Public Shared Function IsSeparator(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>c</em> is a separator character; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Globalization.UnicodeCategory
    commentId: T:System.Globalization.UnicodeCategory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsSeparator(System.String,System.Int32)
  commentId: M:System.Char.IsSeparator(System.String,System.Int32)
  id: IsSeparator(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsSeparator(String, Int32)
  fullName: System.Char.IsSeparator(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSeparator
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 353
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the character at the specified position in a specified string is categorized as a separator character.</p>\n"
  remarks: "\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>The Unicode standard recognizes three subcategories of separators: </p>\n<ul><li>\n<p>Space separators (the <xref href=\"System.Globalization.UnicodeCategory.SpaceSeparator\" data-throw-if-not-resolved=\"false\"></xref> category), which includes characters such as \\u0020.</p>\n</li><li>\n<p>Line separators (the <xref href=\"System.Globalization.UnicodeCategory.LineSeparator\" data-throw-if-not-resolved=\"false\"></xref> category), which includes \\u2028.</p>\n</li><li>\n<p>Paragraph separators (the <xref href=\"System.Globalization.UnicodeCategory.ParagraphSeparator\" data-throw-if-not-resolved=\"false\"></xref> category), which includes \\u2029.</p>\n</li></ul>\n<p>The Unicode standard classifies the characters \\u000A (LF), \\u000C (FF), and \\u000D (CR) as control characters (members of the <xref href=\"System.Globalization.UnicodeCategory.Control\" data-throw-if-not-resolved=\"false\"></xref> category), not as separator characters.</p>\n"
  example:
  - "\n<p>The following example demonstrates <xref href=\"System.Char.IsSeparator(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsSeparator#10"
  syntax:
    content: public static bool IsSeparator(string s, int index)
    content.vb: Public Shared Function IsSeparator(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a separator character; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsSurrogate(System.Char)
  commentId: M:System.Char.IsSurrogate(System.Char)
  id: IsSurrogate(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsSurrogate(Char)
  fullName: System.Char.IsSurrogate(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSurrogate
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 354
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified character has a surrogate code unit.</p>\n"
  remarks: "\n<p>A surrogate is a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object with a UTF-16 code unit in the range from U+D800 to U+DFFF. Each character with a code unit in this range belongs to the <xref href=\"System.Globalization.UnicodeCategory.Surrogate\" data-throw-if-not-resolved=\"false\"></xref> category. The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair. For more information about surrogate pairs, see the Unicode Standard at the <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode home page</see>.</p>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Char.IsSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Char.IsSurrogate#11"
  syntax:
    content: public static bool IsSurrogate(char c)
    content.vb: Public Shared Function IsSurrogate(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>c</em> is either a high surrogate or a low surrogate; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsSurrogate(System.String,System.Int32)
  commentId: M:System.Char.IsSurrogate(System.String,System.Int32)
  id: IsSurrogate(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsSurrogate(String, Int32)
  fullName: System.Char.IsSurrogate(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSurrogate
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 355
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the character at the specified position in a specified string has a surrogate code unit.</p>\n"
  remarks: "\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>A surrogate is a <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object with a UTF-16 code unit in the range from U+D800 to U+DFFF. Each character with a code unit in this range belongs to the <xref href=\"System.Globalization.UnicodeCategory.Surrogate\" data-throw-if-not-resolved=\"false\"></xref> category. The individual surrogate code unit has no interpretation of its own, but has meaning only when used as part of a surrogate pair. For more information about surrogate pairs, see the Unicode Standard at the <see href=\"http://go.microsoft.com/fwlink/?linkid=37123\">Unicode home page</see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsSurrogate#11"
  syntax:
    content: public static bool IsSurrogate(string s, int index)
    content.vb: Public Shared Function IsSurrogate(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a either a high surrogate or a low surrogate; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsSurrogatePair(System.Char,System.Char)
  commentId: M:System.Char.IsSurrogatePair(System.Char,System.Char)
  id: IsSurrogatePair(System.Char,System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsSurrogatePair(Char, Char)
  fullName: System.Char.IsSurrogatePair(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSurrogatePair
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 356
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the two specified <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects form a surrogate pair.</p>\n"
  remarks: "\n<p>Ordinarily, a single character is represented by a single 16-bit Unicode code unit. UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units. The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate. The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate. Individual surrogate code points have no interpretation of their own. For more information about surrogates and the Unicode Standard, see the <see href=\"http://go.microsoft.com/fwlink/?LinkId=37123\">Unicode home page</see>.</p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Char.IsHighSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Char.IsLowSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Char.IsSurrogatePair(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>char.surrogate#1"
  syntax:
    content: public static bool IsSurrogatePair(char highSurrogate, char lowSurrogate)
    content.vb: Public Shared Function IsSurrogatePair(highSurrogate As Char, lowSurrogate As Char) As Boolean
    parameters:
    - id: highSurrogate
      type: System.Char
      description: "\n<p>The character to evaluate as the high surrogate of a surrogate pair. </p>\n"
    - id: lowSurrogate
      type: System.Char
      description: "\n<p>The character to evaluate as the low surrogate of a surrogate pair. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the numeric value of the <em>highSurrogate</em> parameter ranges from U+D800 through U+DBFF, and the numeric value of the <em>lowSurrogate</em> parameter ranges from U+DC00 through U+DFFF; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Char.IsHighSurrogate(System.Char)
    commentId: M:System.Char.IsHighSurrogate(System.Char)
  - type: System.Char.IsLowSurrogate(System.Char)
    commentId: M:System.Char.IsLowSurrogate(System.Char)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsSurrogatePair(System.String,System.Int32)
  commentId: M:System.Char.IsSurrogatePair(System.String,System.Int32)
  id: IsSurrogatePair(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsSurrogatePair(String, Int32)
  fullName: System.Char.IsSurrogatePair(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSurrogatePair
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 357
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether two adjacent <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects at a specified position in a string form a surrogate pair.</p>\n"
  remarks: "\n<p>Ordinarily, a single character is represented by a single 16-bit Unicode code unit. UTF-16 encoding also supports surrogate pairs, which allow a single abstract character to be represented by two 16-bit code units. The first code unit, whose value can range from U+D800 to U+DBFF, is the high surrogate. The second code unit, whose value can range from U+DC00 to U+DFFF, is the low surrogate. Individual surrogate code points have no interpretation of their own. For more information about surrogates and the Unicode Standard, see the <see href=\"http://go.microsoft.com/fwlink/?LinkId=37123\">Unicode home page</see>. </p>\n"
  example:
  - "\n<p>The following code example demonstrates the <xref href=\"System.Char.IsHighSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Char.IsLowSurrogate(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Char.IsSurrogatePair(System.String,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>char.surrogate#1"
  syntax:
    content: public static bool IsSurrogatePair(string s, int index)
    content.vb: Public Shared Function IsSurrogatePair(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting position of the pair of characters to evaluate within <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>s</em> parameter includes adjacent characters at positions <em>index</em> and <em>index</em> + 1, and the numeric value of the character at position <em>index</em> ranges from U+D800 through U+DBFF, and the numeric value of the character at position <em>index</em>+1 ranges from U+DC00 through U+DFFF; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a position within <em>s</em>. </p>\n"
  seealso:
  - type: System.Char.IsHighSurrogate(System.Char)
    commentId: M:System.Char.IsHighSurrogate(System.Char)
  - type: System.Char.IsLowSurrogate(System.Char)
    commentId: M:System.Char.IsLowSurrogate(System.Char)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsSymbol(System.Char)
  commentId: M:System.Char.IsSymbol(System.Char)
  id: IsSymbol(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsSymbol(Char)
  fullName: System.Char.IsSymbol(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSymbol
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 358
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified Unicode character is categorized as a symbol character.</p>\n"
  remarks: "\n<p>Valid symbols are members of the following categories in <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref>: <strong>MathSymbol</strong>, <strong>CurrencySymbol</strong>, <strong>ModifierSymbol</strong>, and <strong>OtherSymbol</strong>.</p>\n<p>Symbols in the Unicode standard are a loosely defined set of characters that include the following:</p>\n<ul><li>\n<p>Currency symbols.</p>\n</li><li>\n<p>Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</p>\n</li><li>\n<p>Number forms, such as subscripts and superscripts.</p>\n</li><li>\n<p>Mathematical operators and arrows.</p>\n</li><li>\n<p>Geometric symbols.</p>\n</li><li>\n<p>Technical symbols.</p>\n</li><li>\n<p>Braille patterns.</p>\n</li><li>\n<p>Dingbats.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsSymbol(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsSymbol#12"
  syntax:
    content: public static bool IsSymbol(char c)
    content.vb: Public Shared Function IsSymbol(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>c</em> is a symbol character; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsSymbol(System.String,System.Int32)
  commentId: M:System.Char.IsSymbol(System.String,System.Int32)
  id: IsSymbol(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsSymbol(String, Int32)
  fullName: System.Char.IsSymbol(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSymbol
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 359
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the character at the specified position in a specified string is categorized as a symbol character.</p>\n"
  remarks: "\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>Valid symbols are members of the following categories in <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref>: <strong>MathSymbol</strong>, <strong>CurrencySymbol</strong>, <strong>ModifierSymbol</strong>, and <strong>OtherSymbol</strong>.</p>\n<p>Symbols in the Unicode standard are a loosely defined set of characters that include the following:</p>\n<ul><li>\n<p>Currency symbols.</p>\n</li><li>\n<p>Letterlike symbols, which include a set of mathematical alphanumeric symbols as well as symbols such as ℅, №, and ™.</p>\n</li><li>\n<p>Number forms, such as subscripts and superscripts.</p>\n</li><li>\n<p>Mathematical operators and arrows.</p>\n</li><li>\n<p>Geometric symbols.</p>\n</li><li>\n<p>Technical symbols.</p>\n</li><li>\n<p>Braille patterns.</p>\n</li><li>\n<p>Dingbats.</p>\n</li></ul>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsSymbol(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsSymbol#12"
  syntax:
    content: public static bool IsSymbol(string s, int index)
    content.vb: Public Shared Function IsSymbol(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is a symbol character; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsUpper(System.Char)
  commentId: M:System.Char.IsUpper(System.Char)
  id: IsUpper(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsUpper(Char)
  fullName: System.Char.IsUpper(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsUpper
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 360
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified Unicode character is categorized as an uppercase letter.</p>\n"
  remarks: "\n<p>Valid uppercase letters are members of the following category in <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref>: <strong>UppercaseLetter</strong>.</p>\n"
  syntax:
    content: public static bool IsUpper(char c)
    content.vb: Public Shared Function IsUpper(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>c</em> is an uppercase letter; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.Char.IsLower(System.Char)
    commentId: M:System.Char.IsLower(System.Char)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsUpper(System.String,System.Int32)
  commentId: M:System.Char.IsUpper(System.String,System.Int32)
  id: IsUpper(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsUpper(String, Int32)
  fullName: System.Char.IsUpper(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsUpper
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 361
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the character at the specified position in a specified string is categorized as an uppercase letter.</p>\n"
  remarks: "\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>Valid uppercase letters are members of the following category in <xref href=\"System.Globalization.UnicodeCategory\" data-throw-if-not-resolved=\"false\"></xref>: <strong>UppercaseLetter</strong>.</p>\n"
  syntax:
    content: public static bool IsUpper(string s, int index)
    content.vb: Public Shared Function IsUpper(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is an uppercase letter; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsWhiteSpace(System.Char)
  commentId: M:System.Char.IsWhiteSpace(System.Char)
  id: IsWhiteSpace(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsWhiteSpace(Char)
  fullName: System.Char.IsWhiteSpace(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsWhiteSpace
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 362
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified Unicode character is categorized as white space.</p>\n"
  remarks: "\n<p>White space characters are the following Unicode characters:</p>\n<ul><li>\n<p>Members of the <xref href=\"System.Globalization.UnicodeCategory.SpaceSeparator\" data-throw-if-not-resolved=\"false\"></xref> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</p>\n</li><li>\n<p>Members of the <xref href=\"System.Globalization.UnicodeCategory.LineSeparator\" data-throw-if-not-resolved=\"false\"></xref> category, which consists solely of the LINE SEPARATOR character (U+2028).</p>\n</li><li>\n<p>Members of the <xref href=\"System.Globalization.UnicodeCategory.ParagraphSeparator\" data-throw-if-not-resolved=\"false\"></xref> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</p>\n</li><li>\n<p>The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085). </p>\n</li></ul>\n"
  example:
  - "\n<p>The following example demonstrates the <xref href=\"System.Char.IsWhiteSpace(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>System.Char.IsWhiteSpace#14"
  syntax:
    content: public static bool IsWhiteSpace(char c)
    content.vb: Public Shared Function IsWhiteSpace(c As Char) As Boolean
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to evaluate. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>c</em> is white space; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.Globalization.UnicodeCategory
    commentId: T:System.Globalization.UnicodeCategory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.IsWhiteSpace(System.String,System.Int32)
  commentId: M:System.Char.IsWhiteSpace(System.String,System.Int32)
  id: IsWhiteSpace(System.String,System.Int32)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IsWhiteSpace(String, Int32)
  fullName: System.Char.IsWhiteSpace(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsWhiteSpace
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 363
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the character at the specified position in a specified string is categorized as white space.</p>\n"
  remarks: "\n<p>Character positions in a string are indexed starting from zero.</p>\n<p>White space characters are the following Unicode characters:</p>\n<ul><li>\n<p>Members of the <xref href=\"System.Globalization.UnicodeCategory.SpaceSeparator\" data-throw-if-not-resolved=\"false\"></xref> category, which includes the characters SPACE (U+0020), NO-BREAK SPACE (U+00A0), OGHAM SPACE MARK (U+1680), EN QUAD (U+2000), EM QUAD (U+2001), EN SPACE (U+2002), EM SPACE (U+2003), THREE-PER-EM SPACE (U+2004), FOUR-PER-EM SPACE (U+2005), SIX-PER-EM SPACE (U+2006), FIGURE SPACE (U+2007), PUNCTUATION SPACE (U+2008), THIN SPACE (U+2009), HAIR SPACE (U+200A), NARROW NO-BREAK SPACE (U+202F), MEDIUM MATHEMATICAL SPACE (U+205F), and IDEOGRAPHIC SPACE (U+3000).</p>\n</li><li>\n<p>Members of the <xref href=\"System.Globalization.UnicodeCategory.LineSeparator\" data-throw-if-not-resolved=\"false\"></xref> category, which consists solely of the LINE SEPARATOR character (U+2028).</p>\n</li><li>\n<p>Members of the <xref href=\"System.Globalization.UnicodeCategory.ParagraphSeparator\" data-throw-if-not-resolved=\"false\"></xref> category, which consists solely of the PARAGRAPH SEPARATOR character (U+2029).</p>\n</li><li>\n<p>The characters CHARACTER TABULATION (U+0009), LINE FEED (U+000A), LINE TABULATION (U+000B), FORM FEED (U+000C), CARRIAGE RETURN (U+000D), and NEXT LINE (U+0085). </p>\n</li></ul>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.IsWhiteSpace(System.Char)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.IsWhiteSpace#14"
  syntax:
    content: public static bool IsWhiteSpace(string s, int index)
    content.vb: Public Shared Function IsWhiteSpace(s As String, index As Integer) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character to evaluate in <em>s</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the character at position <em>index</em> in <em>s</em> is white space; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the last position in <em>s</em>. </p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.String
    commentId: T:System.String
  - type: System.Globalization.UnicodeCategory
    commentId: T:System.Globalization.UnicodeCategory
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.Parse(System.String)
  commentId: M:System.Char.Parse(System.String)
  id: Parse(System.String)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: Parse(String)
  fullName: System.Char.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 364
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified string to its equivalent Unicode character.</p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.Parse#15"
  syntax:
    content: public static char Parse(string s)
    content.vb: Public Shared Function Parse(s As String) As Char
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string that contains a single character, or <strong>null</strong>. </p>\n"
    return:
      type: System.Char
      description: "\n<p>A Unicode character equivalent to the sole character in <em>s</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The length of <em>s</em> is not 1. </p>\n"
  seealso:
  - type: System.Char.ToString
    commentId: M:System.Char.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.System#IComparable#CompareTo(System.Object)
  commentId: M:System.Char.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  fullName: System.Char.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 365
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IComparable.CompareTo(object value)
    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: System.Char.System#IConvertible#GetTypeCode
  commentId: M:System.Char.System#IConvertible#GetTypeCode
  id: System#IConvertible#GetTypeCode
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.GetTypeCode()
  fullName: System.Char.System.IConvertible.GetTypeCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.GetTypeCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 366
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: TypeCode IConvertible.GetTypeCode()
    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode
    return:
      type: System.TypeCode
  implements:
  - System.IConvertible.GetTypeCode
  name.vb: System.IConvertible.GetTypeCode()
- uid: System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToBoolean(System.IFormatProvider)
  id: System#IConvertible#ToBoolean(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToBoolean(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToBoolean(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToBoolean
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 367
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Note   This conversion is not supported. Attempting to do so throws an <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: bool IConvertible.ToBoolean(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>This conversion is not supported. No value is returned.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>This conversion is not supported.</p>\n"
  implements:
  - System.IConvertible.ToBoolean(System.IFormatProvider)
  name.vb: System.IConvertible.ToBoolean(IFormatProvider)
- uid: System.Char.System#IConvertible#ToByte(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToByte(System.IFormatProvider)
  id: System#IConvertible#ToByte(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToByte(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToByte
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 368
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToByte(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method instead. </p>\n"
  syntax:
    content: byte IConvertible.ToByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Byte
      description: "\n<p>The converted value of the current <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToByte(IFormatProvider)
- uid: System.Char.System#IConvertible#ToChar(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToChar(System.IFormatProvider)
  id: System#IConvertible#ToChar(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToChar(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToChar(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToChar
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 369
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToChar(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: char IConvertible.ToChar(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Char
      description: "\n<p>The value of the current <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object unchanged.</p>\n"
  implements:
  - System.IConvertible.ToChar(System.IFormatProvider)
  name.vb: System.IConvertible.ToChar(IFormatProvider)
- uid: System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToDateTime(System.IFormatProvider)
  id: System#IConvertible#ToDateTime(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToDateTime(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToDateTime(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToDateTime
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 370
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Note   This conversion is not supported. Attempting to do so throws an <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.DateTime
      description: "\n<p>No value is returned.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>This conversion is not supported.</p>\n"
  implements:
  - System.IConvertible.ToDateTime(System.IFormatProvider)
  name.vb: System.IConvertible.ToDateTime(IFormatProvider)
- uid: System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToDecimal(System.IFormatProvider)
  id: System#IConvertible#ToDecimal(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToDecimal(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToDecimal(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToDecimal
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 371
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Note   This conversion is not supported. Attempting to do so throws an <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: decimal IConvertible.ToDecimal(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>No value is returned.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>This conversion is not supported.</p>\n"
  implements:
  - System.IConvertible.ToDecimal(System.IFormatProvider)
  name.vb: System.IConvertible.ToDecimal(IFormatProvider)
- uid: System.Char.System#IConvertible#ToDouble(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToDouble(System.IFormatProvider)
  id: System#IConvertible#ToDouble(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToDouble(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToDouble(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToDouble
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 372
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Note   This conversion is not supported. Attempting to do so throws an <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: double IConvertible.ToDouble(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Double
      description: "\n<p>No value is returned.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>This conversion is not supported.</p>\n"
  implements:
  - System.IConvertible.ToDouble(System.IFormatProvider)
  name.vb: System.IConvertible.ToDouble(IFormatProvider)
- uid: System.Char.System#IConvertible#ToInt16(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToInt16(System.IFormatProvider)
  id: System#IConvertible#ToInt16(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt16(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToInt16
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 373
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p> For a description of this member, see <xref href=\"System.IConvertible.ToInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToInt16(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n"
  syntax:
    content: short IConvertible.ToInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Int16
      description: "\n<p>The converted value of the current <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt16(IFormatProvider)
- uid: System.Char.System#IConvertible#ToInt32(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToInt32(System.IFormatProvider)
  id: System#IConvertible#ToInt32(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt32(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToInt32
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 374
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToInt32(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n"
  syntax:
    content: int IConvertible.ToInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The converted value of the current <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt32(IFormatProvider)
- uid: System.Char.System#IConvertible#ToInt64(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToInt64(System.IFormatProvider)
  id: System#IConvertible#ToInt64(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt64(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToInt64
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 375
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p> For a description of this member, see <xref href=\"System.IConvertible.ToInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToInt64(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n"
  syntax:
    content: long IConvertible.ToInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The converted value of the current <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt64(IFormatProvider)
- uid: System.Char.System#IConvertible#ToSByte(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToSByte(System.IFormatProvider)
  id: System#IConvertible#ToSByte(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToSByte(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToSByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToSByte
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 376
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p> For a description of this member, see <xref href=\"System.IConvertible.ToSByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToSByte(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n"
  syntax:
    content: sbyte IConvertible.ToSByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.SByte
      description: "\n<p>The converted value of the current <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToSByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToSByte(IFormatProvider)
- uid: System.Char.System#IConvertible#ToSingle(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToSingle(System.IFormatProvider)
  id: System#IConvertible#ToSingle(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToSingle(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToSingle(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToSingle
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 377
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Note   This conversion is not supported. Attempting to do so throws an <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: float IConvertible.ToSingle(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Single
      description: "\n<p>No value is returned.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>This conversion is not supported.</p>\n"
  implements:
  - System.IConvertible.ToSingle(System.IFormatProvider)
  name.vb: System.IConvertible.ToSingle(IFormatProvider)
- uid: System.Char.System#IConvertible#ToString(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToString(System.IFormatProvider)
  id: System#IConvertible#ToString(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToString(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 378
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: string IConvertible.ToString(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToString(provider As IFormatProvider) As String Implements IConvertible.ToString
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.String
  implements:
  - System.IConvertible.ToString(System.IFormatProvider)
  name.vb: System.IConvertible.ToString(IFormatProvider)
- uid: System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToType(Type, IFormatProvider)
  fullName: System.Char.System.IConvertible.ToType(System.Type, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToType
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 379
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ChangeType(System.Object,System.Type,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n"
  syntax:
    content: object IConvertible.ToType(Type type, IFormatProvider provider)
    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An object of the specified type.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value of the current <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object cannot be converted to the type specified by the <em>type</em> parameter. </p>\n"
  implements:
  - System.IConvertible.ToType(System.Type,System.IFormatProvider)
  name.vb: System.IConvertible.ToType(Type, IFormatProvider)
- uid: System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToUInt16(System.IFormatProvider)
  id: System#IConvertible#ToUInt16(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt16(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToUInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToUInt16
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 380
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToUInt16(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n"
  syntax:
    content: ushort IConvertible.ToUInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object. (Specify <strong>null</strong> because the <em>provider</em> parameter is ignored.)</p>\n"
    return:
      type: System.UInt16
      description: "\n<p>The converted value of the current <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToUInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt16(IFormatProvider)
- uid: System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToUInt32(System.IFormatProvider)
  id: System#IConvertible#ToUInt32(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt32(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToUInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToUInt32
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 381
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToUInt32(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n"
  syntax:
    content: uint IConvertible.ToUInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object. (Specify <strong>null</strong> because the <em>provider</em> parameter is ignored.)</p>\n"
    return:
      type: System.UInt32
      description: "\n<p>The converted value of the current <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToUInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt32(IFormatProvider)
- uid: System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)
  commentId: M:System.Char.System#IConvertible#ToUInt64(System.IFormatProvider)
  id: System#IConvertible#ToUInt64(System.IFormatProvider)
  isEii: true
  parent: System.Char
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt64(IFormatProvider)
  fullName: System.Char.System.IConvertible.ToUInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToUInt64
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 382
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>This member is an explicit interface member implementation. It can be used only when the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> instance is cast to an <xref href=\"System.IConvertible\" data-throw-if-not-resolved=\"false\"></xref> interface. The recommended alternative is to call the <xref href=\"System.Convert.ToUInt64(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method instead.</p>\n"
  syntax:
    content: ulong IConvertible.ToUInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An <xref href=\"System.IFormatProvider\" data-throw-if-not-resolved=\"false\"></xref> object. (Specify <strong>null</strong> because the <em>provider</em> parameter is ignored.)</p>\n"
    return:
      type: System.UInt64
      description: "\n<p>The converted value of the current <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToUInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt64(IFormatProvider)
- uid: System.Char.ToLower(System.Char)
  commentId: M:System.Char.ToLower(System.Char)
  id: ToLower(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: ToLower(Char)
  fullName: System.Char.ToLower(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLower
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 383
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of a Unicode character to its lowercase equivalent.</p>\n"
  remarks: "\n<p>Casing rules are obtained from the current culture. </p>\n<p>Use <xref href=\"System.String.ToLower\" data-throw-if-not-resolved=\"false\"></xref> to convert a string to lowercase.</p>\n"
  example:
  - "\n<p>The following example demonstrates <xref href=\"System.Char.ToLower(System.Char,System.Globalization.CultureInfo)\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.ToLower#16"
  syntax:
    content: public static char ToLower(char c)
    content.vb: Public Shared Function ToLower(c As Char) As Char
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The lowercase equivalent of <em>c</em>, or the unchanged value of <em>c</em>, if <em>c</em> is already lowercase or not alphabetic.</p>\n"
  seealso:
  - type: System.String.ToLower
    commentId: M:System.String.ToLower
  - type: System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)
    commentId: M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.ToLowerInvariant(System.Char)
  commentId: M:System.Char.ToLowerInvariant(System.Char)
  id: ToLowerInvariant(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: ToLowerInvariant(Char)
  fullName: System.Char.ToLowerInvariant(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLowerInvariant
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 384
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture.</p>\n"
  remarks: "\n<p>If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, then use the <xref href=\"System.Char.ToLowerInvariant(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Char.ToLowerInvariant(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to <code>ToLower(Char, CultureInfo.InvariantCulture)</code>.</p>\n<p>Use <xref href=\"System.String.ToLowerInvariant\" data-throw-if-not-resolved=\"false\"></xref> to convert a string to lowercase.</p>\n"
  syntax:
    content: public static char ToLowerInvariant(char c)
    content.vb: Public Shared Function ToLowerInvariant(c As Char) As Char
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The lowercase equivalent of the <em>c</em> parameter, or the unchanged value of <em>c</em>, if <em>c</em> is already lowercase or not alphabetic.</p>\n"
  seealso:
  - type: System.String.ToLower
    commentId: M:System.String.ToLower
  - type: System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)
    commentId: M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)
  - type: System.Globalization.CultureInfo.InvariantCulture
    commentId: P:System.Globalization.CultureInfo.InvariantCulture
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.ToString
  commentId: M:System.Char.ToString
  id: ToString
  parent: System.Char
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Char.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 385
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of this instance to its equivalent string representation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.ToString#17"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The string representation of the value of this instance.</p>\n"
  overridden: System.ValueType.ToString
  seealso:
  - type: System.Char.Parse(System.String)
    commentId: M:System.Char.Parse(System.String)
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Char.ToString(System.Char)
  commentId: M:System.Char.ToString(System.Char)
  id: ToString(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: ToString(Char)
  fullName: System.Char.ToString(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 386
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the specified Unicode character to its equivalent string representation.</p>\n"
  example:
  - "\n<p>The following code example demonstrates <xref href=\"System.Char.ToString\" data-throw-if-not-resolved=\"false\"></xref>.</p>System.Char.ToString#17"
  syntax:
    content: public static string ToString(char c)
    content.vb: Public Shared Function ToString(c As Char) As String
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the value of <em>c</em>.</p>\n"
  seealso:
  - type: System.Char.Parse(System.String)
    commentId: M:System.Char.Parse(System.String)
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.ToUpper(System.Char)
  commentId: M:System.Char.ToUpper(System.Char)
  id: ToUpper(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: ToUpper(Char)
  fullName: System.Char.ToUpper(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUpper
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 387
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of a Unicode character to its uppercase equivalent.</p>\n"
  remarks: "\n<p>Casing rules are obtained from the current culture.</p>\n<p>Use <xref href=\"System.String.ToUpper\" data-throw-if-not-resolved=\"false\"></xref> to convert a string to uppercase.</p>\n"
  example:
  - "\n<p>The following example converts each character in an array to its uppercase equivalent. </p>System.Char.ToUpper#1"
  syntax:
    content: public static char ToUpper(char c)
    content.vb: Public Shared Function ToUpper(c As Char) As Char
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The uppercase equivalent of <em>c</em>, or the unchanged value of <em>c</em> if <em>c</em> is already uppercase, has no uppercase equivalent, or is not alphabetic.</p>\n"
  seealso:
  - type: System.String.ToUpper
    commentId: M:System.String.ToUpper
  - type: System.Char.ToLower(System.Char,System.Globalization.CultureInfo)
    commentId: M:System.Char.ToLower(System.Char,System.Globalization.CultureInfo)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.ToUpperInvariant(System.Char)
  commentId: M:System.Char.ToUpperInvariant(System.Char)
  id: ToUpperInvariant(System.Char)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: ToUpperInvariant(Char)
  fullName: System.Char.ToUpperInvariant(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToUpperInvariant
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 388
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture.</p>\n"
  remarks: "\n<p>If your application is unaffected by the current culture and depends on the case of a character changing in a predictable way, use the <xref href=\"System.Char.ToUpperInvariant(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method.  The <xref href=\"System.Char.ToUpperInvariant(System.Char)\" data-throw-if-not-resolved=\"false\"></xref> method is equivalent to <code>ToUpper(Char, CultureInfo.InvariantCulture)</code>.</p>\n<p>Use <xref href=\"System.String.ToUpperInvariant\" data-throw-if-not-resolved=\"false\"></xref> to convert a string to uppercase.</p>\n"
  syntax:
    content: public static char ToUpperInvariant(char c)
    content.vb: Public Shared Function ToUpperInvariant(c As Char) As Char
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The Unicode character to convert. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The uppercase equivalent of the <em>c</em> parameter, or the unchanged value of <em>c</em>, if <em>c</em> is already uppercase or not alphabetic.</p>\n"
  seealso:
  - type: System.String.ToUpper
    commentId: M:System.String.ToUpper
  - type: System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)
    commentId: M:System.Char.ToUpper(System.Char,System.Globalization.CultureInfo)
  - type: System.Globalization.CultureInfo.InvariantCulture
    commentId: P:System.Globalization.CultureInfo.InvariantCulture
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Char.TryParse(System.String,System.Char@)
  commentId: M:System.Char.TryParse(System.String,System.Char@)
  id: TryParse(System.String,System.Char@)
  parent: System.Char
  langs:
  - csharp
  - vb
  name: TryParse(String, out Char)
  fullName: System.Char.TryParse(System.String, out System.Char)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 389
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified string to its equivalent Unicode character. A return code indicates whether the conversion succeeded or failed.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Char.TryParse(System.String,System.Char@)\" data-throw-if-not-resolved=\"false\"></xref> method is like the <xref href=\"System.Char.Parse(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method, except the <xref href=\"System.Char.TryParse(System.String,System.Char@)\" data-throw-if-not-resolved=\"false\"></xref> method does not throw an exception if the conversion fails.</p>\n"
  example:
  - "\n<p>The following code example demonstrates overloads of the <xref href=\"System.Char.TryParse(System.String,System.Char@)\" data-throw-if-not-resolved=\"false\"></xref> method for several base types, and the <see cref=\"Overload:System.DateTime.TryParseExact\"></see> method for the <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> base type.</p>T.TryParse#1"
  syntax:
    content: public static bool TryParse(string s, out char result)
    content.vb: Public Shared Function TryParse(s As String, ByRef result As Char) As Boolean
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A string that contains a single character, or <strong>null</strong>. </p>\n"
    - id: result
      type: System.Char
      description: "\n<p>When this method returns, contains a Unicode character equivalent to the sole character in <em>s</em>, if the conversion succeeded, or an undefined value if the conversion failed. The conversion fails if the <em>s</em> parameter is <strong>null</strong> or the length of <em>s</em> is not 1. This parameter is passed uninitialized. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>s</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Char.Parse(System.String)
    commentId: M:System.Char.Parse(System.String)
  - type: System.Char.ToString
    commentId: M:System.Char.ToString
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Char.TryParse(System.String, ByRef System.Char)
  name.vb: TryParse(String, ByRef Char)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.IComparable{System.Char}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Char>
  fullName: System.IComparable<System.Char>
  fullname.vb: System.IComparable(Of System.Char)
  name.vb: IComparable(Of Char)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: )
    fullName: )
- uid: System.IConvertible
  parent: System
  isExternal: false
  name: IConvertible
  fullName: System.IConvertible
- uid: System.IEquatable{System.Char}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Char>
  fullName: System.IEquatable<System.Char>
  fullname.vb: System.IEquatable(Of System.Char)
  name.vb: IEquatable(Of Char)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.IComparable`1
  parent: System
  isExternal: false
  name: IComparable<T>
  fullName: System.IComparable<T>
  fullname.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<>
  fullName: System.IEquatable<>
  fullname.vb: System.IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.IComparable{System.Char}.CompareTo(System.Char)
  parent: System.IComparable{System.Char}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Char)
  fullName: System.IComparable<System.Char>.CompareTo(System.Char)
  fullname.vb: System.IComparable(Of System.Char).CompareTo(System.Char)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<System.Char>.CompareTo
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of System.Char).CompareTo
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.IComparable`1.CompareTo(`0)
  parent: System.IComparable`1
  isExternal: false
  name: CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<T>.CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of T).CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IEquatable{System.Char}.Equals(System.Char)
  parent: System.IEquatable{System.Char}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Char)
  fullName: System.IEquatable<System.Char>.Equals(System.Char)
  fullname.vb: System.IEquatable(Of System.Char).Equals(System.Char)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Char>.Equals
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Char).Equals
  - name: (
    fullName: (
  - uid: System.Char
    name: Char
    fullName: System.Char
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: false
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: false
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.IConvertible.GetTypeCode
  parent: System.IConvertible
  isExternal: false
  name: GetTypeCode()
  fullName: System.IConvertible.GetTypeCode()
  spec.csharp:
  - uid: System.IConvertible.GetTypeCode
    name: GetTypeCode
    fullName: System.IConvertible.GetTypeCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.GetTypeCode
    name: GetTypeCode
    fullName: System.IConvertible.GetTypeCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  fullName: System.TypeCode
- uid: System.IConvertible.ToBoolean(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToBoolean(IFormatProvider)
  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: ToBoolean
    fullName: System.IConvertible.ToBoolean
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: ToBoolean
    fullName: System.IConvertible.ToBoolean
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.IConvertible.ToByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToByte(IFormatProvider)
  fullName: System.IConvertible.ToByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: ToByte
    fullName: System.IConvertible.ToByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: ToByte
    fullName: System.IConvertible.ToByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.IConvertible.ToChar(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToChar(IFormatProvider)
  fullName: System.IConvertible.ToChar(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: ToChar
    fullName: System.IConvertible.ToChar
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: ToChar
    fullName: System.IConvertible.ToChar
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToDateTime(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDateTime(IFormatProvider)
  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: ToDateTime
    fullName: System.IConvertible.ToDateTime
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: ToDateTime
    fullName: System.IConvertible.ToDateTime
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
- uid: System.IConvertible.ToDecimal(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDecimal(IFormatProvider)
  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: ToDecimal
    fullName: System.IConvertible.ToDecimal
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: ToDecimal
    fullName: System.IConvertible.ToDecimal
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.IConvertible.ToDouble(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDouble(IFormatProvider)
  fullName: System.IConvertible.ToDouble(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: ToDouble
    fullName: System.IConvertible.ToDouble
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: ToDouble
    fullName: System.IConvertible.ToDouble
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt16(IFormatProvider)
  fullName: System.IConvertible.ToInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: ToInt16
    fullName: System.IConvertible.ToInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: ToInt16
    fullName: System.IConvertible.ToInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.IConvertible.ToInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt32(IFormatProvider)
  fullName: System.IConvertible.ToInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: ToInt32
    fullName: System.IConvertible.ToInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: ToInt32
    fullName: System.IConvertible.ToInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt64(IFormatProvider)
  fullName: System.IConvertible.ToInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: ToInt64
    fullName: System.IConvertible.ToInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: ToInt64
    fullName: System.IConvertible.ToInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.IConvertible.ToSByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToSByte(IFormatProvider)
  fullName: System.IConvertible.ToSByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: ToSByte
    fullName: System.IConvertible.ToSByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: ToSByte
    fullName: System.IConvertible.ToSByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.IConvertible.ToSingle(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToSingle(IFormatProvider)
  fullName: System.IConvertible.ToSingle(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: ToSingle
    fullName: System.IConvertible.ToSingle
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: ToSingle
    fullName: System.IConvertible.ToSingle
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.IConvertible.ToString(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToString(IFormatProvider)
  fullName: System.IConvertible.ToString(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: ToString
    fullName: System.IConvertible.ToString
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: ToString
    fullName: System.IConvertible.ToString
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToType(Type, IFormatProvider)
  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: ToType
    fullName: System.IConvertible.ToType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: ToType
    fullName: System.IConvertible.ToType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.IConvertible.ToUInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt16(IFormatProvider)
  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: ToUInt16
    fullName: System.IConvertible.ToUInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: ToUInt16
    fullName: System.IConvertible.ToUInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.IConvertible.ToUInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt32(IFormatProvider)
  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: ToUInt32
    fullName: System.IConvertible.ToUInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: ToUInt32
    fullName: System.IConvertible.ToUInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.IConvertible.ToUInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt64(IFormatProvider)
  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: ToUInt64
    fullName: System.IConvertible.ToUInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: ToUInt64
    fullName: System.IConvertible.ToUInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
