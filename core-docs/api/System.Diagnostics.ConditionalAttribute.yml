items:
- uid: System.Diagnostics.ConditionalAttribute
  commentId: T:System.Diagnostics.ConditionalAttribute
  id: ConditionalAttribute
  parent: System.Diagnostics
  children:
  - System.Diagnostics.ConditionalAttribute.#ctor(System.String)
  - System.Diagnostics.ConditionalAttribute.ConditionString
  langs:
  - csharp
  - vb
  name: ConditionalAttribute
  fullName: System.Diagnostics.ConditionalAttribute
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/ConditionalAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConditionalAttribute
    path: src/mscorlib/src/System/Diagnostics/ConditionalAttribute.cs
    startLine: 7
  assemblies:
  - System.Runtime
  namespace: System.Diagnostics
  summary: "\n<p>Indicates to compilers that a method call or attribute should be ignored unless a specified conditional compilation symbol is defined.</p>\n"
  remarks: "\n<p>You can apply the <xref href=\"System.Diagnostics.ConditionalAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to methods and classes. However, its use on classes is valid only for types that are derived from <xref href=\"System.Attribute\" data-throw-if-not-resolved=\"false\"></xref>. <xref href=\"System.Diagnostics.ConditionalAttribute\" data-throw-if-not-resolved=\"false\"></xref> either will be ignored or will produce a compiler warning or error message if you apply it to any other type.</p>\n<p>Applying <xref href=\"System.Diagnostics.ConditionalAttribute\" data-throw-if-not-resolved=\"false\"></xref> to a method indicates to compilers that a call to the method should not be compiled into Microsoft intermediate language (MSIL) unless the conditional compilation symbol that is associated with <xref href=\"System.Diagnostics.ConditionalAttribute\" data-throw-if-not-resolved=\"false\"></xref> is defined. You will get a compilation error in Visual Studio if you apply this attribute to a method that does not return void. Applying <xref href=\"System.Diagnostics.ConditionalAttribute\" data-throw-if-not-resolved=\"false\"></xref> to an attribute indicates that the attribute should not be emitted to metadata unless the conditional compilation symbol is defined. Any arguments passed to the method or attribute are still type-checked by the compiler.</p>\n<p>You can use the following techniques to define conditional compilation symbols: </p>\n<ul><li>\n<p>Use compiler command-line options; for example, /define:DEBUG.</p>\n</li><li>\n<p>Use environment variables in the operating system shell; for example, set DEBUG=1.</p>\n</li><li>\n<p>Use pragmas in the source code; for example, define the compilation variable as follows: </p>\n<pre><code class=\"c#\">#define DEBUG</code></pre>\n<pre><code class=\"vb\">#Const DEBUG=True</code></pre>\n<p>To undefine the variable, use the following: </p>\n<pre><code class=\"c#\">#Undef DEBUG</code></pre>\n<pre><code class=\"vb\">#Const DEBUG=False</code></pre>\n</li></ul>\n<p>Compilers that comply with the Common Language Specification (CLS) are permitted to ignore <xref href=\"System.Diagnostics.ConditionalAttribute\" data-throw-if-not-resolved=\"false\"></xref>. The C#, Visual Basic, and C++ compilers support <xref href=\"System.Diagnostics.ConditionalAttribute\" data-throw-if-not-resolved=\"false\"></xref>; the JScript compiler does not support the attribute.</p>\n<p>In Visual Basic, the <strong>AddressOf</strong> operator is not affected by this attribute. For example, <code>Call CType(AddressOf delegate, Action)</code> always invokes <code>delegate</code>, although <code>Call delegate()</code> might not.</p>\n<p>\n<xref href=\"System.Diagnostics.ConditionalAttribute\" data-throw-if-not-resolved=\"false\"></xref> is applied to the methods that are defined in the <xref href=\"System.Diagnostics.Debug\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.Trace\" data-throw-if-not-resolved=\"false\"></xref> classes. </p>\n<p>For more information about how to use attributes, see Extending Metadata Using Attributes.</p>\n"
  example:
  - "\n<p>The following example demonstrates the use of <xref href=\"System.Diagnostics.ConditionalAttribute\" data-throw-if-not-resolved=\"false\"></xref>. The example assumes that the condition is defined with the /define compiler option. You can obtain different results by changing the compiler option. You can optionally define the conditions by using pragmas in the sample code instead of identifying them as compiler options.</p>ConditionalAttributeSample1#7"
  syntax:
    content: >-
      [Serializable]

      [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true)]

      [ComVisible(true)]

      public sealed class ConditionalAttribute : Attribute, _Attribute
    content.vb: >-
      <Serializable>

      <AttributeUsage(AttributeTargets.Class Or AttributeTargets.Method, AllowMultiple:=True)>

      <ComVisible(True)>

      Public NotInheritable Class ConditionalAttribute
          Inherits Attribute
          Implements _Attribute
  inheritance:
  - System.Object
  - System.Attribute
  inheritedMembers:
  - System.Attribute.Equals(System.Object)
  - System.Attribute.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.AttributeUsageAttribute
    ctor: System.AttributeUsageAttribute.#ctor(System.AttributeTargets)
    arguments:
    - type: System.AttributeTargets
      value: 68
    namedArguments:
    - name: AllowMultiple
      type: System.Boolean
      value: true
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
  commentId: M:System.Diagnostics.ConditionalAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.ConditionalAttribute
  langs:
  - csharp
  - vb
  name: ConditionalAttribute(String)
  fullName: System.Diagnostics.ConditionalAttribute.ConditionalAttribute(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/ConditionalAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Diagnostics/ConditionalAttribute.cs
    startLine: 12
  assemblies:
  - System.Runtime
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.ConditionalAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  example:
  - "\n<p>The following example demonstrates how to use the <xref href=\"System.Diagnostics.ConditionalAttribute.#ctor(System.String)\" data-throw-if-not-resolved=\"false\"></xref> constructor. This example is part of a larger example provided for the <xref href=\"System.Diagnostics.ConditionalAttribute\" data-throw-if-not-resolved=\"false\"></xref> class.</p>ConditionalAttributeSample1#8"
  syntax:
    content: public ConditionalAttribute(string conditionString)
    content.vb: Public Sub New(conditionString As String)
    parameters:
    - id: conditionString
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ConditionalAttribute.ConditionString
  commentId: P:System.Diagnostics.ConditionalAttribute.ConditionString
  id: ConditionString
  parent: System.Diagnostics.ConditionalAttribute
  langs:
  - csharp
  - vb
  name: ConditionString
  fullName: System.Diagnostics.ConditionalAttribute.ConditionString
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/ConditionalAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConditionString
    path: src/mscorlib/src/System/Diagnostics/ConditionalAttribute.cs
    startLine: 17
  assemblies:
  - System.Runtime
  namespace: System.Diagnostics
  summary: "\n<p>Gets the conditional compilation symbol that is associated with the <xref href=\"System.Diagnostics.ConditionalAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
  remarks: "\n<p>This property is read-only.</p>\n"
  syntax:
    content: public string ConditionString { get; }
    content.vb: Public ReadOnly Property ConditionString As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Attribute
  parent: System
  isExternal: false
  name: Attribute
  fullName: System.Attribute
- uid: System.Attribute.Equals(System.Object)
  parent: System.Attribute
  isExternal: true
  name: Equals(Object)
  fullName: System.Attribute.Equals(System.Object)
  spec.csharp:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.Equals(System.Object)
    name: Equals
    fullName: System.Attribute.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Attribute.GetHashCode
  parent: System.Attribute
  isExternal: false
  name: GetHashCode()
  fullName: System.Attribute.GetHashCode()
  spec.csharp:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Attribute.GetHashCode
    name: GetHashCode
    fullName: System.Attribute.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
