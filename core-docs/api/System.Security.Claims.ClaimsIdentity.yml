items:
- uid: System.Security.Claims.ClaimsIdentity
  commentId: T:System.Security.Claims.ClaimsIdentity
  id: ClaimsIdentity
  parent: System.Security.Claims
  children:
  - System.Security.Claims.ClaimsIdentity.#ctor
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.Actor
  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.AuthenticationType
  - System.Security.Claims.ClaimsIdentity.BootstrapContext
  - System.Security.Claims.ClaimsIdentity.Claims
  - System.Security.Claims.ClaimsIdentity.Clone
  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.CustomSerializationData
  - System.Security.Claims.ClaimsIdentity.DefaultIssuer
  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.IsAuthenticated
  - System.Security.Claims.ClaimsIdentity.Label
  - System.Security.Claims.ClaimsIdentity.Name
  - System.Security.Claims.ClaimsIdentity.NameClaimType
  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.RoleClaimType
  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  - vb
  name: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
  type: Class
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClaimsIdentity
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 35
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Represents a claims-based identity.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class is a concrete implementation of a claims-based identity; that is, an identity described by a collection of claims. A claim is a statement about an entity made by an issuer that describes a property, right, or some other quality of that entity. Such an entity is said to be the subject of the claim. A claim is represented by the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class. The claims contained in a <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> describe the entity that the corresponding identity represents, and can be used to make authorization and authentication decisions. A claims-based access model has many advantages over more traditional access models that rely exclusively on roles. For example, claims can provide much richer information about the identity they represent and can be evaluated for authorization or authentication in a far more specific manner. </p>\n<p>Beginning with .NET Framework 4.5, Windows Identity Foundation (WIF) and claims-based identity have been fully integrated into the .NET Framework. This means that many classes that represent an identity in the .NET Framework now derive from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> and describe their properties through a collection of claims. This is different from previous versions of the .NET Framework, in which, these classes implemented the <xref href=\"System.Security.Principal.IIdentity\" data-throw-if-not-resolved=\"false\"></xref> interface directly. The collection of claims that describe the identity can be accessed through the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> property. The <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class provides several methods for finding and modifying claims and fully supports language integrated queries (LINQ). In application code, <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> objects are typically accessed through <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> objects; for example, the principal returned by <xref href=\"System.Threading.Thread.CurrentPrincipal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> class has a <xref href=\"System.Security.Claims.ClaimsPrincipal.Claims\" data-throw-if-not-resolved=\"false\"></xref> property as well. In the majority of cases you should access the user’s claims through the <xref href=\"System.Security.Claims.ClaimsPrincipal.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection rather than through the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection. You will need to access the claims of an individual <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> only in the cases where the principal contains more than one <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> and you need to evaluate or modify a specific identity.</p>\n<p>To add or remove claims from the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection, a caller must have full trust. </p>\n<p>In the claims-based model, the <xref href=\"System.Security.Principal.IIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Security.Principal.IPrincipal.IsInRole(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method are implemented by evaluating the claims contained by an identity. The base implementations in the claims-based model are provided by the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property and the <xref href=\"System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref> properties enable you to specify a claim type that should be used to evaluate the claims contained by the identity when performing these operations. </p>\n<p>Delegation scenarios are supported through the <xref href=\"System.Security.Claims.ClaimsIdentity.Actor\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n"
  syntax:
    content: 'public class ClaimsIdentity : IIdentity'
    content.vb: >-
      Public Class ClaimsIdentity
          Implements IIdentity
  seealso:
  - type: System.Security.Claims.Claim
    commentId: T:System.Security.Claims.Claim
  - type: System.Security.Claims.ClaimsPrincipal
    commentId: T:System.Security.Claims.ClaimsPrincipal
  - type: System.Security.Principal.GenericIdentity
    commentId: T:System.Security.Principal.GenericIdentity
  - type: System.Security.Principal.WindowsIdentity
    commentId: T:System.Security.Principal.WindowsIdentity
  - type: System.Web.Security.FormsIdentity
    commentId: T:System.Web.Security.FormsIdentity
  inheritance:
  - System.Object
  implements:
  - System.Security.Principal.IIdentity
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultIssuer
  id: DefaultIssuer
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: DefaultIssuer
  fullName: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  type: Field
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIssuer
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 37
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>The default issuer; “LOCAL AUTHORITY”.</p>\n"
  syntax:
    content: public const string DefaultIssuer = "LOCAL AUTHORITY"
    content.vb: Public Const DefaultIssuer As String = "LOCAL AUTHORITY"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  id: DefaultNameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: DefaultNameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  type: Field
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultNameClaimType
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 38
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>The default name claim type; <xref href=\"System.Security.Claims.ClaimTypes.Name\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public const string DefaultNameClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
    content.vb: Public Const DefaultNameClaimType As String = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  id: DefaultRoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: DefaultRoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  type: Field
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultRoleClaimType
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 39
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>The default role claim type; <xref href=\"System.Security.Claims.ClaimTypes.Role\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public const string DefaultRoleClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
    content.vb: Public Const DefaultRoleClaimType As String = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.Claims.ClaimsIdentity.#ctor
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity()
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 40
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class with an empty claims collection.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n<p>Property</p>\n<p>Value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Actor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>A empty collection.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Label\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the <xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ClaimsIdentity()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 41
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class using an enumerated collection of <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n<p>Property</p>\n<p>Value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Actor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Initialized from the <em>claims</em> parameter.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Label\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the <xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ClaimsIdentity(IEnumerable<Claim> claims)
    content.vb: Public Sub New(claims As IEnumerable(Of Claim))
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims with which to populate the claims identity.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))
  name.vb: ClaimsIdentity(IEnumerable(Of Claim))
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(IEnumerable<Claim>, String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 42
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claims and authentication type.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n<p>Property</p>\n<p>Value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Actor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The value of the <em>authenticationType</em> parameter. If the <em>authenticationType</em> parameter is <strong>null</strong> or an empty string, the property is set to <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Initialized from the <em>claims</em> parameter.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Label\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the <xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ClaimsIdentity(IEnumerable<Claim> claims, string authenticationType)
    content.vb: Public Sub New(claims As IEnumerable(Of Claim), authenticationType As String)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims with which to populate the claims identity.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>The type of authentication used.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String)
  name.vb: ClaimsIdentity(IEnumerable(Of Claim), String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(IEnumerable<Claim>, String, String, String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 43
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claims, authentication type, name claim type, and role claim type.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n<p>Property</p>\n<p>Value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Actor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The value of the <em>authenticationType</em> parameter. If the <em>authenticationType</em> parameter is <strong>null</strong> or an empty string, the property is set to <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Initialized from the <em>claims</em> parameter.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Label\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the <xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The value of the <em>nameType</em> parameter. However, if the <em>nameType</em> parameter is <strong>null</strong> or an empty string, the property is set to <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The value of the <em>roleClaimType</em> parameter. However, if the <em>roleClaimType</em> parameter is <strong>null</strong> or an empty string, the property is set to <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ClaimsIdentity(IEnumerable<Claim> claims, string authenticationType, string nameType, string roleType)
    content.vb: Public Sub New(claims As IEnumerable(Of Claim), authenticationType As String, nameType As String, roleType As String)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims with which to populate the claims identity.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>The type of authentication used.</p>\n"
    - id: nameType
      type: System.String
      description: "\n<p>The claim type to use for name claims.</p>\n"
    - id: roleType
      type: System.String
      description: "\n<p>The claim type to use for role claims.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, System.String, System.String)
  name.vb: ClaimsIdentity(IEnumerable(Of Claim), String, String, String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.IO.BinaryReader)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 44
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: public ClaimsIdentity(BinaryReader reader)
    content.vb: Public Sub New(reader As BinaryReader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Claims.ClaimsIdentity)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 45
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected ClaimsIdentity(ClaimsIdentity other)
    content.vb: Protected Sub New(other As ClaimsIdentity)
    parameters:
    - id: other
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p></p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  id: '#ctor(System.Security.Principal.IIdentity)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(IIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 46
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class using the name and authentication type from the specified <xref href=\"System.Security.Principal.IIdentity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n<p>Property</p>\n<p>Value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Actor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.Actor</strong> property; otherwise, <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The value of the <strong>identity.AuthenticationType</strong> (<xref href=\"System.Security.Principal.IIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>) property is used.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.BootStrapContext</strong> property; otherwise, <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the claims from <em>identity</em> are added to the new instance; otherwise, an empty collection.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Label\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.Label</strong> property; otherwise, <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is not assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, is not <strong>null</strong>, and has an <xref href=\"System.Security.Principal.IIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property that is not <strong>null</strong>; a name claim is added to the new instance using the value of the <xref href=\"System.Security.Principal.IIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the <xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.NameClaimType</strong> property is used; otherwise, <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.RoleClaimType</strong> property is used; otherwise, <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ClaimsIdentity(IIdentity identity)
    content.vb: Public Sub New(identity As IIdentity)
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "\n<p>The identity from which to base the new claims identity.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(IIdentity, IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 47
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class using the specified claims and the specified <xref href=\"System.Security.Principal.IIdentity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n<p>Property</p>\n<p>Value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Actor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.Actor</strong> property; otherwise, <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The <em>authenticationType</em> parameter. If the <em>authenticationType</em> parameter is <strong>null</strong> or an empty string, the value of the <strong>identity.AuthenticationType</strong> (<xref href=\"System.Security.Principal.IIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>) property is used.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.BootStrapContext</strong> property; otherwise, <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Initialized from the <em>claims</em> parameter. If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the claims from <em>identity</em> are added to the new instance before those specified by the <em>claims</em> parameter.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Label\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.Label</strong> property; otherwise, <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is not assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, is not <strong>null</strong>, and has an <xref href=\"System.Security.Principal.IIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property that is not <strong>null</strong>; a name claim is added to the new instance using the value of the <xref href=\"System.Security.Principal.IIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the <xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.NameClaimType</strong> property is used; otherwise, <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.RoleClaimType</strong> property is used; otherwise, <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ClaimsIdentity(IIdentity identity, IEnumerable<Claim> claims)
    content.vb: Public Sub New(identity As IIdentity, claims As IEnumerable(Of Claim))
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "\n<p>The identity from which to base the new claims identity.</p>\n"
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims with which to populate the claims identity.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))
  name.vb: ClaimsIdentity(IIdentity, IEnumerable(Of Claim))
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(IIdentity, IEnumerable<Claim>, String, String, String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 48
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class from the specified <xref href=\"System.Security.Principal.IIdentity\" data-throw-if-not-resolved=\"false\"></xref> using the specified claims, authentication type, name claim type, and role claim type.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n<p>Property</p>\n<p>Value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Actor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.Actor</strong> property; otherwise, <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The <em>authenticationType</em> parameter. If the <em>authenticationType</em> parameter is <strong>null</strong> or an empty string, the value of the <strong>identity.AuthenticationType</strong> (<xref href=\"System.Security.Principal.IIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>) property is used.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.BootStrapContext</strong> property; otherwise, <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>Initialized from the <em>claims</em> parameter. If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the claims from <em>identity</em> are added to the new instance before those specified by the <em>claims</em> parameter.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Label\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.Label</strong> property; otherwise, <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>If <em>identity</em> is not assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, is not <strong>null</strong>, and has an <xref href=\"System.Security.Principal.IIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property that is not <strong>null</strong>; a name claim is added to the new instance using the value of the <xref href=\"System.Security.Principal.IIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the <xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The value of the <em>nameType</em> parameter. However, if the value of the <em>nameType</em> parameter is <strong>null</strong> or an empty string and <em>identity</em> is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.NameClaimType</strong> property is used; otherwise, <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The value of the <em>roleClaimType</em> parameter. However, if the value of the <em>roleClaimType</em> parameter is <strong>null</strong> or an empty string and identity is assignable from <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>, the value of the <strong>identity.RoleClaimType</strong> property is used; otherwise, <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ClaimsIdentity(IIdentity identity, IEnumerable<Claim> claims, string authenticationType, string nameType, string roleType)
    content.vb: Public Sub New(identity As IIdentity, claims As IEnumerable(Of Claim), authenticationType As String, nameType As String, roleType As String)
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "\n<p>The identity from which to base the new claims identity.</p>\n"
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims with which to populate the new claims identity.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>The type of authentication used.</p>\n"
    - id: nameType
      type: System.String
      description: "\n<p>The claim type to use for name claims.</p>\n"
    - id: roleType
      type: System.String
      description: "\n<p>The claim type to use for role claims.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, System.String, System.String)
  name.vb: ClaimsIdentity(IIdentity, IEnumerable(Of Claim), String, String, String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 49
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class with an empty claims collection and the specified authentication type.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n<p>Property</p>\n<p>Value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Actor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The value of the <em>authenticationType</em> parameter. If the <em>authenticationType</em> parameter is <strong>null</strong> or an empty string, the property is set to <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>An empty collection.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Label\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the <xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ClaimsIdentity(string authenticationType)
    content.vb: Public Sub New(authenticationType As String)
    parameters:
    - id: authenticationType
      type: System.String
      description: "\n<p>The type of authentication used.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(String, String, String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 50
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class with the specified authentication type, name claim type, and role claim type.</p>\n"
  remarks: "\n<p>The following table shows initial property values for an instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n<p>Property</p>\n<p>Value</p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Actor\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The value of the <em>authenticationType</em> parameter. If the <em>authenticationType</em> parameter is <strong>null</strong> or an empty string, the property is set to <strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>An empty collection.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.IsAuthenticated\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Label\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>null</strong>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>When accessed, the value of the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property is returned based on the <xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The value of the <em>nameType</em> parameter. If the <em>nameType</em> parameter is null or an empty string, the property is set to <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultNameClaimType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>The value of the <em>roleType</em> parameter. If the <em>roleType</em> parameter is null or an empty string, the property is set to <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n</td></tr></tbody></table>\n"
  syntax:
    content: public ClaimsIdentity(string authenticationType, string nameType, string roleType)
    content.vb: Public Sub New(authenticationType As String, nameType As String, roleType As String)
    parameters:
    - id: authenticationType
      type: System.String
      description: "\n<p>The type of authentication used.</p>\n"
    - id: nameType
      type: System.String
      description: "\n<p>The claim type to use for name claims.</p>\n"
    - id: roleType
      type: System.String
      description: "\n<p>The claim type to use for role claims.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.Actor
  commentId: P:System.Security.Claims.ClaimsIdentity.Actor
  id: Actor
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: Actor
  fullName: System.Security.Claims.ClaimsIdentity.Actor
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Actor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 51
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets or sets the identity of the calling party that was granted delegation rights.</p>\n"
  remarks: "\n<p>An application can access the delegation chain that led to the current call, by recursively examining the <xref href=\"System.Security.Claims.ClaimsIdentity.Actor\" data-throw-if-not-resolved=\"false\"></xref> property. The token on whose behalf the call is being delegated can be accessed through the <xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public ClaimsIdentity Actor { get; set; }
    content.vb: Public Property Actor As ClaimsIdentity
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>The calling party that was granted delegation rights.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An attempt to set the property to the current instance occurs.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType
  commentId: P:System.Security.Claims.ClaimsIdentity.AuthenticationType
  id: AuthenticationType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: AuthenticationType
  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticationType
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 52
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the authentication type.</p>\n"
  remarks: "\n<p>Typically one of the values defined by the <xref href=\"System.Security.Claims.AuthenticationTypes\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: public virtual string AuthenticationType { get; }
    content.vb: Public Overridable ReadOnly Property AuthenticationType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The authentication type.</p>\n"
  implements:
  - System.Security.Principal.IIdentity.AuthenticationType
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext
  commentId: P:System.Security.Claims.ClaimsIdentity.BootstrapContext
  id: BootstrapContext
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: BootstrapContext
  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BootstrapContext
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 53
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets or sets the token that was used to create this claims identity.</p>\n"
  remarks: "\n<p>The underlying object is an instance of the <xref href=\"System.IdentityModel.Tokens.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n<p>Set the <strong>saveBootstrapContext</strong> attribute on either the <identityConfiguration> or the <securityTokenHandlerConfiguration> element in a configuration file to specify whether the token used to generate the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> should be preserved in the <xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n<p>If the <xref href=\"System.Security.Claims.ClaimsIdentity.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref> property is not <strong>null</strong>, applications can access the original token and the claims it produced through the properties and methods of the <xref href=\"System.IdentityModel.Tokens.BootstrapContext\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: >-
      public object BootstrapContext

      {
          get;
          [SecurityCritical]
          set;
      }
    content.vb: Public Property BootstrapContext As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>The bootstrap context.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsIdentity.Actor
    commentId: P:System.Security.Claims.ClaimsIdentity.Actor
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.Claims
  commentId: P:System.Security.Claims.ClaimsIdentity.Claims
  id: Claims
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: Claims
  fullName: System.Security.Claims.ClaimsIdentity.Claims
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Claims
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 54
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the claims associated with this claims identity.</p>\n"
  remarks: "\n<p>The collection may contain entries that are <strong>null</strong>.</p>\n<p>The claims contained in the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection essentially describe the entity that is represented by the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref>. The claims describe the properties and rights possessed by the entity and can be examined by applications to make decisions about authentication and authorization.</p>\n<p>The <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> class has a <xref href=\"System.Security.Claims.ClaimsPrincipal.Claims\" data-throw-if-not-resolved=\"false\"></xref> property as well. In the majority of cases you should access the user’s claims through the <xref href=\"System.Security.Claims.ClaimsPrincipal.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection rather than through the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection. You will need to access the claims of an individual <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> only in the cases where the principal contains more than one <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> and you need to evaluate or modify a specific identity.</p>\n"
  syntax:
    content: public virtual IEnumerable<Claim> Claims { get; }
    content.vb: Public Overridable ReadOnly Property Claims As IEnumerable(Of Claim)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The collection of claims associated with this claims identity.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsPrincipal.Claims
    commentId: P:System.Security.Claims.ClaimsPrincipal.Claims
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  commentId: P:System.Security.Claims.ClaimsIdentity.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: CustomSerializationData
  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomSerializationData
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 55
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    content.vb: Protected Overridable ReadOnly Property CustomSerializationData As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p></p>\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  commentId: P:System.Security.Claims.ClaimsIdentity.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: IsAuthenticated
  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAuthenticated
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 56
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets a value that indicates whether the identity has been authenticated.</p>\n"
  remarks: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Security.Claims.ClaimsIdentity.AuthenticationType\" data-throw-if-not-resolved=\"false\"></xref> property is not <strong>null</strong> or an empty string.</p>\n"
  syntax:
    content: public virtual bool IsAuthenticated { get; }
    content.vb: Public Overridable ReadOnly Property IsAuthenticated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the identity has been authenticated; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Security.Principal.IIdentity.IsAuthenticated
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.Label
  commentId: P:System.Security.Claims.ClaimsIdentity.Label
  id: Label
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: Label
  fullName: System.Security.Claims.ClaimsIdentity.Label
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 57
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets or sets the label for this claims identity.</p>\n"
  syntax:
    content: public string Label { get; set; }
    content.vb: Public Property Label As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The label.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.Name
  commentId: P:System.Security.Claims.ClaimsIdentity.Name
  id: Name
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Security.Claims.ClaimsIdentity.Name
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 58
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the name of this claims identity.</p>\n"
  remarks: "\n<p>Returns the value of the first claim with a type that matches the name claim type set in the <xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref> property. If no claim is found that matches the name claim type, returns <strong>null</strong>.</p>\n"
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name or <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsIdentity.NameClaimType
    commentId: P:System.Security.Claims.ClaimsIdentity.NameClaimType
  implements:
  - System.Security.Principal.IIdentity.Name
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType
  commentId: P:System.Security.Claims.ClaimsIdentity.NameClaimType
  id: NameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: NameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NameClaimType
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 59
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the claim type that is used to determine which claims provide the value for the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property of this claims identity.</p>\n"
  remarks: "\n<p>The <xref href=\"System.Security.Claims.ClaimsIdentity.NameClaimType\" data-throw-if-not-resolved=\"false\"></xref> property specifies the claim type (<xref href=\"System.Security.Claims.Claim.Type\" data-throw-if-not-resolved=\"false\"></xref>) that is used to provide the name for this identity. The name is accessed through the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>This property is set by the constructor.</p>\n"
  syntax:
    content: public string NameClaimType { get; }
    content.vb: Public ReadOnly Property NameClaimType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name claim type.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsIdentity.Name
    commentId: P:System.Security.Claims.ClaimsIdentity.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType
  commentId: P:System.Security.Claims.ClaimsIdentity.RoleClaimType
  id: RoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: RoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RoleClaimType
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 60
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the claim type that will be interpreted as a .NET Framework role among the claims in this claims identity.</p>\n"
  remarks: "\n<p>The role claim type is the claim type (<xref href=\"System.Security.Claims.Claim.Type\" data-throw-if-not-resolved=\"false\"></xref>) that is used when evaluating this identity for the <xref href=\"System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method. The <xref href=\"System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)\" data-throw-if-not-resolved=\"false\"></xref> method is called to determine whether the current principal is in a specified role. The claims-based model extends this check to use claims presented by the principal. A <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> object can contain one or more <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> objects and each identity object can contain multiple <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> objects. The <xref href=\"System.Security.Claims.ClaimsIdentity.RoleClaimType\" data-throw-if-not-resolved=\"false\"></xref> property specifies the claim type of the claim that should be used to provide the value for the role when evaluating this <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object. The property is set by the constructor. A common value is <xref href=\"System.Security.Claims.ClaimTypes.Role\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public string RoleClaimType { get; }
    content.vb: Public ReadOnly Property RoleClaimType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The role claim type.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
    commentId: M:System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  commentId: M:System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  id: AddClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: AddClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 61
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Adds a single claim to this claims identity.</p>\n"
  remarks: "\n<p>The claim is examined and if the subject is different than this claims identity, the <xref href=\"System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)\" data-throw-if-not-resolved=\"false\"></xref> method is invoked with this claims identity as the parameter to create a new claim with the correct subject.</p>\n<p>This method has the <strong>SecurityCritical</strong> attribute applied to control which entities can add claims to the identity. Further down the pipe, authorization decisions are made based on the claims that are present in the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public virtual void AddClaim(Claim claim)
    content.vb: >-
      <SecurityCritical>

      Public Overridable Sub AddClaim(claim As Claim)
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "\n<p>The claim to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>claim</em> is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: AddClaims(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddClaims
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 63
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Adds a list of claims to this claims identity.</p>\n"
  remarks: "\n<p>Each claim is examined and if the subject is different than this claims identity, the <xref href=\"System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)\" data-throw-if-not-resolved=\"false\"></xref> method is invoked with this claims identity as the parameter to create a new claim with the correct subject.</p>\n<p>This method has the <strong>SecurityCritical</strong> attribute applied to control which entities can add claims to the identity. Further down the pipe, authorization decisions are made based on the claims that are present in the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public virtual void AddClaims(IEnumerable<Claim> claims)
    content.vb: >-
      <SecurityCritical>

      Public Overridable Sub AddClaims(claims As IEnumerable(Of Claim))
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>claims</em> is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))
  name.vb: AddClaims(IEnumerable(Of Claim))
- uid: System.Security.Claims.ClaimsIdentity.Clone
  commentId: M:System.Security.Claims.ClaimsIdentity.Clone
  id: Clone
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Security.Claims.ClaimsIdentity.Clone()
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 65
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Returns a new <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> copied from this claims identity.</p>\n"
  syntax:
    content: public virtual ClaimsIdentity Clone()
    content.vb: Public Overridable Function Clone As ClaimsIdentity
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>A copy of the current instance.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  commentId: M:System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  id: CreateClaim(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: CreateClaim(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 66
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected virtual Claim CreateClaim(BinaryReader reader)
    content.vb: Protected Overridable Function CreateClaim(reader As BinaryReader) As Claim
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "\n<p></p>\n"
    return:
      type: System.Security.Claims.Claim
      description: "\n<p></p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  id: FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindAll
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 67
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves all of the claims that are matched by the specified predicate.</p>\n"
  syntax:
    content: public virtual IEnumerable<Claim> FindAll(Predicate<Claim> match)
    content.vb: Public Overridable Function FindAll(match As Predicate(Of Claim)) As IEnumerable(Of Claim)
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "\n<p>The function that performs the matching logic.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The matching claims. The list is read-only.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: FindAll(Predicate(Of Claim))
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  id: FindAll(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: FindAll(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindAll
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 68
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves all of the claims that have the specified claim type.</p>\n"
  remarks: "\n<p>The comparison is made using Ordinal case in-sensitive on <em>type</em>.</p>\n"
  syntax:
    content: public virtual IEnumerable<Claim> FindAll(string type)
    content.vb: Public Overridable Function FindAll(type As String) As IEnumerable(Of Claim)
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type against which to match claims.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The matching claims. The list is read-only.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  id: FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindFirst
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 69
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves the first claim that is matched by the specified predicate.</p>\n"
  syntax:
    content: public virtual Claim FindFirst(Predicate<Claim> match)
    content.vb: Public Overridable Function FindFirst(match As Predicate(Of Claim)) As Claim
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "\n<p>The function that performs the matching logic.</p>\n"
    return:
      type: System.Security.Claims.Claim
      description: "\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: FindFirst(Predicate(Of Claim))
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  id: FindFirst(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: FindFirst(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindFirst
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 70
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves the first claim with the specified claim type.</p>\n"
  syntax:
    content: public virtual Claim FindFirst(string type)
    content.vb: Public Overridable Function FindFirst(type As String) As Claim
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type to match.</p>\n"
    return:
      type: System.Security.Claims.Claim
      description: "\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  id: HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 71
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Determines whether this claims identity has a claim that is matched by the specified predicate.</p>\n"
  syntax:
    content: public virtual bool HasClaim(Predicate<Claim> match)
    content.vb: Public Overridable Function HasClaim(match As Predicate(Of Claim)) As Boolean
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "\n<p>The function that performs the matching logic.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching claim exists; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: HasClaim(Predicate(Of Claim))
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  id: HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: HasClaim(String, String)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 72
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Determines whether this claims identity has a claim with the specified claim type and value.</p>\n"
  remarks: "\n<p>Does not check the <xref href=\"System.Security.Claims.Claim.Issuer\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Security.Claims.Claim.OriginalIssuer\" data-throw-if-not-resolved=\"false\"></xref> properties. The comparison is made using Ordinal, case sensitive on value; case in-sensitive on type.</p>\n"
  syntax:
    content: public virtual bool HasClaim(string type, string value)
    content.vb: Public Overridable Function HasClaim(type As String, value As String) As Boolean
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The type of the claim to match.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value of the claim to match.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a match is found; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  commentId: M:System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  id: RemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: RemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 73
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Attempts to remove a claim from the claims identity.</p>\n"
  remarks: "\n<p>It is possible that the claim cannot be removed because it is not owned by the identity. For example, this would be the case for role claims that are owned by the principal. Unlike the <xref href=\"System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)\" data-throw-if-not-resolved=\"false\"></xref> method, which returns a Boolean value that indicates whether the claim has been removed, <xref href=\"System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)\" data-throw-if-not-resolved=\"false\"></xref> throws an exception if the claim could not be removed</p>\n<p>The specified claim is matched by object reference (<xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n<p>This method has the <strong>SecurityCritical</strong> attribute applied to control which entities can remove claims from the identity. Further down the pipe, authorization decisions are made based on the claims that are present in the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public virtual void RemoveClaim(Claim claim)
    content.vb: >-
      <SecurityCritical>

      Public Overridable Sub RemoveClaim(claim As Claim)
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "\n<p>The claim to remove.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The claim cannot be removed.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  commentId: M:System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  id: TryRemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: TryRemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryRemoveClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 75
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Attempts to remove a claim from the claims identity.</p>\n"
  remarks: "\n<p>It is possible that the claim cannot be removed because it is not owned by the identity. For example, this would be the case for role claims that are owned by the principal. </p>\n<p>The specified claim is matched by object reference (<xref href=\"System.Object.ReferenceEquals(System.Object,System.Object)\" data-throw-if-not-resolved=\"false\"></xref>).</p>\n<p>This method has the <strong>SecurityCritical</strong> attribute applied to control which entities can remove claims from the identity. Further down the pipe, authorization decisions are made based on the claims that are present in the <xref href=\"System.Security.Claims.ClaimsIdentity.Claims\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public virtual bool TryRemoveClaim(Claim claim)
    content.vb: >-
      <SecurityCritical>

      Public Overridable Function TryRemoveClaim(claim As Claim) As Boolean
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "\n<p>The claim to remove.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the claim was successfully removed; otherwise, <strong>false</strong>.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  commentId: M:System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 77
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: public virtual void WriteTo(BinaryWriter writer)
    content.vb: Public Overridable Sub WriteTo(writer As BinaryWriter)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "\n<p></p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  commentId: M:System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: WriteTo(BinaryWriter, Byte[])
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 78
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected virtual void WriteTo(BinaryWriter writer, byte[] userData)
    content.vb: Protected Overridable Sub WriteTo(writer As BinaryWriter, userData As Byte())
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "\n<p></p>\n"
    - id: userData
      type: System.Byte[]
      description: "\n<p></p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte())
  name.vb: WriteTo(BinaryWriter, Byte())
references:
- uid: System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  fullName: System.Security.Claims
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: false
  name: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: false
  name: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Principal.IIdentity.AuthenticationType
  parent: System.Security.Principal.IIdentity
  isExternal: true
  name: AuthenticationType
  fullName: System.Security.Principal.IIdentity.AuthenticationType
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.Security.Principal.IIdentity.IsAuthenticated
  parent: System.Security.Principal.IIdentity
  isExternal: true
  name: IsAuthenticated
  fullName: System.Security.Principal.IIdentity.IsAuthenticated
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.IIdentity.Name
  parent: System.Security.Principal.IIdentity
  isExternal: true
  name: Name
  fullName: System.Security.Principal.IIdentity.Name
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Predicate{System.Security.Claims.Claim}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Claim>
  fullName: System.Predicate<System.Security.Claims.Claim>
  fullname.vb: System.Predicate(Of System.Security.Claims.Claim)
  name.vb: Predicate(Of Claim)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<T>
  fullName: System.Predicate<T>
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: false
  name: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
