items:
- uid: System.Buffer
  commentId: T:System.Buffer
  id: Buffer
  parent: System
  children:
  - System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - System.Buffer.ByteLength(System.Array)
  - System.Buffer.GetByte(System.Array,System.Int32)
  - System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)
  - System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)
  - System.Buffer.SetByte(System.Array,System.Int32,System.Byte)
  langs:
  - csharp
  - vb
  name: Buffer
  fullName: System.Buffer
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Buffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Buffer
    path: src/mscorlib/src/System/Buffer.cs
    startLine: 17
  assemblies:
  - System.Runtime
  namespace: System
  summary: Manipulates arrays of primitive types.
  syntax:
    content: public class Buffer
    content.vb: Public Class Buffer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:System.Buffer.BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: BlockCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Buffer
  langs:
  - csharp
  - vb
  name: BlockCopy(Array, Int32, Array, Int32, Int32)
  fullName: System.Buffer.BlockCopy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: Copies a specified number of bytes from a source array starting at a particular offset to a destination array starting at a particular offset.
  syntax:
    content: public static void BlockCopy(Array src, int srcOffset, Array dst, int dstOffset, int count)
    content.vb: Public Shared Sub BlockCopy(src As Array, srcOffset As Integer, dst As Array, dstOffset As Integer, count As Integer)
    parameters:
    - id: src
      type: System.Array
      description: 'The source buffer. '
    - id: srcOffset
      type: System.Int32
      description: 'The zero-based byte offset into <em>src</em>. '
    - id: dst
      type: System.Array
      description: 'The destination buffer. '
    - id: dstOffset
      type: System.Int32
      description: 'The zero-based byte offset into <em>dst</em>. '
    - id: count
      type: System.Int32
      description: 'The number of bytes to copy. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>src</em> or <em>dst</em> is null. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>src</em> or <em>dst</em> is not an array of primitives.-or- The number of bytes in <em>src</em> is less than <em>srcOffset</em> plus <em>count</em>.-or- The number of bytes in <em>dst</em> is less than <em>dstOffset</em> plus <em>count</em>. "
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>srcOffset</em>, <em>dstOffset</em>, or <em>count</em> is less than 0. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Buffer.ByteLength(System.Array)
  commentId: M:System.Buffer.ByteLength(System.Array)
  id: ByteLength(System.Array)
  parent: System.Buffer
  langs:
  - csharp
  - vb
  name: ByteLength(Array)
  fullName: System.Buffer.ByteLength(System.Array)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Buffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ByteLength
    path: src/mscorlib/src/System/Buffer.cs
    startLine: 190
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns the number of bytes in the specified array.
  syntax:
    content: public static int ByteLength(Array array)
    content.vb: Public Shared Function ByteLength(array As Array) As Integer
    parameters:
    - id: array
      type: System.Array
      description: 'An array. '
    return:
      type: System.Int32
      description: The number of bytes in the array.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>array</em> is not a primitive. "
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>array</em> is larger than 2 gigabytes (GB)."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Buffer.GetByte(System.Array,System.Int32)
  commentId: M:System.Buffer.GetByte(System.Array,System.Int32)
  id: GetByte(System.Array,System.Int32)
  parent: System.Buffer
  langs:
  - csharp
  - vb
  name: GetByte(Array, Int32)
  fullName: System.Buffer.GetByte(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Buffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByte
    path: src/mscorlib/src/System/Buffer.cs
    startLine: 132
  assemblies:
  - System.Runtime
  namespace: System
  summary: Retrieves the byte at a specified location in a specified array.
  syntax:
    content: public static byte GetByte(Array array, int index)
    content.vb: Public Shared Function GetByte(array As Array, index As Integer) As Byte
    parameters:
    - id: array
      type: System.Array
      description: 'An array. '
    - id: index
      type: System.Int32
      description: 'A location in the array. '
    return:
      type: System.Byte
      description: Returns the <em>index</em> byte in the array.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>array</em> is not a primitive. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null. "
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is negative or greater than the length of <em>array</em>. "
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>array</em> is larger than 2 gigabytes (GB)."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)
  commentId: M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)
  id: MemoryCopy(System.Void*,System.Void*,System.Int64,System.Int64)
  parent: System.Buffer
  langs:
  - csharp
  - vb
  name: MemoryCopy(Void*, Void*, Int64, Int64)
  fullName: System.Buffer.MemoryCopy(System.Void*, System.Void*, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Buffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MemoryCopy
    path: src/mscorlib/src/System/Buffer.cs
    startLine: 519
  assemblies:
  - System.Runtime
  namespace: System
  summary: 'Copies a number of bytes specified as a long integer value from one address in memory to another. '
  syntax:
    content: >-
      [CLSCompliant(false)]

      [SecurityCritical]

      public static void MemoryCopy(void *source, void *destination, long destinationSizeInBytes, long sourceBytesToCopy)
    content.vb: >-
      <CLSCompliant(False)>

      <SecurityCritical>

      Public Shared Sub MemoryCopy(source As  *, destination As  *, destinationSizeInBytes As Long, sourceBytesToCopy As Long)
    parameters:
    - id: source
      type: System.Void*
      description: 'The address of the bytes to copy. '
    - id: destination
      type: System.Void*
      description: 'The target address. '
    - id: destinationSizeInBytes
      type: System.Int64
      description: 'The number of bytes available in the destination memory block. '
    - id: sourceBytesToCopy
      type: System.Int64
      description: 'The number of bytes to copy.  '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>sourceBytesToCopy</em> is greater than <em>destinationSizeInBytes</em>. "
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)
  commentId: M:System.Buffer.MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)
  id: MemoryCopy(System.Void*,System.Void*,System.UInt64,System.UInt64)
  parent: System.Buffer
  langs:
  - csharp
  - vb
  name: MemoryCopy(Void*, Void*, UInt64, UInt64)
  fullName: System.Buffer.MemoryCopy(System.Void*, System.Void*, System.UInt64, System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Buffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MemoryCopy
    path: src/mscorlib/src/System/Buffer.cs
    startLine: 538
  assemblies:
  - System.Runtime
  namespace: System
  summary: 'Copies a number of bytes specified as an unsigned long integer value from one address in memory to another. '
  syntax:
    content: >-
      [CLSCompliant(false)]

      [SecurityCritical]

      public static void MemoryCopy(void *source, void *destination, ulong destinationSizeInBytes, ulong sourceBytesToCopy)
    content.vb: >-
      <CLSCompliant(False)>

      <SecurityCritical>

      Public Shared Sub MemoryCopy(source As  *, destination As  *, destinationSizeInBytes As ULong, sourceBytesToCopy As ULong)
    parameters:
    - id: source
      type: System.Void*
      description: 'The address of the bytes to copy. '
    - id: destination
      type: System.Void*
      description: 'The target address. '
    - id: destinationSizeInBytes
      type: System.UInt64
      description: 'The number of bytes available in the destination memory block. '
    - id: sourceBytesToCopy
      type: System.UInt64
      description: 'The number of bytes to copy.   '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>sourceBytesToCopy</em> is greater than <em>destinationSizeInBytes</em>. "
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Buffer.SetByte(System.Array,System.Int32,System.Byte)
  commentId: M:System.Buffer.SetByte(System.Array,System.Int32,System.Byte)
  id: SetByte(System.Array,System.Int32,System.Byte)
  parent: System.Buffer
  langs:
  - csharp
  - vb
  name: SetByte(Array, Int32, Byte)
  fullName: System.Buffer.SetByte(System.Array, System.Int32, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Buffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetByte
    path: src/mscorlib/src/System/Buffer.cs
    startLine: 160
  assemblies:
  - System.Runtime
  namespace: System
  summary: Assigns a specified value to a byte at a particular location in a specified array.
  syntax:
    content: public static void SetByte(Array array, int index, byte value)
    content.vb: Public Shared Sub SetByte(array As Array, index As Integer, value As Byte)
    parameters:
    - id: array
      type: System.Array
      description: 'An array. '
    - id: index
      type: System.Int32
      description: 'A location in the array. '
    - id: value
      type: System.Byte
      description: 'A value to assign. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>array</em> is not a primitive. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null. "
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is negative or greater than the length of <em>array</em>. "
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>array</em> is larger than 2 gigabytes (GB)."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Void*
  isExternal: false
  name: Void*
  fullName: System.Void*
  spec.csharp:
  - uid: System.Void
    name: Void
    fullName: System.Void
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    fullName: System.Void
  - name: '*'
    fullName: '*'
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
