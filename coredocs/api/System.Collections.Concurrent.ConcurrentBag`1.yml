items:
- uid: System.Collections.Concurrent.ConcurrentBag`1
  commentId: T:System.Collections.Concurrent.ConcurrentBag`1
  id: ConcurrentBag`1
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.ConcurrentBag`1.#ctor
  - System.Collections.Concurrent.ConcurrentBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Concurrent.ConcurrentBag`1.Add(`0)
  - System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.ConcurrentBag`1.Count
  - System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator
  - System.Collections.Concurrent.ConcurrentBag`1.IsEmpty
  - System.Collections.Concurrent.ConcurrentBag`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  - System.Collections.Concurrent.ConcurrentBag`1.ToArray
  - System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)
  - System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)
  langs:
  - csharp
  - vb
  name: ConcurrentBag<T>
  fullName: System.Collections.Concurrent.ConcurrentBag<T>
  type: Class
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConcurrentBag
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 37
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Represents a thread-safe, unordered collection of objects.
  syntax:
    content: 'public class ConcurrentBag<T> : object, IProducerConsumerCollection<T>, Generic.IEnumerable<T>, Generic.IReadOnlyCollection<T>, ICollection, IEnumerable'
    content.vb: >-
      Public Class ConcurrentBag(Of T)
          Inherits Object
          Implements IProducerConsumerCollection(Of T), Generic.IEnumerable(Of T), Generic.IReadOnlyCollection(Of T), ICollection, IEnumerable
    typeParameters:
    - id: T
      description: The type of the elements to be stored in the collection.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Concurrent.IProducerConsumerCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Concurrent.ConcurrentBag(Of T)
  name.vb: ConcurrentBag(Of T)
- uid: System.Collections.Concurrent.ConcurrentBag`1.#ctor
  commentId: M:System.Collections.Concurrent.ConcurrentBag`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.ConcurrentBag`1
  langs:
  - csharp
  - vb
  name: ConcurrentBag()
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.ConcurrentBag()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 55
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public ConcurrentBag()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentBag(Of T).ConcurrentBag()
- uid: System.Collections.Concurrent.ConcurrentBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Concurrent.ConcurrentBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Concurrent.ConcurrentBag`1
  langs:
  - csharp
  - vb
  name: ConcurrentBag(Generic.IEnumerable<T>)
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.ConcurrentBag(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 60
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Initializes a new instance of the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref> class that contains elements copied from the specified collection.
  syntax:
    content: public ConcurrentBag(Generic.IEnumerable<T> collection)
    content.vb: Public Sub New(collection As Generic.IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection whose elements are copied to the new <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>collection</em> is a null reference (Nothing in Visual Basic)."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentBag(Of T).ConcurrentBag(System.Collections.Generic.IEnumerable(Of T))
  name.vb: ConcurrentBag(Generic.IEnumerable(Of T))
- uid: System.Collections.Concurrent.ConcurrentBag`1.Count
  commentId: P:System.Collections.Concurrent.ConcurrentBag`1.Count
  id: Count
  parent: System.Collections.Concurrent.ConcurrentBag`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 585
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets the number of elements contained in the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentBag(Of T).Count
- uid: System.Collections.Concurrent.ConcurrentBag`1.IsEmpty
  commentId: P:System.Collections.Concurrent.ConcurrentBag`1.IsEmpty
  id: IsEmpty
  parent: System.Collections.Concurrent.ConcurrentBag`1
  langs:
  - csharp
  - vb
  name: IsEmpty
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.IsEmpty
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEmpty
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 610
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Gets a value that indicates whether the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref> is empty.
  syntax:
    content: public bool IsEmpty { get; }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref> is empty; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.ConcurrentBag(Of T).IsEmpty
- uid: System.Collections.Concurrent.ConcurrentBag`1.Add(`0)
  commentId: M:System.Collections.Concurrent.ConcurrentBag`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Concurrent.ConcurrentBag`1
  langs:
  - csharp
  - vb
  name: Add(T)
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 103
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Adds an object to the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Add(T item)
    content.vb: Public Sub Add(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: The object to be added to the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref>. The value can be a null reference (Nothing in Visual Basic) for reference types.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentBag(Of T).Add(T)
- uid: System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.ConcurrentBag`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 434
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Copies the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref> elements to an existing one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>, starting at the specified array index.
  syntax:
    content: public void CopyTo(T[] array, int index)
    content.vb: Public Sub CopyTo(array As T(), index As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that is the destination of the elements copied from the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref>. The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <em>array</em> at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is a null reference (Nothing in Visual Basic)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> is equal to or greater than the length of the <em>array</em> -or- the number of elements in the source <xref href=\"System.Collections.Concurrent.ConcurrentBag`1\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>."
  implements:
  - System.Collections.Concurrent.IProducerConsumerCollection{{T}}.CopyTo({T}[],System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentBag(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator
  commentId: M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Concurrent.ConcurrentBag`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 542
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Returns an enumerator that iterates through the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Generic.IEnumerator<T> GetEnumerator()
    content.vb: Public Function GetEnumerator As Generic.IEnumerator(Of T)
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: An enumerator for the contents of the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentBag(Of T).GetEnumerator()
- uid: System.Collections.Concurrent.ConcurrentBag`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  commentId: M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  id: System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)
  isEii: true
  parent: System.Collections.Concurrent.ConcurrentBag`1
  langs:
  - csharp
  - vb
  name: IProducerConsumerCollection<T>.TryAdd(T)
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 151
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to add an object to the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: bool IProducerConsumerCollection<T>.TryAdd(T item)
    content.vb: Function System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(item As T) As Boolean Implements IProducerConsumerCollection(Of T).TryAdd
    parameters:
    - id: item
      type: '{T}'
      description: The object to be added to the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref>. The value can be a null reference (Nothing in Visual Basic) for reference types.
    return:
      type: System.Boolean
      description: Always returns true
  implements:
  - System.Collections.Concurrent.IProducerConsumerCollection{{T}}.TryAdd({T})
  fullName.vb: System.Collections.Concurrent.ConcurrentBag(Of T).System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  name.vb: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
- uid: System.Collections.Concurrent.ConcurrentBag`1.ToArray
  commentId: M:System.Collections.Concurrent.ConcurrentBag`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.ConcurrentBag`1
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 512
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Copies the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref> elements to a new array.
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
      description: A new array containing a snapshot of elements copied from the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.Concurrent.IProducerConsumerCollection{{T}}.ToArray
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentBag(Of T).ToArray()
- uid: System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)
  commentId: M:System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)
  id: TryPeek(`0@)
  parent: System.Collections.Concurrent.ConcurrentBag`1
  langs:
  - csharp
  - vb
  name: TryPeek(out T)
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.TryPeek(out T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryPeek
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 178
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to return an object from the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref> without removing it.
  syntax:
    content: public bool TryPeek(out T result)
    content.vb: Public Function TryPeek(ByRef result As T) As Boolean
    parameters:
    - id: result
      type: '{T}'
      description: When this method returns, <em>result</em> contains an object from the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref> or the default value of <em>T</em> if the operation failed.
    return:
      type: System.Boolean
      description: true if and object was returned successfully; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentBag(Of T).TryPeek(ByRef T)
  name.vb: TryPeek(ByRef T)
- uid: System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)
  commentId: M:System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)
  id: TryTake(`0@)
  parent: System.Collections.Concurrent.ConcurrentBag`1
  langs:
  - csharp
  - vb
  name: TryTake(out T)
  fullName: System.Collections.Concurrent.ConcurrentBag<T>.TryTake(out T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTake
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/ConcurrentBag.cs
    startLine: 165
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to remove and return an object from the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool TryTake(out T result)
    content.vb: Public Function TryTake(ByRef result As T) As Boolean
    parameters:
    - id: result
      type: '{T}'
      description: When this method returns, <em>result</em> contains the object removed from the <xref href="System.Collections.Concurrent.ConcurrentBag`1" data-throw-if-not-resolved="false"></xref> or the default value of <em>T</em> if the bag is empty.
    return:
      type: System.Boolean
      description: true if an object was removed successfully; otherwise, false.
  implements:
  - System.Collections.Concurrent.IProducerConsumerCollection{{T}}.TryTake({T}@)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.ConcurrentBag(Of T).TryTake(ByRef T)
  name.vb: TryTake(ByRef T)
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.IProducerConsumerCollection`1
  name: IProducerConsumerCollection<T>
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T)
  name.vb: IProducerConsumerCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: Generic.IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: IProducerConsumerCollection<T>
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T)
  name.vb: IProducerConsumerCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Concurrent.IProducerConsumerCollection{{T}}.CopyTo({T}[],System.Int32)
  parent: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
  definition: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Concurrent.IProducerConsumerCollection(Of T).CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: true
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.CopyTo(T[], System.Int32)
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
    name: CopyTo
    fullName: System.Collections.Concurrent.IProducerConsumerCollection(Of T).CopyTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: Generic.IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: Generic.IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IEnumerator<>
  fullName: System.Collections.Generic.IEnumerator<>
  fullname.vb: System.Collections.Generic.IEnumerator(Of )
  name.vb: Generic.IEnumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: Generic.IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.IProducerConsumerCollection{{T}}.TryAdd({T})
  parent: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
  definition: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  name: TryAdd(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).TryAdd(T)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
    name: TryAdd
    fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
    name: TryAdd
    fullName: System.Collections.Concurrent.IProducerConsumerCollection(Of T).TryAdd
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: TryAdd(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).TryAdd(T)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
    name: TryAdd
    fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
    name: TryAdd
    fullName: System.Collections.Concurrent.IProducerConsumerCollection(Of T).TryAdd
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.IProducerConsumerCollection{{T}}.ToArray
  parent: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
  definition: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  name: ToArray()
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.ToArray()
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).ToArray()
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
    name: ToArray
    fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.ToArray
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
    name: ToArray
    fullName: System.Collections.Concurrent.IProducerConsumerCollection(Of T).ToArray
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: ToArray()
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.ToArray()
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).ToArray()
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
    name: ToArray
    fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.ToArray
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
    name: ToArray
    fullName: System.Collections.Concurrent.IProducerConsumerCollection(Of T).ToArray
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.IProducerConsumerCollection{{T}}.TryTake({T}@)
  parent: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
  definition: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  name: TryTake(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(T)
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).TryTake(T)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
    name: TryTake
    fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
    name: TryTake
    fullName: System.Collections.Concurrent.IProducerConsumerCollection(Of T).TryTake
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: TryTake(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(T)
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).TryTake(T)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
    name: TryTake
    fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
    name: TryTake
    fullName: System.Collections.Concurrent.IProducerConsumerCollection(Of T).TryTake
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
