items:
- uid: System.Numerics.BigInteger
  commentId: T:System.Numerics.BigInteger
  id: BigInteger
  parent: System.Numerics
  children:
  - System.Numerics.BigInteger.#ctor(System.Byte[])
  - System.Numerics.BigInteger.#ctor(System.Decimal)
  - System.Numerics.BigInteger.#ctor(System.Double)
  - System.Numerics.BigInteger.#ctor(System.Int32)
  - System.Numerics.BigInteger.#ctor(System.Int64)
  - System.Numerics.BigInteger.#ctor(System.Single)
  - System.Numerics.BigInteger.#ctor(System.UInt32)
  - System.Numerics.BigInteger.#ctor(System.UInt64)
  - System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.CompareTo(System.Int64)
  - System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.CompareTo(System.UInt64)
  - System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  - System.Numerics.BigInteger.Equals(System.Int64)
  - System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Equals(System.Object)
  - System.Numerics.BigInteger.Equals(System.UInt64)
  - System.Numerics.BigInteger.GetHashCode
  - System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.IsEven
  - System.Numerics.BigInteger.IsOne
  - System.Numerics.BigInteger.IsPowerOfTwo
  - System.Numerics.BigInteger.IsZero
  - System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)
  - System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.MinusOne
  - System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.One
  - System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32
  - System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64
  - System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger
  - System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  - System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  - System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  - System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Parse(System.String)
  - System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)
  - System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  - System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)
  - System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
  - System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.Sign
  - System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  - System.Numerics.BigInteger.ToByteArray
  - System.Numerics.BigInteger.ToString
  - System.Numerics.BigInteger.ToString(System.IFormatProvider)
  - System.Numerics.BigInteger.ToString(System.String)
  - System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)
  - System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  - System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)
  - System.Numerics.BigInteger.Zero
  langs:
  - csharp
  - vb
  name: BigInteger
  fullName: System.Numerics.BigInteger
  type: Struct
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BigInteger
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 10
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Represents an arbitrarily large signed integer.
  syntax:
    content: 'public struct BigInteger : IComparable, IComparable<BigInteger>, IEquatable<BigInteger>, IFormattable'
    content.vb: >-
      Public Structure BigInteger
          Implements IComparable, IComparable(Of BigInteger), IEquatable(Of BigInteger), IFormattable
  implements:
  - System.IComparable
  - System.IComparable{System.Numerics.BigInteger}
  - System.IEquatable{System.Numerics.BigInteger}
  - System.IFormattable
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Numerics.BigInteger.#ctor(System.Byte[])
  commentId: M:System.Numerics.BigInteger.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(Byte[])
  fullName: System.Numerics.BigInteger.BigInteger(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 238
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> structure using the values in a byte array.
  syntax:
    content: public BigInteger(byte[] value)
    content.vb: Public Sub New(value As Byte())
    parameters:
    - id: value
      type: System.Byte[]
      description: An array of byte values in little-endian order.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>value</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Numerics.BigInteger.BigInteger(System.Byte())
  name.vb: BigInteger(Byte())
- uid: System.Numerics.BigInteger.#ctor(System.Decimal)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Decimal)
  id: '#ctor(System.Decimal)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(Decimal)
  fullName: System.Numerics.BigInteger.BigInteger(System.Decimal)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 199
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> structure using a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public BigInteger(decimal value)
    content.vb: Public Sub New(value As Decimal)
    parameters:
    - id: value
      type: System.Decimal
      description: A decimal number.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.#ctor(System.Double)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(Double)
  fullName: System.Numerics.BigInteger.BigInteger(System.Double)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 131
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> structure using a double-precision floating-point value.
  syntax:
    content: public BigInteger(double value)
    content.vb: Public Sub New(value As Double)
    parameters:
    - id: value
      type: System.Double
      description: A double-precision floating-point value.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The value of <em>value</em> is <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>.-or-The value of <em>value</em> is <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref>.-or-The value of <em>value</em> is <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.#ctor(System.Int32)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(Int32)
  fullName: System.Numerics.BigInteger.BigInteger(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 32
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> structure using a 32-bit signed integer value.
  syntax:
    content: public BigInteger(int value)
    content.vb: Public Sub New(value As Integer)
    parameters:
    - id: value
      type: System.Int32
      description: A 32-bit signed integer.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.#ctor(System.Int64)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(Int64)
  fullName: System.Numerics.BigInteger.BigInteger(System.Int64)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 61
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> structure using a 64-bit signed integer value.
  syntax:
    content: public BigInteger(long value)
    content.vb: Public Sub New(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: A 64-bit signed integer.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.#ctor(System.Single)
  commentId: M:System.Numerics.BigInteger.#ctor(System.Single)
  id: '#ctor(System.Single)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(Single)
  fullName: System.Numerics.BigInteger.BigInteger(System.Single)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 127
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> structure using a single-precision floating-point value.
  syntax:
    content: public BigInteger(float value)
    content.vb: Public Sub New(value As Single)
    parameters:
    - id: value
      type: System.Single
      description: A single-precision floating-point value.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The value of <em>value</em> is <xref href="System.Single.NaN" data-throw-if-not-resolved="false"></xref>.-or-The value of <em>value</em> is <xref href="System.Single.NegativeInfinity" data-throw-if-not-resolved="false"></xref>.-or-The value of <em>value</em> is <xref href="System.Single.PositiveInfinity" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.#ctor(System.UInt32)
  commentId: M:System.Numerics.BigInteger.#ctor(System.UInt32)
  id: '#ctor(System.UInt32)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(UInt32)
  fullName: System.Numerics.BigInteger.BigInteger(System.UInt32)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 44
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> structure using an unsigned 32-bit integer value.
  syntax:
    content: public BigInteger(uint value)
    content.vb: Public Sub New(value As UInteger)
    parameters:
    - id: value
      type: System.UInt32
      description: An unsigned 32-bit integer value.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.#ctor(System.UInt64)
  commentId: M:System.Numerics.BigInteger.#ctor(System.UInt64)
  id: '#ctor(System.UInt64)'
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BigInteger(UInt64)
  fullName: System.Numerics.BigInteger.BigInteger(System.UInt64)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 102
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> structure with an unsigned 64-bit integer value.
  syntax:
    content: public BigInteger(ulong value)
    content.vb: Public Sub New(value As ULong)
    parameters:
    - id: value
      type: System.UInt64
      description: An unsigned 64-bit integer.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.IsEven
  commentId: P:System.Numerics.BigInteger.IsEven
  id: IsEven
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: IsEven
  fullName: System.Numerics.BigInteger.IsEven
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEven
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 556
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Indicates whether the value of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object is an even number.
  syntax:
    content: public bool IsEven { get; }
    content.vb: Public ReadOnly Property IsEven As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the value of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object is an even number; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.BigInteger.IsOne
  commentId: P:System.Numerics.BigInteger.IsOne
  id: IsOne
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: IsOne
  fullName: System.Numerics.BigInteger.IsOne
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsOne
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 554
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Indicates whether the value of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object is <xref href="System.Numerics.BigInteger.One" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool IsOne { get; }
    content.vb: Public ReadOnly Property IsOne As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the value of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object is <xref href="System.Numerics.BigInteger.One" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.BigInteger.IsPowerOfTwo
  commentId: P:System.Numerics.BigInteger.IsPowerOfTwo
  id: IsPowerOfTwo
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: IsPowerOfTwo
  fullName: System.Numerics.BigInteger.IsPowerOfTwo
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPowerOfTwo
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 529
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Indicates whether the value of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object is a power of two.
  syntax:
    content: public bool IsPowerOfTwo { get; }
    content.vb: Public ReadOnly Property IsPowerOfTwo As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the value of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object is a power of two; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.BigInteger.IsZero
  commentId: P:System.Numerics.BigInteger.IsZero
  id: IsZero
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: IsZero
  fullName: System.Numerics.BigInteger.IsZero
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsZero
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 552
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Indicates whether the value of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object is <xref href="System.Numerics.BigInteger.Zero" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool IsZero { get; }
    content.vb: Public ReadOnly Property IsZero As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the value of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object is <xref href="System.Numerics.BigInteger.Zero" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.BigInteger.MinusOne
  commentId: P:System.Numerics.BigInteger.MinusOne
  id: MinusOne
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: MinusOne
  fullName: System.Numerics.BigInteger.MinusOne
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MinusOne
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 527
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Gets a value that represents the number negative one (-1).
  syntax:
    content: public static BigInteger MinusOne { get; }
    content.vb: Public Shared ReadOnly Property MinusOne As BigInteger
    parameters: []
    return:
      type: System.Numerics.BigInteger
      description: An integer whose value is negative one (-1).
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Numerics.BigInteger.One
  commentId: P:System.Numerics.BigInteger.One
  id: One
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: One
  fullName: System.Numerics.BigInteger.One
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: One
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 525
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Gets a value that represents the number one (1).
  syntax:
    content: public static BigInteger One { get; }
    content.vb: Public Shared ReadOnly Property One As BigInteger
    parameters: []
    return:
      type: System.Numerics.BigInteger
      description: An object whose value is one (1).
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Numerics.BigInteger.Sign
  commentId: P:System.Numerics.BigInteger.Sign
  id: Sign
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Sign
  fullName: System.Numerics.BigInteger.Sign
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sign
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 558
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Gets a number that indicates the sign (negative, positive, or zero) of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public int Sign { get; }
    content.vb: Public ReadOnly Property Sign As Integer
    parameters: []
    return:
      type: System.Int32
      description: A number that indicates the sign of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object, as shown in the following table.NumberDescription-1The value of this object is negative.0The value of this object is 0 (zero).1The value of this object is positive.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.BigInteger.Zero
  commentId: P:System.Numerics.BigInteger.Zero
  id: Zero
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Zero
  fullName: System.Numerics.BigInteger.Zero
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zero
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 523
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Gets a value that represents the number 0 (zero).
  syntax:
    content: public static BigInteger Zero { get; }
    content.vb: Public Shared ReadOnly Property Zero As BigInteger
    parameters: []
    return:
      type: System.Numerics.BigInteger
      description: An integer whose value is 0 (zero).
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  id: Abs(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Abs(BigInteger)
  fullName: System.Numerics.BigInteger.Abs(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Abs
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 598
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Gets the absolute value of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public static BigInteger Abs(BigInteger value)
    content.vb: Public Shared Function Abs(value As BigInteger) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: A number.
    return:
      type: System.Numerics.BigInteger
      description: The absolute value of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Add(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Add(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Add(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 603
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Adds two <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> values and returns the result.
  syntax:
    content: public static BigInteger Add(BigInteger left, BigInteger right)
    content.vb: Public Shared Function Add(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to add.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to add.
    return:
      type: System.Numerics.BigInteger
      description: The sum of <em>left</em> and <em>right</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Compare(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Compare(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Compare(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compare
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 593
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Compares two <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> values and returns an integer that indicates whether the first value is less than, equal to, or greater than the second value.
  syntax:
    content: public static int Compare(BigInteger left, BigInteger right)
    content.vb: Public Shared Function Compare(left As BigInteger, right As BigInteger) As Integer
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Int32
      description: A signed integer that indicates the relative values of <em>left</em> and <em>right</em>, as shown in the following table.ValueConditionLess than zero<em>left</em> is less than <em>right</em>.Zero<em>left</em> equals <em>right</em>.Greater than zero<em>left</em> is greater than <em>right</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.CompareTo(System.Int64)
  commentId: M:System.Numerics.BigInteger.CompareTo(System.Int64)
  id: CompareTo(System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: CompareTo(Int64)
  fullName: System.Numerics.BigInteger.CompareTo(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 935
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Compares this instance to a signed 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the signed 64-bit integer.
  syntax:
    content: public int CompareTo(long other)
    content.vb: Public Function CompareTo(other As Long) As Integer
    parameters:
    - id: other
      type: System.Int64
      description: The signed 64-bit integer to compare.
    return:
      type: System.Int32
      description: A signed integer value that indicates the relationship of this instance to <em>other</em>, as shown in the following table.Return valueDescriptionLess than zeroThe current instance is less than <em>other</em>.ZeroThe current instance equals <em>other</em>.Greater than zeroThe current instance is greater than <em>other</em>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  id: CompareTo(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: CompareTo(BigInteger)
  fullName: System.Numerics.BigInteger.CompareTo(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 965
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Compares this instance to a second <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the specified object.
  syntax:
    content: public int CompareTo(BigInteger other)
    content.vb: Public Function CompareTo(other As BigInteger) As Integer
    parameters:
    - id: other
      type: System.Numerics.BigInteger
      description: The object to compare.
    return:
      type: System.Int32
      description: A signed integer value that indicates the relationship of this instance to <em>other</em>, as shown in the following table.Return valueDescriptionLess than zeroThe current instance is less than <em>other</em>.ZeroThe current instance equals <em>other</em>.Greater than zeroThe current instance is greater than <em>other</em>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.CompareTo(System.UInt64)
  commentId: M:System.Numerics.BigInteger.CompareTo(System.UInt64)
  id: CompareTo(System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: CompareTo(UInt64)
  fullName: System.Numerics.BigInteger.CompareTo(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 949
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Compares this instance to an unsigned 64-bit integer and returns an integer that indicates whether the value of this instance is less than, equal to, or greater than the value of the unsigned 64-bit integer.
  syntax:
    content: public int CompareTo(ulong other)
    content.vb: Public Function CompareTo(other As ULong) As Integer
    parameters:
    - id: other
      type: System.UInt64
      description: The unsigned 64-bit integer to compare.
    return:
      type: System.Int32
      description: A signed integer that indicates the relative value of this instance and <em>other</em>, as shown in the following table.Return valueDescriptionLess than zeroThe current instance is less than <em>other</em>.ZeroThe current instance equals <em>other</em>.Greater than zeroThe current instance is greater than <em>other</em>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Divide(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Divide(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Divide(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Divide
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 618
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Divides one <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value by another and returns the result.
  syntax:
    content: public static BigInteger Divide(BigInteger dividend, BigInteger divisor)
    content.vb: Public Shared Function Divide(dividend As BigInteger, divisor As BigInteger) As BigInteger
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: The value to be divided.
    - id: divisor
      type: System.Numerics.BigInteger
      description: The value to divide by.
    return:
      type: System.Numerics.BigInteger
      description: The quotient of the division.
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<em>divisor</em> is 0 (zero)."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  commentId: M:System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  id: DivRem(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger@)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: DivRem(BigInteger, BigInteger, out BigInteger)
  fullName: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger, System.Numerics.BigInteger, out System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivRem
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 628
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Divides one <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value by another, returns the result, and returns the remainder in an output parameter.
  syntax:
    content: public static BigInteger DivRem(BigInteger dividend, BigInteger divisor, out BigInteger remainder)
    content.vb: Public Shared Function DivRem(dividend As BigInteger, divisor As BigInteger, ByRef remainder As BigInteger) As BigInteger
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: The value to be divided.
    - id: divisor
      type: System.Numerics.BigInteger
      description: The value to divide by.
    - id: remainder
      type: System.Numerics.BigInteger
      description: When this method returns, contains a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value that represents the remainder from the division. This parameter is passed uninitialized.
    return:
      type: System.Numerics.BigInteger
      description: The quotient of the division.
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<em>divisor</em> is 0 (zero)."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.DivRem(System.Numerics.BigInteger, System.Numerics.BigInteger, ByRef System.Numerics.BigInteger)
  name.vb: DivRem(BigInteger, BigInteger, ByRef BigInteger)
- uid: System.Numerics.BigInteger.Equals(System.Int64)
  commentId: M:System.Numerics.BigInteger.Equals(System.Int64)
  id: Equals(System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equals(Int64)
  fullName: System.Numerics.BigInteger.Equals(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 879
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and a signed 64-bit integer have the same value.
  syntax:
    content: public bool Equals(long other)
    content.vb: Public Function Equals(other As Long) As Boolean
    parameters:
    - id: other
      type: System.Int64
      description: The signed 64-bit integer value to compare.
    return:
      type: System.Boolean
      description: true if the signed 64-bit integer and the current instance have the same value; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  id: Equals(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equals(BigInteger)
  fullName: System.Numerics.BigInteger.Equals(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 915
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and a specified <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object have the same value.
  syntax:
    content: public bool Equals(BigInteger other)
    content.vb: Public Function Equals(other As BigInteger) As Boolean
    parameters:
    - id: other
      type: System.Numerics.BigInteger
      description: The object to compare.
    return:
      type: System.Boolean
      description: true if this <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object and <em>other</em> have the same value; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.Equals(System.Object)
  commentId: M:System.Numerics.BigInteger.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Numerics.BigInteger.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 870
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and a specified object have the same value.
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The object to compare. '
    return:
      type: System.Boolean
      description: true if the <em>obj</em> parameter is a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object or a type capable of implicit conversion to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value, and its value is equal to the value of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object; otherwise, false.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.BigInteger.Equals(System.UInt64)
  commentId: M:System.Numerics.BigInteger.Equals(System.UInt64)
  id: Equals(System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equals(UInt64)
  fullName: System.Numerics.BigInteger.Equals(System.UInt64)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 897
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and an unsigned 64-bit integer have the same value.
  syntax:
    content: public bool Equals(ulong other)
    content.vb: Public Function Equals(other As ULong) As Boolean
    parameters:
    - id: other
      type: System.UInt64
      description: The unsigned 64-bit integer to compare.
    return:
      type: System.Boolean
      description: true if the current instance and the unsigned 64-bit integer have the same value; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.GetHashCode
  commentId: M:System.Numerics.BigInteger.GetHashCode
  id: GetHashCode
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Numerics.BigInteger.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 858
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the hash code for the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: GreatestCommonDivisor(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreatestCommonDivisor(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.GreatestCommonDivisor(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreatestCommonDivisor
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 716
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Finds the greatest common divisor of two <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static BigInteger GreatestCommonDivisor(BigInteger left, BigInteger right)
    content.vb: Public Shared Function GreatestCommonDivisor(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value.
    return:
      type: System.Numerics.BigInteger
      description: The greatest common divisor of <em>left</em> and <em>right</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  id: Log(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Log(BigInteger)
  fullName: System.Numerics.BigInteger.Log(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Log
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 679
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the natural (base e) logarithm of a specified number.
  syntax:
    content: public static double Log(BigInteger value)
    content.vb: Public Shared Function Log(value As BigInteger) As Double
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The number whose logarithm is to be found.
    return:
      type: System.Double
      description: The natural (base e) logarithm of <em>value</em>, as shown in the table in the Remarks section.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The natural log of <em>value</em> is out of range of the <xref href="System.Double" data-throw-if-not-resolved="false"></xref> data type.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)
  commentId: M:System.Numerics.BigInteger.Log(System.Numerics.BigInteger,System.Double)
  id: Log(System.Numerics.BigInteger,System.Double)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Log(BigInteger, Double)
  fullName: System.Numerics.BigInteger.Log(System.Numerics.BigInteger, System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Log
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 684
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the logarithm of a specified number in a specified base.
  syntax:
    content: public static double Log(BigInteger value, double baseValue)
    content.vb: Public Shared Function Log(value As BigInteger, baseValue As Double) As Double
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: A number whose logarithm is to be found.
    - id: baseValue
      type: System.Double
      description: The base of the logarithm.
    return:
      type: System.Double
      description: The base <em>baseValue</em> logarithm of <em>value</em>, as shown in the table in the Remarks section.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The log of <em>value</em> is out of range of the <xref href="System.Double" data-throw-if-not-resolved="false"></xref> data type.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  id: Log10(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Log10(BigInteger)
  fullName: System.Numerics.BigInteger.Log10(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Log10
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 711
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the base 10 logarithm of a specified number.
  syntax:
    content: public static double Log10(BigInteger value)
    content.vb: Public Shared Function Log10(value As BigInteger) As Double
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: A number whose logarithm is to be found.
    return:
      type: System.Double
      description: The base 10 logarithm of <em>value</em>, as shown in the table in the Remarks section.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The base 10 log of <em>value</em> is out of range of the <xref href="System.Double" data-throw-if-not-resolved="false"></xref> data type.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Max(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Max(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Max(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 778
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the larger of two <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static BigInteger Max(BigInteger left, BigInteger right)
    content.vb: Public Shared Function Max(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Numerics.BigInteger
      description: The <em>left</em> or <em>right</em> parameter, whichever is larger.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Min(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Min(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Min(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 785
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the smaller of two <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static BigInteger Min(BigInteger left, BigInteger right)
    content.vb: Public Shared Function Min(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Numerics.BigInteger
      description: The <em>left</em> or <em>right</em> parameter, whichever is smaller.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: ModPow(System.Numerics.BigInteger,System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ModPow(BigInteger, BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.ModPow(System.Numerics.BigInteger, System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModPow
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 792
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Performs modulus division on a number raised to the power of another number.
  syntax:
    content: public static BigInteger ModPow(BigInteger value, BigInteger exponent, BigInteger modulus)
    content.vb: Public Shared Function ModPow(value As BigInteger, exponent As BigInteger, modulus As BigInteger) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The number to raise to the <em>exponent</em> power.
    - id: exponent
      type: System.Numerics.BigInteger
      description: The exponent to raise <em>value</em> by.
    - id: modulus
      type: System.Numerics.BigInteger
      description: The number by which to divide <em>value</em> raised to the <em>exponent</em> power.
    return:
      type: System.Numerics.BigInteger
      description: The remainder after dividing <em>value</em>exponent by <em>modulus</em>.
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<em>modulus</em> is zero."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>exponent</em> is negative."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Multiply(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiply
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 613
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the product of two <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static BigInteger Multiply(BigInteger left, BigInteger right)
    content.vb: Public Shared Function Multiply(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first number to multiply.
    - id: right
      type: System.Numerics.BigInteger
      description: The second number to multiply.
    return:
      type: System.Numerics.BigInteger
      description: The product of the <em>left</em> and <em>right</em> parameters.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  id: Negate(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Negate(BigInteger)
  fullName: System.Numerics.BigInteger.Negate(System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Negate
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 674
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Negates a specified <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static BigInteger Negate(BigInteger value)
    content.vb: Public Shared Function Negate(value As BigInteger) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to negate.
    return:
      type: System.Numerics.BigInteger
      description: The result of the <em>value</em> parameter multiplied by negative one (-1).
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Addition(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Addition(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Addition(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Addition
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1691
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Adds the values of two specified <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> objects.
  syntax:
    content: public static BigInteger operator +(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator +(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to add.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to add.
    return:
      type: System.Numerics.BigInteger
      description: The sum of <em>left</em> and <em>right</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_BitwiseAnd(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BitwiseAnd(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.BitwiseAnd(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_BitwiseAnd
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1507
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Performs a bitwise And operation on two <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static BigInteger operator &(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator And(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value.
    return:
      type: System.Numerics.BigInteger
      description: The result of the bitwise And operation.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_BitwiseOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: BitwiseOr(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.BitwiseOr(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_BitwiseOr
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1529
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Performs a bitwise Or operation on two <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static BigInteger operator |(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator Or(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value.
    return:
      type: System.Numerics.BigInteger
      description: The result of the bitwise Or operation.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Decrement(System.Numerics.BigInteger)
  id: op_Decrement(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Decrement(BigInteger)
  fullName: System.Numerics.BigInteger.Decrement(System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Decrement
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1686
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Decrements a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value by 1.
  syntax:
    content: public static BigInteger operator --(BigInteger value)
    content.vb: VB cannot support this operator.
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to decrement.
    return:
      type: System.Numerics.BigInteger
      description: The value of the <em>value</em> parameter decremented by 1.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Division(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Division(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Division(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Division
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1744
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Divides a specified <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value by another specified <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value by using integer division.
  syntax:
    content: public static BigInteger operator /(BigInteger dividend, BigInteger divisor)
    content.vb: Public Shared Operator /(dividend As BigInteger, divisor As BigInteger) As BigInteger
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: The value to be divided.
    - id: divisor
      type: System.Numerics.BigInteger
      description: The value to divide by.
    return:
      type: System.Numerics.BigInteger
      description: The integral result of the division.
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<em>divisor</em> is 0 (zero)."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.Int64,System.Numerics.BigInteger)
  id: op_Equality(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equality(Int64, BigInteger)
  fullName: System.Numerics.BigInteger.Equality(System.Int64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1894
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a signed long integer value and a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value are equal.
  syntax:
    content: public static bool operator ==(long left, BigInteger right)
    content.vb: Public Shared Operator =(left As Long, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Int64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Int64)
  id: op_Equality(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equality(BigInteger, Int64)
  fullName: System.Numerics.BigInteger.Equality(System.Numerics.BigInteger, System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1864
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value and a signed long integer value are equal.
  syntax:
    content: public static bool operator ==(BigInteger left, long right)
    content.vb: Public Shared Operator =(left As BigInteger, right As Long) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Int64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Equality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equality(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Equality(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1834
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether the values of two <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> objects are equal.
  syntax:
    content: public static bool operator ==(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator =(left As BigInteger, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.Numerics.BigInteger,System.UInt64)
  id: op_Equality(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equality(BigInteger, UInt64)
  fullName: System.Numerics.BigInteger.Equality(System.Numerics.BigInteger, System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1928
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value and an unsigned long integer value are equal.
  syntax:
    content: public static bool operator ==(BigInteger left, ulong right)
    content.vb: Public Shared Operator =(left As BigInteger, right As ULong) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.UInt64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Equality(System.UInt64,System.Numerics.BigInteger)
  id: op_Equality(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Equality(UInt64, BigInteger)
  fullName: System.Numerics.BigInteger.Equality(System.UInt64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1964
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether an unsigned long integer value and a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value are equal.
  syntax:
    content: public static bool operator ==(ulong left, BigInteger right)
    content.vb: Public Shared Operator =(left As ULong, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.UInt64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_ExclusiveOr(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ExclusiveOr(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.ExclusiveOr(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_ExclusiveOr
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1551
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Performs a bitwise exclusive Or (XOr) operation on two <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static BigInteger operator ^(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator Xor(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value.
    return:
      type: System.Numerics.BigInteger
      description: The result of the bitwise Or operation.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Decimal)~System.Numerics.BigInteger
  id: op_Explicit(System.Decimal)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to BigInteger)
  fullName: System.Numerics.BigInteger.Explicit(System.Decimal to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1324
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> object to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static explicit operator BigInteger(decimal value)
    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As BigInteger
    parameters:
    - id: value
      type: System.Decimal
      description: The value to convert to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Numerics.BigInteger
      description: An object that contains the value of the <em>value</em> parameter.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Decimal to System.Numerics.BigInteger)
  name.vb: Narrowing(Decimal to BigInteger)
- uid: System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Double)~System.Numerics.BigInteger
  id: op_Explicit(System.Double)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(Double to BigInteger)
  fullName: System.Numerics.BigInteger.Explicit(System.Double to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1319
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static explicit operator BigInteger(double value)
    content.vb: Public Shared Narrowing Operator CType(value As Double) As BigInteger
    parameters:
    - id: value
      type: System.Double
      description: The value to convert to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Numerics.BigInteger
      description: An object that contains the value of the <em>value</em> parameter.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> is <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>value</em> is <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>value</em> is <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Double to System.Numerics.BigInteger)
  name.vb: Narrowing(Double to BigInteger)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Byte
  id: op_Explicit(System.Numerics.BigInteger)~System.Byte
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Byte)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Byte)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1329
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to an unsigned byte value.
  syntax:
    content: public static explicit operator byte (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Byte
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to convert to a <xref href="System.Byte" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Byte
      description: An object that contains the value of the <em>value</em> parameter.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> is less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. -or-<em>value</em> is greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Byte)
  name.vb: Narrowing(BigInteger to Byte)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Decimal
  id: op_Explicit(System.Numerics.BigInteger)~System.Decimal
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Decimal)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Decimal)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1490
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static explicit operator decimal (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Decimal
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to convert to a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Decimal
      description: An object that contains the value of the <em>value</em> parameter.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> is less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>value</em> is greater than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Decimal)
  name.vb: Narrowing(BigInteger to Decimal)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Double
  id: op_Explicit(System.Numerics.BigInteger)~System.Double
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Double)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Double)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1453
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to a <xref href="System.Double" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static explicit operator double (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Double
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to convert to a <xref href="System.Double" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Double
      description: An object that contains the value of the <em>value</em> parameter.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Double)
  name.vb: Narrowing(BigInteger to Double)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int16
  id: op_Explicit(System.Numerics.BigInteger)~System.Int16
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Int16)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Int16)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1340
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to a 16-bit signed integer value.
  syntax:
    content: public static explicit operator short (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Short
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to convert to a 16-bit signed integer.
    return:
      type: System.Int16
      description: An object that contains the value of the <em>value</em> parameter.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> is less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>value</em> is greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Int16)
  name.vb: Narrowing(BigInteger to Int16)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int32
  id: op_Explicit(System.Numerics.BigInteger)~System.Int32
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Int32)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Int32)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1351
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to a 32-bit signed integer value.
  syntax:
    content: public static explicit operator int (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Integer
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: 'The value to convert to a 32-bit signed integer. '
    return:
      type: System.Int32
      description: An object that contains the value of the <em>value</em> parameter.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> is less than <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>value</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Int32)
  name.vb: Narrowing(BigInteger to Int32)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Int64
  id: op_Explicit(System.Numerics.BigInteger)~System.Int64
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Int64)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1393
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to a 64-bit signed integer value.
  syntax:
    content: public static explicit operator long (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Long
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to convert to a 64-bit signed integer.
    return:
      type: System.Int64
      description: An object that contains the value of the <em>value</em> parameter.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> is less than <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>value</em> is greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Int64)
  name.vb: Narrowing(BigInteger to Int64)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.SByte
  id: op_Explicit(System.Numerics.BigInteger)~System.SByte
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to SByte)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.SByte)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1334
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to a signed 8-bit value.
  syntax:
    content: public static explicit operator sbyte (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As SByte
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to convert to a signed 8-bit value.
    return:
      type: System.SByte
      description: An object that contains the value of the <em>value</em> parameter.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> is less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>value</em> is greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.SByte)
  name.vb: Narrowing(BigInteger to SByte)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.Single
  id: op_Explicit(System.Numerics.BigInteger)~System.Single
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Single)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.Single)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1448
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to a single-precision floating-point value.
  syntax:
    content: public static explicit operator float (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Single
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to convert to a single-precision floating-point value.
    return:
      type: System.Single
      description: An object that contains the closest possible representation of the <em>value</em> parameter.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.Single)
  name.vb: Narrowing(BigInteger to Single)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt16
  id: op_Explicit(System.Numerics.BigInteger)~System.UInt16
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to UInt16)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.UInt16)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1345
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to an unsigned 16-bit integer value.
  syntax:
    content: public static explicit operator ushort (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As UShort
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to convert to an unsigned 16-bit integer.
    return:
      type: System.UInt16
      description: An object that contains the value of the <em>value</em> parameter
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> is less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>value</em> is greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.UInt16)
  name.vb: Narrowing(BigInteger to UInt16)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt32
  id: op_Explicit(System.Numerics.BigInteger)~System.UInt32
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to UInt32)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.UInt32)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1375
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to an unsigned 32-bit integer value.
  syntax:
    content: public static explicit operator uint (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As UInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to convert to an unsigned 32-bit integer.
    return:
      type: System.UInt32
      description: An object that contains the value of the <em>value</em> parameter.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> is less than <xref href=\"System.UInt32.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>value</em> is greater than <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.UInt32)
  name.vb: Narrowing(BigInteger to UInt32)
- uid: System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Numerics.BigInteger)~System.UInt64
  id: op_Explicit(System.Numerics.BigInteger)~System.UInt64
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to UInt64)
  fullName: System.Numerics.BigInteger.Explicit(System.Numerics.BigInteger to System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1426
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to an unsigned 64-bit integer value.
  syntax:
    content: public static explicit operator ulong (BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As ULong
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to convert to an unsigned 64-bit integer.
    return:
      type: System.UInt64
      description: An object that contains the value of the <em>value</em> parameter.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> is less than <xref href=\"System.UInt64.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>value</em> is greater than <xref href=\"System.UInt64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Numerics.BigInteger to System.UInt64)
  name.vb: Narrowing(BigInteger to UInt64)
- uid: System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Explicit(System.Single)~System.Numerics.BigInteger
  id: op_Explicit(System.Single)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Explicit(Single to BigInteger)
  fullName: System.Numerics.BigInteger.Explicit(System.Single to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1314
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Single" data-throw-if-not-resolved="false"></xref> object to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static explicit operator BigInteger(float value)
    content.vb: Public Shared Narrowing Operator CType(value As Single) As BigInteger
    parameters:
    - id: value
      type: System.Single
      description: The value to convert to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Numerics.BigInteger
      description: An object that contains the value of the <em>value</em> parameter.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> is <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>value</em> is <xref href=\"System.Single.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>value</em> is <xref href=\"System.Single.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Narrowing(System.Single to System.Numerics.BigInteger)
  name.vb: Narrowing(Single to BigInteger)
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  id: op_GreaterThan(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThan(Int64, BigInteger)
  fullName: System.Numerics.BigInteger.GreaterThan(System.Int64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThan
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1884
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit signed integer is greater than a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static bool operator>(long left, BigInteger right)
    content.vb: Public Shared Operator>(left As Long, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Int64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is greater than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  id: op_GreaterThan(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThan(BigInteger, Int64)
  fullName: System.Numerics.BigInteger.GreaterThan(System.Numerics.BigInteger, System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThan
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1854
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> is greater than a 64-bit signed integer value.
  syntax:
    content: public static bool operator>(BigInteger left, long right)
    content.vb: Public Shared Operator>(left As BigInteger, right As Long) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Int64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is greater than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_GreaterThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThan(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.GreaterThan(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThan
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1825
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value is greater than another <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static bool operator>(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator>(left As BigInteger, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is greater than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  id: op_GreaterThan(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThan(BigInteger, UInt64)
  fullName: System.Numerics.BigInteger.GreaterThan(System.Numerics.BigInteger, System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThan
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1916
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value is greater than a 64-bit unsigned integer.
  syntax:
    content: public static bool operator>(BigInteger left, ulong right)
    content.vb: Public Shared Operator>(left As BigInteger, right As ULong) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.UInt64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is greater than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  id: op_GreaterThan(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThan(UInt64, BigInteger)
  fullName: System.Numerics.BigInteger.GreaterThan(System.UInt64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThan
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1952
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value is greater than a 64-bit unsigned integer.
  syntax:
    content: public static bool operator>(ulong left, BigInteger right)
    content.vb: Public Shared Operator>(left As ULong, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.UInt64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is greater than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  id: op_GreaterThanOrEqual(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Int64, BigInteger)
  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.Int64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThanOrEqual
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1889
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit signed integer is greater than or equal to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static bool operator >=(long left, BigInteger right)
    content.vb: Public Shared Operator >=(left As Long, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Int64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is greater than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(BigInteger, Int64)
  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.Numerics.BigInteger, System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThanOrEqual
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1859
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value is greater than or equal to a 64-bit signed integer value.
  syntax:
    content: public static bool operator >=(BigInteger left, long right)
    content.vb: Public Shared Operator >=(left As BigInteger, right As Long) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Int64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is greater than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThanOrEqual
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1829
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value is greater than or equal to another <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static bool operator >=(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator >=(left As BigInteger, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is greater than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  id: op_GreaterThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(BigInteger, UInt64)
  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.Numerics.BigInteger, System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThanOrEqual
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1922
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value is greater than or equal to a 64-bit unsigned integer value.
  syntax:
    content: public static bool operator >=(BigInteger left, ulong right)
    content.vb: Public Shared Operator >=(left As BigInteger, right As ULong) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.UInt64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is greater than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  id: op_GreaterThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(UInt64, BigInteger)
  fullName: System.Numerics.BigInteger.GreaterThanOrEqual(System.UInt64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThanOrEqual
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1958
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit unsigned integer is greater than or equal to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static bool operator >=(ulong left, BigInteger right)
    content.vb: Public Shared Operator >=(left As ULong, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.UInt64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is greater than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Byte)~System.Numerics.BigInteger
  id: op_Implicit(System.Byte)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(Byte to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.Byte to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1270
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of an unsigned byte to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static implicit operator BigInteger(byte value)
    content.vb: Public Shared Widening Operator CType(value As Byte) As BigInteger
    parameters:
    - id: value
      type: System.Byte
      description: The value to convert to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Numerics.BigInteger
      description: An object that contains the value of the <em>value</em> parameter.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.Byte to System.Numerics.BigInteger)
  name.vb: Widening(Byte to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int16)~System.Numerics.BigInteger
  id: op_Implicit(System.Int16)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(Int16 to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.Int16 to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1281
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a signed 16-bit integer to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static implicit operator BigInteger(short value)
    content.vb: Public Shared Widening Operator CType(value As Short) As BigInteger
    parameters:
    - id: value
      type: System.Int16
      description: The value to convert to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Numerics.BigInteger
      description: An object that contains the value of the <em>value</em> parameter.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.Int16 to System.Numerics.BigInteger)
  name.vb: Widening(Int16 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int32)~System.Numerics.BigInteger
  id: op_Implicit(System.Int32)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(Int32 to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.Int32 to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1292
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a signed 32-bit integer to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static implicit operator BigInteger(int value)
    content.vb: Public Shared Widening Operator CType(value As Integer) As BigInteger
    parameters:
    - id: value
      type: System.Int32
      description: The value to convert to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Numerics.BigInteger
      description: An object that contains the value of the <em>value</em> parameter.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.Int32 to System.Numerics.BigInteger)
  name.vb: Widening(Int32 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.Int64)~System.Numerics.BigInteger
  id: op_Implicit(System.Int64)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(Int64 to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.Int64 to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1303
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a signed 64-bit integer to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static implicit operator BigInteger(long value)
    content.vb: Public Shared Widening Operator CType(value As Long) As BigInteger
    parameters:
    - id: value
      type: System.Int64
      description: The value to convert to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Numerics.BigInteger
      description: An object that contains the value of the <em>value</em> parameter.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.Int64 to System.Numerics.BigInteger)
  name.vb: Widening(Int64 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.SByte)~System.Numerics.BigInteger
  id: op_Implicit(System.SByte)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(SByte to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.SByte to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1275
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of an 8-bit signed integer to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static implicit operator BigInteger(sbyte value)
    content.vb: Public Shared Widening Operator CType(value As SByte) As BigInteger
    parameters:
    - id: value
      type: System.SByte
      description: The value to convert to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Numerics.BigInteger
      description: An object that contains the value of the <em>value</em> parameter.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.SByte to System.Numerics.BigInteger)
  name.vb: Widening(SByte to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt16)~System.Numerics.BigInteger
  id: op_Implicit(System.UInt16)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(UInt16 to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.UInt16 to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1286
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a 16-bit unsigned integer to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static implicit operator BigInteger(ushort value)
    content.vb: Public Shared Widening Operator CType(value As UShort) As BigInteger
    parameters:
    - id: value
      type: System.UInt16
      description: The value to convert to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Numerics.BigInteger
      description: An object that contains the value of the <em>value</em> parameter.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.UInt16 to System.Numerics.BigInteger)
  name.vb: Widening(UInt16 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt32)~System.Numerics.BigInteger
  id: op_Implicit(System.UInt32)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(UInt32 to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.UInt32 to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1297
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a 32-bit unsigned integer to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static implicit operator BigInteger(uint value)
    content.vb: Public Shared Widening Operator CType(value As UInteger) As BigInteger
    parameters:
    - id: value
      type: System.UInt32
      description: The value to convert to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Numerics.BigInteger
      description: An object that contains the value of the <em>value</em> parameter.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.UInt32 to System.Numerics.BigInteger)
  name.vb: Widening(UInt32 to BigInteger)
- uid: System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger
  commentId: M:System.Numerics.BigInteger.op_Implicit(System.UInt64)~System.Numerics.BigInteger
  id: op_Implicit(System.UInt64)~System.Numerics.BigInteger
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Implicit(UInt64 to BigInteger)
  fullName: System.Numerics.BigInteger.Implicit(System.UInt64 to System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1308
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a 64-bit unsigned integer to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static implicit operator BigInteger(ulong value)
    content.vb: Public Shared Widening Operator CType(value As ULong) As BigInteger
    parameters:
    - id: value
      type: System.UInt64
      description: The value to convert to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Numerics.BigInteger
      description: An object that contains the value of the <em>value</em> parameter.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.Widening(System.UInt64 to System.Numerics.BigInteger)
  name.vb: Widening(UInt64 to BigInteger)
- uid: System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Increment(System.Numerics.BigInteger)
  id: op_Increment(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Increment(BigInteger)
  fullName: System.Numerics.BigInteger.Increment(System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Increment
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1681
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Increments a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value by 1.
  syntax:
    content: public static BigInteger operator ++(BigInteger value)
    content.vb: VB cannot support this operator.
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to increment.
    return:
      type: System.Numerics.BigInteger
      description: The value of the <em>value</em> parameter incremented by 1.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Int64,System.Numerics.BigInteger)
  id: op_Inequality(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Inequality(Int64, BigInteger)
  fullName: System.Numerics.BigInteger.Inequality(System.Int64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1899
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit signed integer and a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value are not equal.
  syntax:
    content: public static bool operator !=(long left, BigInteger right)
    content.vb: Public Shared Operator <>(left As Long, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Int64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> and <em>right</em> are not equal; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Int64)
  id: op_Inequality(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Inequality(BigInteger, Int64)
  fullName: System.Numerics.BigInteger.Inequality(System.Numerics.BigInteger, System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1869
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value and a 64-bit signed integer are not equal.
  syntax:
    content: public static bool operator !=(BigInteger left, long right)
    content.vb: Public Shared Operator <>(left As BigInteger, right As Long) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Int64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> and <em>right</em> are not equal; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Inequality(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Inequality(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Inequality(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1839
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether two <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> objects have different values.
  syntax:
    content: public static bool operator !=(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator <>(left As BigInteger, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> and <em>right</em> are not equal; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.Numerics.BigInteger,System.UInt64)
  id: op_Inequality(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Inequality(BigInteger, UInt64)
  fullName: System.Numerics.BigInteger.Inequality(System.Numerics.BigInteger, System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1934
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value and a 64-bit unsigned integer are not equal.
  syntax:
    content: public static bool operator !=(BigInteger left, ulong right)
    content.vb: Public Shared Operator <>(left As BigInteger, right As ULong) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.UInt64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> and <em>right</em> are not equal; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Inequality(System.UInt64,System.Numerics.BigInteger)
  id: op_Inequality(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Inequality(UInt64, BigInteger)
  fullName: System.Numerics.BigInteger.Inequality(System.UInt64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1970
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit unsigned integer and a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value are not equal.
  syntax:
    content: public static bool operator !=(ulong left, BigInteger right)
    content.vb: Public Shared Operator <>(left As ULong, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.UInt64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> and <em>right</em> are not equal; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  commentId: M:System.Numerics.BigInteger.op_LeftShift(System.Numerics.BigInteger,System.Int32)
  id: op_LeftShift(System.Numerics.BigInteger,System.Int32)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LeftShift(BigInteger, Int32)
  fullName: System.Numerics.BigInteger.LeftShift(System.Numerics.BigInteger, System.Int32)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LeftShift
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1569
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Shifts a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value a specified number of bits to the left.
  syntax:
    content: public static BigInteger operator <<(BigInteger value, int shift)
    content.vb: Public Shared Operator <<(value As BigInteger, shift As Integer) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value whose bits are to be shifted.
    - id: shift
      type: System.Int32
      description: The number of bits to shift <em>value</em> to the left.
    return:
      type: System.Numerics.BigInteger
      description: A value that has been shifted to the left by the specified number of bits.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Int64,System.Numerics.BigInteger)
  id: op_LessThan(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThan(Int64, BigInteger)
  fullName: System.Numerics.BigInteger.LessThan(System.Int64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThan
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1874
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit signed integer is less than a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static bool operator <(long left, BigInteger right)
    content.vb: Public Shared Operator <(left As Long, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Int64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is less than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Int64)
  id: op_LessThan(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThan(BigInteger, Int64)
  fullName: System.Numerics.BigInteger.LessThan(System.Numerics.BigInteger, System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThan
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1844
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value is less than a 64-bit signed integer.
  syntax:
    content: public static bool operator <(BigInteger left, long right)
    content.vb: Public Shared Operator <(left As BigInteger, right As Long) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Int64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is less than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_LessThan(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThan(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.LessThan(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThan
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1815
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value is less than another <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static bool operator <(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator <(left As BigInteger, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is less than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.Numerics.BigInteger,System.UInt64)
  id: op_LessThan(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThan(BigInteger, UInt64)
  fullName: System.Numerics.BigInteger.LessThan(System.Numerics.BigInteger, System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThan
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1904
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value is less than a 64-bit unsigned integer.
  syntax:
    content: public static bool operator <(BigInteger left, ulong right)
    content.vb: Public Shared Operator <(left As BigInteger, right As ULong) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.UInt64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is less than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThan(System.UInt64,System.Numerics.BigInteger)
  id: op_LessThan(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThan(UInt64, BigInteger)
  fullName: System.Numerics.BigInteger.LessThan(System.UInt64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThan
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1940
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit unsigned integer is less than a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static bool operator <(ulong left, BigInteger right)
    content.vb: Public Shared Operator <(left As ULong, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.UInt64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is less than <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  id: op_LessThanOrEqual(System.Int64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Int64, BigInteger)
  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.Int64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThanOrEqual
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1879
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit signed integer is less than or equal to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static bool operator <=(long left, BigInteger right)
    content.vb: Public Shared Operator <=(left As Long, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Int64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is less than or equal to <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.Int64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(BigInteger, Int64)
  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.Numerics.BigInteger, System.Int64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThanOrEqual
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1849
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value is less than or equal to a 64-bit signed integer.
  syntax:
    content: public static bool operator <=(BigInteger left, long right)
    content.vb: Public Shared Operator <=(left As BigInteger, right As Long) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Int64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is less than or equal to <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThanOrEqual
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1820
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value is less than or equal to another <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static bool operator <=(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator <=(left As BigInteger, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is less than or equal to <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  id: op_LessThanOrEqual(System.Numerics.BigInteger,System.UInt64)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(BigInteger, UInt64)
  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.Numerics.BigInteger, System.UInt64)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThanOrEqual
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1910
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value is less than or equal to a 64-bit unsigned integer.
  syntax:
    content: public static bool operator <=(BigInteger left, ulong right)
    content.vb: Public Shared Operator <=(left As BigInteger, right As ULong) As Boolean
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to compare.
    - id: right
      type: System.UInt64
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is less than or equal to <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  id: op_LessThanOrEqual(System.UInt64,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(UInt64, BigInteger)
  fullName: System.Numerics.BigInteger.LessThanOrEqual(System.UInt64, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThanOrEqual
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1946
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether a 64-bit unsigned integer is less than or equal to a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static bool operator <=(ulong left, BigInteger right)
    content.vb: Public Shared Operator <=(left As ULong, right As BigInteger) As Boolean
    parameters:
    - id: left
      type: System.UInt64
      description: The first value to compare.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> is less than or equal to <em>right</em>; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Modulus(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Modulus(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Modulus(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Modulus
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1781
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the remainder that results from division with two specified <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static BigInteger operator %(BigInteger dividend, BigInteger divisor)
    content.vb: Public Shared Operator Mod(dividend As BigInteger, divisor As BigInteger) As BigInteger
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: The value to be divided.
    - id: divisor
      type: System.Numerics.BigInteger
      description: The value to divide by.
    return:
      type: System.Numerics.BigInteger
      description: The remainder that results from the division.
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<em>divisor</em> is 0 (zero)."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Multiply(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Multiply(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Multiply(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Multiply
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1701
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Multiplies two specified <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static BigInteger operator *(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator *(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The first value to multiply.
    - id: right
      type: System.Numerics.BigInteger
      description: The second value to multiply.
    return:
      type: System.Numerics.BigInteger
      description: The product of <em>left</em> and <em>right</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_OnesComplement(System.Numerics.BigInteger)
  id: op_OnesComplement(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: OnesComplement(BigInteger)
  fullName: System.Numerics.BigInteger.OnesComplement(System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_OnesComplement
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1664
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the bitwise one's complement of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static BigInteger operator ~(BigInteger value)
    content.vb: Public Shared Operator Not(value As BigInteger) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: An integer value.
    return:
      type: System.Numerics.BigInteger
      description: The bitwise one's complement of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  commentId: M:System.Numerics.BigInteger.op_RightShift(System.Numerics.BigInteger,System.Int32)
  id: op_RightShift(System.Numerics.BigInteger,System.Int32)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: RightShift(BigInteger, Int32)
  fullName: System.Numerics.BigInteger.RightShift(System.Numerics.BigInteger, System.Int32)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_RightShift
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1607
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Shifts a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value a specified number of bits to the right.
  syntax:
    content: public static BigInteger operator >>(BigInteger value, int shift)
    content.vb: Public Shared Operator >>(value As BigInteger, shift As Integer) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value whose bits are to be shifted.
    - id: shift
      type: System.Int32
      description: The number of bits to shift <em>value</em> to the right.
    return:
      type: System.Numerics.BigInteger
      description: A value that has been shifted to the right by the specified number of bits.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: op_Subtraction(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Subtraction(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Subtraction(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Subtraction
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1226
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Subtracts a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value from another <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static BigInteger operator -(BigInteger left, BigInteger right)
    content.vb: Public Shared Operator -(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The value to subtract from (the minuend).
    - id: right
      type: System.Numerics.BigInteger
      description: The value to subtract (the subtrahend).
    return:
      type: System.Numerics.BigInteger
      description: The result of subtracting <em>right</em> from <em>left</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_UnaryNegation(System.Numerics.BigInteger)
  id: op_UnaryNegation(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: UnaryNegation(BigInteger)
  fullName: System.Numerics.BigInteger.UnaryNegation(System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_UnaryNegation
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1669
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: 'Negates a specified BigInteger value. '
  syntax:
    content: public static BigInteger operator -(BigInteger value)
    content.vb: Public Shared Operator -(value As BigInteger) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to negate.
    return:
      type: System.Numerics.BigInteger
      description: The result of the <em>value</em> parameter multiplied by negative one (-1).
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.op_UnaryPlus(System.Numerics.BigInteger)
  id: op_UnaryPlus(System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: UnaryPlus(BigInteger)
  fullName: System.Numerics.BigInteger.UnaryPlus(System.Numerics.BigInteger)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_UnaryPlus
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1675
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the value of the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> operand. (The sign of the operand is unchanged.)
  syntax:
    content: public static BigInteger operator +(BigInteger value)
    content.vb: Public Shared Operator +(value As BigInteger) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: An integer value.
    return:
      type: System.Numerics.BigInteger
      description: The value of the <em>value</em> operand.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Parse(System.String)
  commentId: M:System.Numerics.BigInteger.Parse(System.String)
  id: Parse(System.String)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Parse(String)
  fullName: System.Numerics.BigInteger.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 563
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts the string representation of a number to its <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> equivalent.
  syntax:
    content: public static BigInteger Parse(string value)
    content.vb: Public Shared Function Parse(value As String) As BigInteger
    parameters:
    - id: value
      type: System.String
      description: A string that contains the number to convert.
    return:
      type: System.Numerics.BigInteger
      description: A value that is equivalent to the number specified in the <em>value</em> parameter.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>value</em> is null."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<em>value</em> is not in the correct format."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)
  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles)
  id: Parse(System.String,System.Globalization.NumberStyles)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Parse(String, Globalization.NumberStyles)
  fullName: System.Numerics.BigInteger.Parse(System.String, System.Globalization.NumberStyles)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 144
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts the string representation of a number in a specified style to its <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> equivalent.
  syntax:
    content: public static BigInteger Parse(string value, Globalization.NumberStyles style)
    content.vb: Public Shared Function Parse(value As String, style As Globalization.NumberStyles) As BigInteger
    parameters:
    - id: value
      type: System.String
      description: 'A string that contains a number to convert. '
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of the enumeration values that specify the permitted format of <em>value</em>.
    return:
      type: System.Numerics.BigInteger
      description: A value that is equivalent to the number specified in the <em>value</em> parameter.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>style</em> is not a <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> value.-or-<em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref> flag along with another value."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>value</em> is null."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<em>value</em> does not comply with the input pattern specified by <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  id: Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Parse(String, Globalization.NumberStyles, IFormatProvider)
  fullName: System.Numerics.BigInteger.Parse(System.String, System.Globalization.NumberStyles, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 145
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts the string representation of a number in a specified style and culture-specific format to its <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> equivalent.
  syntax:
    content: public static BigInteger Parse(string value, Globalization.NumberStyles style, IFormatProvider provider)
    content.vb: Public Shared Function Parse(value As String, style As Globalization.NumberStyles, provider As IFormatProvider) As BigInteger
    parameters:
    - id: value
      type: System.String
      description: A string that contains a number to convert.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of the enumeration values that specify the permitted format of <em>value</em>.
    - id: provider
      type: System.IFormatProvider
      description: An object that provides culture-specific formatting information about <em>value</em>.
    return:
      type: System.Numerics.BigInteger
      description: A value that is equivalent to the number specified in the <em>value</em> parameter.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>style</em> is not a <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> value.-or-<em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref> flag along with another value."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>value</em> is null."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<em>value</em> does not comply with the input pattern specified by <em>style</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)
  commentId: M:System.Numerics.BigInteger.Parse(System.String,System.IFormatProvider)
  id: Parse(System.String,System.IFormatProvider)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Parse(String, IFormatProvider)
  fullName: System.Numerics.BigInteger.Parse(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 146
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts the string representation of a number in a specified culture-specific format to its <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> equivalent.
  syntax:
    content: public static BigInteger Parse(string value, IFormatProvider provider)
    content.vb: Public Shared Function Parse(value As String, provider As IFormatProvider) As BigInteger
    parameters:
    - id: value
      type: System.String
      description: A string that contains a number to convert.
    - id: provider
      type: System.IFormatProvider
      description: An object that provides culture-specific formatting information about <em>value</em>.
    return:
      type: System.Numerics.BigInteger
      description: A value that is equivalent to the number specified in the <em>value</em> parameter.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>value</em> is null."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<em>value</em> is not in the correct format."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
  commentId: M:System.Numerics.BigInteger.Pow(System.Numerics.BigInteger,System.Int32)
  id: Pow(System.Numerics.BigInteger,System.Int32)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Pow(BigInteger, Int32)
  fullName: System.Numerics.BigInteger.Pow(System.Numerics.BigInteger, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pow
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 826
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Raises a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value to the power of a specified value.
  syntax:
    content: public static BigInteger Pow(BigInteger value, int exponent)
    content.vb: Public Shared Function Pow(value As BigInteger, exponent As Integer) As BigInteger
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The number to raise to the <em>exponent</em> power.
    - id: exponent
      type: System.Int32
      description: The exponent to raise <em>value</em> by.
    return:
      type: System.Numerics.BigInteger
      description: The result of raising <em>value</em> to the <em>exponent</em> power.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value of the <em>exponent</em> parameter is negative.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Remainder(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Remainder(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Remainder(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remainder
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 623
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Performs integer division on two <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> values and returns the remainder.
  syntax:
    content: public static BigInteger Remainder(BigInteger dividend, BigInteger divisor)
    content.vb: Public Shared Function Remainder(dividend As BigInteger, divisor As BigInteger) As BigInteger
    parameters:
    - id: dividend
      type: System.Numerics.BigInteger
      description: The value to be divided.
    - id: divisor
      type: System.Numerics.BigInteger
      description: The value to divide by.
    return:
      type: System.Numerics.BigInteger
      description: The remainder after dividing <em>dividend</em> by <em>divisor</em>.
  exceptions:
  - type: System.DivideByZeroException
    commentId: T:System.DivideByZeroException
    description: "\n<em>divisor</em> is 0 (zero)."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  commentId: M:System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  id: Subtract(System.Numerics.BigInteger,System.Numerics.BigInteger)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: Subtract(BigInteger, BigInteger)
  fullName: System.Numerics.BigInteger.Subtract(System.Numerics.BigInteger, System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subtract
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 608
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Subtracts one <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value from another and returns the result.
  syntax:
    content: public static BigInteger Subtract(BigInteger left, BigInteger right)
    content.vb: Public Shared Function Subtract(left As BigInteger, right As BigInteger) As BigInteger
    parameters:
    - id: left
      type: System.Numerics.BigInteger
      description: The value to subtract from (the minuend).
    - id: right
      type: System.Numerics.BigInteger
      description: The value to subtract (the subtrahend).
    return:
      type: System.Numerics.BigInteger
      description: The result of subtracting <em>right</em> from <em>left</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.BigInteger.ToByteArray
  commentId: M:System.Numerics.BigInteger.ToByteArray
  id: ToByteArray
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ToByteArray()
  fullName: System.Numerics.BigInteger.ToByteArray()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToByteArray
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1010
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value to a byte array.
  syntax:
    content: public byte[] ToByteArray()
    content.vb: Public Function ToByteArray As Byte()
    return:
      type: System.Byte[]
      description: The value of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object converted to an array of bytes.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.ToString
  commentId: M:System.Numerics.BigInteger.ToString
  id: ToString
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Numerics.BigInteger.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1172
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts the numeric value of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to its equivalent string representation.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: The string representation of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.BigInteger.ToString(System.IFormatProvider)
  commentId: M:System.Numerics.BigInteger.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  fullName: System.Numerics.BigInteger.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 153
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts the numeric value of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to its equivalent string representation by using the specified culture-specific formatting information.
  syntax:
    content: public string ToString(IFormatProvider provider)
    content.vb: Public Function ToString(provider As IFormatProvider) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value in the format specified by the <em>provider</em> parameter.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.ToString(System.String)
  commentId: M:System.Numerics.BigInteger.ToString(System.String)
  id: ToString(System.String)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ToString(String)
  fullName: System.Numerics.BigInteger.ToString(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 1182
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts the numeric value of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to its equivalent string representation by using the specified format.
  syntax:
    content: public string ToString(string format)
    content.vb: Public Function ToString(format As String) As String
    parameters:
    - id: format
      type: System.String
      description: A standard or custom numeric format string.
    return:
      type: System.String
      description: The string representation of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value in the format specified by the <em>format</em> parameter.
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<em>format</em> is not a valid format string."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)
  commentId: M:System.Numerics.BigInteger.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  fullName: System.Numerics.BigInteger.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 155
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts the numeric value of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> object to its equivalent string representation by using the specified format and culture-specific format information.
  syntax:
    content: public string ToString(string format, IFormatProvider provider)
    content.vb: Public Function ToString(format As String, provider As IFormatProvider) As String
    parameters:
    - id: format
      type: System.String
      description: A standard or custom numeric format string.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the current <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value as specified by the <em>format</em> and <em>provider</em> parameters.
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<em>format</em> is not a valid format string."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  id: TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Numerics.BigInteger@)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: TryParse(String, Globalization.NumberStyles, IFormatProvider, out BigInteger)
  fullName: System.Numerics.BigInteger.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, out System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 156
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Tries to convert the string representation of a number in a specified style and culture-specific format to its <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.
  syntax:
    content: public static bool TryParse(string value, Globalization.NumberStyles style, IFormatProvider provider, out BigInteger result)
    content.vb: Public Shared Function TryParse(value As String, style As Globalization.NumberStyles, provider As IFormatProvider, ByRef result As BigInteger) As Boolean
    parameters:
    - id: value
      type: System.String
      description: The string representation of a number. The string is interpreted using the style specified by <em>style</em>.
    - id: style
      type: System.Globalization.NumberStyles
      description: A bitwise combination of enumeration values that indicates the style elements that can be present in <em>value</em>. A typical value to specify is <xref href="System.Globalization.NumberStyles.Integer" data-throw-if-not-resolved="false"></xref>.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information about <em>value</em>.
    - id: result
      type: System.Numerics.BigInteger
      description: When this method returns, contains the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> equivalent to the number that is contained in <em>value</em>, or <xref href="System.Numerics.BigInteger.Zero" data-throw-if-not-resolved="false"></xref> if the conversion failed. The conversion fails if the <em>value</em> parameter is null or is not in a format that is compliant with <em>style</em>. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: true if the <em>value</em> parameter was converted successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>style</em> is not a <xref href=\"System.Globalization.NumberStyles\" data-throw-if-not-resolved=\"false\"></xref> value.-or-<em>style</em> includes the <xref href=\"System.Globalization.NumberStyles.AllowHexSpecifier\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Globalization.NumberStyles.HexNumber\" data-throw-if-not-resolved=\"false\"></xref> flag along with another value. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.TryParse(System.String, System.Globalization.NumberStyles, System.IFormatProvider, ByRef System.Numerics.BigInteger)
  name.vb: TryParse(String, Globalization.NumberStyles, IFormatProvider, ByRef BigInteger)
- uid: System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)
  commentId: M:System.Numerics.BigInteger.TryParse(System.String,System.Numerics.BigInteger@)
  id: TryParse(System.String,System.Numerics.BigInteger@)
  parent: System.Numerics.BigInteger
  langs:
  - csharp
  - vb
  name: TryParse(String, out BigInteger)
  fullName: System.Numerics.BigInteger.TryParse(System.String, out System.Numerics.BigInteger)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Runtime.Numerics/src/System/Numerics/BigInteger.cs
    startLine: 583
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Tries to convert the string representation of a number to its <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> equivalent, and returns a value that indicates whether the conversion succeeded.
  syntax:
    content: public static bool TryParse(string value, out BigInteger result)
    content.vb: Public Shared Function TryParse(value As String, ByRef result As BigInteger) As Boolean
    parameters:
    - id: value
      type: System.String
      description: The string representation of a number.
    - id: result
      type: System.Numerics.BigInteger
      description: When this method returns, contains the <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> equivalent to the number that is contained in <em>value</em>, or zero (0) if the conversion fails. The conversion fails if the <em>value</em> parameter is null or is not of the correct format. This parameter is passed uninitialized.
    return:
      type: System.Boolean
      description: true if <em>value</em> was converted successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>value</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.BigInteger.TryParse(System.String, ByRef System.Numerics.BigInteger)
  name.vb: TryParse(String, ByRef BigInteger)
references:
- uid: System.Numerics
  isExternal: false
  name: System.Numerics
  fullName: System.Numerics
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
- uid: System.IComparable{System.Numerics.BigInteger}
  definition: System.IComparable`1
  name: IComparable<BigInteger>
  fullName: System.IComparable<System.Numerics.BigInteger>
  fullname.vb: System.IComparable(Of System.Numerics.BigInteger)
  name.vb: IComparable(Of BigInteger)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Numerics.BigInteger
    name: BigInteger
    fullName: System.Numerics.BigInteger
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Numerics.BigInteger
    name: BigInteger
    fullName: System.Numerics.BigInteger
  - name: )
    fullName: )
- uid: System.IEquatable{System.Numerics.BigInteger}
  definition: System.IEquatable`1
  name: IEquatable<BigInteger>
  fullName: System.IEquatable<System.Numerics.BigInteger>
  fullname.vb: System.IEquatable(Of System.Numerics.BigInteger)
  name.vb: IEquatable(Of BigInteger)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Numerics.BigInteger
    name: BigInteger
    fullName: System.Numerics.BigInteger
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Numerics.BigInteger
    name: BigInteger
    fullName: System.Numerics.BigInteger
  - name: )
    fullName: )
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  fullName: System.IFormattable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IComparable`1
  parent: System
  isExternal: false
  name: IComparable<>
  fullName: System.IComparable<>
  fullname.vb: System.IComparable(Of )
  name.vb: IComparable(Of )
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<>
  fullName: System.IEquatable<>
  fullname.vb: System.IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: false
  name: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Globalization.NumberStyles
  parent: System.Globalization
  isExternal: false
  name: Globalization.NumberStyles
  fullName: System.Globalization.NumberStyles
- uid: System.Globalization
  isExternal: false
  name: System.Globalization
  fullName: System.Globalization
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.DivideByZeroException
  isExternal: false
  name: DivideByZeroException
  fullName: System.DivideByZeroException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
