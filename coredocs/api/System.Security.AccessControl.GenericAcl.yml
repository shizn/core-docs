items:
- uid: System.Security.AccessControl.GenericAcl
  commentId: T:System.Security.AccessControl.GenericAcl
  id: GenericAcl
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.GenericAcl.#ctor
  - System.Security.AccessControl.GenericAcl.AclRevision
  - System.Security.AccessControl.GenericAcl.AclRevisionDS
  - System.Security.AccessControl.GenericAcl.BinaryLength
  - System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
  - System.Security.AccessControl.GenericAcl.Count
  - System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAcl.GetEnumerator
  - System.Security.AccessControl.GenericAcl.IsSynchronized
  - System.Security.AccessControl.GenericAcl.Item(System.Int32)
  - System.Security.AccessControl.GenericAcl.MaxBinaryLength
  - System.Security.AccessControl.GenericAcl.Revision
  - System.Security.AccessControl.GenericAcl.SyncRoot
  langs:
  - csharp
  - vb
  name: GenericAcl
  fullName: System.Security.AccessControl.GenericAcl
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericAcl
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 280
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Represents an access control list (ACL) and is the base class for the <xref href="System.Security.AccessControl.CommonAcl" data-throw-if-not-resolved="false"></xref>, <xref href="System.Security.AccessControl.DiscretionaryAcl" data-throw-if-not-resolved="false"></xref>, <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref>, and <xref href="System.Security.AccessControl.SystemAcl" data-throw-if-not-resolved="false"></xref> classes.
  syntax:
    content: 'public abstract class GenericAcl : Collections.ICollection, Collections.IEnumerable'
    content.vb: >-
      Public MustInherit Class GenericAcl
          Inherits Collections.ICollection
          Implements Collections.IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.AccessControl.GenericAcl.AclRevision
  commentId: F:System.Security.AccessControl.GenericAcl.AclRevision
  id: AclRevision
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: AclRevision
  fullName: System.Security.AccessControl.GenericAcl.AclRevision
  type: Field
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AclRevision
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 282
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: The revision level of the current <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref>. This value is returned by the <xref href="System.Security.AccessControl.GenericAcl.Revision" data-throw-if-not-resolved="false"></xref> property for Access Control Lists (ACLs) that are not associated with Directory Services objects.
  syntax:
    content: public static readonly byte AclRevision
    content.vb: Public Shared ReadOnly AclRevision As Byte
    return:
      type: System.Byte
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.AccessControl.GenericAcl.AclRevisionDS
  commentId: F:System.Security.AccessControl.GenericAcl.AclRevisionDS
  id: AclRevisionDS
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: AclRevisionDS
  fullName: System.Security.AccessControl.GenericAcl.AclRevisionDS
  type: Field
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AclRevisionDS
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 283
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: The revision level of the current <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref>. This value is returned by the <xref href="System.Security.AccessControl.GenericAcl.Revision" data-throw-if-not-resolved="false"></xref> property for Access Control Lists (ACLs) that are associated with Directory Services objects.
  syntax:
    content: public static readonly byte AclRevisionDS
    content.vb: Public Shared ReadOnly AclRevisionDS As Byte
    return:
      type: System.Byte
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.AccessControl.GenericAcl.MaxBinaryLength
  commentId: F:System.Security.AccessControl.GenericAcl.MaxBinaryLength
  id: MaxBinaryLength
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: MaxBinaryLength
  fullName: System.Security.AccessControl.GenericAcl.MaxBinaryLength
  type: Field
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxBinaryLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 284
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: The maximum allowed binary length of a <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public static readonly int MaxBinaryLength
    content.vb: Public Shared ReadOnly MaxBinaryLength As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.AccessControl.GenericAcl.#ctor
  commentId: M:System.Security.AccessControl.GenericAcl.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: GenericAcl()
  fullName: System.Security.AccessControl.GenericAcl.GenericAcl()
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 285
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Initializes a new instance of the <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: protected GenericAcl()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.AccessControl.GenericAcl.BinaryLength
  commentId: P:System.Security.AccessControl.GenericAcl.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: BinaryLength
  fullName: System.Security.AccessControl.GenericAcl.BinaryLength
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinaryLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 286
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href="System.Security.AccessControl.GenericAcl.GetBinaryForm" data-throw-if-not-resolved="false"></xref> method.
  syntax:
    content: public abstract int BinaryLength { get; }
    content.vb: Public MustOverride ReadOnly Property BinaryLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: The length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Security.AccessControl.GenericAcl.Count
  commentId: P:System.Security.AccessControl.GenericAcl.Count
  id: Count
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Security.AccessControl.GenericAcl.Count
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 287
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the number of access control entries (ACEs) in the current <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public abstract int Count { get; }
    content.vb: Public MustOverride ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of ACEs in the current <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Security.AccessControl.GenericAcl.IsSynchronized
  commentId: P:System.Security.AccessControl.GenericAcl.IsSynchronized
  id: IsSynchronized
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: IsSynchronized
  fullName: System.Security.AccessControl.GenericAcl.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSynchronized
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 288
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: This property is always set to false. It is implemented only because it is required for the implementation of the <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref> interface.
  syntax:
    content: public bool IsSynchronized { get; }
    content.vb: Public ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: Always false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.GenericAcl.Item(System.Int32)
  commentId: P:System.Security.AccessControl.GenericAcl.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Security.AccessControl.GenericAcl.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 289
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets or sets the <xref href="System.Security.AccessControl.GenericAce" data-throw-if-not-resolved="false"></xref> at the specified index.
  syntax:
    content: public abstract GenericAce this[int index] { get; set; }
    content.vb: Public MustOverride Property Item(index As Integer) As GenericAce
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the <xref href="System.Security.AccessControl.GenericAce" data-throw-if-not-resolved="false"></xref> to get or set.
    return:
      type: System.Security.AccessControl.GenericAce
      description: The <xref href="System.Security.AccessControl.GenericAce" data-throw-if-not-resolved="false"></xref> at the specified index.
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.AccessControl.GenericAcl.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Security.AccessControl.GenericAcl.Revision
  commentId: P:System.Security.AccessControl.GenericAcl.Revision
  id: Revision
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: Revision
  fullName: System.Security.AccessControl.GenericAcl.Revision
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Revision
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 290
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the revision level of the <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public abstract byte Revision { get; }
    content.vb: Public MustOverride ReadOnly Property Revision As Byte
    parameters: []
    return:
      type: System.Byte
      description: A byte value that specifies the revision level of the <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Security.AccessControl.GenericAcl.SyncRoot
  commentId: P:System.Security.AccessControl.GenericAcl.SyncRoot
  id: SyncRoot
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: SyncRoot
  fullName: System.Security.AccessControl.GenericAcl.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SyncRoot
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 291
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: This property always returns null. It is implemented only because it is required for the implementation of the <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref> interface.
  syntax:
    content: public virtual object SyncRoot { get; }
    content.vb: Public Overridable ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: System.Object
      description: Always returns null.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
  commentId: M:System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
  id: CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: CopyTo(GenericAce[], Int32)
  fullName: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 292
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Copies each <xref href="System.Security.AccessControl.GenericAce" data-throw-if-not-resolved="false"></xref> of the current <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref> into the specified array.
  syntax:
    content: public void CopyTo(GenericAce[] array, int index)
    content.vb: Public Sub CopyTo(array As GenericAce(), index As Integer)
    parameters:
    - id: array
      type: System.Security.AccessControl.GenericAce[]
      description: The array into which copies of the <xref href="System.Security.AccessControl.GenericAce" data-throw-if-not-resolved="false"></xref> objects contained by the current <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref> are placed.
    - id: index
      type: System.Int32
      description: The zero-based index of <em>array</em> where the copying begins.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce(), System.Int32)
  name.vb: CopyTo(GenericAce(), Int32)
- uid: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 293
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Marshals the contents of the <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref> object into the specified byte array beginning at the specified offset.
  syntax:
    content: public abstract void GetBinaryForm(byte[] binaryForm, int offset)
    content.vb: Public MustOverride Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: The byte array into which the contents of the <xref href="System.Security.AccessControl.GenericAcl" data-throw-if-not-resolved="false"></xref> is marshaled.
    - id: offset
      type: System.Int32
      description: The offset at which to start marshaling.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> to be copied into <em>array</em>."
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
- uid: System.Security.AccessControl.GenericAcl.GetEnumerator
  commentId: M:System.Security.AccessControl.GenericAcl.GetEnumerator
  id: GetEnumerator
  parent: System.Security.AccessControl.GenericAcl
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Security.AccessControl.GenericAcl.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 294
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Retrieves an object that you can use to iterate through the access control entries (ACEs) in an access control list (ACL).
  syntax:
    content: public AceEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As AceEnumerator
    return:
      type: System.Security.AccessControl.AceEnumerator
      description: An enumerator object.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.GenericAce[]
  isExternal: false
  name: GenericAce[]
  fullName: System.Security.AccessControl.GenericAce[]
  fullname.vb: System.Security.AccessControl.GenericAce()
  name.vb: GenericAce()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce
    name: GenericAce
    fullName: System.Security.AccessControl.GenericAce
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce
    name: GenericAce
    fullName: System.Security.AccessControl.GenericAce
  - name: ()
    fullName: ()
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Security.AccessControl.AceEnumerator
  parent: System.Security.AccessControl
  isExternal: false
  name: AceEnumerator
  fullName: System.Security.AccessControl.AceEnumerator
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
