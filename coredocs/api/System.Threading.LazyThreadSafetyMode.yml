items:
- uid: System.Threading.LazyThreadSafetyMode
  commentId: T:System.Threading.LazyThreadSafetyMode
  id: LazyThreadSafetyMode
  parent: System.Threading
  children:
  - System.Threading.LazyThreadSafetyMode.ExecutionAndPublication
  - System.Threading.LazyThreadSafetyMode.None
  - System.Threading.LazyThreadSafetyMode.PublicationOnly
  langs:
  - csharp
  - vb
  name: LazyThreadSafetyMode
  fullName: System.Threading.LazyThreadSafetyMode
  type: Enum
  source:
    remote:
      path: src/mscorlib/src/System/Threading/LazyInitializer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LazyThreadSafetyMode
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 21
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: Specifies how a <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> instance synchronizes access among multiple threads.
  syntax:
    content: public enum LazyThreadSafetyMode
    content.vb: Public Enum LazyThreadSafetyMode
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Threading.LazyThreadSafetyMode.ExecutionAndPublication
  commentId: F:System.Threading.LazyThreadSafetyMode.ExecutionAndPublication
  id: ExecutionAndPublication
  parent: System.Threading.LazyThreadSafetyMode
  langs:
  - csharp
  - vb
  name: ExecutionAndPublication
  fullName: System.Threading.LazyThreadSafetyMode.ExecutionAndPublication
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Threading/LazyInitializer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ExecutionAndPublication
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 47
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: 'Locks are used to ensure that only a single thread can initialize a <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> instance in a thread-safe manner. If the initialization method (or the default constructor, if there is no initialization method) uses locks internally, deadlocks can occur. If you use a <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> constructor that specifies an initialization method (<em>valueFactory</em> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <xref href="System.Lazy`1.Value" data-throw-if-not-resolved="false"></xref> property, then the exception is cached and thrown again on subsequent calls to the <xref href="System.Lazy`1.Value" data-throw-if-not-resolved="false"></xref> property. If you use a <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <em>T</em> are not cached. In that case, a subsequent call to the <xref href="System.Lazy`1.Value" data-throw-if-not-resolved="false"></xref> property might successfully initialize the <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> instance. If the initialization method recursively accesses the <xref href="System.Lazy`1.Value" data-throw-if-not-resolved="false"></xref> property of the <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> instance, an <xref href="System.InvalidOperationException" data-throw-if-not-resolved="false"></xref> is thrown. '
  syntax:
    content: ExecutionAndPublication = 2
    return:
      type: System.Threading.LazyThreadSafetyMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.LazyThreadSafetyMode.None
  commentId: F:System.Threading.LazyThreadSafetyMode.None
  id: None
  parent: System.Threading.LazyThreadSafetyMode
  langs:
  - csharp
  - vb
  name: None
  fullName: System.Threading.LazyThreadSafetyMode.None
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Threading/LazyInitializer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: None
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 29
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: The <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> instance is not thread safe; if the instance is accessed from multiple threads, its behavior is undefined. Use this mode only when high performance is crucial and the <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> instance is guaranteed never to be initialized from more than one thread. If you use a <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> constructor that specifies an initialization method (<em>valueFactory</em> parameter), and if that initialization method throws an exception (or fails to handle an exception) the first time you call the <xref href="System.Lazy`1.Value" data-throw-if-not-resolved="false"></xref> property, then the exception is cached and thrown again on subsequent calls to the <xref href="System.Lazy`1.Value" data-throw-if-not-resolved="false"></xref> property. If you use a <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> constructor that does not specify an initialization method, exceptions that are thrown by the default constructor for <em>T</em> are not cached. In that case, a subsequent call to the <xref href="System.Lazy`1.Value" data-throw-if-not-resolved="false"></xref> property might successfully initialize the <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> instance. If the initialization method recursively accesses the <xref href="System.Lazy`1.Value" data-throw-if-not-resolved="false"></xref> property of the <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> instance, an <xref href="System.InvalidOperationException" data-throw-if-not-resolved="false"></xref> is thrown.
  syntax:
    content: None = 0
    return:
      type: System.Threading.LazyThreadSafetyMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.LazyThreadSafetyMode.PublicationOnly
  commentId: F:System.Threading.LazyThreadSafetyMode.PublicationOnly
  id: PublicationOnly
  parent: System.Threading.LazyThreadSafetyMode
  langs:
  - csharp
  - vb
  name: PublicationOnly
  fullName: System.Threading.LazyThreadSafetyMode.PublicationOnly
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Threading/LazyInitializer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PublicationOnly
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 39
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: When multiple threads try to initialize a <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> instance simultaneously, all threads are allowed to run the initialization method (or the default constructor, if there is no initialization method). The first thread to complete initialization sets the value of the <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> instance. That value is returned to any other threads that were simultaneously running the initialization method, unless the initialization method throws exceptions on those threads. Any instances of <em>T</em> that were created by the competing threads are discarded. If the initialization method throws an exception on any thread, the exception is propagated out of the <xref href="System.Lazy`1.Value" data-throw-if-not-resolved="false"></xref> property on that thread. The exception is not cached. The value of the <xref href="System.Lazy`1.IsValueCreated" data-throw-if-not-resolved="false"></xref> property remains false, and subsequent calls to the <xref href="System.Lazy`1.Value" data-throw-if-not-resolved="false"></xref> property, either by the thread where the exception was thrown or by other threads, cause the initialization method to run again. If the initialization method recursively accesses the <xref href="System.Lazy`1.Value" data-throw-if-not-resolved="false"></xref> property of the <xref href="System.Lazy`1" data-throw-if-not-resolved="false"></xref> instance, no exception is thrown.
  syntax:
    content: PublicationOnly = 1
    return:
      type: System.Threading.LazyThreadSafetyMode
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.LazyThreadSafetyMode
  parent: System.Threading
  isExternal: false
  name: LazyThreadSafetyMode
  fullName: System.Threading.LazyThreadSafetyMode
