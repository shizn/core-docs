items:
- uid: System.Array
  commentId: T:System.Array
  id: Array
  parent: System
  children:
  - System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Array.BinarySearch(System.Array,System.Object)
  - System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  - System.Array.BinarySearch``1(``0[],``0)
  - System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  - System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  - System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  - System.Array.Clear(System.Array,System.Int32,System.Int32)
  - System.Array.Clone
  - System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - System.Array.Copy(System.Array,System.Array,System.Int32)
  - System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - System.Array.CopyTo(System.Array,System.Int32)
  - System.Array.CreateInstance(System.Type,System.Int32)
  - System.Array.CreateInstance(System.Type,System.Int32[])
  - System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  - System.Array.Empty``1
  - System.Array.Exists``1(``0[],System.Predicate{``0})
  - System.Array.Find``1(``0[],System.Predicate{``0})
  - System.Array.FindAll``1(``0[],System.Predicate{``0})
  - System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  - System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  - System.Array.FindIndex``1(``0[],System.Predicate{``0})
  - System.Array.FindLast``1(``0[],System.Predicate{``0})
  - System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  - System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  - System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  - System.Array.GetEnumerator
  - System.Array.GetLength(System.Int32)
  - System.Array.GetLowerBound(System.Int32)
  - System.Array.GetUpperBound(System.Int32)
  - System.Array.GetValue(System.Int32)
  - System.Array.GetValue(System.Int32[])
  - System.Array.IndexOf(System.Array,System.Object)
  - System.Array.IndexOf(System.Array,System.Object,System.Int32)
  - System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  - System.Array.IndexOf``1(``0[],``0)
  - System.Array.IndexOf``1(``0[],``0,System.Int32)
  - System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  - System.Array.Initialize
  - System.Array.LastIndexOf(System.Array,System.Object)
  - System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  - System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  - System.Array.LastIndexOf``1(``0[],``0)
  - System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  - System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  - System.Array.Length
  - System.Array.Rank
  - System.Array.Resize``1(``0[]@,System.Int32)
  - System.Array.Reverse(System.Array)
  - System.Array.Reverse(System.Array,System.Int32,System.Int32)
  - System.Array.SetValue(System.Object,System.Int32)
  - System.Array.SetValue(System.Object,System.Int32[])
  - System.Array.Sort(System.Array)
  - System.Array.Sort(System.Array,System.Array)
  - System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  - System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Int32,System.Int32)
  - System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  - System.Array.Sort``1(``0[])
  - System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``1(``0[],System.Comparison{``0})
  - System.Array.Sort``1(``0[],System.Int32,System.Int32)
  - System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``2(``0[],``1[])
  - System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  - System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  - System.Array.System#Collections#ICollection#Count
  - System.Array.System#Collections#ICollection#IsSynchronized
  - System.Array.System#Collections#ICollection#SyncRoot
  - System.Array.System#Collections#IList#Add(System.Object)
  - System.Array.System#Collections#IList#Clear
  - System.Array.System#Collections#IList#Contains(System.Object)
  - System.Array.System#Collections#IList#IndexOf(System.Object)
  - System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Array.System#Collections#IList#IsFixedSize
  - System.Array.System#Collections#IList#IsReadOnly
  - System.Array.System#Collections#IList#Item(System.Int32)
  - System.Array.System#Collections#IList#Remove(System.Object)
  - System.Array.System#Collections#IList#RemoveAt(System.Int32)
  - System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  - System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  langs:
  - csharp
  - vb
  name: Array
  fullName: System.Array
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Array
    path: src/mscorlib/src/System/Array.cs
    startLine: 26
  assemblies:
  - System.Runtime
  namespace: System
  summary: Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.To browse the .NET Framework source code for this type, see the Reference Source.
  syntax:
    content: 'public abstract class Array : IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable'
    content.vb: >-
      Public MustInherit Class Array
          Implements IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Array.Length
  commentId: P:System.Array.Length
  id: Length
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.Array.Length
  type: Property
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the total number of elements in all the dimensions of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int Length { get; }
    content.vb: Public ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
      description: The total number of elements in all the dimensions of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>; zero if there are no elements in the array.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The array is multidimensional and contains more than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref> elements.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Array.Rank
  commentId: P:System.Array.Rank
  id: Rank
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Rank
  fullName: System.Array.Rank
  type: Property
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: 'Gets the rank (number of dimensions) of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>. For example, a one-dimensional array returns 1, a two-dimensional array returns 2, and so on. '
  syntax:
    content: public int Rank { get; }
    content.vb: Public ReadOnly Property Rank As Integer
    parameters: []
    return:
      type: System.Int32
      description: The rank (number of dimensions) of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Array.System#Collections#ICollection#Count
  commentId: P:System.Array.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: ICollection.Count
  fullName: System.Array.System.Collections.ICollection.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.ICollection.Count
    path: src/mscorlib/src/System/Array.cs
    startLine: 659
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the number of elements contained in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: int ICollection.Count { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.Count As Integer Implements ICollection.Count
    parameters: []
    return:
      type: System.Int32
      description: The number of elements contained in the collection.
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.Count
- uid: System.Array.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Array.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Array.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 73
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Array.System#Collections#ICollection#SyncRoot
  commentId: P:System.Array.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Array.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 74
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Array.System#Collections#IList#IsFixedSize
  commentId: P:System.Array.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.IsFixedSize
  fullName: System.Array.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IsFixedSize
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 75
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool IList.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IList.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.Array.System#Collections#IList#IsReadOnly
  commentId: P:System.Array.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.IsReadOnly
  fullName: System.Array.System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IsReadOnly
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 76
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool IList.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IList.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.Array.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Array.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Item[Int32]
  fullName: System.Array.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.this[]
    path: src/mscorlib/src/System/Array.cs
    startLine: 684
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets or sets the element at the specified index.
  syntax:
    content: object IList.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this
    parameters:
    - id: index
      type: System.Int32
      description: The index of the element to get or set.
    return:
      type: System.Object
      description: The element at the specified index.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than zero.-or-<em>index</em> is equal to or greater than <xref href=\"System.Collections.ICollection.Count\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array" data-throw-if-not-resolved="false"></xref> does not have exactly one dimension.
  implements:
  - System.Collections.IList.Item(System.Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Array.System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  id: BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch(Array, Int32, Int32, Object)
  fullName: System.Array.BinarySearch(System.Array, System.Int32, System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 842
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches a range of elements in a one-dimensional sorted array for a value, using the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> interface implemented by each element of the array and by the specified value.
  syntax:
    content: public static int BinarySearch(Array array, int index, int length, object value)
    content.vb: Public Shared Function BinarySearch(array As Array, index As Integer, length As Integer, value As Object) As Integer
    parameters:
    - id: array
      type: System.Array
      description: The sorted one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: System.Object
      description: The object to search for.
    return:
      type: System.Int32
      description: The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>array</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.-or-<em>value</em> is of a type that is not compatible with the elements of <em>array</em>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>value</em> does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface, and the search encounters an element that does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch(Array, Int32, Int32, Object, IComparer)
  fullName: System.Array.BinarySearch(System.Array, System.Int32, System.Int32, System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 887
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches a range of elements in a one-dimensional sorted array for a value, using the specified <xref href="System.Collections.IComparer" data-throw-if-not-resolved="false"></xref> interface.
  syntax:
    content: public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer)
    content.vb: Public Shared Function BinarySearch(array As Array, index As Integer, length As Integer, value As Object, comparer As IComparer) As Integer
    parameters:
    - id: array
      type: System.Array
      description: The sorted one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: System.Object
      description: The object to search for.
    - id: comparer
      type: System.Collections.IComparer
      description: The <xref href="System.Collections.IComparer" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements.-or- null to use the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> implementation of each element.
    return:
      type: System.Int32
      description: The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>array</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.-or-<em>comparer</em> is null, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, <em>value</em> does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface, and the search encounters an element that does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.BinarySearch(System.Array,System.Object)
  commentId: M:System.Array.BinarySearch(System.Array,System.Object)
  id: BinarySearch(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch(Array, Object)
  fullName: System.Array.BinarySearch(System.Array, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 818
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches an entire one-dimensional sorted array for a specific element, using the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> interface implemented by each element of the array and by the specified object.
  syntax:
    content: public static int BinarySearch(Array array, object value)
    content.vb: Public Shared Function BinarySearch(array As Array, value As Object) As Integer
    parameters:
    - id: array
      type: System.Array
      description: The sorted one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: System.Object
      description: The object to search for.
    return:
      type: System.Int32
      description: The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>value</em> is of a type that is not compatible with the elements of <em>array</em>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>value</em> does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface, and the search encounters an element that does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  commentId: M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch(Array, Object, IComparer)
  fullName: System.Array.BinarySearch(System.Array, System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 862
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches an entire one-dimensional sorted array for a value using the specified <xref href="System.Collections.IComparer" data-throw-if-not-resolved="false"></xref> interface.
  syntax:
    content: public static int BinarySearch(Array array, object value, IComparer comparer)
    content.vb: Public Shared Function BinarySearch(array As Array, value As Object, comparer As IComparer) As Integer
    parameters:
    - id: array
      type: System.Array
      description: The sorted one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: System.Object
      description: The object to search for.
    - id: comparer
      type: System.Collections.IComparer
      description: The <xref href="System.Collections.IComparer" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements.-or- null to use the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> implementation of each element.
    return:
      type: System.Int32
      description: The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>comparer</em> is null, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, <em>value</em> does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface, and the search encounters an element that does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.BinarySearch``1(``0[],``0)
  commentId: M:System.Array.BinarySearch``1(``0[],``0)
  id: BinarySearch``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], T)
  fullName: System.Array.BinarySearch<T>(T[], T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 962
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches an entire one-dimensional sorted array for a specific element, using the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface implemented by each element of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> and by the specified object.
  syntax:
    content: public static int BinarySearch<T>(T[] array, T value)
    content.vb: Public Shared Function BinarySearch(Of T)(array As T(), value As T) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: 'The sorted one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search. '
    - id: value
      type: '{T}'
      description: The object to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>T</em> does not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.BinarySearch(Of T)(T(), T)
  name.vb: BinarySearch(Of T)(T(), T)
- uid: System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], T, IComparer<T>)
  fullName: System.Array.BinarySearch<T>(T[], T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 971
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches an entire one-dimensional sorted array for a value using the specified <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> generic interface.
  syntax:
    content: public static int BinarySearch<T>(T[] array, T value, IComparer<T> comparer)
    content.vb: Public Shared Function BinarySearch(Of T)(array As T(), value As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: 'The sorted one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.  '
    - id: value
      type: '{T}'
      description: The object to search for.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements.-or- null to use the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> implementation of each element.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>comparer</em> is null, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and <em>T</em> does not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.BinarySearch(Of T)(T(), T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Of T)(T(), T, IComparer(Of T))
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  commentId: M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], Int32, Int32, T)
  fullName: System.Array.BinarySearch<T>(T[], System.Int32, System.Int32, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 980
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches a range of elements in a one-dimensional sorted array for a value, using the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface implemented by each element of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> and by the specified value.
  syntax:
    content: public static int BinarySearch<T>(T[] array, int index, int length, T value)
    content.vb: Public Shared Function BinarySearch(Of T)(array As T(), index As Integer, length As Integer, value As T) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: 'The sorted one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search. '
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: '{T}'
      description: The object to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>array</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.-or-<em>value</em> is of a type that is not compatible with the elements of <em>array</em>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>T</em> does not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.BinarySearch(Of T)(T(), System.Int32, System.Int32, T)
  name.vb: BinarySearch(Of T)(T(), Int32, Int32, T)
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
  fullName: System.Array.BinarySearch<T>(T[], System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 986
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches a range of elements in a one-dimensional sorted array for a value, using the specified <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> generic interface.
  syntax:
    content: public static int BinarySearch<T>(T[] array, int index, int length, T value, IComparer<T> comparer)
    content.vb: Public Shared Function BinarySearch(Of T)(array As T(), index As Integer, length As Integer, value As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: 'The sorted one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search. '
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: '{T}'
      description: The object to search for.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements.-or- null to use the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> implementation of each element.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>array</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.-or-<em>comparer</em> is null, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and <em>T</em> does not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.BinarySearch(Of T)(T(), System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Of T)(T(), Int32, Int32, T, IComparer(Of T))
- uid: System.Array.Clear(System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Clear(System.Array,System.Int32,System.Int32)
  id: Clear(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Clear(Array, Int32, Int32)
  fullName: System.Array.Clear(System.Array, System.Int32, System.Int32)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sets a range of elements in an array to the default value of each element type.
  syntax:
    content: public static void Clear(Array array, int index, int length)
    content.vb: Public Shared Sub Clear(array As Array, index As Integer, length As Integer)
    parameters:
    - id: array
      type: System.Array
      description: The array whose elements need to be cleared.
    - id: index
      type: System.Int32
      description: The starting index of the range of elements to clear.
    - id: length
      type: System.Int32
      description: The number of elements to clear.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>array</em>.-or-<em>length</em> is less than zero.-or-The sum of <em>index</em> and <em>length</em> is greater than the size of <em>array</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Clone
  commentId: M:System.Array.Clone
  id: Clone
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Array.Clone()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clone
    path: src/mscorlib/src/System/Array.cs
    startLine: 726
  assemblies:
  - System.Runtime
  namespace: System
  summary: Creates a shallow copy of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public object Clone()
    content.vb: Public Function Clone As Object
    return:
      type: System.Object
      description: A shallow copy of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: ConstrainedCopy(Array, Int32, Array, Int32, Int32)
  fullName: System.Array.ConstrainedCopy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConstrainedCopy
    path: src/mscorlib/src/System/Array.cs
    startLine: 301
  assemblies:
  - System.Runtime
  namespace: System
  summary: Copies a range of elements from an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the specified source index and pastes them to another <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.
  syntax:
    content: public static void ConstrainedCopy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)
    content.vb: Public Shared Sub ConstrainedCopy(sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the data to copy.
    - id: sourceIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the <em>sourceArray</em> at which copying begins.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that receives the data.
    - id: destinationIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the <em>destinationArray</em> at which storing begins.
    - id: length
      type: System.Int32
      description: A 32-bit integer that represents the number of elements to copy.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>sourceArray</em> is null.-or-<em>destinationArray</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>sourceArray</em> and <em>destinationArray</em> have different ranks."
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: The <em>sourceArray</em> type is neither the same as nor derived from the <em>destinationArray</em> type.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <em>sourceArray</em> cannot be cast to the type of <em>destinationArray</em>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>sourceIndex</em> is less than the lower bound of the first dimension of <em>sourceArray</em>.-or-<em>destinationIndex</em> is less than the lower bound of the first dimension of <em>destinationArray</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>length</em> is greater than the number of elements from <em>sourceIndex</em> to the end of <em>sourceArray</em>.-or-<em>length</em> is greater than the number of elements from <em>destinationIndex</em> to the end of <em>destinationArray</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Copy(System.Array,System.Array,System.Int32)
  commentId: M:System.Array.Copy(System.Array,System.Array,System.Int32)
  id: Copy(System.Array,System.Array,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Copy(Array, Array, Int32)
  fullName: System.Array.Copy(System.Array, System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Array.cs
    startLine: 258
  assemblies:
  - System.Runtime
  namespace: System
  summary: Copies a range of elements from an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the first element and pastes them into another <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the first element. The length is specified as a 32-bit integer.
  syntax:
    content: public static void Copy(Array sourceArray, Array destinationArray, int length)
    content.vb: Public Shared Sub Copy(sourceArray As Array, destinationArray As Array, length As Integer)
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the data to copy.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that receives the data.
    - id: length
      type: System.Int32
      description: A 32-bit integer that represents the number of elements to copy.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>sourceArray</em> is null.-or-<em>destinationArray</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>sourceArray</em> and <em>destinationArray</em> have different ranks."
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: "\n<em>sourceArray</em> and <em>destinationArray</em> are of incompatible types."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <em>sourceArray</em> cannot be cast to the type of <em>destinationArray</em>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>length</em> is greater than the number of elements in <em>sourceArray</em>.-or-<em>length</em> is greater than the number of elements in <em>destinationArray</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Copy(Array, Int32, Array, Int32, Int32)
  fullName: System.Array.Copy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Array.cs
    startLine: 280
  assemblies:
  - System.Runtime
  namespace: System
  summary: Copies a range of elements from an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the specified source index and pastes them to another <xref href="System.Array" data-throw-if-not-resolved="false"></xref> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.
  syntax:
    content: public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)
    content.vb: Public Shared Sub Copy(sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)
    parameters:
    - id: sourceArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the data to copy.
    - id: sourceIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the <em>sourceArray</em> at which copying begins.
    - id: destinationArray
      type: System.Array
      description: The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that receives the data.
    - id: destinationIndex
      type: System.Int32
      description: A 32-bit integer that represents the index in the <em>destinationArray</em> at which storing begins.
    - id: length
      type: System.Int32
      description: A 32-bit integer that represents the number of elements to copy.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>sourceArray</em> is null.-or-<em>destinationArray</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>sourceArray</em> and <em>destinationArray</em> have different ranks."
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: "\n<em>sourceArray</em> and <em>destinationArray</em> are of incompatible types."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in <em>sourceArray</em> cannot be cast to the type of <em>destinationArray</em>.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>sourceIndex</em> is less than the lower bound of the first dimension of <em>sourceArray</em>.-or-<em>destinationIndex</em> is less than the lower bound of the first dimension of <em>destinationArray</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>length</em> is greater than the number of elements from <em>sourceIndex</em> to the end of <em>sourceArray</em>.-or-<em>length</em> is greater than the number of elements from <em>destinationIndex</em> to the end of <em>destinationArray</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.CopyTo(System.Array,System.Int32)
  commentId: M:System.Array.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Array.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Array.cs
    startLine: 1026
  assemblies:
  - System.Runtime
  namespace: System
  summary: Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 32-bit integer.
  syntax:
    content: public void CopyTo(Array array, int index)
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array that is the destination of the elements copied from the current array.
    - id: index
      type: System.Int32
      description: A 32-bit integer that represents the index in <em>array</em> at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>array</em>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>array</em> is multidimensional.-or-The number of elements in the source array is greater than the available number of elements from <em>index</em> to the end of the destination <em>array</em>."
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: The type of the source <xref href="System.Array" data-throw-if-not-resolved="false"></xref> cannot be cast automatically to the type of the destination <em>array</em>.
  - type: System.RankException
    commentId: T:System.RankException
    description: The source array is multidimensional.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: At least one element in the source <xref href="System.Array" data-throw-if-not-resolved="false"></xref> cannot be cast to the type of destination <em>array</em>.
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.CreateInstance(System.Type,System.Int32)
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32)
  id: CreateInstance(System.Type,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: CreateInstance(Type, Int32)
  fullName: System.Array.CreateInstance(System.Type, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateInstance
    path: src/mscorlib/src/System/Array.cs
    startLine: 62
  assemblies:
  - System.Runtime
  namespace: System
  summary: Creates a one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> of the specified <xref href="System.Type" data-throw-if-not-resolved="false"></xref> and length, with zero-based indexing.
  syntax:
    content: public static Array CreateInstance(Type elementType, int length)
    content.vb: Public Shared Function CreateInstance(elementType As Type, length As Integer) As Array
    parameters:
    - id: elementType
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to create.
    - id: length
      type: System.Int32
      description: The size of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to create.
    return:
      type: System.Array
      description: A new one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> of the specified <xref href="System.Type" data-throw-if-not-resolved="false"></xref> with the specified length, using zero-based indexing.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>elementType</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>elementType</em> is not a valid <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<em>elementType</em> is not supported. For example, <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref> is not supported.-or-<em>elementType</em> is an open generic type."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>length</em> is less than zero."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.CreateInstance(System.Type,System.Int32[])
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32[])
  id: CreateInstance(System.Type,System.Int32[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: CreateInstance(Type, Int32[])
  fullName: System.Array.CreateInstance(System.Type, System.Int32[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateInstance
    path: src/mscorlib/src/System/Array.cs
    startLine: 128
  assemblies:
  - System.Runtime
  namespace: System
  summary: Creates a multidimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> of the specified <xref href="System.Type" data-throw-if-not-resolved="false"></xref> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.
  syntax:
    content: public static Array CreateInstance(Type elementType, params int[] lengths)
    content.vb: Public Shared Function CreateInstance(elementType As Type, ParamArray lengths As Integer()) As Array
    parameters:
    - id: elementType
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to create.
    - id: lengths
      type: System.Int32[]
      description: An array of 32-bit integers that represent the size of each dimension of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to create.
    return:
      type: System.Array
      description: A new multidimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> of the specified <xref href="System.Type" data-throw-if-not-resolved="false"></xref> with the specified length for each dimension, using zero-based indexing.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>elementType</em> is null.-or-<em>lengths</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>elementType</em> is not a valid <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.-or-The <em>lengths</em> array contains less than one element."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<em>elementType</em> is not supported. For example, <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref> is not supported. -or-<em>elementType</em> is an open generic type."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Any value in <em>lengths</em> is less than zero.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.CreateInstance(System.Type, System.Int32())
  name.vb: CreateInstance(Type, Int32())
- uid: System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  id: CreateInstance(System.Type,System.Int32[],System.Int32[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: CreateInstance(Type, Int32[], Int32[])
  fullName: System.Array.CreateInstance(System.Type, System.Int32[], System.Int32[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateInstance
    path: src/mscorlib/src/System/Array.cs
    startLine: 182
  assemblies:
  - System.Runtime
  namespace: System
  summary: Creates a multidimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> of the specified <xref href="System.Type" data-throw-if-not-resolved="false"></xref> and dimension lengths, with the specified lower bounds.
  syntax:
    content: public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds)
    content.vb: Public Shared Function CreateInstance(elementType As Type, lengths As Integer(), lowerBounds As Integer()) As Array
    parameters:
    - id: elementType
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to create.
    - id: lengths
      type: System.Int32[]
      description: A one-dimensional array that contains the size of each dimension of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to create.
    - id: lowerBounds
      type: System.Int32[]
      description: A one-dimensional array that contains the lower bound (starting index) of each dimension of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to create.
    return:
      type: System.Array
      description: A new multidimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> of the specified <xref href="System.Type" data-throw-if-not-resolved="false"></xref> with the specified length and lower bound for each dimension.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>elementType</em> is null.-or-<em>lengths</em> is null.-or-<em>lowerBounds</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>elementType</em> is not a valid <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.-or-The <em>lengths</em> array contains less than one element.-or-The <em>lengths</em> and <em>lowerBounds</em> arrays do not contain the same number of elements."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<em>elementType</em> is not supported. For example, <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref> is not supported. -or-<em>elementType</em> is an open generic type."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: Any value in <em>lengths</em> is less than zero.-or-Any value in <em>lowerBounds</em> is very large, such that the sum of a dimension's lower bound and length is greater than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.CreateInstance(System.Type, System.Int32(), System.Int32())
  name.vb: CreateInstance(Type, Int32(), Int32())
- uid: System.Array.Empty``1
  commentId: M:System.Array.Empty``1
  id: Empty``1
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Empty<T>()
  fullName: System.Array.Empty<T>()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Empty
    path: src/mscorlib/src/System/Array.cs
    startLine: 1047
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns an empty array.
  syntax:
    content: public static T[] Empty<T>()
    content.vb: Public Shared Function Empty(Of T) As T()
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: '{T}[]'
      description: Returns an empty <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Empty(Of T)()
  name.vb: Empty(Of T)()
- uid: System.Array.Exists``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  id: Exists``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Exists<T>(T[], Predicate<T>)
  fullName: System.Array.Exists<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exists
    path: src/mscorlib/src/System/Array.cs
    startLine: 1058
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether the specified array contains elements that match the conditions defined by the specified predicate.
  syntax:
    content: public static bool Exists<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function Exists(Of T)(array As T(), match As Predicate(Of T)) As Boolean
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> that defines the conditions of the elements to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Boolean
      description: true if <em>array</em> contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null.-or-<em>match</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Exists(Of T)(T(), System.Predicate(Of T))
  name.vb: Exists(Of T)(T(), Predicate(Of T))
- uid: System.Array.Find``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  id: Find``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Find<T>(T[], Predicate<T>)
  fullName: System.Array.Find<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Find
    path: src/mscorlib/src/System/Array.cs
    startLine: 1062
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static T Find<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function Find(Of T)(array As T(), match As Predicate(Of T)) As T
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based array to search.
    - id: match
      type: System.Predicate{{T}}
      description: The predicate that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: '{T}'
      description: The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <em>T</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null.-or-<em>match</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Find(Of T)(T(), System.Predicate(Of T))
  name.vb: Find(Of T)(T(), Predicate(Of T))
- uid: System.Array.FindAll``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  id: FindAll``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindAll<T>(T[], Predicate<T>)
  fullName: System.Array.FindAll<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindAll
    path: src/mscorlib/src/System/Array.cs
    startLine: 1080
  assemblies:
  - System.Runtime
  namespace: System
  summary: Retrieves all the elements that match the conditions defined by the specified predicate.
  syntax:
    content: public static T[] FindAll<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function FindAll(Of T)(array As T(), match As Predicate(Of T)) As T()
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> that defines the conditions of the elements to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: '{T}[]'
      description: An <xref href="System.Array" data-throw-if-not-resolved="false"></xref> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null.-or-<em>match</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindAll(Of T)(T(), System.Predicate(Of T))
  name.vb: FindAll(Of T)(T(), Predicate(Of T))
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Int32, Int32, Predicate<T>)
  fullName: System.Array.FindIndex<T>(T[], System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindIndex
    path: src/mscorlib/src/System/Array.cs
    startLine: 1119
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that starts at the specified index and contains the specified number of elements.
  syntax:
    content: public static int FindIndex<T>(T[] array, int startIndex, int count, Predicate<T> match)
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null.-or-<em>match</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.-or-<em>count</em> is less than zero.-or-<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindIndex(Of T)(T(), System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Int32, Predicate<T>)
  fullName: System.Array.FindIndex<T>(T[], System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindIndex
    path: src/mscorlib/src/System/Array.cs
    startLine: 1109
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that extends from the specified index to the last element.
  syntax:
    content: public static int FindIndex<T>(T[] array, int startIndex, Predicate<T> match)
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null.-or-<em>match</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindIndex(Of T)(T(), System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Int32, Predicate(Of T))
- uid: System.Array.FindIndex``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindIndex``1(``0[],System.Predicate{``0})
  id: FindIndex``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Predicate<T>)
  fullName: System.Array.FindIndex<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindIndex
    path: src/mscorlib/src/System/Array.cs
    startLine: 1099
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static int FindIndex<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null.-or-<em>match</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindIndex(Of T)(T(), System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Predicate(Of T))
- uid: System.Array.FindLast``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  id: FindLast``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindLast<T>(T[], Predicate<T>)
  fullName: System.Array.FindLast<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindLast
    path: src/mscorlib/src/System/Array.cs
    startLine: 1145
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static T FindLast<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function FindLast(Of T)(array As T(), match As Predicate(Of T)) As T
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: '{T}'
      description: The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <em>T</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null.-or-<em>match</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindLast(Of T)(T(), System.Predicate(Of T))
  name.vb: FindLast(Of T)(T(), Predicate(Of T))
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
  fullName: System.Array.FindLastIndex<T>(T[], System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindLastIndex
    path: src/mscorlib/src/System/Array.cs
    startLine: 1181
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the specified number of elements and ends at the specified index.
  syntax:
    content: public static int FindLastIndex<T>(T[] array, int startIndex, int count, Predicate<T> match)
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: "The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null.-or-<em>match</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.-or-<em>count</em> is less than zero.-or-<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindLastIndex(Of T)(T(), System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Int32, Predicate<T>)
  fullName: System.Array.FindLastIndex<T>(T[], System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindLastIndex
    path: src/mscorlib/src/System/Array.cs
    startLine: 1172
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that extends from the first element to the specified index.
  syntax:
    content: public static int FindLastIndex<T>(T[] array, int startIndex, Predicate<T> match)
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: "The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null.-or-<em>match</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindLastIndex(Of T)(T(), System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Int32, Predicate(Of T))
- uid: System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Predicate<T>)
  fullName: System.Array.FindLastIndex<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindLastIndex
    path: src/mscorlib/src/System/Array.cs
    startLine: 1163
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static int FindLastIndex<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> that defines the conditions of the element to search for.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: "The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null.-or-<em>match</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindLastIndex(Of T)(T(), System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Predicate(Of T))
- uid: System.Array.GetEnumerator
  commentId: M:System.Array.GetEnumerator
  id: GetEnumerator
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Array.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Array.cs
    startLine: 1237
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns an <xref href="System.Collections.IEnumerator" data-throw-if-not-resolved="false"></xref> for the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: An <xref href="System.Collections.IEnumerator" data-throw-if-not-resolved="false"></xref> for the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.GetLength(System.Int32)
  commentId: M:System.Array.GetLength(System.Int32)
  id: GetLength(System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetLength(Int32)
  fullName: System.Array.GetLength(System.Int32)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets a 32-bit integer that represents the number of elements in the specified dimension of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int GetLength(int dimension)
    content.vb: Public Function GetLength(dimension As Integer) As Integer
    parameters:
    - id: dimension
      type: System.Int32
      description: A zero-based dimension of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> whose length needs to be determined.
    return:
      type: System.Int32
      description: A 32-bit integer that represents the number of elements in the specified dimension.
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<em>dimension</em> is less than zero.-or-<em>dimension</em> is equal to or greater than <xref href=\"System.Array.Rank\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.GetLowerBound(System.Int32)
  commentId: M:System.Array.GetLowerBound(System.Int32)
  id: GetLowerBound(System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetLowerBound(Int32)
  fullName: System.Array.GetLowerBound(System.Int32)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the index of the first element of the specified dimension in the array.
  syntax:
    content: public int GetLowerBound(int dimension)
    content.vb: Public Function GetLowerBound(dimension As Integer) As Integer
    parameters:
    - id: dimension
      type: System.Int32
      description: A zero-based dimension of the array whose starting index needs to be determined.
    return:
      type: System.Int32
      description: The index of the first element of the specified dimension in the array.
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<em>dimension</em> is less than zero.-or-<em>dimension</em> is equal to or greater than <xref href=\"System.Array.Rank\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.GetUpperBound(System.Int32)
  commentId: M:System.Array.GetUpperBound(System.Int32)
  id: GetUpperBound(System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetUpperBound(Int32)
  fullName: System.Array.GetUpperBound(System.Int32)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the index of the last element of the specified dimension in the array.
  syntax:
    content: public int GetUpperBound(int dimension)
    content.vb: Public Function GetUpperBound(dimension As Integer) As Integer
    parameters:
    - id: dimension
      type: System.Int32
      description: A zero-based dimension of the array whose upper bound needs to be determined.
    return:
      type: System.Int32
      description: 'The index of the last element of the specified dimension in the array, or -1 if the specified dimension is empty. '
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<em>dimension</em> is less than zero.-or-<em>dimension</em> is equal to or greater than <xref href=\"System.Array.Rank\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.GetValue(System.Int32)
  commentId: M:System.Array.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetValue(Int32)
  fullName: System.Array.GetValue(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Array.cs
    startLine: 355
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the value at the specified position in the one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>. The index is specified as a 32-bit integer.
  syntax:
    content: public object GetValue(int index)
    content.vb: Public Function GetValue(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
      description: A 32-bit integer that represents the position of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array" data-throw-if-not-resolved="false"></xref> does not have exactly one dimension.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<em>index</em> is outside the range of valid indexes for the current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.GetValue(System.Int32[])
  commentId: M:System.Array.GetValue(System.Int32[])
  id: GetValue(System.Int32[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetValue(Int32[])
  fullName: System.Array.GetValue(System.Int32[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Array.cs
    startLine: 340
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the value at the specified position in the multidimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>. The indexes are specified as an array of 32-bit integers.
  syntax:
    content: public object GetValue(params int[] indices)
    content.vb: Public Function GetValue(ParamArray indices As Integer()) As Object
    parameters:
    - id: indices
      type: System.Int32[]
      description: A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> element to get.
    return:
      type: System.Object
      description: The value at the specified position in the multidimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>indices</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of dimensions in the current <xref href="System.Array" data-throw-if-not-resolved="false"></xref> is not equal to the number of elements in <em>indices</em>.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: Any element in <em>indices</em> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Array.GetValue(System.Int32())
  name.vb: GetValue(Int32())
- uid: System.Array.IndexOf(System.Array,System.Object)
  commentId: M:System.Array.IndexOf(System.Array,System.Object)
  id: IndexOf(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf(Array, Object)
  fullName: System.Array.IndexOf(System.Array, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1250
  assemblies:
  - System.Runtime
  namespace: System
  summary: 'Searches for the specified object and returns the index of its first occurrence in a one-dimensional array. '
  syntax:
    content: public static int IndexOf(Array array, object value)
    content.vb: Public Shared Function IndexOf(array As Array, value As Object) As Integer
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array to search.
    - id: value
      type: System.Object
      description: The object to locate in <em>array</em>.
    return:
      type: System.Int32
      description: The index of the first occurrence of <em>value</em> in <em>array</em>, if found; otherwise, the lower bound of the array minus 1.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32)
  commentId: M:System.Array.IndexOf(System.Array,System.Object,System.Int32)
  id: IndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf(Array, Object, Int32)
  fullName: System.Array.IndexOf(System.Array, System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1266
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.
  syntax:
    content: public static int IndexOf(Array array, object value, int startIndex)
    content.vb: Public Shared Function IndexOf(array As Array, value As Object, startIndex As Integer) As Integer
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array to search.
    - id: value
      type: System.Object
      description: The object to locate in <em>array</em>.
    - id: startIndex
      type: System.Int32
      description: The starting index of the search. 0 (zero) is valid in an empty array.
    return:
      type: System.Int32
      description: "The index of the first occurrence of <em>value</em>, if it’s found, within the range of elements in <em>array</em> that extends from <em>startIndex</em> to the last element; otherwise, the lower bound of the array minus 1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  commentId: M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf(Array, Object, Int32, Int32)
  fullName: System.Array.IndexOf(System.Array, System.Object, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1282
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence. The range extends from a specified index for a specified number of elements.
  syntax:
    content: public static int IndexOf(Array array, object value, int startIndex, int count)
    content.vb: Public Shared Function IndexOf(array As Array, value As Object, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array to search.
    - id: value
      type: System.Object
      description: The object to locate in <em>array</em>.
    - id: startIndex
      type: System.Int32
      description: The starting index of the search. 0 (zero) is valid in an empty array.
    - id: count
      type: System.Int32
      description: The number of elements to search.
    return:
      type: System.Int32
      description: "The index of the first occurrence of <em>value</em>, if it’s found, in the <em>array</em> from index <em>startIndex</em> to <em>startIndex</em> + <em>count</em> - 1; otherwise, the lower bound of the array minus 1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.-or-<em>count</em> is less than zero.-or-<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.IndexOf``1(``0[],``0)
  commentId: M:System.Array.IndexOf``1(``0[],``0)
  id: IndexOf``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf<T>(T[], T)
  fullName: System.Array.IndexOf<T>(T[], T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1337
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.
  syntax:
    content: public static int IndexOf<T>(T[] array, T value)
    content.vb: Public Shared Function IndexOf(Of T)(array As T(), value As T) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based array to search.
    - id: value
      type: '{T}'
      description: The object to locate in <em>array</em>.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of <em>value</em> in the entire <em>array</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.IndexOf(Of T)(T(), T)
  name.vb: IndexOf(Of T)(T(), T)
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32)
  commentId: M:System.Array.IndexOf``1(``0[],``0,System.Int32)
  id: IndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf<T>(T[], T, Int32)
  fullName: System.Array.IndexOf<T>(T[], T, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1349
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.
  syntax:
    content: public static int IndexOf<T>(T[] array, T value, int startIndex)
    content.vb: Public Shared Function IndexOf(Of T)(array As T(), value As T, startIndex As Integer) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based array to search.
    - id: value
      type: '{T}'
      description: The object to locate in <em>array</em>.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty array.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of <em>value</em> within the range of elements in <em>array</em> that extends from <em>startIndex</em> to the last element, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.IndexOf(Of T)(T(), T, System.Int32)
  name.vb: IndexOf(Of T)(T(), T, Int32)
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  commentId: M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  id: IndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf<T>(T[], T, Int32, Int32)
  fullName: System.Array.IndexOf<T>(T[], T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1359
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index for a specified number of elements.
  syntax:
    content: public static int IndexOf<T>(T[] array, T value, int startIndex, int count)
    content.vb: Public Shared Function IndexOf(Of T)(array As T(), value As T, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based array to search.
    - id: value
      type: '{T}'
      description: The object to locate in <em>array</em>.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty array.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of <em>value</em> within the range of elements in <em>array</em> that starts at <em>startIndex</em> and contains the number of elements specified in <em>count</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.-or-<em>count</em> is less than zero.-or-<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.IndexOf(Of T)(T(), T, System.Int32, System.Int32)
  name.vb: IndexOf(Of T)(T(), T, Int32, Int32)
- uid: System.Array.Initialize
  commentId: M:System.Array.Initialize
  id: Initialize
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Initialize()
  fullName: System.Array.Initialize()
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: Initializes every element of the value-type <xref href="System.Array" data-throw-if-not-resolved="false"></xref> by calling the default constructor of the value type.
  syntax:
    content: public void Initialize()
    content.vb: Public Sub Initialize
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.LastIndexOf(System.Array,System.Object)
  commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  id: LastIndexOf(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf(Array, Object)
  fullName: System.Array.LastIndexOf(System.Array, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1387
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static int LastIndexOf(Array array, object value)
    content.vb: Public Shared Function LastIndexOf(array As Array, value As Object) As Integer
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: System.Object
      description: The object to locate in <em>array</em>.
    return:
      type: System.Int32
      description: The index of the last occurrence of <em>value</em> within the entire <em>array</em>, if found; otherwise, the lower bound of the array minus 1.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  commentId: M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  id: LastIndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf(Array, Object, Int32)
  fullName: System.Array.LastIndexOf(System.Array, System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1402
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that extends from the first element to the specified index.
  syntax:
    content: public static int LastIndexOf(Array array, object value, int startIndex)
    content.vb: Public Shared Function LastIndexOf(array As Array, value As Object, startIndex As Integer) As Integer
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: System.Object
      description: The object to locate in <em>array</em>.
    - id: startIndex
      type: System.Int32
      description: The starting index of the backward search.
    return:
      type: System.Int32
      description: The index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that extends from the first element to <em>startIndex</em>, if found; otherwise, the lower bound of the array minus 1.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  commentId: M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf(Array, Object, Int32, Int32)
  fullName: System.Array.LastIndexOf(System.Array, System.Object, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1418
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the specified number of elements and ends at the specified index.
  syntax:
    content: public static int LastIndexOf(Array array, object value, int startIndex, int count)
    content.vb: Public Shared Function LastIndexOf(array As Array, value As Object, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: System.Object
      description: The object to locate in <em>array</em>.
    - id: startIndex
      type: System.Int32
      description: The starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    return:
      type: System.Int32
      description: The index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that contains the number of elements specified in <em>count</em> and ends at <em>startIndex</em>, if found; otherwise, the lower bound of the array minus 1.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.-or-<em>count</em> is less than zero.-or-<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.LastIndexOf``1(``0[],``0)
  commentId: M:System.Array.LastIndexOf``1(``0[],``0)
  id: LastIndexOf``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(T[], T)
  fullName: System.Array.LastIndexOf<T>(T[], T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1474
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the entire <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static int LastIndexOf<T>(T[] array, T value)
    content.vb: Public Shared Function LastIndexOf(Of T)(array As T(), value As T) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: '{T}'
      description: The object to locate in <em>array</em>.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: "The zero-based index of the last occurrence of <em>value</em> within the entire <em>array</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.LastIndexOf(Of T)(T(), T)
  name.vb: LastIndexOf(Of T)(T(), T)
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  commentId: M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  id: LastIndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(T[], T, Int32)
  fullName: System.Array.LastIndexOf<T>(T[], T, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1484
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that extends from the first element to the specified index.
  syntax:
    content: public static int LastIndexOf<T>(T[] array, T value, int startIndex)
    content.vb: Public Shared Function LastIndexOf(Of T)(array As T(), value As T, startIndex As Integer) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: '{T}'
      description: The object to locate in <em>array</em>.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: "The zero-based index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that extends from the first element to <em>startIndex</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.LastIndexOf(Of T)(T(), T, System.Int32)
  name.vb: LastIndexOf(Of T)(T(), T, Int32)
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  commentId: M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  id: LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(T[], T, Int32, Int32)
  fullName: System.Array.LastIndexOf<T>(T[], T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1494
  assemblies:
  - System.Runtime
  namespace: System
  summary: Searches for the specified object and returns the index of the last occurrence within the range of elements in the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the specified number of elements and ends at the specified index.
  syntax:
    content: public static int LastIndexOf<T>(T[] array, T value, int startIndex, int count)
    content.vb: Public Shared Function LastIndexOf(Of T)(array As T(), value As T, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to search.
    - id: value
      type: '{T}'
      description: The object to locate in <em>array</em>.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Int32
      description: "The zero-based index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that contains the number of elements specified in <em>count</em> and ends at <em>startIndex</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.-or-<em>count</em> is less than zero.-or-<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.LastIndexOf(Of T)(T(), T, System.Int32, System.Int32)
  name.vb: LastIndexOf(Of T)(T(), T, Int32, Int32)
- uid: System.Array.Resize``1(``0[]@,System.Int32)
  commentId: M:System.Array.Resize``1(``0[]@,System.Int32)
  id: Resize``1(``0[]@,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Resize<T>(ref T[], Int32)
  fullName: System.Array.Resize<T>(ref T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Resize
    path: src/mscorlib/src/System/Array.cs
    startLine: 40
  assemblies:
  - System.Runtime
  namespace: System
  summary: Changes the number of elements of a one-dimensional array to the specified new size.
  syntax:
    content: public static void Resize<T>(ref T[] array, int newSize)
    content.vb: Public Shared Sub Resize(Of T)(ByRef array As T(), newSize As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based array to resize, or null to create a new array with the specified size.
    - id: newSize
      type: System.Int32
      description: The size of the new array.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>newSize</em> is less than zero."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Resize(Of T)(ByRef T(), System.Int32)
  name.vb: Resize(Of T)(ByRef T(), Int32)
- uid: System.Array.Reverse(System.Array)
  commentId: M:System.Array.Reverse(System.Array)
  id: Reverse(System.Array)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Reverse(Array)
  fullName: System.Array.Reverse(System.Array)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reverse
    path: src/mscorlib/src/System/Array.cs
    startLine: 1541
  assemblies:
  - System.Runtime
  namespace: System
  summary: Reverses the sequence of the elements in the entire one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static void Reverse(Array array)
    content.vb: Public Shared Sub Reverse(array As Array)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to reverse.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null. "
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Reverse(System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Reverse(System.Array,System.Int32,System.Int32)
  id: Reverse(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Reverse(Array, Int32, Int32)
  fullName: System.Array.Reverse(System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reverse
    path: src/mscorlib/src/System/Array.cs
    startLine: 1555
  assemblies:
  - System.Runtime
  namespace: System
  summary: Reverses the sequence of the elements in a range of elements in the one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static void Reverse(Array array, int index, int length)
    content.vb: Public Shared Sub Reverse(array As Array, index As Integer, length As Integer)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to reverse.
    - id: index
      type: System.Int32
      description: The starting index of the section to reverse.
    - id: length
      type: System.Int32
      description: The number of elements in the section to reverse.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>array</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.SetValue(System.Object,System.Int32)
  commentId: M:System.Array.SetValue(System.Object,System.Int32)
  id: SetValue(System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: SetValue(Object, Int32)
  fullName: System.Array.SetValue(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetValue
    path: src/mscorlib/src/System/Array.cs
    startLine: 459
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sets a value to the element at the specified position in the one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>. The index is specified as a 32-bit integer.
  syntax:
    content: public void SetValue(object value, int index)
    content.vb: Public Sub SetValue(value As Object, index As Integer)
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: index
      type: System.Int32
      description: A 32-bit integer that represents the position of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref> element to set.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The current <xref href="System.Array" data-throw-if-not-resolved="false"></xref> does not have exactly one dimension.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<em>value</em> cannot be cast to the element type of the current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<em>index</em> is outside the range of valid indexes for the current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Array.SetValue(System.Object,System.Int32[])
  commentId: M:System.Array.SetValue(System.Object,System.Int32[])
  id: SetValue(System.Object,System.Int32[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: SetValue(Object, Int32[])
  fullName: System.Array.SetValue(System.Object, System.Int32[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetValue
    path: src/mscorlib/src/System/Array.cs
    startLine: 504
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sets a value to the element at the specified position in the multidimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref>. The indexes are specified as an array of 32-bit integers.
  syntax:
    content: public void SetValue(object value, params int[] indices)
    content.vb: Public Sub SetValue(value As Object, ParamArray indices As Integer())
    parameters:
    - id: value
      type: System.Object
      description: The new value for the specified element.
    - id: indices
      type: System.Int32[]
      description: A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>indices</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of dimensions in the current <xref href="System.Array" data-throw-if-not-resolved="false"></xref> is not equal to the number of elements in <em>indices</em>.
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<em>value</em> cannot be cast to the element type of the current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: Any element in <em>indices</em> is outside the range of valid indexes for the corresponding dimension of the current <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Array.SetValue(System.Object, System.Int32())
  name.vb: SetValue(Object, Int32())
- uid: System.Array.Sort(System.Array)
  commentId: M:System.Array.Sort(System.Array)
  id: Sort(System.Array)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array)
  fullName: System.Array.Sort(System.Array)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1605
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts the elements in an entire one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> implementation of each element of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static void Sort(Array array)
    content.vb: Public Shared Sub Sort(array As Array)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in <em>array</em> do not implement the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> interface.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Array)
  commentId: M:System.Array.Sort(System.Array,System.Array)
  id: Sort(System.Array,System.Array)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Array)
  fullName: System.Array.Sort(System.Array, System.Array)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1619
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts a pair of one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> implementation of each key.
  syntax:
    content: public static void Sort(Array keys, Array items)
    content.vb: Public Shared Sub Sort(keys As Array, items As Array)
    parameters:
    - id: keys
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the keys to sort.
    - id: items
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the items that correspond to each of the keys in the <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref>.-or-null to sort only the <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>keys</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: The <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref> is multidimensional.-or-The <em>items</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref> is multidimensional.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>items</em> is not null, and the length of <em>keys</em> is greater than the length of <em>items</em>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in the <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref> do not implement the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> interface.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  id: Sort(System.Array,System.Array,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Array, IComparer)
  fullName: System.Array.Sort(System.Array, System.Array, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1669
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts a pair of one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Collections.IComparer" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static void Sort(Array keys, Array items, IComparer comparer)
    content.vb: Public Shared Sub Sort(keys As Array, items As Array, comparer As IComparer)
    parameters:
    - id: keys
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the keys to sort.
    - id: items
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the items that correspond to each of the keys in the <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref>.-or-null to sort only the <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
    - id: comparer
      type: System.Collections.IComparer
      description: The <xref href="System.Collections.IComparer" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements.-or-null to use the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> implementation of each element.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>keys</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: The <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref> is multidimensional.-or-The <em>items</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref> is multidimensional.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>items</em> is not null, and the length of <em>keys</em> is greater than the length of <em>items</em>. -or-The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and one or more elements in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  id: Sort(System.Array,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Array, Int32, Int32)
  fullName: System.Array.Sort(System.Array, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1642
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts a range of elements in a pair of one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> implementation of each key.
  syntax:
    content: public static void Sort(Array keys, Array items, int index, int length)
    content.vb: Public Shared Sub Sort(keys As Array, items As Array, index As Integer, length As Integer)
    parameters:
    - id: keys
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the keys to sort.
    - id: items
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the items that correspond to each of the keys in the <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref>.-or-null to sort only the <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>keys</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: The <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref> is multidimensional.-or-The <em>items</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref> is multidimensional.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>keys</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>items</em> is not null, and the length of <em>keys</em> is greater than the length of <em>items</em>.-or-<em>index</em> and <em>length</em> do not specify a valid range in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>items</em> is not null, and <em>index</em> and <em>length</em> do not specify a valid range in the <em>items</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in the <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref> do not implement the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> interface.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Array, Int32, Int32, IComparer)
  fullName: System.Array.Sort(System.Array, System.Array, System.Int32, System.Int32, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1696
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts a range of elements in a pair of one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Collections.IComparer" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static void Sort(Array keys, Array items, int index, int length, IComparer comparer)
    content.vb: Public Shared Sub Sort(keys As Array, items As Array, index As Integer, length As Integer, comparer As IComparer)
    parameters:
    - id: keys
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the keys to sort.
    - id: items
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the items that correspond to each of the keys in the <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref>.-or-null to sort only the <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    - id: comparer
      type: System.Collections.IComparer
      description: The <xref href="System.Collections.IComparer" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements.-or-null to use the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> implementation of each element.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>keys</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: The <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref> is multidimensional.-or-The <em>items</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref> is multidimensional.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>keys</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>items</em> is not null, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.-or-<em>items</em> is not null, and the length of <em>keys</em> is greater than the length of <em>items</em>.-or-<em>index</em> and <em>length</em> do not specify a valid range in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>items</em> is not null, and <em>index</em> and <em>length</em> do not specify a valid range in the <em>items</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>. -or-The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and one or more elements in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Collections.IComparer)
  id: Sort(System.Array,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, IComparer)
  fullName: System.Array.Sort(System.Array, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1653
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts the elements in a one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Collections.IComparer" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static void Sort(Array array, IComparer comparer)
    content.vb: Public Shared Sub Sort(array As Array, comparer As IComparer)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional array to sort.
    - id: comparer
      type: System.Collections.IComparer
      description: The implementation to use when comparing elements.-or-null to use the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> implementation of each element.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and one or more elements in <em>array</em> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Sort(System.Array,System.Int32,System.Int32)
  id: Sort(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Int32, Int32)
  fullName: System.Array.Sort(System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1631
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts the elements in a range of elements in a one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> implementation of each element of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static void Sort(Array array, int index, int length)
    content.vb: Public Shared Sub Sort(array As Array, index As Integer, length As Integer)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>array</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in <em>array</em> do not implement the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> interface.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Int32, Int32, IComparer)
  fullName: System.Array.Sort(System.Array, System.Int32, System.Int32, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1683
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts the elements in a range of elements in a one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Collections.IComparer" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static void Sort(Array array, int index, int length, IComparer comparer)
    content.vb: Public Shared Sub Sort(array As Array, index As Integer, length As Integer, comparer As IComparer)
    parameters:
    - id: array
      type: System.Array
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    - id: comparer
      type: System.Collections.IComparer
      description: The <xref href="System.Collections.IComparer" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements.-or-null to use the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> implementation of each element.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<em>array</em> is multidimensional."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>array</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>. -or-The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and one or more elements in <em>array</em> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Array.Sort``1(``0[])
  commentId: M:System.Array.Sort``1(``0[])
  id: Sort``1(``0[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[])
  fullName: System.Array.Sort<T>(T[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1740
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts the elements in an entire <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface implementation of each element of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static void Sort<T>(T[] array)
    content.vb: Public Shared Sub Sort(Of T)(array As T())
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in <em>array</em> do not implement the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T())
  name.vb: Sort(Of T)(T())
- uid: System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  id: Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], IComparer<T>)
  fullName: System.Array.Sort<T>(T[], System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1766
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts the elements in an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> generic interface.
  syntax:
    content: public static void Sort<T>(T[] array, IComparer<T> comparer)
    content.vb: Public Shared Sub Sort(Of T)(array As T(), comparer As IComparer(Of T))
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-base <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> generic interface implementation to use when comparing elements, or null to use the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface implementation of each element.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and one or more elements in <em>array</em> do not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T(), System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Of T)(T(), IComparer(Of T))
- uid: System.Array.Sort``1(``0[],System.Comparison{``0})
  commentId: M:System.Array.Sort``1(``0[],System.Comparison{``0})
  id: Sort``1(``0[],System.Comparison{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], Comparison<T>)
  fullName: System.Array.Sort<T>(T[], System.Comparison<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1832
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts the elements in an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Comparison`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static void Sort<T>(T[] array, Comparison<T> comparison)
    content.vb: Public Shared Sub Sort(Of T)(array As T(), comparison As Comparison(Of T))
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort
    - id: comparison
      type: System.Comparison{{T}}
      description: The <xref href="System.Comparison`1" data-throw-if-not-resolved="false"></xref> to use when comparing elements.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null.-or-<em>comparison</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The implementation of <em>comparison</em> caused an error during the sort. For example, <em>comparison</em> might not return 0 when comparing an item with itself.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T(), System.Comparison(Of T))
  name.vb: Sort(Of T)(T(), Comparison(Of T))
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32)
  commentId: M:System.Array.Sort``1(``0[],System.Int32,System.Int32)
  id: Sort``1(``0[],System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], Int32, Int32)
  fullName: System.Array.Sort<T>(T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1756
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts the elements in a range of elements in an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface implementation of each element of the <xref href="System.Array" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static void Sort<T>(T[] array, int index, int length)
    content.vb: Public Shared Sub Sort(Of T)(array As T(), index As Integer, length As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>array</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in <em>array</em> do not implement the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T(), System.Int32, System.Int32)
  name.vb: Sort(Of T)(T(), Int32, Int32)
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  id: Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], Int32, Int32, IComparer<T>)
  fullName: System.Array.Sort<T>(T[], System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1782
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts the elements in a range of elements in an <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> generic interface.
  syntax:
    content: public static void Sort<T>(T[] array, int index, int length, IComparer<T> comparer)
    content.vb: Public Shared Sub Sort(Of T)(array As T(), index As Integer, length As Integer, comparer As IComparer(Of T))
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to sort.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> generic interface implementation to use when comparing elements, or null to use the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface implementation of each element.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>array</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>. -or-The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and one or more elements in <em>array</em> do not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T(), System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Of T)(T(), Int32, Int32, IComparer(Of T))
- uid: System.Array.Sort``2(``0[],``1[])
  commentId: M:System.Array.Sort``2(``0[],``1[])
  id: Sort``2(``0[],``1[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<TKey, TValue>(TKey[], TValue[])
  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1748
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts a pair of <xref href="System.Array" data-throw-if-not-resolved="false"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface implementation of each key.
  syntax:
    content: public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items)
    content.vb: Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue())
    parameters:
    - id: keys
      type: '{TKey}[]'
      description: 'The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the keys to sort. '
    - id: items
      type: '{TValue}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the items that correspond to the keys in <em>keys</em>, or null to sort only <em>keys</em>.
    typeParameters:
    - id: TKey
      description: The type of the elements of the key array.
    - id: TValue
      description: The type of the elements of the items array.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>keys</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>items</em> is not null, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.-or-<em>items</em> is not null, and the length of <em>keys</em> is greater than the length of <em>items</em>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in the <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref> do not implement the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue())
  name.vb: Sort(Of TKey, TValue)(TKey(), TValue())
- uid: System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  id: Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<TKey, TValue>(TKey[], TValue[], IComparer<TKey>)
  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[], System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1774
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts a pair of <xref href="System.Array" data-throw-if-not-resolved="false"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> generic interface.
  syntax:
    content: public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, IComparer<TKey> comparer)
    content.vb: Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue(), comparer As IComparer(Of TKey))
    parameters:
    - id: keys
      type: '{TKey}[]'
      description: 'The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the keys to sort. '
    - id: items
      type: '{TValue}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the items that correspond to the keys in <em>keys</em>, or null to sort only <em>keys</em>.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> generic interface implementation to use when comparing elements, or null to use the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface implementation of each element.
    typeParameters:
    - id: TKey
      description: The type of the elements of the key array.
    - id: TValue
      description: The type of the elements of the items array.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>keys</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>items</em> is not null, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.-or-<em>items</em> is not null, and the length of <em>keys</em> is greater than the length of <em>items</em>.-or-The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and one or more elements in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> do not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue(), System.Collections.Generic.IComparer(Of TKey))
  name.vb: Sort(Of TKey, TValue)(TKey(), TValue(), IComparer(Of TKey))
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  commentId: M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  id: Sort``2(``0[],``1[],System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32)
  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1761
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts a range of elements in a pair of <xref href="System.Array" data-throw-if-not-resolved="false"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface implementation of each key.
  syntax:
    content: public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length)
    content.vb: Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue(), index As Integer, length As Integer)
    parameters:
    - id: keys
      type: '{TKey}[]'
      description: 'The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the keys to sort. '
    - id: items
      type: '{TValue}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the items that correspond to the keys in <em>keys</em>, or null to sort only <em>keys</em>.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    typeParameters:
    - id: TKey
      description: The type of the elements of the key array.
    - id: TValue
      description: The type of the elements of the items array.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>keys</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>keys</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>items</em> is not null, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.-or-<em>items</em> is not null, and the length of <em>keys</em> is greater than the length of <em>items</em>.-or-<em>index</em> and <em>length</em> do not specify a valid range in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>items</em> is not null, and <em>index</em> and <em>length</em> do not specify a valid range in the <em>items</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: One or more elements in the <em>keys</em><xref href="System.Array" data-throw-if-not-resolved="false"></xref> do not implement the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue(), System.Int32, System.Int32)
  name.vb: Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32)
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  id: Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)
  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[], System.Int32, System.Int32, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1804
  assemblies:
  - System.Runtime
  namespace: System
  summary: Sorts a range of elements in a pair of <xref href="System.Array" data-throw-if-not-resolved="false"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href="System.Array" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> generic interface.
  syntax:
    content: public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, IComparer<TKey> comparer)
    content.vb: Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue(), index As Integer, length As Integer, comparer As IComparer(Of TKey))
    parameters:
    - id: keys
      type: '{TKey}[]'
      description: 'The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the keys to sort. '
    - id: items
      type: '{TValue}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that contains the items that correspond to the keys in <em>keys</em>, or null to sort only <em>keys</em>.
    - id: index
      type: System.Int32
      description: The starting index of the range to sort.
    - id: length
      type: System.Int32
      description: The number of elements in the range to sort.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> generic interface implementation to use when comparing elements, or null to use the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface implementation of each element.
    typeParameters:
    - id: TKey
      description: The type of the elements of the key array.
    - id: TValue
      description: The type of the elements of the items array.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>keys</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than the lower bound of <em>keys</em>.-or-<em>length</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>items</em> is not null, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.-or-<em>items</em> is not null, and the length of <em>keys</em> is greater than the length of <em>items</em>.-or-<em>index</em> and <em>length</em> do not specify a valid range in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>items</em> is not null, and <em>index</em> and <em>length</em> do not specify a valid range in the <em>items</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>. -or-The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and one or more elements in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> do not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue(), System.Int32, System.Int32, System.Collections.Generic.IComparer(Of TKey))
  name.vb: Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32, IComparer(Of TKey))
- uid: System.Array.System#Collections#IList#Add(System.Object)
  commentId: M:System.Array.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Add(Object)
  fullName: System.Array.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Add
    path: src/mscorlib/src/System/Array.cs
    startLine: 689
  assemblies:
  - System.Runtime
  namespace: System
  summary: 'Calling this method always throws a <xref href="System.NotSupportedException" data-throw-if-not-resolved="false"></xref> exception. '
  syntax:
    content: int IList.Add(object value)
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
    parameters:
    - id: value
      type: System.Object
      description: The object to be added to the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Int32
      description: 'Adding a value to an array is not supported. No value is returned. '
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> has a fixed size.
  implements:
  - System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
- uid: System.Array.System#Collections#IList#Clear
  commentId: M:System.Array.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Clear()
  fullName: System.Array.System.Collections.IList.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Clear
    path: src/mscorlib/src/System/Array.cs
    startLine: 699
  assemblies:
  - System.Runtime
  namespace: System
  summary: Removes all items from the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: void IList.Clear()
    content.vb: Sub System.Collections.IList.Clear Implements IList.Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> is read-only.
  implements:
  - System.Collections.IList.Clear
  name.vb: System.Collections.IList.Clear()
- uid: System.Array.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Array.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Contains(Object)
  fullName: System.Array.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Contains
    path: src/mscorlib/src/System/Array.cs
    startLine: 694
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether an element is in the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: bool IList.Contains(object value)
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the current list. The element to locate can be null for reference types.
    return:
      type: System.Boolean
      description: true if <em>value</em> is found in the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  implements:
  - System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
- uid: System.Array.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Array.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.IndexOf(Object)
  fullName: System.Array.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 704
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines the index of a specific item in the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: int IList.IndexOf(object value)
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
    parameters:
    - id: value
      type: System.Object
      description: The object to locate in the current list.
    return:
      type: System.Int32
      description: The index of value if found in the list; otherwise, -1.
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
- uid: System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Insert(Int32, Object)
  fullName: System.Array.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Insert
    path: src/mscorlib/src/System/Array.cs
    startLine: 709
  assemblies:
  - System.Runtime
  namespace: System
  summary: Inserts an item to the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> at the specified index.
  syntax:
    content: void IList.Insert(int index, object value)
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
    parameters:
    - id: index
      type: System.Int32
      description: The index at which <em>value</em> should be inserted.
    - id: value
      type: System.Object
      description: The object to insert.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is not a valid index in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. "
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> is read-only.-or- The <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> has a fixed size. '
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<em>value</em> is null reference in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>."
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
- uid: System.Array.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Array.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Remove(Object)
  fullName: System.Array.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Remove
    path: src/mscorlib/src/System/Array.cs
    startLine: 714
  assemblies:
  - System.Runtime
  namespace: System
  summary: Removes the first occurrence of a specific object from the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: void IList.Remove(object value)
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
    parameters:
    - id: value
      type: System.Object
      description: The object to remove from the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> is read-only.-or- The <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> has a fixed size. '
  implements:
  - System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
- uid: System.Array.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:System.Array.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.RemoveAt(Int32)
  fullName: System.Array.System.Collections.IList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.RemoveAt
    path: src/mscorlib/src/System/Array.cs
    startLine: 719
  assemblies:
  - System.Runtime
  namespace: System
  summary: Removes the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> item at the specified index.
  syntax:
    content: void IList.RemoveAt(int index)
    content.vb: Sub System.Collections.IList.RemoveAt(index As Integer) Implements IList.RemoveAt
    parameters:
    - id: index
      type: System.Int32
      description: The index of the element to remove.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: 'index is not a valid index in the <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref>. '
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> is read-only.-or- The <xref href="System.Collections.IList" data-throw-if-not-resolved="false"></xref> has a fixed size.
  implements:
  - System.Collections.IList.RemoveAt(System.Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
- uid: System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  commentId: M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IStructuralComparable.CompareTo(Object, IComparer)
  fullName: System.Array.System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IStructuralComparable.CompareTo
    path: src/mscorlib/src/System/Array.cs
    startLine: 731
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.
  syntax:
    content: int IStructuralComparable.CompareTo(object other, IComparer comparer)
    content.vb: Function System.Collections.IStructuralComparable.CompareTo(other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo
    parameters:
    - id: other
      type: System.Object
      description: The object to compare with the current instance.
    - id: comparer
      type: System.Collections.IComparer
      description: An object that compares the current object and <em>other</em>.
    return:
      type: System.Int32
      description: An integer that indicates the relationship of the current collection object to other, as shown in the following table.Return valueDescription-1The current instance precedes <em>other</em>.0The current instance and <em>other</em> are equal.1The current instance follows <em>other</em>.
  implements:
  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  name.vb: System.Collections.IStructuralComparable.CompareTo(Object, IComparer)
- uid: System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: System.Array.System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IStructuralEquatable.Equals
    path: src/mscorlib/src/System/Array.cs
    startLine: 756
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether an object is equal to the current instance.
  syntax:
    content: bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
    content.vb: Function System.Collections.IStructuralEquatable.Equals(other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals
    parameters:
    - id: other
      type: System.Object
      description: The object to compare with the current instance.
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: 'An object that determines whether the current instance and <em>other</em> are equal. '
    return:
      type: System.Boolean
      description: true if the two objects are equal; otherwise, false.
  implements:
  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)
- uid: System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Array.System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IStructuralEquatable.GetHashCode
    path: src/mscorlib/src/System/Array.cs
    startLine: 791
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns a hash code for the current instance.
  syntax:
    content: int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
    content.vb: Function System.Collections.IStructuralEquatable.GetHashCode(comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: An object that computes the hash code of the current object.
    return:
      type: System.Int32
      description: The hash code for the current instance.
  implements:
  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  id: TrueForAll``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: TrueForAll<T>(T[], Predicate<T>)
  fullName: System.Array.TrueForAll<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TrueForAll
    path: src/mscorlib/src/System/Array.cs
    startLine: 1846
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines whether every element in the array matches the conditions defined by the specified predicate.
  syntax:
    content: public static bool TrueForAll<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function TrueForAll(Of T)(array As T(), match As Predicate(Of T)) As Boolean
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional, zero-based <xref href="System.Array" data-throw-if-not-resolved="false"></xref> to check against the conditions.
    - id: match
      type: System.Predicate{{T}}
      description: The predicate that defines the conditions to check against the elements.
    typeParameters:
    - id: T
      description: The type of the elements of the array.
    return:
      type: System.Boolean
      description: true if every element in <em>array</em> matches the conditions defined by the specified predicate; otherwise, false. If there are no elements in the array, the return value is true.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null.-or-<em>match</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.TrueForAll(Of T)(T(), System.Predicate(Of T))
  name.vb: TrueForAll(Of T)(T(), Predicate(Of T))
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.IStructuralComparable
  parent: System.Collections
  isExternal: false
  name: IStructuralComparable
  fullName: System.Collections.IStructuralComparable
- uid: System.Collections.IStructuralEquatable
  parent: System.Collections
  isExternal: false
  name: IStructuralEquatable
  fullName: System.Collections.IStructuralEquatable
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: false
  name: IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: false
  name: IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: false
  name: Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  fullname.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    fullName: System.Collections.IList.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    fullName: System.Collections.IList.Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  fullName: System.Collections.IComparer
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Generic.IComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: false
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Int32[]
  isExternal: false
  name: Int32[]
  fullName: System.Int32[]
  fullname.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ()
    fullName: ()
- uid: System.Predicate{{T}}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  fullName: System.Predicate<T>
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<>
  fullName: System.Predicate<>
  fullname.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: Collections.IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Comparison{{T}}
  parent: System
  definition: System.Comparison`1
  name: Comparison<T>
  fullName: System.Comparison<T>
  fullname.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Comparison`1
  parent: System
  isExternal: false
  name: Comparison<>
  fullName: System.Comparison<>
  fullname.vb: System.Comparison(Of )
  name.vb: Comparison(Of )
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: '{TKey}[]'
  isExternal: false
  name: TKey[]
  fullName: TKey[]
  fullname.vb: TKey()
  name.vb: TKey()
  spec.csharp:
  - name: TKey
    fullName: TKey
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TKey
    fullName: TKey
  - name: ()
    fullName: ()
- uid: '{TValue}[]'
  isExternal: false
  name: TValue[]
  fullName: TValue[]
  fullname.vb: TValue()
  name.vb: TValue()
  spec.csharp:
  - name: TValue
    fullName: TValue
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TValue
    fullName: TValue
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: Collections.Generic.IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    fullName: System.Collections.IList.Add
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    fullName: System.Collections.IList.Add
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: false
  name: Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    fullName: System.Collections.IList.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    fullName: System.Collections.IList.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IList.Contains
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IList.Contains
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    fullName: System.Collections.IList.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    fullName: System.Collections.IList.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: false
  name: Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IList.Remove
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IList.Remove
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: false
  name: RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
  - name: )
    fullName: )
- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Collections.IStructuralComparable
  isExternal: false
  name: CompareTo(Object, IComparer)
  fullName: System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    fullName: System.Collections.IComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    fullName: System.Collections.IComparer
  - name: )
    fullName: )
- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: Equals(Object, IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    fullName: System.Collections.IStructuralEquatable.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    fullName: System.Collections.IStructuralEquatable.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: GetHashCode(IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
  - name: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
  - name: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.RankException
  isExternal: false
  name: RankException
  fullName: System.RankException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.ArrayTypeMismatchException
  isExternal: false
  name: ArrayTypeMismatchException
  fullName: System.ArrayTypeMismatchException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  fullName: System.NullReferenceException
