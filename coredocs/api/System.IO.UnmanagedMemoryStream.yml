items:
- uid: System.IO.UnmanagedMemoryStream
  commentId: T:System.IO.UnmanagedMemoryStream
  id: UnmanagedMemoryStream
  parent: System.IO
  children:
  - System.IO.UnmanagedMemoryStream.#ctor
  - System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)
  - System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  - System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryStream.CanRead
  - System.IO.UnmanagedMemoryStream.CanSeek
  - System.IO.UnmanagedMemoryStream.CanWrite
  - System.IO.UnmanagedMemoryStream.Capacity
  - System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)
  - System.IO.UnmanagedMemoryStream.Flush
  - System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryStream.Length
  - System.IO.UnmanagedMemoryStream.Position
  - System.IO.UnmanagedMemoryStream.PositionPointer
  - System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.UnmanagedMemoryStream.ReadByte
  - System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.UnmanagedMemoryStream.SetLength(System.Int64)
  - System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)
  langs:
  - csharp
  - vb
  name: UnmanagedMemoryStream
  fullName: System.IO.UnmanagedMemoryStream
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UnmanagedMemoryStream
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 83
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Provides access to unmanaged blocks of memory from managed code.
  syntax:
    content: 'public class UnmanagedMemoryStream : Stream'
    content.vb: >-
      Public Class UnmanagedMemoryStream
          Inherits Stream
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.UnmanagedMemoryStream.#ctor
  commentId: M:System.IO.UnmanagedMemoryStream.#ctor
  id: '#ctor'
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: UnmanagedMemoryStream()
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 102
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.UnmanagedMemoryStream" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: protected UnmanagedMemoryStream()
    content.vb: Protected Sub New
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The user does not have the required permission.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)
  commentId: M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)
  id: '#ctor(System.Byte*,System.Int64)'
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: UnmanagedMemoryStream(Byte*, Int64)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(System.Byte*, System.Int64)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 187
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.UnmanagedMemoryStream" data-throw-if-not-resolved="false"></xref> class using the specified location and memory length.
  syntax:
    content: public UnmanagedMemoryStream(byte *pointer, long length)
    content.vb: Public Sub New(pointer As Byte *, length As Long)
    parameters:
    - id: pointer
      type: System.Byte*
      description: A pointer to an unmanaged memory location.
    - id: length
      type: System.Int64
      description: The length of the memory to use.
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The user does not have the required permission.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>pointer</em> value is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>length</em> value is less than zero.- or -The <em>length</em> is large enough to cause an overflow.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  commentId: M:System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  id: '#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)'
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: UnmanagedMemoryStream(Byte*, Int64, Int64, FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(System.Byte*, System.Int64, System.Int64, System.IO.FileAccess)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 194
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Initializes a new instance of the <xref href="System.IO.UnmanagedMemoryStream" data-throw-if-not-resolved="false"></xref> class using the specified location, memory length, total amount of memory, and file access values.
  syntax:
    content: public UnmanagedMemoryStream(byte *pointer, long length, long capacity, FileAccess access)
    content.vb: Public Sub New(pointer As Byte *, length As Long, capacity As Long, access As FileAccess)
    parameters:
    - id: pointer
      type: System.Byte*
      description: A pointer to an unmanaged memory location.
    - id: length
      type: System.Int64
      description: The length of the memory to use.
    - id: capacity
      type: System.Int64
      description: The total amount of memory assigned to the stream.
    - id: access
      type: System.IO.FileAccess
      description: One of the <xref href="System.IO.FileAccess" data-throw-if-not-resolved="false"></xref> values.
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The user does not have the required permission.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>pointer</em> value is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>length</em> value is less than zero.- or - The <em>capacity</em> value is less than zero.- or -The <em>length</em> value is greater than the <em>capacity</em> value.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  commentId: M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)'
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: UnmanagedMemoryStream(Runtime.InteropServices.SafeBuffer, Int64, Int64)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(System.Runtime.InteropServices.SafeBuffer, System.Int64, System.Int64)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 111
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: 'Initializes a new instance of the <xref href="System.IO.UnmanagedMemoryStream" data-throw-if-not-resolved="false"></xref> class in a safe buffer with a specified offset and length. '
  syntax:
    content: public UnmanagedMemoryStream(Runtime.InteropServices.SafeBuffer buffer, long offset, long length)
    content.vb: Public Sub New(buffer As Runtime.InteropServices.SafeBuffer, offset As Long, length As Long)
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: The buffer to contain the unmanaged memory stream.
    - id: offset
      type: System.Int64
      description: The byte position in the buffer at which to start the unmanaged memory stream.
    - id: length
      type: System.Int64
      description: The length of the unmanaged memory stream.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  commentId: M:System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)'
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: UnmanagedMemoryStream(Runtime.InteropServices.SafeBuffer, Int64, Int64, FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(System.Runtime.InteropServices.SafeBuffer, System.Int64, System.Int64, System.IO.FileAccess)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 116
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: 'Initializes a new instance of the <xref href="System.IO.UnmanagedMemoryStream" data-throw-if-not-resolved="false"></xref> class in a safe buffer with a specified offset, length, and file access. '
  syntax:
    content: public UnmanagedMemoryStream(Runtime.InteropServices.SafeBuffer buffer, long offset, long length, FileAccess access)
    content.vb: Public Sub New(buffer As Runtime.InteropServices.SafeBuffer, offset As Long, length As Long, access As FileAccess)
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: The buffer to contain the unmanaged memory stream.
    - id: offset
      type: System.Int64
      description: The byte position in the buffer at which to start the unmanaged memory stream.
    - id: length
      type: System.Int64
      description: The length of the unmanaged memory stream.
    - id: access
      type: System.IO.FileAccess
      description: 'The mode of file access to the unmanaged memory stream. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.UnmanagedMemoryStream.CanRead
  commentId: P:System.IO.UnmanagedMemoryStream.CanRead
  id: CanRead
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.IO.UnmanagedMemoryStream.CanRead
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanRead
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 248
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Gets a value indicating whether a stream supports reading.
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: false if the object was created by a constructor with an <em>access</em> parameter that did not include reading the stream and if the stream is closed; otherwise, true.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.UnmanagedMemoryStream.CanSeek
  commentId: P:System.IO.UnmanagedMemoryStream.CanSeek
  id: CanSeek
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: CanSeek
  fullName: System.IO.UnmanagedMemoryStream.CanSeek
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanSeek
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 253
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Gets a value indicating whether a stream supports seeking.
  syntax:
    content: public override bool CanSeek { get; }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: false if the stream is closed; otherwise, true.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.UnmanagedMemoryStream.CanWrite
  commentId: P:System.IO.UnmanagedMemoryStream.CanWrite
  id: CanWrite
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.IO.UnmanagedMemoryStream.CanWrite
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanWrite
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 258
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Gets a value indicating whether a stream supports writing.
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: false if the object was created by a constructor with an <em>access</em> parameter value that supports writing or was created by a constructor that had no parameters, or if the stream is closed; otherwise, true.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.UnmanagedMemoryStream.Capacity
  commentId: P:System.IO.UnmanagedMemoryStream.Capacity
  id: Capacity
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: Capacity
  fullName: System.IO.UnmanagedMemoryStream.Capacity
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Capacity
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 305
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Gets the stream length (size) or the total amount of memory assigned to a stream (capacity).
  syntax:
    content: public long Capacity { get; }
    content.vb: Public ReadOnly Property Capacity As Long
    parameters: []
    return:
      type: System.Int64
      description: The size or capacity of the stream.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream is closed.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.UnmanagedMemoryStream.Length
  commentId: P:System.IO.UnmanagedMemoryStream.Length
  id: Length
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.IO.UnmanagedMemoryStream.Length
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Length
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 298
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Gets the length of the data in a stream.
  syntax:
    content: public override long Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: The length of the data in the stream.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream is closed.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.UnmanagedMemoryStream.Position
  commentId: P:System.IO.UnmanagedMemoryStream.Position
  id: Position
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.IO.UnmanagedMemoryStream.Position
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Position
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 312
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Gets or sets the current position in a stream.
  syntax:
    content: public override long Position { get; set; }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
      description: The current position in the stream.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream is closed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The position is set to a value that is less than zero, or the position is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref> or results in overflow when added to the current pointer.
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.UnmanagedMemoryStream.PositionPointer
  commentId: P:System.IO.UnmanagedMemoryStream.PositionPointer
  id: PositionPointer
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: PositionPointer
  fullName: System.IO.UnmanagedMemoryStream.PositionPointer
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PositionPointer
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 336
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Gets or sets a byte pointer to a stream based on the current position in the stream.
  syntax:
    content: public byte *PositionPointer { get; set; }
    content.vb: Public Property PositionPointer As Byte
    parameters: []
    return:
      type: System.Byte*
      description: A byte pointer.
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: The current position is larger than the capacity of the stream.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The position is being set is not a valid position in the current stream.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: The pointer is being set to a lower value than the starting position of the stream.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The stream was initialized for use with a <xref href="System.Runtime.InteropServices.SafeBuffer" data-throw-if-not-resolved="false"></xref>. The <xref href="System.IO.UnmanagedMemoryStream.PositionPointer" data-throw-if-not-resolved="false"></xref> property is valid only for streams that are initialized with a <xref href="System.Byte" data-throw-if-not-resolved="false"></xref> pointer. '
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)
  commentId: M:System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 263
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Releases the unmanaged resources used by the <xref href="System.IO.UnmanagedMemoryStream" data-throw-if-not-resolved="false"></xref> and optionally releases the managed resources.
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.IO.UnmanagedMemoryStream.Flush
  commentId: M:System.IO.UnmanagedMemoryStream.Flush
  id: Flush
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.IO.UnmanagedMemoryStream.Flush()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Flush
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 275
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Overrides the <xref href="System.IO.Stream.Flush" data-throw-if-not-resolved="false"></xref> method so that no action is performed.
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream is closed.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: FlushAsync(Threading.CancellationToken)
  fullName: System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FlushAsync
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 279
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Overrides the <xref href="System.IO.Stream.FlushAsync(System.Threading.CancellationToken)" data-throw-if-not-resolved="false"></xref> method so that the operation is cancelled if specified, but no other action is performed.Available starting in .NET Framework 2015
  syntax:
    content: public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function FlushAsync(cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref href="System.Threading.CancellationToken.None" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous flush operation.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  commentId: M:System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  id: Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: Initialize(Byte*, Int64, Int64, FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.Initialize(System.Byte*, System.Int64, System.Int64, System.IO.FileAccess)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Initialize
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 210
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: 'Initializes a new instance of the <xref href="System.IO.UnmanagedMemoryStream" data-throw-if-not-resolved="false"></xref> class by using a pointer to an unmanaged memory location. '
  syntax:
    content: protected void Initialize(byte *pointer, long length, long capacity, FileAccess access)
    content.vb: Protected Sub Initialize(pointer As Byte *, length As Long, capacity As Long, access As FileAccess)
    parameters:
    - id: pointer
      type: System.Byte*
      description: A pointer to an unmanaged memory location.
    - id: length
      type: System.Int64
      description: The length of the memory to use.
    - id: capacity
      type: System.Int64
      description: The total amount of memory assigned to the stream.
    - id: access
      type: System.IO.FileAccess
      description: 'One of the <xref href="System.IO.FileAccess" data-throw-if-not-resolved="false"></xref> values. '
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The user does not have the required permission.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>pointer</em> value is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>length</em> value is less than zero.- or - The <em>capacity</em> value is less than zero.- or -The <em>length</em> value is large enough to cause an overflow.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  commentId: M:System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  id: Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: Initialize(Runtime.InteropServices.SafeBuffer, Int64, Int64, FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer, System.Int64, System.Int64, System.IO.FileAccess)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Initialize
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 129
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: 'Initializes a new instance of the <xref href="System.IO.UnmanagedMemoryStream" data-throw-if-not-resolved="false"></xref> class in a safe buffer with a specified offset, length, and file access. '
  syntax:
    content: protected void Initialize(Runtime.InteropServices.SafeBuffer buffer, long offset, long length, FileAccess access)
    content.vb: Protected Sub Initialize(buffer As Runtime.InteropServices.SafeBuffer, offset As Long, length As Long, access As FileAccess)
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: The buffer to contain the unmanaged memory stream.
    - id: offset
      type: System.Int64
      description: The byte position in the buffer at which to start the unmanaged memory stream.
    - id: length
      type: System.Int64
      description: The length of the unmanaged memory stream.
    - id: access
      type: System.IO.FileAccess
      description: The mode of file access to the unmanaged memory stream.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  fullName: System.IO.UnmanagedMemoryStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 379
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Reads the specified number of bytes into the specified array.
  syntax:
    content: public override int Read(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: When this method returns, contains the specified byte array with the values between <em>offset</em> and (<em>offset</em> + <em>count</em> - 1) replaced by the bytes read from the current source. This parameter is passed uninitialized.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in <em>buffer</em> at which to begin storing the data read from the current stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to read from the current stream.
    return:
      type: System.Int32
      description: The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream is closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The underlying memory does not support reading.- or - The <xref href="System.IO.UnmanagedMemoryStream.CanRead" data-throw-if-not-resolved="false"></xref> property is set to false. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>buffer</em> parameter is set to null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>offset</em> parameter is less than zero. - or - The <em>count</em> parameter is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The length of the buffer array minus the <em>offset</em> parameter is less than the <em>count</em> parameter.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.UnmanagedMemoryStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadAsync
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 433
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Asynchronously reads the specified number of bytes into the specified array.Available starting in .NET Framework 2015
  syntax:
    content: public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write the data into.
    - id: offset
      type: System.Int32
      description: The byte offset in <em>buffer</em> at which to begin writing data from the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to read.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref href="System.Threading.CancellationToken.None" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A task that represents the asynchronous read operation. The value of the <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result value can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.IO.UnmanagedMemoryStream.ReadByte
  commentId: M:System.IO.UnmanagedMemoryStream.ReadByte
  id: ReadByte
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: ReadByte()
  fullName: System.IO.UnmanagedMemoryStream.ReadByte()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadByte
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 462
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Reads a byte from a stream and advances the position within the stream by one byte, or returns -1 if at the end of the stream.
  syntax:
    content: public override int ReadByte()
    content.vb: Public Overrides Function ReadByte As Integer
    return:
      type: System.Int32
      description: The unsigned byte cast to an <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> object, or -1 if at the end of the stream.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream is closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The underlying memory does not support reading.- or -The current position is at the end of the stream.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, SeekOrigin)
  fullName: System.IO.UnmanagedMemoryStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Seek
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 496
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Sets the current position of the current stream to the given value.
  syntax:
    content: public override long Seek(long offset, SeekOrigin loc)
    content.vb: Public Overrides Function Seek(offset As Long, loc As SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: 'The point relative to <em>origin</em> to begin seeking from. '
    - id: loc
      type: System.IO.SeekOrigin
      description: 'Specifies the beginning, the end, or the current position as a reference point for <em>origin</em>, using a value of type <xref href="System.IO.SeekOrigin" data-throw-if-not-resolved="false"></xref>. '
    return:
      type: System.Int64
      description: The new position in the stream.
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An attempt was made to seek before the beginning of the stream.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>offset</em> value is larger than the maximum size of the stream.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>loc</em> is invalid."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream is closed.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.UnmanagedMemoryStream.SetLength(System.Int64)
  commentId: M:System.IO.UnmanagedMemoryStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  fullName: System.IO.UnmanagedMemoryStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetLength
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 530
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Sets the length of a stream to a specified value.
  syntax:
    content: public override void SetLength(long value)
    content.vb: Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: The length of the stream.
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: 'An I/O error has occurred. '
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream is closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The underlying memory does not support writing.- or -An attempt is made to write to the stream and the <xref href="System.IO.UnmanagedMemoryStream.CanWrite" data-throw-if-not-resolved="false"></xref> property is false.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The specified <em>value</em> exceeds the capacity of the stream.- or -The specified <em>value</em> is negative.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  fullName: System.IO.UnmanagedMemoryStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 556
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Writes a block of bytes to the current stream using data from a buffer.
  syntax:
    content: public override void Write(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The byte array from which to copy bytes to the current stream.
    - id: offset
      type: System.Int32
      description: The offset in the buffer at which to begin copying bytes to the current stream.
    - id: count
      type: System.Int32
      description: The number of bytes to write to the current stream.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream is closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The underlying memory does not support writing. - or -An attempt is made to write to the stream and the <xref href="System.IO.UnmanagedMemoryStream.CanWrite" data-throw-if-not-resolved="false"></xref> property is false.- or -The <em>count</em> value is greater than the capacity of the stream.- or -The position is at the end of the stream capacity.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: 'An I/O error occurs. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: One of the specified parameters is less than zero.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>offset</em> parameter minus the length of the <em>buffer</em> parameter is less than the <em>count</em> parameter.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>buffer</em> parameter is null.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.UnmanagedMemoryStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteAsync
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 627
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Asynchronously writes a sequence of bytes to the current stream, advances the current position within this stream by the number of bytes written, and monitors cancellation requests.Available starting in .NET Framework 2015
  syntax:
    content: public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write data from.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in <em>buffer</em> from which to begin copying bytes to the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to write.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref href="System.Threading.CancellationToken.None" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous write operation.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)
  commentId: M:System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  - vb
  name: WriteByte(Byte)
  fullName: System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteByte
    path: src/mscorlib/src/System/IO/UnmanagedMemoryStream.cs
    startLine: 657
  assemblies:
  - System.IO.UnmanagedMemoryStream
  namespace: System.IO
  summary: Writes a byte to the current position in the file stream.
  syntax:
    content: public override void WriteByte(byte value)
    content.vb: Public Overrides Sub WriteByte(value As Byte)
    parameters:
    - id: value
      type: System.Byte
      description: A byte value written to the stream.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream is closed.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The underlying memory does not support writing.- or -An attempt is made to write to the stream and the <xref href="System.IO.UnmanagedMemoryStream.CanWrite" data-throw-if-not-resolved="false"></xref> property is false.- or - The current position is at the end of the capacity of the stream.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: The supplied <em>value</em> causes the stream exceed its maximum capacity.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Byte*
  isExternal: true
  name: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    fullName: '*'
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  fullName: System.IO.FileAccess
- uid: System.Runtime.InteropServices.SafeBuffer
  isExternal: false
  name: SafeBuffer
  fullName: System.Runtime.InteropServices.SafeBuffer
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Threading.Tasks.Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
