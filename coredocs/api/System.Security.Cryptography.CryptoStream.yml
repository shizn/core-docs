items:
- uid: System.Security.Cryptography.CryptoStream
  commentId: T:System.Security.Cryptography.CryptoStream
  id: CryptoStream
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  - System.Security.Cryptography.CryptoStream.CanRead
  - System.Security.Cryptography.CryptoStream.CanSeek
  - System.Security.Cryptography.CryptoStream.CanWrite
  - System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  - System.Security.Cryptography.CryptoStream.Flush
  - System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  - System.Security.Cryptography.CryptoStream.FlushFinalBlock
  - System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  - System.Security.Cryptography.CryptoStream.Length
  - System.Security.Cryptography.CryptoStream.Position
  - System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  - System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: CryptoStream
  fullName: System.Security.Cryptography.CryptoStream
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CryptoStream
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 11
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Defines a stream that links data streams to cryptographic transformations.
  syntax:
    content: 'public class CryptoStream : IO.Stream, IDisposable'
    content.vb: >-
      Public Class CryptoStream
          Inherits IO.Stream
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  commentId: M:System.Security.Cryptography.CryptoStream.#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)
  id: '#ctor(System.IO.Stream,System.Security.Cryptography.ICryptoTransform,System.Security.Cryptography.CryptoStreamMode)'
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: CryptoStream(IO.Stream, ICryptoTransform, CryptoStreamMode)
  fullName: System.Security.Cryptography.CryptoStream.CryptoStream(System.IO.Stream, System.Security.Cryptography.ICryptoTransform, System.Security.Cryptography.CryptoStreamMode)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 36
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.CryptoStream" data-throw-if-not-resolved="false"></xref> class with a target data stream, the transformation to use, and the mode of the stream.
  syntax:
    content: public CryptoStream(IO.Stream stream, ICryptoTransform transform, CryptoStreamMode mode)
    content.vb: Public Sub New(stream As IO.Stream, transform As ICryptoTransform, mode As CryptoStreamMode)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: 'The stream on which to perform the cryptographic transformation. '
    - id: transform
      type: System.Security.Cryptography.ICryptoTransform
      description: 'The cryptographic transformation that is to be performed on the stream. '
    - id: mode
      type: System.Security.Cryptography.CryptoStreamMode
      description: 'One of the <xref href="System.Security.Cryptography.CryptoStreamMode" data-throw-if-not-resolved="false"></xref> values. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>stream</em> is not readable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>stream</em> is not writable."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>stream</em> is invalid."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CryptoStream.CanRead
  commentId: P:System.Security.Cryptography.CryptoStream.CanRead
  id: CanRead
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.Security.Cryptography.CryptoStream.CanRead
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanRead
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 52
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets a value indicating whether the current <xref href="System.Security.Cryptography.CryptoStream" data-throw-if-not-resolved="false"></xref> is readable.
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current stream is readable; otherwise, false.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.CryptoStream.CanSeek
  commentId: P:System.Security.Cryptography.CryptoStream.CanSeek
  id: CanSeek
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: CanSeek
  fullName: System.Security.Cryptography.CryptoStream.CanSeek
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanSeek
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 60
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets a value indicating whether you can seek within the current <xref href="System.Security.Cryptography.CryptoStream" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public override bool CanSeek { get; }
    content.vb: Public Overrides ReadOnly Property CanSeek As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: Always false.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.CryptoStream.CanWrite
  commentId: P:System.Security.Cryptography.CryptoStream.CanWrite
  id: CanWrite
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.Security.Cryptography.CryptoStream.CanWrite
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanWrite
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 66
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets a value indicating whether the current <xref href="System.Security.Cryptography.CryptoStream" data-throw-if-not-resolved="false"></xref> is writable.
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the current stream is writable; otherwise, false.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  commentId: P:System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  id: HasFlushedFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: HasFlushedFinalBlock
  fullName: System.Security.Cryptography.CryptoStream.HasFlushedFinalBlock
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasFlushedFinalBlock
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 83
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: 'Gets a value indicating whether the final buffer block has been written to the underlying stream. '
  syntax:
    content: public bool HasFlushedFinalBlock { get; }
    content.vb: Public ReadOnly Property HasFlushedFinalBlock As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: 'true if the final block has been flushed; otherwise, false. '
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.CryptoStream.Length
  commentId: P:System.Security.Cryptography.CryptoStream.Length
  id: Length
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.Security.Cryptography.CryptoStream.Length
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 72
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets the length in bytes of the stream.
  syntax:
    content: public override long Length { get; }
    content.vb: Public Overrides ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: This property is not supported.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'This property is not supported. '
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Cryptography.CryptoStream.Position
  commentId: P:System.Security.Cryptography.CryptoStream.Position
  id: Position
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Position
  fullName: System.Security.Cryptography.CryptoStream.Position
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Position
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 77
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets or sets the position within the current stream.
  syntax:
    content: public override long Position { get; set; }
    content.vb: Public Overrides Property Position As Long
    parameters: []
    return:
      type: System.Int64
      description: This property is not supported.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'This property is not supported. '
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.CryptoStream.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 515
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Releases the unmanaged resources used by the <xref href="System.Security.Cryptography.CryptoStream" data-throw-if-not-resolved="false"></xref> and optionally releases the managed resources.
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: 'true to release both managed and unmanaged resources; false to release only unmanaged resources. '
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Security.Cryptography.CryptoStream.Flush
  commentId: M:System.Security.Cryptography.CryptoStream.Flush
  id: Flush
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: System.Security.Cryptography.CryptoStream.Flush()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 139
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Clears all buffers for the current stream and causes any buffered data to be written to the underlying device.
  syntax:
    content: public override void Flush()
    content.vb: Public Overrides Sub Flush
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  commentId: M:System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: FlushAsync(Threading.CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.FlushAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushAsync
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 45
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Clears all buffers for the current stream asynchronously, causes any buffered data to be written to the underlying device, and monitors cancellation requests.
  syntax:
    content: public override Threading.Tasks.Task FlushAsync(Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function FlushAsync(cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref href="System.Threading.CancellationToken.None" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous flush operation.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream has been disposed.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CryptoStream.FlushFinalBlock
  commentId: M:System.Security.Cryptography.CryptoStream.FlushFinalBlock
  id: FlushFinalBlock
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: FlushFinalBlock()
  fullName: System.Security.Cryptography.CryptoStream.FlushFinalBlock()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FlushFinalBlock
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 99
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Updates the underlying data source or repository with the current state of the buffer, then clears the buffer.
  syntax:
    content: public void FlushFinalBlock()
    content.vb: Public Sub FlushFinalBlock
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: 'The key is corrupt which can cause invalid padding to the stream. '
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The current stream is not writable.-or- The final block has already been transformed. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.CryptoStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Read(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.CryptoStream.Read(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 214
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
  syntax:
    content: public override int Read(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Function Read(buffer As Byte(), offset As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: 'An array of bytes. A maximum of <em>count</em> bytes are read from the current stream and stored in <em>buffer</em>. '
    - id: offset
      type: System.Int32
      description: 'The byte offset in <em>buffer</em> at which to begin storing the data read from the current stream. '
    - id: count
      type: System.Int32
      description: 'The maximum number of bytes to be read from the current stream. '
    return:
      type: System.Int32
      description: The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero if the end of the stream has been reached.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The <xref href="System.Security.Cryptography.CryptoStreamMode" data-throw-if-not-resolved="false"></xref> associated with current <xref href="System.Security.Cryptography.CryptoStream" data-throw-if-not-resolved="false"></xref> object does not match the underlying stream.  For example, this exception is thrown when using <xref href="System.Security.Cryptography.CryptoStreamMode.Read" data-throw-if-not-resolved="false"></xref> with an underlying stream that is write only.  '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: 'The <em>offset</em> parameter is less than zero.-or- The <em>count</em> parameter is less than zero. '
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'Thesum of the <em>count</em> and <em>offset</em> parameters is longer than the length of the buffer. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.CryptoStream.Read(System.Byte(), System.Int32, System.Int32)
  name.vb: Read(Byte(), Int32, Int32)
- uid: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: ReadAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 48
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Reads a sequence of bytes from the current stream asynchronously, advances the position within the stream by the number of bytes read, and monitors cancellation requests.
  syntax:
    content: public override Threading.Tasks.Task<int> ReadAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function ReadAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write the data into.
    - id: offset
      type: System.Int32
      description: The byte offset in <em>buffer</em> at which to begin writing data from the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to read.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref href="System.Threading.CancellationToken.None" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: 'A task that represents the asynchronous read operation. The value of the task object''s <em>TResult</em> parameter contains the total number of bytes read into the buffer. The result can be less than the number of bytes requested if the number of bytes currently available is less than the requested number, or it can be 0 (zero) if the end of the stream has been reached. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>buffer</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> or <em>count</em> is negative."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The stream does not support reading.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The stream is currently in use by a previous read operation. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.CryptoStream.ReadAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: ReadAsync(Byte(), Int32, Int32, Threading.CancellationToken)
- uid: System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  commentId: M:System.Security.Cryptography.CryptoStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Seek(Int64, IO.SeekOrigin)
  fullName: System.Security.Cryptography.CryptoStream.Seek(System.Int64, System.IO.SeekOrigin)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Seek
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 49
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Sets the position within the current stream.
  syntax:
    content: public override long Seek(long offset, IO.SeekOrigin origin)
    content.vb: Public Overrides Function Seek(offset As Long, origin As IO.SeekOrigin) As Long
    parameters:
    - id: offset
      type: System.Int64
      description: 'A byte offset relative to the <em>origin</em> parameter. '
    - id: origin
      type: System.IO.SeekOrigin
      description: 'A <xref href="System.IO.SeekOrigin" data-throw-if-not-resolved="false"></xref> object indicating the reference point used to obtain the new position. '
    return:
      type: System.Int64
      description: This method is not supported.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'This method is not supported. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  commentId: M:System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: SetLength(Int64)
  fullName: System.Security.Cryptography.CryptoStream.SetLength(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetLength
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 149
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Sets the length of the current stream.
  syntax:
    content: public override void SetLength(long value)
    content.vb: Public Overrides Sub SetLength(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: 'The desired length of the current stream in bytes. '
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This property exists only to support inheritance from <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref>, and cannot be used.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.CryptoStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: Write(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.CryptoStream.Write(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Write
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/CryptoStream.cs
    startLine: 397
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Writes a sequence of bytes to the current <xref href="System.Security.Cryptography.CryptoStream" data-throw-if-not-resolved="false"></xref> and advances the current position within the stream by the number of bytes written.
  syntax:
    content: public override void Write(byte[] buffer, int offset, int count)
    content.vb: Public Overrides Sub Write(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: 'An array of bytes. This method copies <em>count</em> bytes from <em>buffer</em> to the current stream. '
    - id: offset
      type: System.Int32
      description: 'The byte offset in <em>buffer</em> at which to begin copying bytes to the current stream. '
    - id: count
      type: System.Int32
      description: 'The number of bytes to be written to the current stream. '
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The <xref href="System.Security.Cryptography.CryptoStreamMode" data-throw-if-not-resolved="false"></xref> associated with current <xref href="System.Security.Cryptography.CryptoStream" data-throw-if-not-resolved="false"></xref> object does not match the underlying stream.  For example, this exception is thrown when using <xref href="System.Security.Cryptography.CryptoStreamMode.Write" data-throw-if-not-resolved="false"></xref>  with an underlying stream that is read only.  '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: 'The <em>offset</em> parameter is less than zero.-or- The <em>count</em> parameter is less than zero. '
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The sum of the <em>count</em> and <em>offset</em> parameters is longer than the length of the buffer. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.CryptoStream.Write(System.Byte(), System.Int32, System.Int32)
  name.vb: Write(Byte(), Int32, Int32)
- uid: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.Security.Cryptography.CryptoStream
  langs:
  - csharp
  - vb
  name: WriteAsync(Byte[], Int32, Int32, Threading.CancellationToken)
  fullName: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte[], System.Int32, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteAsync
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 52
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Writes a sequence of bytes to the current stream asynchronously, advances the current position within the stream by the number of bytes written, and monitors cancellation requests.
  syntax:
    content: public override Threading.Tasks.Task WriteAsync(byte[] buffer, int offset, int count, Threading.CancellationToken cancellationToken)
    content.vb: Public Overrides Function WriteAsync(buffer As Byte(), offset As Integer, count As Integer, cancellationToken As Threading.CancellationToken) As Threading.Tasks.Task
    parameters:
    - id: buffer
      type: System.Byte[]
      description: The buffer to write data from.
    - id: offset
      type: System.Int32
      description: The zero-based byte offset in <em>buffer</em> from which to begin writing bytes to the stream.
    - id: count
      type: System.Int32
      description: The maximum number of bytes to write.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to monitor for cancellation requests. The default value is <xref href="System.Threading.CancellationToken.None" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous write operation.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>buffer</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> or <em>count</em> is negative."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The sum of <em>offset</em> and <em>count</em> is larger than the buffer length.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The stream does not support writing.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The stream has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The stream is currently in use by a previous write operation. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.Cryptography.CryptoStream.WriteAsync(System.Byte(), System.Int32, System.Int32, System.Threading.CancellationToken)
  name.vb: WriteAsync(Byte(), Int32, Int32, Threading.CancellationToken)
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Security.Cryptography.CryptoStreamMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptoStreamMode
  fullName: System.Security.Cryptography.CryptoStreamMode
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.Int32}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Threading.Tasks.Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: false
  name: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
