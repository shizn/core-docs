items:
- uid: System.Threading.Semaphore
  commentId: T:System.Threading.Semaphore
  id: Semaphore
  parent: System.Threading
  children:
  - System.Threading.Semaphore.#ctor(System.Int32,System.Int32)
  - System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)
  - System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)
  - System.Threading.Semaphore.OpenExisting(System.String)
  - System.Threading.Semaphore.Release
  - System.Threading.Semaphore.Release(System.Int32)
  - System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)
  langs:
  - csharp
  - vb
  name: Semaphore
  fullName: System.Threading.Semaphore
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Semaphore.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Semaphore
    path: src/mscorlib/src/System/Threading/Semaphore.cs
    startLine: 13
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'Limits the number of threads that can access a resource or pool of resources concurrently. '
  syntax:
    content: 'public sealed class Semaphore : WaitHandle'
    content.vb: >-
      Public NotInheritable Class Semaphore
          Inherits WaitHandle
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32)
  commentId: M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Threading.Semaphore
  langs:
  - csharp
  - vb
  name: Semaphore(Int32, Int32)
  fullName: System.Threading.Semaphore.Semaphore(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Semaphore.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Semaphore.cs
    startLine: 15
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'Initializes a new instance of the <xref href="System.Threading.Semaphore" data-throw-if-not-resolved="false"></xref> class, specifying the initial number of entries and the maximum number of concurrent entries. '
  syntax:
    content: public Semaphore(int initialCount, int maximumCount)
    content.vb: Public Sub New(initialCount As Integer, maximumCount As Integer)
    parameters:
    - id: initialCount
      type: System.Int32
      description: 'The initial number of requests for the semaphore that can be granted concurrently. '
    - id: maximumCount
      type: System.Int32
      description: 'The maximum number of requests for the semaphore that can be granted concurrently. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>initialCount</em> is greater than <em>maximumCount</em>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>maximumCount</em> is less than 1.-or-<em>initialCount</em> is less than 0."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)
  commentId: M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String)
  id: '#ctor(System.Int32,System.Int32,System.String)'
  parent: System.Threading.Semaphore
  langs:
  - csharp
  - vb
  name: Semaphore(Int32, Int32, String)
  fullName: System.Threading.Semaphore.Semaphore(System.Int32, System.Int32, System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Semaphore.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Semaphore.cs
    startLine: 18
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'Initializes a new instance of the <xref href="System.Threading.Semaphore" data-throw-if-not-resolved="false"></xref> class, specifying the initial number of entries and the maximum number of concurrent entries, and optionally specifying the name of a system semaphore object. '
  syntax:
    content: public Semaphore(int initialCount, int maximumCount, string name)
    content.vb: Public Sub New(initialCount As Integer, maximumCount As Integer, name As String)
    parameters:
    - id: initialCount
      type: System.Int32
      description: 'The initial number of requests for the semaphore that can be granted concurrently. '
    - id: maximumCount
      type: System.Int32
      description: The maximum number of requests for the semaphore that can be granted concurrently.
    - id: name
      type: System.String
      description: The name of a named system semaphore object.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>initialCount</em> is greater than <em>maximumCount</em>.-or-<em>name</em> is longer than 260 characters."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>maximumCount</em> is less than 1.-or-<em>initialCount</em> is less than 0."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: A Win32 error occurred.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The named semaphore exists and has access control security, and the user does not have <xref href="System.Security.AccessControl.SemaphoreRights.FullControl" data-throw-if-not-resolved="false"></xref>.
  - type: System.Threading.WaitHandleCannotBeOpenedException
    commentId: T:System.Threading.WaitHandleCannotBeOpenedException
    description: The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)
  commentId: M:System.Threading.Semaphore.#ctor(System.Int32,System.Int32,System.String,System.Boolean@)
  id: '#ctor(System.Int32,System.Int32,System.String,System.Boolean@)'
  parent: System.Threading.Semaphore
  langs:
  - csharp
  - vb
  name: Semaphore(Int32, Int32, String, out Boolean)
  fullName: System.Threading.Semaphore.Semaphore(System.Int32, System.Int32, System.String, out System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Semaphore.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Semaphore.cs
    startLine: 51
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.Semaphore" data-throw-if-not-resolved="false"></xref> class, specifying the initial number of entries and the maximum number of concurrent entries, optionally specifying the name of a system semaphore object, and specifying a variable that receives a value indicating whether a new system semaphore was created.
  syntax:
    content: public Semaphore(int initialCount, int maximumCount, string name, out bool createdNew)
    content.vb: Public Sub New(initialCount As Integer, maximumCount As Integer, name As String, ByRef createdNew As Boolean)
    parameters:
    - id: initialCount
      type: System.Int32
      description: 'The initial number of requests for the semaphore that can be satisfied concurrently. '
    - id: maximumCount
      type: System.Int32
      description: The maximum number of requests for the semaphore that can be satisfied concurrently.
    - id: name
      type: System.String
      description: The name of a named system semaphore object.
    - id: createdNew
      type: System.Boolean
      description: When this method returns, contains true if a local semaphore was created (that is, if <em>name</em> is null or an empty string) or if the specified named system semaphore was created; false if the specified named system semaphore already existed. This parameter is passed uninitialized.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>initialCount</em> is greater than <em>maximumCount</em>. -or-<em>name</em> is longer than 260 characters."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>maximumCount</em> is less than 1.-or-<em>initialCount</em> is less than 0."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: A Win32 error occurred.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The named semaphore exists and has access control security, and the user does not have <xref href="System.Security.AccessControl.SemaphoreRights.FullControl" data-throw-if-not-resolved="false"></xref>.
  - type: System.Threading.WaitHandleCannotBeOpenedException
    commentId: T:System.Threading.WaitHandleCannotBeOpenedException
    description: The named semaphore cannot be created, perhaps because a wait handle of a different type has the same name.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Semaphore.Semaphore(System.Int32, System.Int32, System.String, ByRef System.Boolean)
  name.vb: Semaphore(Int32, Int32, String, ByRef Boolean)
- uid: System.Threading.Semaphore.OpenExisting(System.String)
  commentId: M:System.Threading.Semaphore.OpenExisting(System.String)
  id: OpenExisting(System.String)
  parent: System.Threading.Semaphore
  langs:
  - csharp
  - vb
  name: OpenExisting(String)
  fullName: System.Threading.Semaphore.OpenExisting(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Semaphore.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OpenExisting
    path: src/mscorlib/src/System/Threading/Semaphore.cs
    startLine: 109
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Opens the specified named semaphore, if it already exists.
  syntax:
    content: public static Semaphore OpenExisting(string name)
    content.vb: Public Shared Function OpenExisting(name As String) As Semaphore
    parameters:
    - id: name
      type: System.String
      description: The name of the system semaphore to open.
    return:
      type: System.Threading.Semaphore
      description: An object that represents the named system semaphore.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>name</em> is an empty string.-or-<em>name</em> is longer than 260 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null."
  - type: System.Threading.WaitHandleCannotBeOpenedException
    commentId: T:System.Threading.WaitHandleCannotBeOpenedException
    description: The named semaphore does not exist.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: A Win32 error occurred.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: 'The named semaphore exists, but the user does not have the security access required to use it. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Semaphore.Release
  commentId: M:System.Threading.Semaphore.Release
  id: Release
  parent: System.Threading.Semaphore
  langs:
  - csharp
  - vb
  name: Release()
  fullName: System.Threading.Semaphore.Release()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Semaphore.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Release
    path: src/mscorlib/src/System/Threading/Semaphore.cs
    startLine: 173
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Exits the semaphore and returns the previous count.
  syntax:
    content: public int Release()
    content.vb: Public Function Release As Integer
    return:
      type: System.Int32
      description: 'The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release"></see> method was called. '
  exceptions:
  - type: System.Threading.SemaphoreFullException
    commentId: T:System.Threading.SemaphoreFullException
    description: The semaphore count is already at the maximum value.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: A Win32 error occurred with a named semaphore.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The current semaphore represents a named system semaphore, but the user does not have <xref href="System.Security.AccessControl.SemaphoreRights.Modify" data-throw-if-not-resolved="false"></xref>.-or-The current semaphore represents a named system semaphore, but it was not opened with <xref href="System.Security.AccessControl.SemaphoreRights.Modify" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Semaphore.Release(System.Int32)
  commentId: M:System.Threading.Semaphore.Release(System.Int32)
  id: Release(System.Int32)
  parent: System.Threading.Semaphore
  langs:
  - csharp
  - vb
  name: Release(Int32)
  fullName: System.Threading.Semaphore.Release(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Semaphore.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Release
    path: src/mscorlib/src/System/Threading/Semaphore.cs
    startLine: 179
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Exits the semaphore a specified number of times and returns the previous count.
  syntax:
    content: public int Release(int releaseCount)
    content.vb: Public Function Release(releaseCount As Integer) As Integer
    parameters:
    - id: releaseCount
      type: System.Int32
      description: The number of times to exit the semaphore.
    return:
      type: System.Int32
      description: 'The count on the semaphore before the <see cref="Overload:System.Threading.Semaphore.Release"></see> method was called. '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>releaseCount</em> is less than 1."
  - type: System.Threading.SemaphoreFullException
    commentId: T:System.Threading.SemaphoreFullException
    description: The semaphore count is already at the maximum value.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: A Win32 error occurred with a named semaphore.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The current semaphore represents a named system semaphore, but the user does not have <xref href="System.Security.AccessControl.SemaphoreRights.Modify" data-throw-if-not-resolved="false"></xref> rights.-or-The current semaphore represents a named system semaphore, but it was not opened with <xref href="System.Security.AccessControl.SemaphoreRights.Modify" data-throw-if-not-resolved="false"></xref> rights.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)
  commentId: M:System.Threading.Semaphore.TryOpenExisting(System.String,System.Threading.Semaphore@)
  id: TryOpenExisting(System.String,System.Threading.Semaphore@)
  parent: System.Threading.Semaphore
  langs:
  - csharp
  - vb
  name: TryOpenExisting(String, out Semaphore)
  fullName: System.Threading.Semaphore.TryOpenExisting(System.String, out System.Threading.Semaphore)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Semaphore.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryOpenExisting
    path: src/mscorlib/src/System/Threading/Semaphore.cs
    startLine: 127
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Opens the specified named semaphore, if it already exists, and returns a value that indicates whether the operation succeeded.
  syntax:
    content: public static bool TryOpenExisting(string name, out Semaphore result)
    content.vb: Public Shared Function TryOpenExisting(name As String, ByRef result As Semaphore) As Boolean
    parameters:
    - id: name
      type: System.String
      description: The name of the system semaphore to open.
    - id: result
      type: System.Threading.Semaphore
      description: When this method returns, contains a <xref href="System.Threading.Semaphore" data-throw-if-not-resolved="false"></xref> object that represents the named semaphore if the call succeeded, or null if the call failed. This parameter is treated as uninitialized.
    return:
      type: System.Boolean
      description: true if the named semaphore was opened successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>name</em> is an empty string.-or-<em>name</em> is longer than 260 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: A Win32 error occurred.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: 'The named semaphore exists, but the user does not have the security access required to use it. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Semaphore.TryOpenExisting(System.String, ByRef System.Threading.Semaphore)
  name.vb: TryOpenExisting(String, ByRef Semaphore)
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.Semaphore
  parent: System.Threading
  isExternal: false
  name: Semaphore
  fullName: System.Threading.Semaphore
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.UnauthorizedAccessException
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.Threading.WaitHandleCannotBeOpenedException
  isExternal: false
  name: WaitHandleCannotBeOpenedException
  fullName: System.Threading.WaitHandleCannotBeOpenedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Threading.SemaphoreFullException
  isExternal: false
  name: SemaphoreFullException
  fullName: System.Threading.SemaphoreFullException
