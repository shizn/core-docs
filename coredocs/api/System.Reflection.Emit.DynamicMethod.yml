items:
- uid: System.Reflection.Emit.DynamicMethod
  commentId: T:System.Reflection.Emit.DynamicMethod
  id: DynamicMethod
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)
  - System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)
  - System.Reflection.Emit.DynamicMethod.Attributes
  - System.Reflection.Emit.DynamicMethod.CallingConvention
  - System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)
  - System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)
  - System.Reflection.Emit.DynamicMethod.DeclaringType
  - System.Reflection.Emit.DynamicMethod.GetILGenerator
  - System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)
  - System.Reflection.Emit.DynamicMethod.GetParameters
  - System.Reflection.Emit.DynamicMethod.InitLocals
  - System.Reflection.Emit.DynamicMethod.MethodImplementationFlags
  - System.Reflection.Emit.DynamicMethod.Name
  - System.Reflection.Emit.DynamicMethod.ReturnParameter
  - System.Reflection.Emit.DynamicMethod.ReturnType
  - System.Reflection.Emit.DynamicMethod.ToString
  langs:
  - csharp
  - vb
  name: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DynamicMethod
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 20
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Defines and represents a dynamic method that can be compiled, executed, and discarded. Discarded methods are available for garbage collection.
  syntax:
    content: 'public sealed class DynamicMethod : MethodInfo, MethodInfo'
    content.vb: >-
      Public NotInheritable Class DynamicMethod
          Inherits MethodInfo
          Implements MethodInfo
  inheritance:
  - System.Object
  implements:
  - System.Reflection.MethodInfo
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  id: '#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Reflection.Module,System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Module, Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Reflection.Module, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 165
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Creates a dynamic method that is global to a module, specifying the method name, attributes, calling convention, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.
  syntax:
    content: public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility)
    content.vb: Public Sub New(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), m As  Module, skipVisibility As Boolean)
    parameters:
    - id: name
      type: System.String
      description: The name of the dynamic method. This can be a zero-length string, but it cannot be null.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: A bitwise combination of <xref href="System.Reflection.MethodAttributes" data-throw-if-not-resolved="false"></xref> values that specifies the attributes of the dynamic method. The only combination allowed is <xref href="System.Reflection.MethodAttributes.Public" data-throw-if-not-resolved="false"></xref> and <xref href="System.Reflection.MethodAttributes.Static" data-throw-if-not-resolved="false"></xref>.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention for the dynamic method. Must be <xref href="System.Reflection.CallingConventions.Standard" data-throw-if-not-resolved="false"></xref>.
    - id: returnType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that specifies the return type of the dynamic method, or null if the method has no return type. '
    - id: parameterTypes
      type: System.Type[]
      description: 'An array of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. '
    - id: m
      type: System.Reflection.Module
      description: 'A <xref href="System.Reflection.Module" data-throw-if-not-resolved="false"></xref> representing the module with which the dynamic method is to be logically associated. '
    - id: skipVisibility
      type: System.Boolean
      description: 'true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, false. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element of <em>parameterTypes</em> is null or <xref href="System.Void" data-throw-if-not-resolved="false"></xref>.-or-<em>m</em> is a module that provides anonymous hosting for dynamic methods.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null. -or-<em>m</em> is null."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<em>attributes</em> is a combination of flags other than <xref href=\"System.Reflection.MethodAttributes.Public\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>callingConvention</em> is not <xref href=\"System.Reflection.CallingConventions.Standard\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>returnType</em> is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns true. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type(), System.Reflection.Module, System.Boolean)
  name.vb: DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type(), Module, Boolean)
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)
  id: '#ctor(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type,System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type, Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 241
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Creates a dynamic method, specifying the method name, attributes, calling convention, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.
  syntax:
    content: public DynamicMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility)
    content.vb: Public Sub New(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)
    parameters:
    - id: name
      type: System.String
      description: The name of the dynamic method. This can be a zero-length string, but it cannot be null.
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: A bitwise combination of <xref href="System.Reflection.MethodAttributes" data-throw-if-not-resolved="false"></xref> values that specifies the attributes of the dynamic method. The only combination allowed is <xref href="System.Reflection.MethodAttributes.Public" data-throw-if-not-resolved="false"></xref> and <xref href="System.Reflection.MethodAttributes.Static" data-throw-if-not-resolved="false"></xref>.
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: The calling convention for the dynamic method. Must be <xref href="System.Reflection.CallingConventions.Standard" data-throw-if-not-resolved="false"></xref>.
    - id: returnType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that specifies the return type of the dynamic method, or null if the method has no return type. '
    - id: parameterTypes
      type: System.Type[]
      description: 'An array of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. '
    - id: owner
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.
    - id: skipVisibility
      type: System.Boolean
      description: true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element of <em>parameterTypes</em> is null or <xref href="System.Void" data-throw-if-not-resolved="false"></xref>. -or-<em>owner</em> is an interface, an array, an open generic type, or a type parameter of a generic type or method.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null. -or-<em>owner</em> is null."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<em>attributes</em> is a combination of flags other than <xref href=\"System.Reflection.MethodAttributes.Public\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>callingConvention</em> is not <xref href=\"System.Reflection.CallingConventions.Standard\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>returnType</em> is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns true. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type, System.Boolean)
  name.vb: DynamicMethod(String, MethodAttributes, CallingConventions, Type, Type(), Type, Boolean)
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[])
  id: '#ctor(System.String,System.Type,System.Type[])'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, Type, Type[])
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 74
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: 'Initializes an anonymously hosted dynamic method, specifying the method name, return type, and parameter types. '
  syntax:
    content: public DynamicMethod(string name, Type returnType, Type[] parameterTypes)
    content.vb: Public Sub New(name As String, returnType As Type, parameterTypes As Type())
    parameters:
    - id: name
      type: System.String
      description: 'The name of the dynamic method. This can be a zero-length string, but it cannot be null. '
    - id: returnType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that specifies the return type of the dynamic method, or null if the method has no return type. '
    - id: parameterTypes
      type: System.Type[]
      description: 'An array of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'An element of <em>parameterTypes</em> is null or <xref href="System.Void" data-throw-if-not-resolved="false"></xref>. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null. "
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<em>returnType</em> is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns true. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type())
  name.vb: DynamicMethod(String, Type, Type())
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Boolean)
  id: '#ctor(System.String,System.Type,System.Type[],System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, Type, Type[], Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type[], System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 94
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: 'Initializes an anonymously hosted dynamic method, specifying the method name, return type, parameter types, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method. '
  syntax:
    content: public DynamicMethod(string name, Type returnType, Type[] parameterTypes, bool restrictedSkipVisibility)
    content.vb: Public Sub New(name As String, returnType As Type, parameterTypes As Type(), restrictedSkipVisibility As Boolean)
    parameters:
    - id: name
      type: System.String
      description: 'The name of the dynamic method. This can be a zero-length string, but it cannot be null. '
    - id: returnType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that specifies the return type of the dynamic method, or null if the method has no return type. '
    - id: parameterTypes
      type: System.Type[]
      description: 'An array of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. '
    - id: restrictedSkipVisibility
      type: System.Boolean
      description: 'true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method, with this restriction: the trust level of the assemblies that contain those types and members must be equal to or less than the trust level of the call stack that emits the dynamic method; otherwise, false. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element of <em>parameterTypes</em> is null or <xref href="System.Void" data-throw-if-not-resolved="false"></xref>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null. "
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<em>returnType</em> is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns true. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type(), System.Boolean)
  name.vb: DynamicMethod(String, Type, Type(), Boolean)
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)
  id: '#ctor(System.String,System.Type,System.Type[],System.Reflection.Module)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, Type, Type[], Module)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type[], System.Reflection.Module)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 116
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, and module.
  syntax:
    content: public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m)
    content.vb: Public Sub New(name As String, returnType As Type, parameterTypes As Type(), m As  Module)
    parameters:
    - id: name
      type: System.String
      description: 'The name of the dynamic method. This can be a zero-length string, but it cannot be null. '
    - id: returnType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that specifies the return type of the dynamic method, or null if the method has no return type. '
    - id: parameterTypes
      type: System.Type[]
      description: 'An array of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. '
    - id: m
      type: System.Reflection.Module
      description: 'A <xref href="System.Reflection.Module" data-throw-if-not-resolved="false"></xref> representing the module with which the dynamic method is to be logically associated. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element of <em>parameterTypes</em> is null or <xref href="System.Void" data-throw-if-not-resolved="false"></xref>. -or-<em>m</em> is a module that provides anonymous hosting for dynamic methods.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null. -or-<em>m</em> is null."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<em>returnType</em> is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns true. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type(), System.Reflection.Module)
  name.vb: DynamicMethod(String, Type, Type(), Module)
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)
  id: '#ctor(System.String,System.Type,System.Type[],System.Reflection.Module,System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, Type, Type[], Module, Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type[], System.Reflection.Module, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 140
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Creates a dynamic method that is global to a module, specifying the method name, return type, parameter types, module, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.
  syntax:
    content: public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Module m, bool skipVisibility)
    content.vb: Public Sub New(name As String, returnType As Type, parameterTypes As Type(), m As  Module, skipVisibility As Boolean)
    parameters:
    - id: name
      type: System.String
      description: 'The name of the dynamic method. This can be a zero-length string, but it cannot be null. '
    - id: returnType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that specifies the return type of the dynamic method, or null if the method has no return type. '
    - id: parameterTypes
      type: System.Type[]
      description: 'An array of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. '
    - id: m
      type: System.Reflection.Module
      description: 'A <xref href="System.Reflection.Module" data-throw-if-not-resolved="false"></xref> representing the module with which the dynamic method is to be logically associated. '
    - id: skipVisibility
      type: System.Boolean
      description: 'true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element of <em>parameterTypes</em> is null or <xref href="System.Void" data-throw-if-not-resolved="false"></xref>. -or-<em>m</em> is a module that provides anonymous hosting for dynamic methods.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null. -or-<em>m</em> is null."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<em>returnType</em> is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns true. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type(), System.Reflection.Module, System.Boolean)
  name.vb: DynamicMethod(String, Type, Type(), Module, Boolean)
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type)
  id: '#ctor(System.String,System.Type,System.Type[],System.Type)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, Type, Type[], Type)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type[], System.Type)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 192
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Creates a dynamic method, specifying the method name, return type, parameter types, and the type with which the dynamic method is logically associated.
  syntax:
    content: public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner)
    content.vb: Public Sub New(name As String, returnType As Type, parameterTypes As Type(), owner As Type)
    parameters:
    - id: name
      type: System.String
      description: 'The name of the dynamic method. This can be a zero-length string, but it cannot be null. '
    - id: returnType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that specifies the return type of the dynamic method, or null if the method has no return type. '
    - id: parameterTypes
      type: System.Type[]
      description: 'An array of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. '
    - id: owner
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> with which the dynamic method is logically associated. The dynamic method has access to all members of the type. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'An element of <em>parameterTypes</em> is null or <xref href="System.Void" data-throw-if-not-resolved="false"></xref>.-or- <em>owner</em> is an interface, an array, an open generic type, or a type parameter of a generic type or method. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null. -or-<em>owner</em> is null."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<em>returnType</em> is null, or is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns true. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type(), System.Type)
  name.vb: DynamicMethod(String, Type, Type(), Type)
- uid: System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)
  commentId: M:System.Reflection.Emit.DynamicMethod.#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)
  id: '#ctor(System.String,System.Type,System.Type[],System.Type,System.Boolean)'
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DynamicMethod(String, Type, Type[], Type, Boolean)
  fullName: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type[], System.Type, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 216
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Creates a dynamic method, specifying the method name, return type, parameter types, the type with which the dynamic method is logically associated, and whether just-in-time (JIT) visibility checks should be skipped for types and members accessed by the Microsoft intermediate language (MSIL) of the dynamic method.
  syntax:
    content: public DynamicMethod(string name, Type returnType, Type[] parameterTypes, Type owner, bool skipVisibility)
    content.vb: Public Sub New(name As String, returnType As Type, parameterTypes As Type(), owner As Type, skipVisibility As Boolean)
    parameters:
    - id: name
      type: System.String
      description: 'The name of the dynamic method. This can be a zero-length string, but it cannot be null. '
    - id: returnType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that specifies the return type of the dynamic method, or null if the method has no return type. '
    - id: parameterTypes
      type: System.Type[]
      description: 'An array of <xref href="System.Type" data-throw-if-not-resolved="false"></xref> objects specifying the types of the parameters of the dynamic method, or null if the method has no parameters. '
    - id: owner
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> with which the dynamic method is logically associated. The dynamic method has access to all members of the type.
    - id: skipVisibility
      type: System.Boolean
      description: 'true to skip JIT visibility checks on types and members accessed by the MSIL of the dynamic method; otherwise, false. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An element of <em>parameterTypes</em> is null or <xref href="System.Void" data-throw-if-not-resolved="false"></xref>.-or- <em>owner</em> is an interface, an array, an open generic type, or a type parameter of a generic type or method.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null. -or-<em>owner</em> is null."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<em>returnType</em> is null, or is a type for which <xref href=\"System.Type.IsByRef\" data-throw-if-not-resolved=\"false\"></xref> returns true. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.DynamicMethod.DynamicMethod(System.String, System.Type, System.Type(), System.Type, System.Boolean)
  name.vb: DynamicMethod(String, Type, Type(), Type, Boolean)
- uid: System.Reflection.Emit.DynamicMethod.Attributes
  commentId: P:System.Reflection.Emit.DynamicMethod.Attributes
  id: Attributes
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.Emit.DynamicMethod.Attributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Attributes
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 616
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Gets the attributes specified when the dynamic method was created.
  syntax:
    content: public override MethodAttributes Attributes { get; }
    content.vb: Public Overrides ReadOnly Property Attributes As MethodAttributes
    parameters: []
    return:
      type: System.Reflection.MethodAttributes
      description: A bitwise combination of the <xref href="System.Reflection.MethodAttributes" data-throw-if-not-resolved="false"></xref> values representing the attributes for the method.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.DynamicMethod.CallingConvention
  commentId: P:System.Reflection.Emit.DynamicMethod.CallingConvention
  id: CallingConvention
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: CallingConvention
  fullName: System.Reflection.Emit.DynamicMethod.CallingConvention
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CallingConvention
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 618
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Gets the calling convention specified when the dynamic method was created.
  syntax:
    content: public override CallingConventions CallingConvention { get; }
    content.vb: Public Overrides ReadOnly Property CallingConvention As CallingConventions
    parameters: []
    return:
      type: System.Reflection.CallingConventions
      description: One of the <xref href="System.Reflection.CallingConventions" data-throw-if-not-resolved="false"></xref> values that indicates the calling convention of the method.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.DynamicMethod.DeclaringType
  commentId: P:System.Reflection.Emit.DynamicMethod.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: DeclaringType
  fullName: System.Reflection.Emit.DynamicMethod.DeclaringType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaringType
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 607
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Gets the type that declares the method, which is always null for dynamic methods.
  syntax:
    content: public override Type DeclaringType { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: System.Type
      description: Always null.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.DynamicMethod.InitLocals
  commentId: P:System.Reflection.Emit.DynamicMethod.InitLocals
  id: InitLocals
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: InitLocals
  fullName: System.Reflection.Emit.DynamicMethod.InitLocals
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InitLocals
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 833
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: 'Gets or sets a value indicating whether the local variables in the method are zero-initialized. '
  syntax:
    content: public bool InitLocals { get; set; }
    content.vb: Public Property InitLocals As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the local variables in the method are zero-initialized; otherwise, false. The default is true.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.DynamicMethod.Name
  commentId: P:System.Reflection.Emit.DynamicMethod.Name
  id: Name
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.Emit.DynamicMethod.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 605
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Gets the name of the dynamic method.
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: The simple name of the method.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.DynamicMethod.ReturnParameter
  commentId: P:System.Reflection.Emit.DynamicMethod.ReturnParameter
  id: ReturnParameter
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: ReturnParameter
  fullName: System.Reflection.Emit.DynamicMethod.ReturnParameter
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReturnParameter
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 770
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Gets the return parameter of the dynamic method.
  syntax:
    content: public override ParameterInfo ReturnParameter { get; }
    content.vb: Public Overrides ReadOnly Property ReturnParameter As ParameterInfo
    parameters: []
    return:
      type: System.Reflection.ParameterInfo
      description: 'Always null. '
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.DynamicMethod.ReturnType
  commentId: P:System.Reflection.Emit.DynamicMethod.ReturnType
  id: ReturnType
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: ReturnType
  fullName: System.Reflection.Emit.DynamicMethod.ReturnType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReturnType
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 768
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Gets the type of return value for the dynamic method.
  syntax:
    content: public override Type ReturnType { get; }
    content.vb: Public Overrides ReadOnly Property ReturnType As Type
    parameters: []
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> representing the type of the return value of the current method; <xref href="System.Void" data-throw-if-not-resolved="false"></xref> if the method has no return type.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)
  commentId: M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)
  id: CreateDelegate(System.Type)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: CreateDelegate(Type)
  fullName: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateDelegate
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 531
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Completes the dynamic method and creates a delegate that can be used to execute it.
  syntax:
    content: public override sealed Delegate CreateDelegate(Type delegateType)
    content.vb: 'Public NotOverridable Overrides Function CreateDelegate(delegateType As Type) As '
    parameters:
    - id: delegateType
      type: System.Type
      description: 'A delegate type whose signature matches that of the dynamic method. '
    return:
      type: System.Delegate
      description: A delegate of the specified type, which can be used to execute the dynamic method.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The dynamic method has no method body.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>delegateType</em> has the wrong number of parameters or the wrong parameter types."
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)
  commentId: M:System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type,System.Object)
  id: CreateDelegate(System.Type,System.Object)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: CreateDelegate(Type, Object)
  fullName: System.Reflection.Emit.DynamicMethod.CreateDelegate(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateDelegate
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 547
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Completes the dynamic method and creates a delegate that can be used to execute it, specifying the delegate type and an object the delegate is bound to.
  syntax:
    content: public override sealed Delegate CreateDelegate(Type delegateType, object target)
    content.vb: 'Public NotOverridable Overrides Function CreateDelegate(delegateType As Type, target As Object) As '
    parameters:
    - id: delegateType
      type: System.Type
      description: A delegate type whose signature matches that of the dynamic method, minus the first parameter.
    - id: target
      type: System.Object
      description: 'An object the delegate is bound to. Must be of the same type as the first parameter of the dynamic method. '
    return:
      type: System.Delegate
      description: A delegate of the specified type, which can be used to execute the dynamic method with the specified target object.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The dynamic method has no method body.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>target</em> is not the same type as the first parameter of the dynamic method, and is not assignable to that type.-or-<em>delegateType</em> has the wrong number of parameters or the wrong parameter types."
  modifiers.csharp:
  - public
  - override
  - sealed
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator
  commentId: M:System.Reflection.Emit.DynamicMethod.GetILGenerator
  id: GetILGenerator
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: GetILGenerator()
  fullName: System.Reflection.Emit.DynamicMethod.GetILGenerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetILGenerator
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 817
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Returns a Microsoft intermediate language (MSIL) generator for the method with a default MSIL stream size of 64 bytes.
  syntax:
    content: public ILGenerator GetILGenerator()
    content.vb: Public Function GetILGenerator As ILGenerator
    return:
      type: System.Reflection.Emit.ILGenerator
      description: An <xref href="System.Reflection.Emit.ILGenerator" data-throw-if-not-resolved="false"></xref> object for the method.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)
  commentId: M:System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)
  id: GetILGenerator(System.Int32)
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: GetILGenerator(Int32)
  fullName: System.Reflection.Emit.DynamicMethod.GetILGenerator(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetILGenerator
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 821
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Returns a Microsoft intermediate language (MSIL) generator for the method with the specified MSIL stream size.
  syntax:
    content: public ILGenerator GetILGenerator(int streamSize)
    content.vb: Public Function GetILGenerator(streamSize As Integer) As ILGenerator
    parameters:
    - id: streamSize
      type: System.Int32
      description: 'The size of the MSIL stream, in bytes. '
    return:
      type: System.Reflection.Emit.ILGenerator
      description: An <xref href="System.Reflection.Emit.ILGenerator" data-throw-if-not-resolved="false"></xref> object for the method, with the specified MSIL stream size.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.DynamicMethod.GetParameters
  commentId: M:System.Reflection.Emit.DynamicMethod.GetParameters
  id: GetParameters
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: GetParameters()
  fullName: System.Reflection.Emit.DynamicMethod.GetParameters()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetParameters
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 622
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Returns the parameters of the dynamic method.
  syntax:
    content: public override ParameterInfo[] GetParameters()
    content.vb: Public Overrides Function GetParameters As ParameterInfo()
    return:
      type: System.Reflection.ParameterInfo[]
      description: An array of <xref href="System.Reflection.ParameterInfo" data-throw-if-not-resolved="false"></xref> objects that represent the parameters of the dynamic method.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.DynamicMethod.ToString
  commentId: M:System.Reflection.Emit.DynamicMethod.ToString
  id: ToString
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Reflection.Emit.DynamicMethod.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Reflection/Emit/DynamicMethod.cs
    startLine: 603
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  summary: Returns the signature of the method, represented as a string.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A string representing the method signature.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.DynamicMethod.MethodImplementationFlags
  commentId: P:System.Reflection.Emit.DynamicMethod.MethodImplementationFlags
  id: MethodImplementationFlags
  parent: System.Reflection.Emit.DynamicMethod
  langs:
  - csharp
  - vb
  name: MethodImplementationFlags
  fullName: System.Reflection.Emit.DynamicMethod.MethodImplementationFlags
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit.Lightweight/ref/System.Reflection.Emit.Lightweight.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MethodImplementationFlags
    path: src/System.Reflection.Emit.Lightweight/ref/System.Reflection.Emit.Lightweight.Manual.cs
    startLine: 12
  assemblies:
  - System.Reflection.Emit.Lightweight
  namespace: System.Reflection.Emit
  syntax:
    content: public override MethodImplAttributes MethodImplementationFlags { get; }
    content.vb: Public Overrides ReadOnly Property MethodImplementationFlags As MethodImplAttributes
    parameters: []
    return:
      type: MethodImplAttributes
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  fullName: System.Reflection.Module
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  fullName: System.Delegate
- uid: System.Reflection.Emit.ILGenerator
  isExternal: false
  name: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.ParameterInfo[]
  isExternal: false
  name: ParameterInfo[]
  fullName: System.Reflection.ParameterInfo[]
  fullname.vb: System.Reflection.ParameterInfo()
  name.vb: ParameterInfo()
  spec.csharp:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: ()
    fullName: ()
- uid: MethodImplAttributes
  isExternal: true
  name: MethodImplAttributes
  fullName: MethodImplAttributes
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
