items:
- uid: System.Threading.SemaphoreSlim
  commentId: T:System.Threading.SemaphoreSlim
  id: SemaphoreSlim
  parent: System.Threading
  children:
  - System.Threading.SemaphoreSlim.#ctor(System.Int32)
  - System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)
  - System.Threading.SemaphoreSlim.AvailableWaitHandle
  - System.Threading.SemaphoreSlim.CurrentCount
  - System.Threading.SemaphoreSlim.Dispose
  - System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  - System.Threading.SemaphoreSlim.Release
  - System.Threading.SemaphoreSlim.Release(System.Int32)
  - System.Threading.SemaphoreSlim.Wait
  - System.Threading.SemaphoreSlim.Wait(System.Int32)
  - System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  - System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.WaitAsync
  - System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  - System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  - System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: SemaphoreSlim
  fullName: System.Threading.SemaphoreSlim
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SemaphoreSlim
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 41
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Represents a lightweight alternative to <xref href="System.Threading.Semaphore" data-throw-if-not-resolved="false"></xref> that limits the number of threads that can access a resource or pool of resources concurrently.
  syntax:
    content: 'public class SemaphoreSlim : IDisposable'
    content.vb: >-
      Public Class SemaphoreSlim
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.SemaphoreSlim.#ctor(System.Int32)
  commentId: M:System.Threading.SemaphoreSlim.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: SemaphoreSlim(Int32)
  fullName: System.Threading.SemaphoreSlim.SemaphoreSlim(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 159
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref> class, specifying the initial number of requests that can be granted concurrently.
  syntax:
    content: public SemaphoreSlim(int initialCount)
    content.vb: Public Sub New(initialCount As Integer)
    parameters:
    - id: initialCount
      type: System.Int32
      description: The initial number of requests for the semaphore that can be granted concurrently.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>initialCount</em> is less than 0."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)
  commentId: M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: SemaphoreSlim(Int32, Int32)
  fullName: System.Threading.SemaphoreSlim.SemaphoreSlim(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 176
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref> class, specifying the initial and maximum number of requests that can be granted concurrently.
  syntax:
    content: public SemaphoreSlim(int initialCount, int maxCount)
    content.vb: Public Sub New(initialCount As Integer, maxCount As Integer)
    parameters:
    - id: initialCount
      type: System.Int32
      description: The initial number of requests for the semaphore that can be granted concurrently.
    - id: maxCount
      type: System.Int32
      description: The maximum number of requests for the semaphore that can be granted concurrently.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>initialCount</em> is less than 0, or <em>initialCount</em> is greater than <em>maxCount</em>, or <em>maxCount</em> is equal to or less than 0."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.AvailableWaitHandle
  commentId: P:System.Threading.SemaphoreSlim.AvailableWaitHandle
  id: AvailableWaitHandle
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: AvailableWaitHandle
  fullName: System.Threading.SemaphoreSlim.AvailableWaitHandle
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AvailableWaitHandle
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 124
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Returns a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> that can be used to wait on the semaphore.
  syntax:
    content: public WaitHandle AvailableWaitHandle { get; }
    content.vb: Public ReadOnly Property AvailableWaitHandle As WaitHandle
    parameters: []
    return:
      type: System.Threading.WaitHandle
      description: A <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> that can be used to wait on the semaphore.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref> has been disposed.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.SemaphoreSlim.CurrentCount
  commentId: P:System.Threading.SemaphoreSlim.CurrentCount
  id: CurrentCount
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: CurrentCount
  fullName: System.Threading.SemaphoreSlim.CurrentCount
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentCount
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 106
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'Gets the number of remaining threads that can enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref> object. '
  syntax:
    content: public int CurrentCount { get; }
    content.vb: Public ReadOnly Property CurrentCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of remaining threads that can enter the semaphore.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.SemaphoreSlim.Dispose
  commentId: M:System.Threading.SemaphoreSlim.Dispose
  id: Dispose
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Threading.SemaphoreSlim.Dispose()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 845
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases all resources used by the current instance of the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  commentId: M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 861
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases the unmanaged resources used by the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, and optionally releases the managed resources.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: true to release both managed and unmanaged resources; false to release only unmanaged resources.
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Threading.SemaphoreSlim.Release
  commentId: M:System.Threading.SemaphoreSlim.Release
  id: Release
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Release()
  fullName: System.Threading.SemaphoreSlim.Release()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Release
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 739
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref> object once.
  syntax:
    content: public int Release()
    content.vb: Public Function Release As Integer
    return:
      type: System.Int32
      description: The previous count of the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.Threading.SemaphoreFullException
    commentId: T:System.Threading.SemaphoreFullException
    description: The <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref> has already reached its maximum size.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Release(System.Int32)
  commentId: M:System.Threading.SemaphoreSlim.Release(System.Int32)
  id: Release(System.Int32)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Release(Int32)
  fullName: System.Threading.SemaphoreSlim.Release(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Release
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 755
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref> object a specified number of times.
  syntax:
    content: public int Release(int releaseCount)
    content.vb: Public Function Release(releaseCount As Integer) As Integer
    parameters:
    - id: releaseCount
      type: System.Int32
      description: The number of times to exit the semaphore.
    return:
      type: System.Int32
      description: The previous count of the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>releaseCount</em> is less than 1."
  - type: System.Threading.SemaphoreFullException
    commentId: T:System.Threading.SemaphoreFullException
    description: The <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref> has already reached its maximum size.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Wait
  commentId: M:System.Threading.SemaphoreSlim.Wait
  id: Wait
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Wait()
  fullName: System.Threading.SemaphoreSlim.Wait()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 203
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Wait()
    content.vb: Public Sub Wait
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Wait(System.Int32)
  commentId: M:System.Threading.SemaphoreSlim.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Wait(Int32)
  fullName: System.Threading.SemaphoreSlim.Wait(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 291
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, using a 32-bit signed integer that specifies the timeout.
  syntax:
    content: public bool Wait(int millisecondsTimeout)
    content.vb: Public Function Wait(millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref>(-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the current thread successfully entered the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)
  id: Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Wait(Int32, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.Wait(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 309
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, using a 32-bit signed integer that specifies the timeout, while observing a <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref>(-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe.
    return:
      type: System.Boolean
      description: true if the current thread successfully entered the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<em>cancellationToken</em> was canceled."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref> instance has been disposed, or the <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created <em>cancellationToken</em> has been disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  commentId: M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  id: Wait(System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Wait(CancellationToken)
  fullName: System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 219
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, while observing a <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Wait(CancellationToken cancellationToken)
    content.vb: Public Sub Wait(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> token to observe.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<em>cancellationToken</em> was canceled."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.-or-The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created<em> cancellationToken</em> has already been disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  commentId: M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Wait(TimeSpan)
  fullName: System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 237
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, using a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> to specify the timeout.
  syntax:
    content: public bool Wait(TimeSpan timeout)
    content.vb: Public Function Wait(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the current thread successfully entered the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The semaphoreSlim instance has been disposed<em>.</em>
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  id: Wait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Wait(TimeSpan, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.Wait(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 267
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Blocks the current thread until it can enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, using a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that specifies the timeout, while observing a <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool Wait(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe.
    return:
      type: System.Boolean
      description: true if the current thread successfully entered the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<em>cancellationToken</em> was canceled."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The semaphoreSlim instance has been disposed<em>.</em><em>-or-</em>The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created <em>cancellationToken</em> has already been disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.WaitAsync
  commentId: M:System.Threading.SemaphoreSlim.WaitAsync
  id: WaitAsync
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: WaitAsync()
  fullName: System.Threading.SemaphoreSlim.WaitAsync()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAsync
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 478
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'Asynchronously waits to enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>. '
  syntax:
    content: public Tasks.Task WaitAsync()
    content.vb: Public Function WaitAsync As Tasks.Task
    return:
      type: System.Threading.Tasks.Task
      description: A task that will complete when the semaphore has been entered.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  id: WaitAsync(System.Int32)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: WaitAsync(Int32)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAsync
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 515
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'Asynchronously waits to enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, using a 32-bit signed integer to measure the time interval. '
  syntax:
    content: public Tasks.Task<bool> WaitAsync(int millisecondsTimeout)
    content.vb: Public Function WaitAsync(millisecondsTimeout As Integer) As Tasks.Task(Of Boolean)
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that will complete with a result of true if the current thread successfully entered the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, otherwise with a result of false.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)
  id: WaitAsync(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: WaitAsync(Int32, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAsync
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 596
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'Asynchronously waits to enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, using a 32-bit signed integer to measure the time interval, while observing a <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref>. '
  syntax:
    content: public Tasks.Task<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function WaitAsync(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Tasks.Task(Of Boolean)
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: 'A task that will complete with a result of true if the current thread successfully entered the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, otherwise with a result of false. '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out. "
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: 'The current instance has already been disposed. '
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<em>cancellationToken</em> was canceled. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  id: WaitAsync(System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: WaitAsync(CancellationToken)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAsync
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 494
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'Asynchronously waits to enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, while observing a <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref>. '
  syntax:
    content: public Tasks.Task WaitAsync(CancellationToken cancellationToken)
    content.vb: Public Function WaitAsync(cancellationToken As CancellationToken) As Tasks.Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> token to observe.
    return:
      type: System.Threading.Tasks.Task
      description: 'A task that will complete when the semaphore has been entered. '
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<em>cancellationToken</em> was canceled. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  id: WaitAsync(System.TimeSpan)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: WaitAsync(TimeSpan)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAsync
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 543
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Asynchronously waits to enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, using a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> to measure the time interval.
  syntax:
    content: public Tasks.Task<bool> WaitAsync(TimeSpan timeout)
    content.vb: Public Function WaitAsync(timeout As TimeSpan) As Tasks.Task(Of Boolean)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that will complete with a result of true if the current thread successfully entered the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, otherwise with a result of false.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The current instance has already been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: WaitAsync(TimeSpan, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAsync
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 564
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Asynchronously waits to enter the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, using a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> to measure the time interval, while observing a <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Tasks.Task<bool> WaitAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function WaitAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Tasks.Task(Of Boolean)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> token to observe.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A task that will complete with a result of true if the current thread successfully entered the <xref href="System.Threading.SemaphoreSlim" data-throw-if-not-resolved="false"></xref>, otherwise with a result of false.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out-or-timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<em>cancellationToken</em> was canceled. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task{System.Boolean}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Threading.Tasks.Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.Threading.SemaphoreFullException
  isExternal: false
  name: SemaphoreFullException
  fullName: System.Threading.SemaphoreFullException
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  fullName: System.OperationCanceledException
