items:
- uid: System.Security.Cryptography.HashAlgorithm
  commentId: T:System.Security.Cryptography.HashAlgorithm
  id: HashAlgorithm
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.HashAlgorithm.#ctor
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.HashFinal
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.Initialize
  langs:
  - csharp
  - vb
  name: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashAlgorithm
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 10
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Represents the base class from which all implementations of cryptographic hash algorithms must derive.
  syntax:
    content: 'public abstract class HashAlgorithm : IDisposable'
    content.vb: >-
      Public MustInherit Class HashAlgorithm
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.Cryptography.HashAlgorithm.#ctor
  commentId: M:System.Security.Cryptography.HashAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: HashAlgorithm()
  fullName: System.Security.Cryptography.HashAlgorithm.HashAlgorithm()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 12
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.HashAlgorithm" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: protected HashAlgorithm()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.HashAlgorithm.HashSize
  commentId: P:System.Security.Cryptography.HashAlgorithm.HashSize
  id: HashSize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: HashSize
  fullName: System.Security.Cryptography.HashAlgorithm.HashSize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashSize
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 16
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets the size, in bits, of the computed hash code.
  syntax:
    content: public virtual int HashSize { get; }
    content.vb: Public Overridable ReadOnly Property HashSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: The size, in bits, of the computed hash code.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  id: ComputeHash(System.Byte[])
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: ComputeHash(Byte[])
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ComputeHash
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 24
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified byte array.
  syntax:
    content: public byte[] ComputeHash(byte[] buffer)
    content.vb: Public Function ComputeHash(buffer As Byte()) As Byte()
    parameters:
    - id: buffer
      type: System.Byte[]
      description: 'The input to compute the hash code for. '
    return:
      type: System.Byte[]
      description: The computed hash code.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>buffer</em> is null."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The object has already been disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte())
  name.vb: ComputeHash(Byte())
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  id: ComputeHash(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: ComputeHash(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ComputeHash
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 35
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified region of the specified byte array.
  syntax:
    content: public byte[] ComputeHash(byte[] buffer, int offset, int count)
    content.vb: Public Function ComputeHash(buffer As Byte(), offset As Integer, count As Integer) As Byte()
    parameters:
    - id: buffer
      type: System.Byte[]
      description: 'The input to compute the hash code for. '
    - id: offset
      type: System.Int32
      description: 'The offset into the byte array from which to begin using data. '
    - id: count
      type: System.Int32
      description: 'The number of bytes in the array to use as data. '
    return:
      type: System.Byte[]
      description: The computed hash code.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>count</em> is an invalid value.-or-<em>buffer</em> length is invalid."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>buffer</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> is out of range. This parameter requires a non-negative number."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The object has already been disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte(), System.Int32, System.Int32)
  name.vb: ComputeHash(Byte(), Int32, Int32)
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  id: ComputeHash(System.IO.Stream)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: ComputeHash(IO.Stream)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ComputeHash
    path: src/System.Security.Cryptography.Primitives/ref/System.Security.Cryptography.Primitives.cs
    startLine: 65
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Computes the hash value for the specified <xref href="System.IO.Stream" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public byte[] ComputeHash(IO.Stream inputStream)
    content.vb: Public Function ComputeHash(inputStream As IO.Stream) As Byte()
    parameters:
    - id: inputStream
      type: System.IO.Stream
      description: 'The input to compute the hash code for. '
    return:
      type: System.Byte[]
      description: The computed hash code.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The object has already been disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.HashAlgorithm.Dispose
  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 78
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Releases all resources used by the current instance of the <xref href="System.Security.Cryptography.HashAlgorithm" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 84
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Releases the unmanaged resources used by the <xref href="System.Security.Cryptography.HashAlgorithm" data-throw-if-not-resolved="false"></xref> and optionally releases the managed resources.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: 'true to release both managed and unmanaged resources; false to release only unmanaged resources. '
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: HashCore(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashCore
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 96
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, routes data written to the object into the hash algorithm for computing the hash.
  syntax:
    content: protected abstract void HashCore(byte[] array, int ibStart, int cbSize)
    content.vb: Protected MustOverride Sub HashCore(array As Byte(), ibStart As Integer, cbSize As Integer)
    parameters:
    - id: array
      type: System.Byte[]
      description: 'The input to compute the hash code for. '
    - id: ibStart
      type: System.Int32
      description: 'The offset into the byte array from which to begin using data. '
    - id: cbSize
      type: System.Int32
      description: 'The number of bytes in the byte array to use as data. '
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: System.Security.Cryptography.HashAlgorithm.HashCore(System.Byte(), System.Int32, System.Int32)
  name.vb: HashCore(Byte(), Int32, Int32)
- uid: System.Security.Cryptography.HashAlgorithm.HashFinal
  commentId: M:System.Security.Cryptography.HashAlgorithm.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: HashFinal()
  fullName: System.Security.Cryptography.HashAlgorithm.HashFinal()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashFinal
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 97
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, finalizes the hash computation after the last data is processed by the cryptographic stream object.
  syntax:
    content: protected abstract byte[] HashFinal()
    content.vb: Protected MustOverride Function HashFinal As Byte()
    return:
      type: System.Byte[]
      description: The computed hash code.
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: System.Security.Cryptography.HashAlgorithm.Initialize
  commentId: M:System.Security.Cryptography.HashAlgorithm.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HashAlgorithm
  langs:
  - csharp
  - vb
  name: Initialize()
  fullName: System.Security.Cryptography.HashAlgorithm.Initialize()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Initialize
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithm.cs
    startLine: 98
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Initializes an implementation of the <xref href="System.Security.Cryptography.HashAlgorithm" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public abstract void Initialize()
    content.vb: Public MustOverride Sub Initialize
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: IO.Stream
  fullName: System.IO.Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
