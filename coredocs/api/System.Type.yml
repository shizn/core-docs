items:
- uid: System.Type
  commentId: T:System.Type
  id: Type
  parent: System
  children:
  - System.Type.AssemblyQualifiedName
  - System.Type.DeclaringType
  - System.Type.Delimiter
  - System.Type.EmptyTypes
  - System.Type.Equals(System.Object)
  - System.Type.Equals(System.Type)
  - System.Type.FullName
  - System.Type.GenericParameterPosition
  - System.Type.GenericTypeArguments
  - System.Type.GetArrayRank
  - System.Type.GetElementType
  - System.Type.GetGenericTypeDefinition
  - System.Type.GetHashCode
  - System.Type.GetType(System.String)
  - System.Type.GetType(System.String,System.Boolean)
  - System.Type.GetType(System.String,System.Boolean,System.Boolean)
  - System.Type.GetTypeCode(System.Type)
  - System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  - System.Type.HasElementType
  - System.Type.IsArray
  - System.Type.IsByRef
  - System.Type.IsConstructedGenericType
  - System.Type.IsGenericParameter
  - System.Type.IsNested
  - System.Type.IsPointer
  - System.Type.MakeArrayType
  - System.Type.MakeArrayType(System.Int32)
  - System.Type.MakeByRefType
  - System.Type.MakeGenericType(System.Type[])
  - System.Type.MakePointerType
  - System.Type.Missing
  - System.Type.Name
  - System.Type.Namespace
  - System.Type.ToString
  - System.Type.TypeHandle
  langs:
  - csharp
  - vb
  name: Type
  fullName: System.Type
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Type
    path: src/mscorlib/src/System/Type.cs
    startLine: 30
  assemblies:
  - System.Runtime
  namespace: System
  summary: 'Represents type declarations: class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.To browse the .NET Framework source code for this type, see the Reference Source.'
  syntax:
    content: public abstract class Type
    content.vb: Public MustInherit Class Type
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Type.EmptyTypes
  commentId: F:System.Type.EmptyTypes
  id: EmptyTypes
  parent: System.Type
  langs:
  - csharp
  - vb
  name: EmptyTypes
  fullName: System.Type.EmptyTypes
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EmptyTypes
    path: src/mscorlib/src/System/Type.cs
    startLine: 49
  assemblies:
  - System.Runtime
  namespace: System
  summary: Represents an empty array of type <xref href="System.Type" data-throw-if-not-resolved="false"></xref>. This field is read-only.
  syntax:
    content: public static readonly Type[] EmptyTypes
    content.vb: Public Shared ReadOnly EmptyTypes As Type()
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Type.Missing
  commentId: F:System.Type.Missing
  id: Missing
  parent: System.Type
  langs:
  - csharp
  - vb
  name: Missing
  fullName: System.Type.Missing
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Missing
    path: src/mscorlib/src/System/Type.cs
    startLine: 44
  assemblies:
  - System.Runtime
  namespace: System
  summary: Represents a missing value in the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> information. This field is read-only.
  syntax:
    content: public static readonly object Missing
    content.vb: Public Shared ReadOnly Missing As Object
    return:
      type: System.Object
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Type.Delimiter
  commentId: F:System.Type.Delimiter
  id: Delimiter
  parent: System.Type
  langs:
  - csharp
  - vb
  name: Delimiter
  fullName: System.Type.Delimiter
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delimiter
    path: src/mscorlib/src/System/Type.cs
    startLine: 46
  assemblies:
  - System.Runtime
  namespace: System
  summary: Separates names in the namespace of the <xref href="System.Type" data-throw-if-not-resolved="false"></xref>. This field is read-only.
  syntax:
    content: public static readonly char Delimiter
    content.vb: Public Shared ReadOnly Delimiter As Char
    return:
      type: System.Char
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Type.AssemblyQualifiedName
  commentId: P:System.Type.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Type
  langs:
  - csharp
  - vb
  name: AssemblyQualifiedName
  fullName: System.Type.AssemblyQualifiedName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AssemblyQualifiedName
    path: src/mscorlib/src/System/Type.cs
    startLine: 367
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the assembly-qualified name of the type, which includes the name of the assembly from which this <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object was loaded.
  syntax:
    content: public abstract string AssemblyQualifiedName { get; }
    content.vb: Public MustOverride ReadOnly Property AssemblyQualifiedName As String
    parameters: []
    return:
      type: System.String
      description: The assembly-qualified name of the <xref href="System.Type" data-throw-if-not-resolved="false"></xref>, which includes the name of the assembly from which the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> was loaded, or null if the current instance represents a generic type parameter.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.FullName
  commentId: P:System.Type.FullName
  id: FullName
  parent: System.Type
  langs:
  - csharp
  - vb
  name: FullName
  fullName: System.Type.FullName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullName
    path: src/mscorlib/src/System/Type.cs
    startLine: 355
  assemblies:
  - System.Runtime
  namespace: System
  summary: 'Gets the fully qualified name of the type, including its namespace but not its assembly. '
  syntax:
    content: public abstract string FullName { get; }
    content.vb: Public MustOverride ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
      description: The fully qualified name of the type, including its namespace but not its assembly; or null if the current instance represents a generic type parameter, an array type, pointer type, or byref type based on a type parameter, or a generic type that is not a generic type definition but contains unresolved type parameters.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.GenericParameterPosition
  commentId: P:System.Type.GenericParameterPosition
  id: GenericParameterPosition
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GenericParameterPosition
  fullName: System.Type.GenericParameterPosition
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GenericParameterPosition
    path: src/mscorlib/src/System/Type.cs
    startLine: 1171
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter, when the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object represents a type parameter of a generic type or a generic method.
  syntax:
    content: public abstract int GenericParameterPosition { get; }
    content.vb: Public MustOverride ReadOnly Property GenericParameterPosition As Integer
    parameters: []
    return:
      type: System.Int32
      description: The position of a type parameter in the type parameter list of the generic type or method that defines the parameter. Position numbers begin at 0.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The current type does not represent a type parameter. That is, <xref href="System.Type.IsGenericParameter" data-throw-if-not-resolved="false"></xref> returns false. '
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.GenericTypeArguments
  commentId: P:System.Type.GenericTypeArguments
  id: GenericTypeArguments
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GenericTypeArguments
  fullName: System.Type.GenericTypeArguments
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GenericTypeArguments
    path: src/mscorlib/src/System/Type.cs
    startLine: 1336
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets an array of the generic type arguments for this type.
  syntax:
    content: public abstract Type[] GenericTypeArguments { get; }
    content.vb: Public MustOverride ReadOnly Property GenericTypeArguments As Type()
    parameters: []
    return:
      type: System.Type[]
      description: An array of the generic type arguments for this type.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.HasElementType
  commentId: P:System.Type.HasElementType
  id: HasElementType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: HasElementType
  fullName: System.Type.HasElementType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: HasElementType
    path: src/mscorlib/src/System/Type.cs
    startLine: 1240
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref> encompasses or refers to another type; that is, whether the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref> is an array, a pointer, or is passed by reference.
  syntax:
    content: public bool HasElementType { get; }
    content.vb: Public ReadOnly Property HasElementType As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> is an array, a pointer, or is passed by reference; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Type.IsArray
  commentId: P:System.Type.IsArray
  id: IsArray
  parent: System.Type
  langs:
  - csharp
  - vb
  name: IsArray
  fullName: System.Type.IsArray
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsArray
    path: src/mscorlib/src/System/Type.cs
    startLine: 1139
  assemblies:
  - System.Runtime
  namespace: System
  summary: 'Gets a value that indicates whether the type is an array. '
  syntax:
    content: public virtual bool IsArray { get; }
    content.vb: Public Overridable ReadOnly Property IsArray As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: 'true if the current type is an array; otherwise, false. '
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Type.IsByRef
  commentId: P:System.Type.IsByRef
  id: IsByRef
  parent: System.Type
  langs:
  - csharp
  - vb
  name: IsByRef
  fullName: System.Type.IsByRef
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsByRef
    path: src/mscorlib/src/System/Type.cs
    startLine: 1211
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> is passed by reference.
  syntax:
    content: public virtual bool IsByRef { get; }
    content.vb: Public Overridable ReadOnly Property IsByRef As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> is passed by reference; otherwise, false.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Type.IsConstructedGenericType
  commentId: P:System.Type.IsConstructedGenericType
  id: IsConstructedGenericType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: IsConstructedGenericType
  fullName: System.Type.IsConstructedGenericType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsConstructedGenericType
    path: src/mscorlib/src/System/Type.cs
    startLine: 1159
  assemblies:
  - System.Runtime
  namespace: System
  summary: 'Gets a value that indicates whether this object represents a constructed generic type. You can create instances of a constructed generic type. '
  syntax:
    content: public abstract bool IsConstructedGenericType { get; }
    content.vb: Public MustOverride ReadOnly Property IsConstructedGenericType As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this object represents a constructed generic type; otherwise, false.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.IsGenericParameter
  commentId: P:System.Type.IsGenericParameter
  id: IsGenericParameter
  parent: System.Type
  langs:
  - csharp
  - vb
  name: IsGenericParameter
  fullName: System.Type.IsGenericParameter
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsGenericParameter
    path: src/mscorlib/src/System/Type.cs
    startLine: 1165
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref> represents a type parameter in the definition of a generic type or method.
  syntax:
    content: public abstract bool IsGenericParameter { get; }
    content.vb: Public MustOverride ReadOnly Property IsGenericParameter As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object represents a type parameter of a generic type definition or generic method definition; otherwise, false.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.IsNested
  commentId: P:System.Type.IsNested
  id: IsNested
  parent: System.Type
  langs:
  - csharp
  - vb
  name: IsNested
  fullName: System.Type.IsNested
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsNested
    path: src/mscorlib/src/System/Type.cs
    startLine: 937
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object represents a type whose definition is nested inside the definition of another type.
  syntax:
    content: public bool IsNested { get; }
    content.vb: Public ReadOnly Property IsNested As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> is nested inside another type; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Type.IsPointer
  commentId: P:System.Type.IsPointer
  id: IsPointer
  parent: System.Type
  langs:
  - csharp
  - vb
  name: IsPointer
  fullName: System.Type.IsPointer
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsPointer
    path: src/mscorlib/src/System/Type.cs
    startLine: 1215
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets a value indicating whether the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> is a pointer.
  syntax:
    content: public virtual bool IsPointer { get; }
    content.vb: Public Overridable ReadOnly Property IsPointer As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> is a pointer; otherwise, false.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Type.Namespace
  commentId: P:System.Type.Namespace
  id: Namespace
  parent: System.Type
  langs:
  - csharp
  - vb
  name: Namespace
  fullName: System.Type.Namespace
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Namespace
    path: src/mscorlib/src/System/Type.cs
    startLine: 361
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the namespace of the <xref href="System.Type" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public abstract string Namespace { get; }
    content.vb: Public MustOverride ReadOnly Property Namespace As String
    parameters: []
    return:
      type: System.String
      description: The namespace of the <xref href="System.Type" data-throw-if-not-resolved="false"></xref>; null if the current instance has no namespace or represents a generic parameter.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.TypeHandle
  commentId: P:System.Type.TypeHandle
  id: TypeHandle
  parent: System.Type
  langs:
  - csharp
  - vb
  name: TypeHandle
  fullName: System.Type.TypeHandle
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TypeHandle
    path: src/mscorlib/src/System/Type.cs
    startLine: 323
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the handle for the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public virtual RuntimeTypeHandle TypeHandle { get; }
    content.vb: Public Overridable ReadOnly Property TypeHandle As RuntimeTypeHandle
    parameters: []
    return:
      type: System.RuntimeTypeHandle
      description: The handle for the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The .NET Compact Framework does not currently support this property.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Type.Equals(System.Object)
  commentId: M:System.Type.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Type.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Type.cs
    startLine: 1761
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines if the underlying system type of the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref> is the same as the underlying system type of the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public override bool Equals(object o)
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
      description: 'The object whose underlying system type is to be compared with the underlying system type of the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref>. '
    return:
      type: System.Boolean
      description: true if the underlying system type of <em>o</em> is the same as the underlying system type of the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref>; otherwise, false. This method also returns false if the object specified by the <em>o</em> parameter is not a Type.
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Type.Equals(System.Type)
  commentId: M:System.Type.Equals(System.Type)
  id: Equals(System.Type)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: Equals(Type)
  fullName: System.Type.Equals(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Type.cs
    startLine: 1771
  assemblies:
  - System.Runtime
  namespace: System
  summary: Determines if the underlying system type of the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref> is the same as the underlying system type of the specified <xref href="System.Type" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool Equals(Type o)
    content.vb: Public Function Equals(o As Type) As Boolean
    parameters:
    - id: o
      type: System.Type
      description: 'The object whose underlying system type is to be compared with the underlying system type of the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref>. '
    return:
      type: System.Boolean
      description: true if the underlying system type of <em>o</em> is the same as the underlying system type of the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Type.GetArrayRank
  commentId: M:System.Type.GetArrayRank
  id: GetArrayRank
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetArrayRank()
  fullName: System.Type.GetArrayRank()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetArrayRank
    path: src/mscorlib/src/System/Type.cs
    startLine: 373
  assemblies:
  - System.Runtime
  namespace: System
  summary: 'Gets the number of dimensions in an array. '
  syntax:
    content: public abstract int GetArrayRank()
    content.vb: Public MustOverride Function GetArrayRank As Integer
    return:
      type: System.Int32
      description: 'An integer that contains the number of dimensions in the current type. '
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The functionality of this method is unsupported in the base class and must be implemented in a derived class instead. '
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The current type is not an array. '
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.GetElementType
  commentId: M:System.Type.GetElementType
  id: GetElementType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetElementType()
  fullName: System.Type.GetElementType()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetElementType
    path: src/mscorlib/src/System/Type.cs
    startLine: 1327
  assemblies:
  - System.Runtime
  namespace: System
  summary: When overridden in a derived class, returns the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the object encompassed or referred to by the current array, pointer or reference type.
  syntax:
    content: public abstract Type GetElementType()
    content.vb: Public MustOverride Function GetElementType As Type
    return:
      type: System.Type
      description: The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the object encompassed or referred to by the current array, pointer, or reference type, or null if the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter in the definition of a generic type or generic method.
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.GetGenericTypeDefinition
  commentId: M:System.Type.GetGenericTypeDefinition
  id: GetGenericTypeDefinition
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetGenericTypeDefinition()
  fullName: System.Type.GetGenericTypeDefinition()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetGenericTypeDefinition
    path: src/mscorlib/src/System/Type.cs
    startLine: 1348
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents a generic type definition from which the current generic type can be constructed.
  syntax:
    content: public abstract Type GetGenericTypeDefinition()
    content.vb: Public MustOverride Function GetGenericTypeDefinition As Type
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object representing a generic type from which the current type can be constructed.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The current type is not a generic type.  That is, <xref href="System.Type.IsGenericType" data-throw-if-not-resolved="false"></xref> returns false. '
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.GetHashCode
  commentId: M:System.Type.GetHashCode
  id: GetHashCode
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Type.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Type.cs
    startLine: 1796
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: The hash code for this instance.
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Type.GetType(System.String)
  commentId: M:System.Type.GetType(System.String)
  id: GetType(System.String)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetType(String)
  fullName: System.Type.GetType(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetType
    path: src/mscorlib/src/System/Type.cs
    startLine: 95
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> with the specified name, performing a case-sensitive search.
  syntax:
    content: public static Type GetType(string typeName)
    content.vb: Public Shared Function GetType(typeName As String) As Type
    parameters:
    - id: typeName
      type: System.String
      description: The assembly-qualified name of the type to get. See <xref href="System.Type.AssemblyQualifiedName" data-throw-if-not-resolved="false"></xref>. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.
    return:
      type: System.Type
      description: The type with the specified name, if found; otherwise, null.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>typeName</em> is null. "
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: 'A class initializer is invoked and throws an exception. '
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>typeName</em> represents a generic type that has a pointer type, a ByRef type, or <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref> as one of its type arguments.-or-<em>typeName</em> represents a generic type that has an incorrect number of type arguments.-or-<em>typeName</em> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter."
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<em>typeName</em> represents an array of <xref href=\"System.TypedReference\" data-throw-if-not-resolved=\"false\"></xref>. "
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.IO.IOException" data-throw-if-not-resolved="false"></xref>, instead.The assembly or one of its dependencies was found, but could not be loaded. '
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Type.GetType(System.String,System.Boolean)
  commentId: M:System.Type.GetType(System.String,System.Boolean)
  id: GetType(System.String,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetType(String, Boolean)
  fullName: System.Type.GetType(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetType
    path: src/mscorlib/src/System/Type.cs
    startLine: 89
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> with the specified name, performing a case-sensitive search and specifying whether to throw an exception if the type is not found.
  syntax:
    content: public static Type GetType(string typeName, bool throwOnError)
    content.vb: Public Shared Function GetType(typeName As String, throwOnError As Boolean) As Type
    parameters:
    - id: typeName
      type: System.String
      description: The assembly-qualified name of the type to get. See <xref href="System.Type.AssemblyQualifiedName" data-throw-if-not-resolved="false"></xref>. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.
    - id: throwOnError
      type: System.Boolean
      description: true to throw an exception if the type cannot be found; false to return null. Specifying false also suppresses some other exception conditions, but not all of them. See the Exceptions section.
    return:
      type: System.Type
      description: 'The type with the specified name. If the type is not found, the <em>throwOnError</em> parameter specifies whether null is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <em>throwOnError</em>. See the Exceptions section. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>typeName</em> is null. "
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: 'A class initializer is invoked and throws an exception. '
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<em>throwOnError</em> is true and the type is not found. -or-<em>throwOnError</em> is true and <em>typeName</em> contains invalid characters, such as an embedded tab.-or-<em>throwOnError</em> is true and <em>typeName</em> is an empty string.-or-<em>throwOnError</em> is true and <em>typeName</em> represents an array type with an invalid size. -or-<em>typeName</em> represents an array of <xref href=\"System.TypedReference\" data-throw-if-not-resolved=\"false\"></xref>. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>throwOnError</em> is true and <em>typeName</em> contains invalid syntax. For example, \"MyType[,*,]\".-or- <em>typeName</em> represents a generic type that has a pointer type, a ByRef type, or <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref> as one of its type arguments.-or-<em>typeName</em> represents a generic type that has an incorrect number of type arguments.-or-<em>typeName</em> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<em>throwOnError</em> is true and the assembly or one of its dependencies was not found. "
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.IO.IOException" data-throw-if-not-resolved="false"></xref>, instead.The assembly or one of its dependencies was found, but could not be loaded. '
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Type.GetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Type.GetType(System.String,System.Boolean,System.Boolean)
  id: GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetType(String, Boolean, Boolean)
  fullName: System.Type.GetType(System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetType
    path: src/mscorlib/src/System/Type.cs
    startLine: 83
  assemblies:
  - System.Runtime
  namespace: System
  summary: 'Gets the <xref href="System.Type" data-throw-if-not-resolved="false"></xref> with the specified name, specifying whether to throw an exception if the type is not found and whether to perform a case-sensitive search. '
  syntax:
    content: public static Type GetType(string typeName, bool throwOnError, bool ignoreCase)
    content.vb: Public Shared Function GetType(typeName As String, throwOnError As Boolean, ignoreCase As Boolean) As Type
    parameters:
    - id: typeName
      type: System.String
      description: The assembly-qualified name of the type to get. See <xref href="System.Type.AssemblyQualifiedName" data-throw-if-not-resolved="false"></xref>. If the type is in the currently executing assembly or in Mscorlib.dll, it is sufficient to supply the type name qualified by its namespace.
    - id: throwOnError
      type: System.Boolean
      description: true to throw an exception if the type cannot be found; false to return null.Specifying false also suppresses some other exception conditions, but not all of them. See the Exceptions section.
    - id: ignoreCase
      type: System.Boolean
      description: 'true to perform a case-insensitive search for <em>typeName</em>, false to perform a case-sensitive search for <em>typeName</em>. '
    return:
      type: System.Type
      description: 'The type with the specified name. If the type is not found, the <em>throwOnError</em> parameter specifies whether null is returned or an exception is thrown. In some cases, an exception is thrown regardless of the value of <em>throwOnError</em>. See the Exceptions section. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>typeName</em> is null. "
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: 'A class initializer is invoked and throws an exception. '
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<em>throwOnError</em> is true and the type is not found. -or-<em>throwOnError</em> is true and <em>typeName</em> contains invalid characters, such as an embedded tab.-or-<em>throwOnError</em> is true and <em>typeName</em> is an empty string.-or-<em>throwOnError</em> is true and <em>typeName</em> represents an array type with an invalid size. -or-<em>typeName</em> represents an array of <xref href=\"System.TypedReference\" data-throw-if-not-resolved=\"false\"></xref>. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>throwOnError</em> is true and <em>typeName</em> contains invalid syntax. For example, \"MyType[,*,]\".-or- <em>typeName</em> represents a generic type that has a pointer type, a ByRef type, or <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref> as one of its type arguments.-or-<em>typeName</em> represents a generic type that has an incorrect number of type arguments.-or-<em>typeName</em> represents a generic type, and one of its type arguments does not satisfy the constraints for the corresponding type parameter."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<em>throwOnError</em> is true and the assembly or one of its dependencies was not found. "
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: 'The assembly or one of its dependencies was found, but could not be loaded. '
  - type: System.BadImageFormatException
    commentId: T:System.BadImageFormatException
    description: The assembly or one of its dependencies is not valid. -or-Version 2.0 or later of the common language runtime is currently loaded, and the assembly was compiled with a later version.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Type.GetTypeCode(System.Type)
  commentId: M:System.Type.GetTypeCode(System.Type)
  id: GetTypeCode(System.Type)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetTypeCode(Type)
  fullName: System.Type.GetTypeCode(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetTypeCode
    path: src/mscorlib/src/System/Type.cs
    startLine: 227
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the underlying type code of the specified <xref href="System.Type" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static TypeCode GetTypeCode(Type type)
    content.vb: Public Shared Function GetTypeCode(type As Type) As TypeCode
    parameters:
    - id: type
      type: System.Type
      description: 'The type whose underlying type code to get. '
    return:
      type: System.TypeCode
      description: The code of the underlying type, or <xref href="System.TypeCode.Empty" data-throw-if-not-resolved="false"></xref> if <em>type</em> is null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  commentId: M:System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  id: GetTypeFromHandle(System.RuntimeTypeHandle)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: GetTypeFromHandle(RuntimeTypeHandle)
  fullName: System.Type.GetTypeFromHandle(System.RuntimeTypeHandle)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the type referenced by the specified type handle.
  syntax:
    content: public static Type GetTypeFromHandle(RuntimeTypeHandle handle)
    content.vb: Public Shared Function GetTypeFromHandle(handle As RuntimeTypeHandle) As Type
    parameters:
    - id: handle
      type: System.RuntimeTypeHandle
      description: 'The object that refers to the type. '
    return:
      type: System.Type
      description: The type referenced by the specified <xref href="System.RuntimeTypeHandle" data-throw-if-not-resolved="false"></xref>, or null if the <xref href="System.RuntimeTypeHandle.Value" data-throw-if-not-resolved="false"></xref> property of <em>handle</em> is null.
  exceptions:
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: 'A class initializer is invoked and throws an exception. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Type.MakeArrayType
  commentId: M:System.Type.MakeArrayType
  id: MakeArrayType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: MakeArrayType()
  fullName: System.Type.MakeArrayType()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MakeArrayType
    path: src/mscorlib/src/System/Type.cs
    startLine: 146
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero.
  syntax:
    content: public abstract Type MakeArrayType()
    content.vb: Public MustOverride Function MakeArrayType As Type
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object representing a one-dimensional array of the current type, with a lower bound of zero.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: 'The current type is <xref href="System.TypedReference" data-throw-if-not-resolved="false"></xref>.-or-The current type is a ByRef type. That is, <xref href="System.Type.IsByRef" data-throw-if-not-resolved="false"></xref> returns true. '
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.MakeArrayType(System.Int32)
  commentId: M:System.Type.MakeArrayType(System.Int32)
  id: MakeArrayType(System.Int32)
  parent: System.Type
  langs:
  - csharp
  - vb
  name: MakeArrayType(Int32)
  fullName: System.Type.MakeArrayType(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MakeArrayType
    path: src/mscorlib/src/System/Type.cs
    startLine: 147
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object representing an array of the current type, with the specified number of dimensions.
  syntax:
    content: public abstract Type MakeArrayType(int rank)
    content.vb: Public MustOverride Function MakeArrayType(rank As Integer) As Type
    parameters:
    - id: rank
      type: System.Int32
      description: The number of dimensions for the array. This number must be less than or equal to 32.
    return:
      type: System.Type
      description: An object representing an array of the current type, with the specified number of dimensions.
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<em>rank</em> is invalid. For example, 0 or negative."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: The current type is <xref href="System.TypedReference" data-throw-if-not-resolved="false"></xref>.-or-The current type is a ByRef type. That is, <xref href="System.Type.IsByRef" data-throw-if-not-resolved="false"></xref> returns true. -or-<em>rank</em> is greater than 32.
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.MakeByRefType
  commentId: M:System.Type.MakeByRefType
  id: MakeByRefType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: MakeByRefType()
  fullName: System.Type.MakeByRefType()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MakeByRefType
    path: src/mscorlib/src/System/Type.cs
    startLine: 145
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).
  syntax:
    content: public abstract Type MakeByRefType()
    content.vb: Public MustOverride Function MakeByRefType As Type
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: 'The current type is <xref href="System.TypedReference" data-throw-if-not-resolved="false"></xref>.-or-The current type is a ByRef type. That is, <xref href="System.Type.IsByRef" data-throw-if-not-resolved="false"></xref> returns true. '
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.MakeGenericType(System.Type[])
  commentId: M:System.Type.MakeGenericType(System.Type[])
  id: MakeGenericType(System.Type[])
  parent: System.Type
  langs:
  - csharp
  - vb
  name: MakeGenericType(Type[])
  fullName: System.Type.MakeGenericType(System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MakeGenericType
    path: src/mscorlib/src/System/Type.cs
    startLine: 1304
  assemblies:
  - System.Runtime
  namespace: System
  summary: Substitutes the elements of an array of types for the type parameters of the current generic type definition and returns a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object representing the resulting constructed type.
  syntax:
    content: public abstract Type MakeGenericType(params Type[] typeArguments)
    content.vb: Public MustOverride Function MakeGenericType(ParamArray typeArguments As Type()) As Type
    parameters:
    - id: typeArguments
      type: System.Type[]
      description: An array of types to be substituted for the type parameters of the current generic type.
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> representing the constructed type formed by substituting the elements of <em>typeArguments</em> for the type parameters of the current generic type.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The current type does not represent a generic type definition. That is, <xref href="System.Type.IsGenericTypeDefinition" data-throw-if-not-resolved="false"></xref> returns false. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>typeArguments</em> is null.-or- Any element of <em>typeArguments</em> is null. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in <em>typeArguments</em> is not the same as the number of type parameters in the current generic type definition.-or- Any element of <em>typeArguments</em> does not satisfy the constraints specified for the corresponding type parameter of the current generic type. -or- <em>typeArguments</em> contains an element that is a pointer type (<xref href="System.Type.IsPointer" data-throw-if-not-resolved="false"></xref> returns true), a by-ref type (<xref href="System.Type.IsByRef" data-throw-if-not-resolved="false"></xref> returns true), or <xref href="System.Void" data-throw-if-not-resolved="false"></xref>.
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class. Derived classes must provide an implementation.
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Type.MakeGenericType(System.Type())
  name.vb: MakeGenericType(Type())
- uid: System.Type.MakePointerType
  commentId: M:System.Type.MakePointerType
  id: MakePointerType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: MakePointerType()
  fullName: System.Type.MakePointerType()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MakePointerType
    path: src/mscorlib/src/System/Type.cs
    startLine: 143
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns a <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents a pointer to the current type.
  syntax:
    content: public abstract Type MakePointerType()
    content.vb: Public MustOverride Function MakePointerType As Type
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents a pointer to the current type.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The invoked method is not supported in the base class.
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: 'The current type is <xref href="System.TypedReference" data-throw-if-not-resolved="false"></xref>.-or-The current type is a ByRef type. That is, <xref href="System.Type.IsByRef" data-throw-if-not-resolved="false"></xref> returns true. '
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Type.ToString
  commentId: M:System.Type.ToString
  id: ToString
  parent: System.Type
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Type.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Type.cs
    startLine: 1739
  assemblies:
  - System.Runtime
  namespace: System
  summary: Returns a String representing the name of the current Type.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> representing the name of the current <xref href="System.Type" data-throw-if-not-resolved="false"></xref>.
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Type.DeclaringType
  commentId: P:System.Type.DeclaringType
  id: DeclaringType
  parent: System.Type
  langs:
  - csharp
  - vb
  name: DeclaringType
  fullName: System.Type.DeclaringType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Type.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaringType
    path: src/mscorlib/src/System/Type.cs
    startLine: 65
  assemblies:
  - System.Runtime
  namespace: System
  summary: Gets the type that declares the current nested type or generic type parameter.
  syntax:
    content: public abstract Type DeclaringType { get; }
    content.vb: Public MustOverride ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object representing the enclosing type, if the current type is a nested type; or the generic type definition, if the current type is a type parameter of a generic type; or the type that declares the generic method, if the current type is a type parameter of a generic method; otherwise, null.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Type.Name
  commentId: P:System.Type.Name
  id: Name
  parent: System.Type
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Type.Name
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Runtime/ref/System.Runtime.Manual.cs
    startLine: 43
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: public abstract string Name { get; }
    content.vb: Public MustOverride ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  fullName: System.TypeCode
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Reflection.TargetInvocationException
  isExternal: false
  name: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
- uid: System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  fullName: System.TypeLoadException
- uid: System.IO.FileLoadException
  isExternal: false
  name: FileLoadException
  fullName: System.IO.FileLoadException
- uid: System.BadImageFormatException
  isExternal: false
  name: BadImageFormatException
  fullName: System.BadImageFormatException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
