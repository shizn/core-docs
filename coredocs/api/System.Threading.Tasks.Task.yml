items:
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  id: Task
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.Task.#ctor(System.Action)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.Task.AsyncState
  - System.Threading.Tasks.Task.CompletedTask
  - System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.CreationOptions
  - System.Threading.Tasks.Task.CurrentId
  - System.Threading.Tasks.Task.Delay(System.Int32)
  - System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan)
  - System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Exception
  - System.Threading.Tasks.Task.Factory
  - System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.FromException(System.Exception)
  - System.Threading.Tasks.Task.FromException``1(System.Exception)
  - System.Threading.Tasks.Task.FromResult``1(``0)
  - System.Threading.Tasks.Task.GetAwaiter
  - System.Threading.Tasks.Task.Id
  - System.Threading.Tasks.Task.IsCanceled
  - System.Threading.Tasks.Task.IsCompleted
  - System.Threading.Tasks.Task.IsFaulted
  - System.Threading.Tasks.Task.Run(System.Action)
  - System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func{``0})
  - System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.RunSynchronously
  - System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Start
  - System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.Task.Status
  - System.Threading.Tasks.Task.Wait
  - System.Threading.Tasks.Task.Wait(System.Int32)
  - System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.Wait(System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  - System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  - System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  - System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  - System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  - System.Threading.Tasks.Task.Yield
  langs:
  - csharp
  - vb
  name: Task
  fullName: System.Threading.Tasks.Task
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Task
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 139
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Represents an asynchronous operation.To browse the .NET Framework source code for this type, see the Reference Source.
  syntax:
    content: 'public class Task : IAsyncResult'
    content.vb: >-
      Public Class Task
          Inherits IAsyncResult
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.Tasks.Task.#ctor(System.Action)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action)
  id: '#ctor(System.Action)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Task(Action)
  fullName: System.Threading.Tasks.Task.Task(System.Action)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 368
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> with the specified action.
  syntax:
    content: public Task(Action action)
    content.vb: Public Sub New(action As Action)
    parameters:
    - id: action
      type: System.Action
      description: The delegate that represents the code to execute in the task.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>action</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken)
  id: '#ctor(System.Action,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Task(Action, CancellationToken)
  fullName: System.Threading.Tasks.Task.Task(System.Action, System.Threading.CancellationToken)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 386
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> with the specified action and <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task(Action action, CancellationToken cancellationToken)
    content.vb: Public Sub New(action As Action, cancellationToken As CancellationToken)
    parameters:
    - id: action
      type: System.Action
      description: The delegate that represents the code to execute in the task.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that the new  task will observe.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: 'The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>action</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Task(Action, CancellationToken, TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(System.Action, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 436
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> with the specified action and creation options.
  syntax:
    content: public Task(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions)
    content.vb: Public Sub New(action As Action, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions)
    parameters:
    - id: action
      type: System.Action
      description: The delegate that represents the code to execute in the task.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that the new task will observe.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref> used to customize the task's behavior.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created <em>cancellationToken</em> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>action</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>creationOptions</em> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Task(Action, TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(System.Action, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 409
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> with the specified action and creation options.
  syntax:
    content: public Task(Action action, TaskCreationOptions creationOptions)
    content.vb: Public Sub New(action As Action, creationOptions As TaskCreationOptions)
    parameters:
    - id: action
      type: System.Action
      description: The delegate that represents the code to execute in the task.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: 'The <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref> used to customize the task''s behavior. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>action</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>creationOptions</em> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object)
  id: '#ctor(System.Action{System.Object},System.Object)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Task(Action<Object>, Object)
  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 453
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> with the specified action and state.
  syntax:
    content: public Task(Action<object> action, object state)
    content.vb: Public Sub New(action As Action(Of Object), state As Object)
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The delegate that represents the code to execute in the task.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>action</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object)
  name.vb: Task(Action(Of Object), Object)
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Task(Action<Object>, Object, CancellationToken)
  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object, System.Threading.CancellationToken)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 473
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> with the specified action, state, and options.
  syntax:
    content: public Task(Action<object> action, object state, CancellationToken cancellationToken)
    content.vb: Public Sub New(action As Action(Of Object), state As Object, cancellationToken As CancellationToken)
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The delegate that represents the code to execute in the task.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that that the new task will observe.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created <em>cancellationToken</em> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>action</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken)
  name.vb: Task(Action(Of Object), Object, CancellationToken)
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Task(Action<Object>, Object, CancellationToken, TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 525
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> with the specified action, state, and options.
  syntax:
    content: public Task(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions)
    content.vb: Public Sub New(action As Action(Of Object), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions)
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The delegate that represents the code to execute in the task.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that that the new task will observe..
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref> used to customize the task's behavior.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created <em>cancellationToken</em> has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>action</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>creationOptions</em> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions)
  name.vb: Task(Action(Of Object), Object, CancellationToken, TaskCreationOptions)
- uid: System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.Task.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: '#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)'
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Task(Action<Object>, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.Task.Task(System.Action<System.Object>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 497
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Initializes a new <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> with the specified action, state, and options.
  syntax:
    content: public Task(Action<object> action, object state, TaskCreationOptions creationOptions)
    content.vb: Public Sub New(action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions)
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: The delegate that represents the code to execute in the task.
    - id: state
      type: System.Object
      description: An object representing data to be used by the action.
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: The <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref> used to customize the task's behavior.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>action</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>creationOptions</em> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.Task(System.Action(Of System.Object), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: Task(Action(Of Object), Object, TaskCreationOptions)
- uid: System.Threading.Tasks.Task.AsyncState
  commentId: P:System.Threading.Tasks.Task.AsyncState
  id: AsyncState
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: AsyncState
  fullName: System.Threading.Tasks.Task.AsyncState
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AsyncState
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1587
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the state object supplied when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> was created, or null if none was supplied.
  syntax:
    content: public object AsyncState { get; }
    content.vb: Public ReadOnly Property AsyncState As Object
    parameters: []
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that represents the state data that was passed in to the task when it was created.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.Task.CompletedTask
  commentId: P:System.Threading.Tasks.Task.CompletedTask
  id: CompletedTask
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: CompletedTask
  fullName: System.Threading.Tasks.Task.CompletedTask
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompletedTask
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1627
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Gets a task that has already completed successfully. '
  syntax:
    content: public static Task CompletedTask { get; }
    content.vb: Public Shared ReadOnly Property CompletedTask As Task
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: 'The successfully completed task. '
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Threading.Tasks.Task.CreationOptions
  commentId: P:System.Threading.Tasks.Task.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: CreationOptions
  fullName: System.Threading.Tasks.Task.CreationOptions
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreationOptions
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1551
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref> used to create this task.
  syntax:
    content: public TaskCreationOptions CreationOptions { get; }
    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: The <xref href="System.Threading.Tasks.TaskCreationOptions" data-throw-if-not-resolved="false"></xref> used to create this task.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.Task.CurrentId
  commentId: P:System.Threading.Tasks.Task.CurrentId
  id: CurrentId
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: CurrentId
  fullName: System.Threading.Tasks.Task.CurrentId
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentId
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1332
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Returns the ID of the currently executing <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static Nullable<int> CurrentId { get; }
    content.vb: Public Shared ReadOnly Property CurrentId As Nullable(Of Integer)
    parameters: []
    return:
      type: System.Nullable{System.Int32}
      description: An integer that was assigned by the system to the currently-executing task.
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Threading.Tasks.Task.Exception
  commentId: P:System.Threading.Tasks.Task.Exception
  id: Exception
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Exception
  fullName: System.Threading.Tasks.Task.Exception
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exception
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1393
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> that caused the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> to end prematurely. If the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completed successfully or has not yet thrown any exceptions, this will return null.
  syntax:
    content: public AggregateException Exception { get; }
    content.vb: Public ReadOnly Property Exception As AggregateException
    parameters: []
    return:
      type: System.AggregateException
      description: The <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> that caused the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> to end prematurely.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.Task.Factory
  commentId: P:System.Threading.Tasks.Task.Factory
  id: Factory
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Factory
  fullName: System.Threading.Tasks.Task.Factory
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Factory
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1620
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Provides access to factory methods for creating and configuring <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> and <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> instances.
  syntax:
    content: public static TaskFactory Factory { get; }
    content.vb: Public Shared ReadOnly Property Factory As TaskFactory
    parameters: []
    return:
      type: System.Threading.Tasks.TaskFactory
      description: 'A factory object that can create a variety of <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> and <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> objects. '
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Threading.Tasks.Task.Id
  commentId: P:System.Threading.Tasks.Task.Id
  id: Id
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Id
  fullName: System.Threading.Tasks.Task.Id
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Id
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1315
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets an ID for this <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instance.
  syntax:
    content: public int Id { get; }
    content.vb: Public ReadOnly Property Id As Integer
    parameters: []
    return:
      type: System.Int32
      description: 'The identifier that is assigned by the system to this <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instance. '
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.Task.IsCanceled
  commentId: P:System.Threading.Tasks.Task.IsCanceled
  id: IsCanceled
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: IsCanceled
  fullName: System.Threading.Tasks.Task.IsCanceled
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsCanceled
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1449
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets whether this <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instance has completed execution due to being canceled.
  syntax:
    content: public bool IsCanceled { get; }
    content.vb: Public ReadOnly Property IsCanceled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the task has completed due to being canceled; otherwise false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.Task.IsCompleted
  commentId: P:System.Threading.Tasks.Task.IsCompleted
  id: IsCompleted
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: IsCompleted
  fullName: System.Threading.Tasks.Task.IsCompleted
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsCompleted
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1525
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets whether this <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has completed.
  syntax:
    content: public bool IsCompleted { get; }
    content.vb: Public ReadOnly Property IsCompleted As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the task has completed; otherwise false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.Task.IsFaulted
  commentId: P:System.Threading.Tasks.Task.IsFaulted
  id: IsFaulted
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: IsFaulted
  fullName: System.Threading.Tasks.Task.IsFaulted
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFaulted
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1718
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets whether the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completed due to an unhandled exception.
  syntax:
    content: public bool IsFaulted { get; }
    content.vb: Public ReadOnly Property IsFaulted As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the task has thrown an unhandled exception; otherwise false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.Task.Status
  commentId: P:System.Threading.Tasks.Task.Status
  id: Status
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Status
  fullName: System.Threading.Tasks.Task.Status
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Status
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1414
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets the <xref href="System.Threading.Tasks.TaskStatus" data-throw-if-not-resolved="false"></xref> of this task.
  syntax:
    content: public TaskStatus Status { get; }
    content.vb: Public ReadOnly Property Status As TaskStatus
    parameters: []
    return:
      type: System.Threading.Tasks.TaskStatus
      description: The current <xref href="System.Threading.Tasks.TaskStatus" data-throw-if-not-resolved="false"></xref> of this task instance.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  commentId: M:System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  id: ConfigureAwait(System.Boolean)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ConfigureAwait(Boolean)
  fullName: System.Threading.Tasks.Task.ConfigureAwait(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConfigureAwait
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 2914
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Configures an awaiter used to await this <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public ConfiguredTaskAwaitable ConfigureAwait(bool continueOnCapturedContext)
    content.vb: Public Function ConfigureAwait(continueOnCapturedContext As Boolean) As ConfiguredTaskAwaitable
    parameters:
    - id: continueOnCapturedContext
      type: System.Boolean
      description: true to attempt to marshal the continuation back to the original context captured; otherwise, false.
    return:
      type: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
      description: An object used to await this task.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith(Action<Task, Object>, Object)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3928
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that receives caller-supplied state information and executes when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. '
  syntax:
    content: public Task ContinueWith(Action<Task, object> continuationAction, object state)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: 'An action to run when the task completes. When run, the delegate is passed the completed task and a caller-supplied state object as arguments. '
    - id: state
      type: System.Object
      description: 'An object representing data to be used by the continuation action. '
    return:
      type: System.Threading.Tasks.Task
      description: 'A new continuation task. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationAction</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object)
  name.vb: ContinueWith(Action(Of Task, Object), Object)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith(Action<Task, Object>, Object, CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3956
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation that receives caller-supplied state information and a cancellation token and that executes asynchronously when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes.
  syntax:
    content: public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, cancellationToken As CancellationToken) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: An action to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationAction</em> argument is null.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.CancellationToken)
  name.vb: ContinueWith(Action(Of Task, Object), Object, CancellationToken)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith(Action<Task, Object>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4068
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that receives caller-supplied state information and a cancellation token and that executes when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. The continuation executes based on a set of specified conditions and uses a specified scheduler. '
  syntax:
    content: public Task ContinueWith(Action<Task, object> continuationAction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: An action to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" data-throw-if-not-resolved="false"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" data-throw-if-not-resolved="false"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> to associate with the continuation task and to use for its  execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationAction</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>continuationOptions</em> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>scheduler</em> argument is null.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Action(Of Task, Object), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith(Action<Task, Object>, Object, TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4022
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that receives caller-supplied state information and executes when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. The continuation executes based on a set of specified conditions. '
  syntax:
    content: public Task ContinueWith(Action<Task, object> continuationAction, object state, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: An action to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" data-throw-if-not-resolved="false"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationAction</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>continuationOptions</em> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWith(Action(Of Task, Object), Object, TaskContinuationOptions)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task,System.Object},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith(Action<Task, Object>, Object, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task, System.Object>, System.Object, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3986
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. The continuation uses a specified scheduler. '
  syntax:
    content: public Task ContinueWith(Action<Task, object> continuationAction, object state, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task, Object), state As Object, scheduler As TaskScheduler) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task,System.Object}
      description: An action to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation action.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> to associate with the continuation task and to use for its execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationAction</em> argument is null.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>scheduler</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task, System.Object), System.Object, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Action(Of Task, Object), Object, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task})
  id: ContinueWith(System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith(Action<Task>)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3730
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes asynchronously when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes.
  syntax:
    content: public Task ContinueWith(Action<Task> continuationAction)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task)) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: An action to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. When run, the delegate will be passed the completed task as an argument.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationAction</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task))
  name.vb: ContinueWith(Action(Of Task))
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith(Action<Task>, CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3757
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation that receives a cancellation token and executes asynchronously when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes.
  syntax:
    content: public Task ContinueWith(Action<Task> continuationAction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task), cancellationToken As CancellationToken) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: An action to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. When run, the delegate will be passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: 'The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created the token has already been disposed. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationAction</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ContinueWith(Action(Of Task), CancellationToken)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith(Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3866
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that executes when the target task competes according to the specified <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref>. The continuation receives a cancellation token and uses a specified scheduler. '
  syntax:
    content: public Task ContinueWith(Action<Task> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: An action to run according to the specified <em>continuationOptions</em>. When run, the delegate will be passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" data-throw-if-not-resolved="false"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" data-throw-if-not-resolved="false"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> to associate with the continuation task and to use for its execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created the token has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationAction</em> argument is null.-or-The <em>scheduler</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>continuationOptions</em> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith(Action<Task>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3821
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a continuation that executes when the target task completes according to the specified <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Task ContinueWith(Action<Task> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: An action to run according to the specified <em>continuationOptions</em>. When run, the delegate will be passed the completed task as an argument.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" data-throw-if-not-resolved="false"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationAction</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>continuationOptions</em> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWith(Action(Of Task), TaskContinuationOptions)
- uid: System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith(System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith(Action<Task>, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith(System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3786
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that executes asynchronously when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. The continuation uses a specified scheduler. '
  syntax:
    content: public Task ContinueWith(Action<Task> continuationAction, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(continuationAction As Action(Of Task), scheduler As TaskScheduler) As Task
    parameters:
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: An action to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. When run, the delegate will be passed the completed task as an argument.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> to associate with the continuation task and to use for its execution.
    return:
      type: System.Threading.Tasks.Task
      description: A new continuation <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationAction</em> argument is null. -or-The <em>scheduler</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Action(Of Task), TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith<TResult>(Func<Task, TResult>)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4133
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that executes asynchronously when the target <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> completes and returns a value. '
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: A function to run when the <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>  completes. When run, the delegate will be passed the completed task as an argument.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: 'A new continuation task. '
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationFunction</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult))
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult))
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith<TResult>(Func<Task, TResult>, CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4165
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that executes asynchronously when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes and returns a value. The continuation receives a cancellation token. '
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: A function to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. When run, the delegate will be passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.-or-The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created the token has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationFunction</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith<TResult>(Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4283
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that executes according to the specified continuation options and returns a value. The continuation is passed a cancellation token and uses a specified scheduler. '
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: A function to run according to the specified <em>continuationOptions.</em> When run, the delegate will be passed the completed task as an argument.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" data-throw-if-not-resolved="false"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" data-throw-if-not-resolved="false"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> to associate with the continuation task and to use for its execution.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.-or-The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> that created the token has already been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationFunction</em> argument is null.-or-The <em>scheduler</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>continuationOptions</em> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith<TResult>(Func<Task, TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4235
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that executes according to the specified continuation options and returns a value. '
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: A function to run according to the condition specified in <em>continuationOptions</em>. When run, the delegate will be passed the completed task as an argument.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" data-throw-if-not-resolved="false"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationFunction</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>continuationOptions</em> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith<TResult>(Func<Task, TResult>, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4197
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that executes asynchronously when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes and returns a value. The continuation uses a specified scheduler. '
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, TResult> continuationFunction, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, TResult), scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: A function to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. When run, the delegate will be passed the completed task as an argument.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> to associate with the continuation task and to use for its execution.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationFunction</em> argument is null.-or-The <em>scheduler</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, TResult), TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4348
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that receives caller-supplied state information and executes asynchronously when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes and returns a value. '
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: 'A function to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. When run, the delegate will be passed the completed task and the caller-supplied state object as arguments. '
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationFunction</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4381
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that executes asynchronously when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token. '
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, CancellationToken cancellationToken)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: A function to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationFunction</em> argument is null.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.CancellationToken)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4502
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that executes based on the specified task continuation options when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes and returns a value. The continuation receives caller-supplied state information and a cancellation token and uses the specified scheduler. '
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: A function to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> that will be assigned to the new continuation task.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" data-throw-if-not-resolved="false"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" data-throw-if-not-resolved="false"></xref>.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> to associate with the continuation task and to use for its  execution.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationFunction</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>continuationOptions</em> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref>.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>scheduler</em> argument is null.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The provided <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> has already been disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskContinuationOptions)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4453
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that executes based on the specified task continuation options when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. The continuation receives caller-supplied state information. '
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, TaskContinuationOptions continuationOptions)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: A function to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: Options for when the continuation is scheduled and how it behaves. This includes criteria, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.OnlyOnCanceled" data-throw-if-not-resolved="false"></xref>, as well as execution options, such as <xref href="System.Threading.Tasks.TaskContinuationOptions.ExecuteSynchronously" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationFunction</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>continuationOptions</em> argument specifies an invalid value for <xref href="System.Threading.Tasks.TaskContinuationOptions" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskContinuationOptions)
- uid: System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  id: ContinueWith``1(System.Func{System.Threading.Tasks.Task,System.Object,``0},System.Object,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: ContinueWith<TResult>(Func<Task, Object, TResult>, Object, TaskScheduler)
  fullName: System.Threading.Tasks.Task.ContinueWith<TResult>(System.Func<System.Threading.Tasks.Task, System.Object, TResult>, System.Object, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWith
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4414
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a continuation that executes asynchronously when the target <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes. The continuation receives caller-supplied state information and uses a specified scheduler. '
  syntax:
    content: public Task<TResult> ContinueWith<TResult>(Func<Task, object, TResult> continuationFunction, object state, TaskScheduler scheduler)
    content.vb: Public Function ContinueWith(Of TResult)(continuationFunction As Func(Of Task, Object, TResult), state As Object, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
      description: A function to run when the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completes.  When run, the delegate will be  passed the completed task and the caller-supplied state object as arguments.
    - id: state
      type: System.Object
      description: An object representing data to be used by the continuation function.
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> to associate with the continuation task and to use for its execution.
    typeParameters:
    - id: TResult
      description: The type of the result produced by the continuation.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A new continuation <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>continuationFunction</em> argument is null.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>scheduler</em> argument is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.Task.ContinueWith(Of TResult)(System.Func(Of System.Threading.Tasks.Task, System.Object, TResult), System.Object, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWith(Of TResult)(Func(Of Task, Object, TResult), Object, TaskScheduler)
- uid: System.Threading.Tasks.Task.Delay(System.Int32)
  commentId: M:System.Threading.Tasks.Task.Delay(System.Int32)
  id: Delay(System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Delay(Int32)
  fullName: System.Threading.Tasks.Task.Delay(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delay
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5825
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a task that completes after a time delay. '
  syntax:
    content: public static Task Delay(int millisecondsDelay)
    content.vb: Public Shared Function Delay(millisecondsDelay As Integer) As Task
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: 'The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely. '
    return:
      type: System.Threading.Tasks.Task
      description: 'A task that represents the time delay. '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>millisecondsDelay</em> argument is less than -1.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Delay(System.Int32,System.Threading.CancellationToken)
  id: Delay(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Delay(Int32, CancellationToken)
  fullName: System.Threading.Tasks.Task.Delay(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delay
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5847
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a cancellable task that completes after a time delay. '
  syntax:
    content: public static Task Delay(int millisecondsDelay, CancellationToken cancellationToken)
    content.vb: Public Shared Function Delay(millisecondsDelay As Integer, cancellationToken As CancellationToken) As Task
    parameters:
    - id: millisecondsDelay
      type: System.Int32
      description: 'The number of milliseconds to wait before completing the returned task, or -1 to wait indefinitely. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 'The cancellation token that will be checked prior to completing the returned task. '
    return:
      type: System.Threading.Tasks.Task
      description: 'A task that represents the time delay. '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: 'The <em>millisecondsDelay</em> argument is less than -1. '
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
    description: 'The task has been canceled. '
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: 'The provided <em>cancellationToken</em> has already been disposed. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan)
  commentId: M:System.Threading.Tasks.Task.Delay(System.TimeSpan)
  id: Delay(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Delay(TimeSpan)
  fullName: System.Threading.Tasks.Task.Delay(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delay
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5781
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a task that completes after a specified time interval. '
  syntax:
    content: public static Task Delay(TimeSpan delay)
    content.vb: Public Shared Function Delay(delay As TimeSpan) As Task
    parameters:
    - id: delay
      type: System.TimeSpan
      description: 'The time span to wait before completing the returned task, or TimeSpan.FromMilliseconds(-1) to wait indefinitely. '
    return:
      type: System.Threading.Tasks.Task
      description: 'A task that represents the time delay. '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>delay</em> represents a negative time interval other than TimeSpan.FromMillseconds(-1). -or-The <em>delay</em> argument's <xref href=\"System.TimeSpan.TotalMilliseconds\" data-throw-if-not-resolved=\"false\"></xref> property is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Delay(System.TimeSpan,System.Threading.CancellationToken)
  id: Delay(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Delay(TimeSpan, CancellationToken)
  fullName: System.Threading.Tasks.Task.Delay(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Delay
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5803
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a cancellable task that completes after a specified time interval. '
  syntax:
    content: public static Task Delay(TimeSpan delay, CancellationToken cancellationToken)
    content.vb: Public Shared Function Delay(delay As TimeSpan, cancellationToken As CancellationToken) As Task
    parameters:
    - id: delay
      type: System.TimeSpan
      description: 'The time span to wait before completing the returned task, or TimeSpan.FromMilliseconds(-1) to wait indefinitely. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 'The cancellation token that will be checked prior to completing the returned task. '
    return:
      type: System.Threading.Tasks.Task
      description: 'A task that represents the time delay. '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>delay</em> represents a negative time interval other than TimeSpan.FromMillseconds(-1). -or-The <em>delay</em> argument's <xref href=\"System.TimeSpan.TotalMilliseconds\" data-throw-if-not-resolved=\"false\"></xref> property is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
    description: The task has been canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: 'The provided <em>cancellationToken</em> has already been disposed. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  id: FromCanceled(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: FromCanceled(CancellationToken)
  fullName: System.Threading.Tasks.Task.FromCanceled(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromCanceled
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5530
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that's completed due to cancellation with a specified cancellation token.
  syntax:
    content: public static Task FromCanceled(CancellationToken cancellationToken)
    content.vb: Public Shared Function FromCanceled(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 'The cancellation token with which to complete the task. '
    return:
      type: System.Threading.Tasks.Task
      description: 'The canceled task. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.FromCanceled``1(System.Threading.CancellationToken)
  id: FromCanceled``1(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: FromCanceled<TResult>(CancellationToken)
  fullName: System.Threading.Tasks.Task.FromCanceled<TResult>(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromCanceled
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5542
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that's completed due to cancellation with a specified cancellation token.
  syntax:
    content: public static Task<TResult> FromCanceled<TResult>(CancellationToken cancellationToken)
    content.vb: Public Shared Function FromCanceled(Of TResult)(cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 'The cancellation token with which to complete the task. '
    typeParameters:
    - id: TResult
      description: 'The type of the result returned by the task. '
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: 'The canceled task. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.FromCanceled(Of TResult)(System.Threading.CancellationToken)
  name.vb: FromCanceled(Of TResult)(CancellationToken)
- uid: System.Threading.Tasks.Task.FromException(System.Exception)
  commentId: M:System.Threading.Tasks.Task.FromException(System.Exception)
  id: FromException(System.Exception)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: FromException(Exception)
  fullName: System.Threading.Tasks.Task.FromException(System.Exception)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromException
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5507
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that has completed with a specified exception. '
  syntax:
    content: public static Task FromException(Exception exception)
    content.vb: Public Shared Function FromException(exception As Exception) As Task
    parameters:
    - id: exception
      type: System.Exception
      description: 'The exception with which to complete the task. '
    return:
      type: System.Threading.Tasks.Task
      description: 'The faulted task. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Tasks.Task.FromException``1(System.Exception)
  commentId: M:System.Threading.Tasks.Task.FromException``1(System.Exception)
  id: FromException``1(System.Exception)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: FromException<TResult>(Exception)
  fullName: System.Threading.Tasks.Task.FromException<TResult>(System.Exception)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromException
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5516
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that''s completed with a specified exception. '
  syntax:
    content: public static Task<TResult> FromException<TResult>(Exception exception)
    content.vb: Public Shared Function FromException(Of TResult)(exception As Exception) As Task(Of TResult)
    parameters:
    - id: exception
      type: System.Exception
      description: 'The exception with which to complete the task. '
    typeParameters:
    - id: TResult
      description: 'The type of the result returned by the task. '
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: 'The faulted task. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.FromException(Of TResult)(System.Exception)
  name.vb: FromException(Of TResult)(Exception)
- uid: System.Threading.Tasks.Task.FromResult``1(``0)
  commentId: M:System.Threading.Tasks.Task.FromResult``1(``0)
  id: FromResult``1(``0)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: FromResult<TResult>(TResult)
  fullName: System.Threading.Tasks.Task.FromResult<TResult>(TResult)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromResult
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5498
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> that's completed successfully with the specified result.
  syntax:
    content: public static Task<TResult> FromResult<TResult>(TResult result)
    content.vb: Public Shared Function FromResult(Of TResult)(result As TResult) As Task(Of TResult)
    parameters:
    - id: result
      type: '{TResult}'
      description: 'The result to store into the completed task. '
    typeParameters:
    - id: TResult
      description: 'The type of the result returned by the task. '
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: The successfully completed task.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.FromResult(Of TResult)(TResult)
  name.vb: FromResult(Of TResult)(TResult)
- uid: System.Threading.Tasks.Task.GetAwaiter
  commentId: M:System.Threading.Tasks.Task.GetAwaiter
  id: GetAwaiter
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: GetAwaiter()
  fullName: System.Threading.Tasks.Task.GetAwaiter()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetAwaiter
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 2904
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Gets an awaiter used to await this <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public TaskAwaiter GetAwaiter()
    content.vb: Public Function GetAwaiter As TaskAwaiter
    return:
      type: System.Runtime.CompilerServices.TaskAwaiter
      description: An awaiter instance.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.Run(System.Action)
  commentId: M:System.Threading.Tasks.Task.Run(System.Action)
  id: Run(System.Action)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Run(Action)
  fullName: System.Threading.Tasks.Task.Run(System.Action)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5597
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the ThreadPool and returns a task handle for that work.
  syntax:
    content: public static Task Run(Action action)
    content.vb: Public Shared Function Run(action As Action) As Task
    parameters:
    - id: action
      type: System.Action
      description: The work to execute asynchronously
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the work queued to execute in the ThreadPool.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>action</em> parameter was null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Run(System.Action,System.Threading.CancellationToken)
  id: Run(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Run(Action, CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(System.Action, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5617
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the ThreadPool and returns a task handle for that work.
  syntax:
    content: public static Task Run(Action action, CancellationToken cancellationToken)
    content.vb: Public Shared Function Run(action As Action, cancellationToken As CancellationToken) As Task
    parameters:
    - id: action
      type: System.Action
      description: The work to execute asynchronously
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that should be used to cancel the work
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the work queued to execute in the ThreadPool.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>action</em> parameter was null.
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
    description: The task has been canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with <em>cancellationToken</em> was disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  commentId: M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task})
  id: Run(System.Func{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Run(Func<Task>)
  fullName: System.Threading.Tasks.Task.Run(System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5670
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the ThreadPool and returns a proxy for the  task returned by <em>function</em>.
  syntax:
    content: public static Task Run(Func<Task> function)
    content.vb: Public Shared Function Run(function As Func(Of Task)) As Task
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task}
      description: The work to execute asynchronously
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents a proxy for the task returned by <em>function</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>function</em> parameter was null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.Run(System.Func(Of System.Threading.Tasks.Task))
  name.vb: Run(Func(Of Task))
- uid: System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Run(Func<Task>, CancellationToken)
  fullName: System.Threading.Tasks.Task.Run(System.Func<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5689
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the ThreadPool and returns a proxy for the task returned by <em>function</em>.
  syntax:
    content: public static Task Run(Func<Task> function, CancellationToken cancellationToken)
    content.vb: Public Shared Function Run(function As Func(Of Task), cancellationToken As CancellationToken) As Task
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task}
      description: 'The work to execute asynchronously. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 'A cancellation token that should be used to cancel the work. '
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents a proxy for the task returned by <em>function</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>function</em> parameter was null.
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
    description: The task has been canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with <em>cancellationToken</em> was disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.Run(System.Func(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: Run(Func(Of Task), CancellationToken)
- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0})
  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{``0})
  id: Run``1(System.Func{``0})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Run<TResult>(Func<TResult>)
  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5633
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Queues the specified work to run on the thread pool and returns a <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> object that represents that work. '
  syntax:
    content: public static Task<TResult> Run<TResult>(Func<TResult> function)
    content.vb: Public Shared Function Run(Of TResult)(function As Func(Of TResult)) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: 'The work to execute asynchronously. '
    typeParameters:
    - id: TResult
      description: 'The return type of the task. '
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: 'A task object that represents the work queued to execute in the thread pool. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>function</em> parameter is null. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of TResult))
  name.vb: Run(Of TResult)(Func(Of TResult))
- uid: System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{``0},System.Threading.CancellationToken)
  id: Run``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Run<TResult>(Func<TResult>, CancellationToken)
  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5653
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the thread pool and returns a Task(TResult) handle for that work.
  syntax:
    content: public static Task<TResult> Run<TResult>(Func<TResult> function, CancellationToken cancellationToken)
    content.vb: Public Shared Function Run(Of TResult)(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: The work to execute asynchronously
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that should be used to cancel the work
    typeParameters:
    - id: TResult
      description: The result type of the task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A Task(TResult) that represents the work queued to execute in the ThreadPool.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>function</em> parameter was null.
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
    description: The task has been canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with <em>cancellationToken</em> was disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken)
  name.vb: Run(Of TResult)(Func(Of TResult), CancellationToken)
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Run<TResult>(Func<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5724
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the ThreadPool and returns a proxy for the  Task(TResult) returned by <em>function</em>.
  syntax:
    content: public static Task<TResult> Run<TResult>(Func<Task<TResult>> function)
    content.vb: Public Shared Function Run(Of TResult)(function As Func(Of Task(Of TResult))) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task{{TResult}}}
      description: The work to execute asynchronously
    typeParameters:
    - id: TResult
      description: The type of the result returned by the proxy task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A Task(TResult) that represents a proxy for the Task(TResult) returned by <em>function</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>function</em> parameter was null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: Run(Of TResult)(Func(Of Task(Of TResult)))
- uid: System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  id: Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Run<TResult>(Func<Task<TResult>>, CancellationToken)
  fullName: System.Threading.Tasks.Task.Run<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5740
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Queues the specified work to run on the ThreadPool and returns a proxy for the  Task(TResult) returned by <em>function</em>.
  syntax:
    content: public static Task<TResult> Run<TResult>(Func<Task<TResult>> function, CancellationToken cancellationToken)
    content.vb: Public Shared Function Run(Of TResult)(function As Func(Of Task(Of TResult)), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Threading.Tasks.Task{{TResult}}}
      description: The work to execute asynchronously
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A cancellation token that should be used to cancel the work
    typeParameters:
    - id: TResult
      description: The type of the result returned by the proxy task.
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: A Task(TResult) that represents a proxy for the Task(TResult) returned by <em>function</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>function</em> parameter was null.
  - type: System.Threading.Tasks.TaskCanceledException
    commentId: T:System.Threading.Tasks.TaskCanceledException
    description: The task has been canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with <em>cancellationToken</em> was disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.Run(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)
  name.vb: Run(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)
- uid: System.Threading.Tasks.Task.RunSynchronously
  commentId: M:System.Threading.Tasks.Task.RunSynchronously
  id: RunSynchronously
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: RunSynchronously()
  fullName: System.Threading.Tasks.Task.RunSynchronously()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RunSynchronously
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1121
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Runs the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> synchronously on the current <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void RunSynchronously()
    content.vb: Public Sub RunSynchronously
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instance has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  id: RunSynchronously(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: RunSynchronously(TaskScheduler)
  fullName: System.Threading.Tasks.Task.RunSynchronously(System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RunSynchronously
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1149
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Runs the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> synchronously on the <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> provided.
  syntax:
    content: public void RunSynchronously(TaskScheduler scheduler)
    content.vb: Public Sub RunSynchronously(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The scheduler on which to attempt to run this task inline.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instance has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>scheduler</em> argument is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.Start
  commentId: M:System.Threading.Tasks.Task.Start
  id: Start
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Start()
  fullName: System.Threading.Tasks.Task.Start()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Start
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1036
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Starts the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>, scheduling it for execution to the current <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instance has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  id: Start(System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Start(TaskScheduler)
  fullName: System.Threading.Tasks.Task.Start(System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Start
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 1061
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Starts the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref>, scheduling it for execution to the specified <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Start(TaskScheduler scheduler)
    content.vb: Public Sub Start(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: The <xref href="System.Threading.Tasks.TaskScheduler" data-throw-if-not-resolved="false"></xref> with which to associate and execute this task.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instance has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>scheduler</em> argument is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> is not in a valid state to be started. It may have already been started, executed, or canceled, or it may have been created in a manner that doesn't support direct scheduling.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.Wait
  commentId: M:System.Threading.Tasks.Task.Wait
  id: Wait
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Wait()
  fullName: System.Threading.Tasks.Task.Wait()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3013
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Waits for the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> to complete execution.
  syntax:
    content: public void Wait()
    content.vb: Public Sub Wait
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: 'The task was canceled. The <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection contains a <xref href="System.Threading.Tasks.TaskCanceledException" data-throw-if-not-resolved="false"></xref> object. -or-An exception was thrown during the execution of the task. The <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection contains information about the exception or exceptions. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.Wait(System.Int32)
  commentId: M:System.Threading.Tasks.Task.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Wait(Int32)
  fullName: System.Threading.Tasks.Task.Wait(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3092
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Waits for the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> to complete execution within a specified number of milliseconds.
  syntax:
    content: public bool Wait(int millisecondsTimeout)
    content.vb: Public Function Wait(millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completed execution within the allotted time; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: 'The task was canceled. The <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection contains a <xref href="System.Threading.Tasks.TaskCanceledException" data-throw-if-not-resolved="false"></xref> object. -or-An exception was thrown during the execution of the task. The <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection contains information about the exception or exceptions. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Wait(System.Int32,System.Threading.CancellationToken)
  id: Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Wait(Int32, CancellationToken)
  fullName: System.Threading.Tasks.Task.Wait(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3122
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Waits for the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> to complete execution. The wait terminates if a timeout interval elapses or a cancellation token is canceled before the task completes. '
  syntax:
    content: public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: 'The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 'A cancellation token to observe while waiting for the task to complete. '
    return:
      type: System.Boolean
      description: true if the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completed execution within the allotted time; otherwise, false.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <em>cancellationToken</em> was canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: 'The task was canceled. The <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection contains a <xref href="System.Threading.Tasks.TaskCanceledException" data-throw-if-not-resolved="false"></xref> object. -or-An exception was thrown during the execution of the task. The <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection contains information about the exception or exceptions. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  id: Wait(System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Wait(CancellationToken)
  fullName: System.Threading.Tasks.Task.Wait(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3069
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Waits for the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> to complete execution. The wait terminates if a cancellation token is canceled before the task completes. '
  syntax:
    content: public void Wait(CancellationToken cancellationToken)
    content.vb: Public Sub Wait(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 'A cancellation token to observe while waiting for the task to complete. '
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <em>cancellationToken</em> was canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The task has been disposed.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: 'The task was canceled. The <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection contains a <xref href="System.Threading.Tasks.TaskCanceledException" data-throw-if-not-resolved="false"></xref> object. -or-An exception was thrown during the execution of the task. The <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection contains information about the exception or exceptions. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.Wait(System.TimeSpan)
  commentId: M:System.Threading.Tasks.Task.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Wait(TimeSpan)
  fullName: System.Threading.Tasks.Task.Wait(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3044
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Waits for the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> to complete execution within a specified time interval.
  syntax:
    content: public bool Wait(TimeSpan timeout)
    content.vb: Public Function Wait(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> completed execution within the allotted time; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<em>timeout</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: 'The task was canceled. The <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection contains a <xref href="System.Threading.Tasks.TaskCanceledException" data-throw-if-not-resolved="false"></xref> object. -or-An exception was thrown during the execution of the task. The <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection contains information about the exception or exceptions. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  id: WaitAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WaitAll(Task[])
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4866
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects to complete execution.
  syntax:
    content: public static void WaitAll(params Task[] tasks)
    content.vb: Public Shared Sub WaitAll(ParamArray tasks As Task())
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances on which to wait.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One or more of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects in <em>tasks</em> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument is null.-or-The <em>tasks</em> argument contains a null element.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: 'At least one of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances was canceled. If a task was canceled, the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> exception contains an <xref href="System.OperationCanceledException" data-throw-if-not-resolved="false"></xref> exception in its <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection.-or-An exception was thrown during the execution of at least one of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task())
  name.vb: WaitAll(Task())
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32)
  id: WaitAll(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WaitAll(Task[], Int32)
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4947
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects to complete execution within a specified number of milliseconds.
  syntax:
    content: public static bool WaitAll(Task[] tasks, int millisecondsTimeout)
    content.vb: Public Shared Function WaitAll(tasks As Task(), millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    return:
      type: System.Boolean
      description: true if all of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances completed execution within the allotted time; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One or more of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects in <em>tasks</em> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: 'At least one of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances was canceled. If a task was canceled, the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> contains an <xref href="System.OperationCanceledException" data-throw-if-not-resolved="false"></xref> in its <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection. -or-An exception was thrown during the execution of at least one of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> argument contains a null element.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Int32)
  name.vb: WaitAll(Task(), Int32)
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  id: WaitAll(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WaitAll(Task[], Int32, CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5019
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects to complete execution within a specified number of milliseconds or until the wait is cancelled.
  syntax:
    content: public static bool WaitAll(Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Shared Function WaitAll(tasks As Task(), millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the tasks to complete.
    return:
      type: System.Boolean
      description: true if all of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances completed execution within the allotted time; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One or more of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects in <em>tasks</em> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: 'At least one of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances was canceled. If a task was canceled, the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> contains an <xref href="System.OperationCanceledException" data-throw-if-not-resolved="false"></xref> in its <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection.-or-An exception was thrown during the execution of at least one of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> argument contains a null element.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: 'The <em>cancellationToken</em> was canceled. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Int32, System.Threading.CancellationToken)
  name.vb: WaitAll(Task(), Int32, CancellationToken)
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  id: WaitAll(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WaitAll(Task[], CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4979
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Waits for all of the provided <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects to complete execution unless the wait is cancelled. '
  syntax:
    content: public static void WaitAll(Task[] tasks, CancellationToken cancellationToken)
    content.vb: Public Shared Sub WaitAll(tasks As Task(), cancellationToken As CancellationToken)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances on which to wait.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for the tasks to complete.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: 'The <em>cancellationToken</em> was canceled. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: 'At least one of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances was canceled. If a task was canceled, the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> contains an <xref href="System.OperationCanceledException" data-throw-if-not-resolved="false"></xref> in its <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection.-or-An exception was thrown during the execution of at least one of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances. '
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> argument contains a null element.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One or more of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects in <em>tasks</em> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.Threading.CancellationToken)
  name.vb: WaitAll(Task(), CancellationToken)
- uid: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  commentId: M:System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  id: WaitAll(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WaitAll(Task[], TimeSpan)
  fullName: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task[], System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 4908
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Waits for all of the provided cancellable <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects to complete execution within a specified time interval.
  syntax:
    content: public static bool WaitAll(Task[] tasks, TimeSpan timeout)
    content.vb: Public Shared Function WaitAll(tasks As Task(), timeout As TimeSpan) As Boolean
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances on which to wait.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Boolean
      description: true if all of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances completed execution within the allotted time; otherwise, false.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: One or more of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects in <em>tasks</em> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>tasks</em> argument is null. '
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: 'At least one of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances was canceled. If a task was canceled, the <xref href="System.AggregateException" data-throw-if-not-resolved="false"></xref> contains an <xref href="System.OperationCanceledException" data-throw-if-not-resolved="false"></xref> in its <xref href="System.AggregateException.InnerExceptions" data-throw-if-not-resolved="false"></xref> collection.-or-An exception was thrown during the execution of at least one of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<em>timeout</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> argument contains a null element.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAll(System.Threading.Tasks.Task(), System.TimeSpan)
  name.vb: WaitAll(Task(), TimeSpan)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  id: WaitAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WaitAny(Task[])
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5302
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects to complete execution.
  syntax:
    content: public static int WaitAny(params Task[] tasks)
    content.vb: Public Shared Function WaitAny(ParamArray tasks As Task()) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances on which to wait.
    return:
      type: System.Int32
      description: The index of the completed task in the <em>tasks</em> array argument.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> argument contains a null element.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task())
  name.vb: WaitAny(Task())
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32)
  id: WaitAny(System.Threading.Tasks.Task[],System.Int32)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WaitAny(Task[], Int32)
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5398
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects to complete execution within a specified number of milliseconds.
  syntax:
    content: public static int WaitAny(Task[] tasks, int millisecondsTimeout)
    content.vb: Public Shared Function WaitAny(tasks As Task(), millisecondsTimeout As Integer) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances on which to wait.
    - id: millisecondsTimeout
      type: System.Int32
      description: The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely.
    return:
      type: System.Int32
      description: The index of the completed task in the <em>tasks</em> array argument, or -1 if the timeout occurred.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> argument contains a null element.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Int32)
  name.vb: WaitAny(Task(), Int32)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  id: WaitAny(System.Threading.Tasks.Task[],System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WaitAny(Task[], Int32, CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5434
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects to complete execution within a specified number of milliseconds or until a cancellation token is cancelled.
  syntax:
    content: public static int WaitAny(Task[] tasks, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Shared Function WaitAny(tasks As Task(), millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: 'An array of <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances on which to wait. '
    - id: millisecondsTimeout
      type: System.Int32
      description: 'The number of milliseconds to wait, or <xref href="System.Threading.Timeout.Infinite" data-throw-if-not-resolved="false"></xref> (-1) to wait indefinitely. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 'A <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete. '
    return:
      type: System.Int32
      description: The index of the completed task in the <em>tasks</em> array argument, or -1 if the timeout occurred.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> argument contains a null element.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: 'The <em>cancellationToken</em> was canceled. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Int32, System.Threading.CancellationToken)
  name.vb: WaitAny(Task(), Int32, CancellationToken)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  id: WaitAny(System.Threading.Tasks.Task[],System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WaitAny(Task[], CancellationToken)
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5368
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects to complete execution unless the wait is cancelled.
  syntax:
    content: public static int WaitAny(Task[] tasks, CancellationToken cancellationToken)
    content.vb: Public Shared Function WaitAny(tasks As Task(), cancellationToken As CancellationToken) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: 'An array of <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances on which to wait. '
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: 'A <xref href="System.Threading.Tasks.TaskFactory.CancellationToken" data-throw-if-not-resolved="false"></xref> to observe while waiting for a task to complete. '
    return:
      type: System.Int32
      description: The index of the completed task in the <em>tasks</em> array argument.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> argument contains a null element.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <em>cancellationToken</em> was canceled.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.Threading.CancellationToken)
  name.vb: WaitAny(Task(), CancellationToken)
- uid: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  commentId: M:System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  id: WaitAny(System.Threading.Tasks.Task[],System.TimeSpan)
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WaitAny(Task[], TimeSpan)
  fullName: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task[], System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5335
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Waits for any of the provided <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects to complete execution within a specified time interval.
  syntax:
    content: public static int WaitAny(Task[] tasks, TimeSpan timeout)
    content.vb: Public Shared Function WaitAny(tasks As Task(), timeout As TimeSpan) As Integer
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: An array of <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> instances on which to wait.
    - id: timeout
      type: System.TimeSpan
      description: A <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents the number of milliseconds to wait, or a <xref href="System.TimeSpan" data-throw-if-not-resolved="false"></xref> that represents -1 milliseconds to wait indefinitely.
    return:
      type: System.Int32
      description: The index of the completed task in the <em>tasks</em> array argument, or -1 if the timeout occurred.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument is null.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. -or-<em>timeout</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> argument contains a null element.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WaitAny(System.Threading.Tasks.Task(), System.TimeSpan)
  name.vb: WaitAny(Task(), TimeSpan)
- uid: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  commentId: M:System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  id: WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WhenAll(Collections.Generic.IEnumerable<Task>)
  fullName: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 5967
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when all of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects in an enumerable collection have completed.
  syntax:
    content: public static Task WhenAll(Collections.Generic.IEnumerable<Task> tasks)
    content.vb: Public Shared Function WhenAll(tasks As Collections.Generic.IEnumerable(Of Task)) As Task
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: The tasks to wait on for completion.
    return:
      type: System.Threading.Tasks.Task
      description: 'A task that represents the completion of all of the supplied tasks. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>tasks</em> argument was null. '
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> collection contained a null task.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAll(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))
  name.vb: WhenAll(Collections.Generic.IEnumerable(Of Task))
- uid: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  commentId: M:System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  id: WhenAll(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WhenAll(Task[])
  fullName: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6030
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a task that will complete when all of the <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> objects in an array have completed. '
  syntax:
    content: public static Task WhenAll(params Task[] tasks)
    content.vb: Public Shared Function WhenAll(ParamArray tasks As Task()) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The tasks to wait on for completion.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the completion of all of the supplied tasks.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The <em>tasks</em> argument was null. '
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The <em>tasks</em> array contained a null task. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAll(System.Threading.Tasks.Task())
  name.vb: WhenAll(Task())
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  commentId: M:System.Threading.Tasks.Task.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  id: WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WhenAll<TResult>(Collections.Generic.IEnumerable<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.WhenAll<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6218
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a task that will complete when all of the <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> objects in an enumerable collection have completed. '
  syntax:
    content: public static Task<TResult[]> WhenAll<TResult>(Collections.Generic.IEnumerable<Task<TResult>> tasks)
    content.vb: Public Shared Function WhenAll(Of TResult)(tasks As Collections.Generic.IEnumerable(Of Task(Of TResult))) As Task(Of TResult())
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}
      description: 'The tasks to wait on for completion. '
    typeParameters:
    - id: TResult
      description: 'The type of the completed task. '
    return:
      type: System.Threading.Tasks.Task{{TResult}[]}
      description: 'A task that represents the completion of all of the supplied tasks. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument was null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The <em>tasks</em> collection contained a null task. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAll(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: WhenAll(Of TResult)(Collections.Generic.IEnumerable(Of Task(Of TResult)))
- uid: System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  commentId: M:System.Threading.Tasks.Task.WhenAll``1(System.Threading.Tasks.Task{``0}[])
  id: WhenAll``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WhenAll<TResult>(Task<TResult>[])
  fullName: System.Threading.Tasks.Task.WhenAll<TResult>(System.Threading.Tasks.Task<TResult>[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAll
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6284
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: 'Creates a task that will complete when all of the <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref> objects in an array have completed. '
  syntax:
    content: public static Task<TResult[]> WhenAll<TResult>(params Task<TResult>[] tasks)
    content.vb: Public Shared Function WhenAll(Of TResult)(ParamArray tasks As Task(Of TResult)()) As Task(Of TResult())
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TResult}}[]
      description: The tasks to wait on for completion.
    typeParameters:
    - id: TResult
      description: The type of the completed task.
    return:
      type: System.Threading.Tasks.Task{{TResult}[]}
      description: A task that represents the completion of all of the supplied tasks.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument was null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> array contained a null task.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAll(Of TResult)(System.Threading.Tasks.Task(Of TResult)())
  name.vb: WhenAll(Of TResult)(Task(Of TResult)())
- uid: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  commentId: M:System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  id: WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WhenAny(Collections.Generic.IEnumerable<Task>)
  fullName: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6496
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when any of the supplied tasks have completed.
  syntax:
    content: public static Task<Task> WhenAny(Collections.Generic.IEnumerable<Task> tasks)
    content.vb: Public Shared Function WhenAny(tasks As Collections.Generic.IEnumerable(Of Task)) As Task(Of Task)
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
      description: The tasks to wait on for completion.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
      description: A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument was null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> array contained a null task, or was empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAny(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task))
  name.vb: WhenAny(Collections.Generic.IEnumerable(Of Task))
- uid: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  commentId: M:System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  id: WhenAny(System.Threading.Tasks.Task[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WhenAny(Task[])
  fullName: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6457
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when any of the supplied tasks have completed.
  syntax:
    content: public static Task<Task> WhenAny(params Task[] tasks)
    content.vb: Public Shared Function WhenAny(ParamArray tasks As Task()) As Task(Of Task)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: The tasks to wait on for completion.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
      description: A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument was null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> array contained a null task, or was empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAny(System.Threading.Tasks.Task())
  name.vb: WhenAny(Task())
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  commentId: M:System.Threading.Tasks.Task.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  id: WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WhenAny<TResult>(Collections.Generic.IEnumerable<Task<TResult>>)
  fullName: System.Threading.Tasks.Task.WhenAny<TResult>(System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6563
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when any of the supplied tasks have completed.
  syntax:
    content: public static Task<Task<TResult>> WhenAny<TResult>(Collections.Generic.IEnumerable<Task<TResult>> tasks)
    content.vb: Public Shared Function WhenAny(Of TResult)(tasks As Collections.Generic.IEnumerable(Of Task(Of TResult))) As Task(Of Task(Of TResult))
    parameters:
    - id: tasks
      type: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}
      description: The tasks to wait on for completion.
    typeParameters:
    - id: TResult
      description: The type of the completed task.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}
      description: A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument was null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> array contained a null task, or was empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAny(Of TResult)(System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: WhenAny(Of TResult)(Collections.Generic.IEnumerable(Of Task(Of TResult)))
- uid: System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  commentId: M:System.Threading.Tasks.Task.WhenAny``1(System.Threading.Tasks.Task{``0}[])
  id: WhenAny``1(System.Threading.Tasks.Task{``0}[])
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: WhenAny<TResult>(Task<TResult>[])
  fullName: System.Threading.Tasks.Task.WhenAny<TResult>(System.Threading.Tasks.Task<TResult>[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WhenAny
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 6534
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates a task that will complete when any of the supplied tasks have completed.
  syntax:
    content: public static Task<Task<TResult>> WhenAny<TResult>(params Task<TResult>[] tasks)
    content.vb: Public Shared Function WhenAny(Of TResult)(ParamArray tasks As Task(Of TResult)()) As Task(Of Task(Of TResult))
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TResult}}[]
      description: The tasks to wait on for completion.
    typeParameters:
    - id: TResult
      description: The type of the completed task.
    return:
      type: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}
      description: A task that represents the completion of one of the supplied tasks.  The return task's Result is the task that completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>tasks</em> argument was null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>tasks</em> array contained a null task, or was empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Task.WhenAny(Of TResult)(System.Threading.Tasks.Task(Of TResult)())
  name.vb: WhenAny(Of TResult)(Task(Of TResult)())
- uid: System.Threading.Tasks.Task.Yield
  commentId: M:System.Threading.Tasks.Task.Yield
  id: Yield
  parent: System.Threading.Tasks.Task
  langs:
  - csharp
  - vb
  name: Yield()
  fullName: System.Threading.Tasks.Task.Yield()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Task.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Yield
    path: src/mscorlib/src/System/Threading/Tasks/Task.cs
    startLine: 3000
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: Creates an awaitable task that asynchronously yields back to the current context when awaited.
  syntax:
    content: public static YieldAwaitable Yield()
    content.vb: Public Shared Function Yield As YieldAwaitable
    return:
      type: System.Runtime.CompilerServices.YieldAwaitable
      description: 'A context that, when awaited, will asynchronously transition back into the current context at the time of the await. If the current <xref href="System.Threading.SynchronizationContext" data-throw-if-not-resolved="false"></xref> is non-null, it is treated as the current context. Otherwise, the task scheduler that is associated with the currently executing task is treated as the current context. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Action
  isExternal: false
  name: Action
  fullName: System.Action
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Action{System.Object}
  definition: System.Action`1
  name: Action<Object>
  fullName: System.Action<System.Object>
  fullname.vb: System.Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Action`1
  isExternal: false
  name: Action<>
  fullName: System.Action<>
  fullname.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Nullable{System.Int32}
  definition: System.Nullable`1
  name: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<>
  fullName: System.Nullable<>
  fullname.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  fullName: System.AggregateException
- uid: System.Threading.Tasks.TaskFactory
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskFactory
  fullName: System.Threading.Tasks.TaskFactory
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.TaskStatus
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskStatus
  fullName: System.Threading.Tasks.TaskStatus
- uid: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: ConfiguredTaskAwaitable
  fullName: System.Runtime.CompilerServices.ConfiguredTaskAwaitable
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
- uid: System.Action{System.Threading.Tasks.Task,System.Object}
  definition: System.Action`2
  name: Action<Task, Object>
  fullName: System.Action<System.Threading.Tasks.Task, System.Object>
  fullname.vb: System.Action(Of System.Threading.Tasks.Task, System.Object)
  name.vb: Action(Of Task, Object)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Action`2
  isExternal: false
  name: Action<, >
  fullName: System.Action<, >
  fullname.vb: System.Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Action{System.Threading.Tasks.Task}
  definition: System.Action`1
  name: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
  fullname.vb: System.Action(Of System.Threading.Tasks.Task)
  name.vb: Action(Of Task)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task,{TResult}}
  definition: System.Func`2
  name: Func<Task, TResult>
  fullName: System.Func<System.Threading.Tasks.Task, TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task, TResult)
  name.vb: Func(Of Task, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`2
  isExternal: false
  name: Func<, >
  fullName: System.Func<, >
  fullname.vb: System.Func(Of , )
  name.vb: Func(Of , )
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task,System.Object,{TResult}}
  definition: System.Func`3
  name: Func<Task, Object, TResult>
  fullName: System.Func<System.Threading.Tasks.Task, System.Object, TResult>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task, System.Object, TResult)
  name.vb: Func(Of Task, Object, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func`3
  isExternal: false
  name: Func<, , >
  fullName: System.Func<, , >
  fullname.vb: System.Func(Of , , )
  name.vb: Func(Of , , )
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
- uid: System.Runtime.CompilerServices.TaskAwaiter
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: TaskAwaiter
  fullName: System.Runtime.CompilerServices.TaskAwaiter
- uid: System.Func{System.Threading.Tasks.Task}
  definition: System.Func`1
  name: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<>
  fullName: System.Func<>
  fullname.vb: System.Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Func{{TResult}}
  definition: System.Func`1
  name: Func<TResult>
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task{{TResult}}}
  definition: System.Func`1
  name: Func<Task<TResult>>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>>
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of Task(Of TResult))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task[]
  isExternal: false
  name: Task[]
  fullName: System.Threading.Tasks.Task[]
  fullname.vb: System.Threading.Tasks.Task()
  name.vb: Task()
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Task>
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task)
  name.vb: Collections.Generic.IEnumerable(Of Task)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{{TResult}}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Task<TResult>>
  fullName: System.Collections.Generic.IEnumerable<System.Threading.Tasks.Task<TResult>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Threading.Tasks.Task(Of TResult))
  name.vb: Collections.Generic.IEnumerable(Of Task(Of TResult))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult[]>
  fullName: System.Threading.Tasks.Task<TResult[]>
  fullname.vb: System.Threading.Tasks.Task(Of TResult())
  name.vb: Task(Of TResult())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}[]
  isExternal: false
  name: Task<TResult>[]
  fullName: System.Threading.Tasks.Task<TResult>[]
  fullname.vb: System.Threading.Tasks.Task(Of TResult)()
  name.vb: Task(Of TResult)()
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Task>
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task>
  fullname.vb: System.Threading.Tasks.Task(Of System.Threading.Tasks.Task)
  name.vb: Task(Of Task)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Threading.Tasks.Task{{TResult}}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Task<TResult>>
  fullName: System.Threading.Tasks.Task<System.Threading.Tasks.Task<TResult>>
  fullname.vb: System.Threading.Tasks.Task(Of System.Threading.Tasks.Task(Of TResult))
  name.vb: Task(Of Task(Of TResult))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Runtime.CompilerServices.YieldAwaitable
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: YieldAwaitable
  fullName: System.Runtime.CompilerServices.YieldAwaitable
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Threading.Tasks.TaskCanceledException
  isExternal: false
  name: TaskCanceledException
  fullName: System.Threading.Tasks.TaskCanceledException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  fullName: System.OperationCanceledException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
