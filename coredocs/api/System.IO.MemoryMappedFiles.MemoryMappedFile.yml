items:
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile
  commentId: T:System.IO.MemoryMappedFiles.MemoryMappedFile
  id: MemoryMappedFile
  parent: System.IO.MemoryMappedFiles
  children:
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose
  - System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)
  - System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle
  langs:
  - csharp
  - vb
  name: MemoryMappedFile
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile
  type: Class
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemoryMappedFile
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.Windows.cs
    startLine: 12
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: 'Represents a memory-mapped file. '
  syntax:
    content: 'public class MemoryMappedFile : IDisposable'
    content.vb: >-
      Public Class MemoryMappedFile
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle
  commentId: P:System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle
  id: SafeMemoryMappedFileHandle
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: SafeMemoryMappedFileHandle
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.SafeMemoryMappedFileHandle
  type: Property
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SafeMemoryMappedFileHandle
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 488
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Gets the file handle of a memory-mapped file.
  syntax:
    content: public SafeMemoryMappedFileHandle SafeMemoryMappedFileHandle { get; }
    content.vb: Public ReadOnly Property SafeMemoryMappedFileHandle As SafeMemoryMappedFileHandle
    parameters: []
    return:
      type: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
      description: The handle to the memory-mapped file.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)
  id: CreateFromFile(System.IO.FileStream,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.HandleInheritability,System.Boolean)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateFromFile(FileStream, String, Int64, MemoryMappedFileAccess, HandleInheritability, Boolean)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.IO.FileStream, System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess, System.IO.HandleInheritability, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateFromFile
    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
    startLine: 27
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Creates a memory-mapped file from an existing file with the specified access mode, name, inheritability, and capacity.
  syntax:
    content: public static MemoryMappedFile CreateFromFile(FileStream fileStream, string mapName, long capacity, MemoryMappedFileAccess access, HandleInheritability inheritability, bool leaveOpen)
    content.vb: Public Shared Function CreateFromFile(fileStream As FileStream, mapName As String, capacity As Long, access As MemoryMappedFileAccess, inheritability As HandleInheritability, leaveOpen As Boolean) As MemoryMappedFile
    parameters:
    - id: fileStream
      type: System.IO.FileStream
      description: The file stream of the existing file.
    - id: mapName
      type: System.String
      description: A name to assign to the memory-mapped file.
    - id: capacity
      type: System.Int64
      description: The maximum size, in bytes, to allocate to the memory-mapped file. Specify 0 to set the capacity to the size of <em>filestream</em>.
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: "One of the enumeration values that specifies the type of access allowed to the memory-mapped file. This parameter canâ€™t be set to <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\" data-throw-if-not-resolved=\"false\"></xref>. "
    - id: inheritability
      type: System.IO.HandleInheritability
      description: One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <xref href="System.IO.HandleInheritability.None" data-throw-if-not-resolved="false"></xref>.
    - id: leaveOpen
      type: System.Boolean
      description: 'A value that indicates whether to close the source file stream when the <xref href="System.IO.MemoryMappedFiles.MemoryMappedFile" data-throw-if-not-resolved="false"></xref> is disposed. '
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified characteristics.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mapName</em> is null or an empty string.-or-<em>capacity</em> and the length of the file are zero.-or-<em>access</em> is set to <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> enumeration value, which is not allowed.-or-<em>access</em> is set to <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read\" data-throw-if-not-resolved=\"false\"></xref> and <em>capacity</em> is larger than the length of filestream."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>fileStream</em>  is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>capacity</em> is less than zero.-or-<em>capacity</em> is less than the file size.-or-<em>access</em> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\" data-throw-if-not-resolved=\"false\"></xref> enumeration value.-or-<em>inheritability</em> is not a valid <xref href=\"System.IO.HandleInheritability\" data-throw-if-not-resolved=\"false\"></xref> enumeration value."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)
  id: CreateFromFile(System.String)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateFromFile(String)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateFromFile
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 95
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Creates a memory-mapped file from a file on disk.
  syntax:
    content: public static MemoryMappedFile CreateFromFile(string path)
    content.vb: Public Shared Function CreateFromFile(path As String) As MemoryMappedFile
    parameters:
    - id: path
      type: System.String
      description: The path to file to map.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>path</em> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <xref href=\"System.IO.Path.GetInvalidFileNameChars\" data-throw-if-not-resolved=\"false\"></xref> method. -or-<em>path</em> refers to an invalid device. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>path</em> is null."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An I/O error occurred.
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<em>path</em> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permissions for the file.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode)
  id: CreateFromFile(System.String,System.IO.FileMode)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateFromFile(String, FileMode)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String, System.IO.FileMode)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateFromFile
    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
    startLine: 29
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: 'Creates a memory-mapped file that has the specified access mode from a file on disk. '
  syntax:
    content: public static MemoryMappedFile CreateFromFile(string path, FileMode mode)
    content.vb: Public Shared Function CreateFromFile(path As String, mode As FileMode) As MemoryMappedFile
    parameters:
    - id: path
      type: System.String
      description: The path to file to map.
    - id: mode
      type: System.IO.FileMode
      description: Access mode; must be <xref href="System.IO.FileMode.Open" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified access mode.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>path</em> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <xref href=\"System.IO.Path.GetInvalidFileNameChars\" data-throw-if-not-resolved=\"false\"></xref> method. -or-<em>path</em> refers to an invalid device.-or-<em>mode</em> is <xref href=\"System.IO.FileMode.Append\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>path</em> is null."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<em>mode</em> is <xref href=\"System.IO.FileMode.Create\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileMode.CreateNew\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.IO.FileMode.Truncate\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>mode</em> is <xref href=\"System.IO.FileMode.OpenOrCreate\" data-throw-if-not-resolved=\"false\"></xref> and the file on disk does not exist.-or-An I/O error occurred."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<em>path</em> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters. "
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permissions for the file.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String)
  id: CreateFromFile(System.String,System.IO.FileMode,System.String)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateFromFile(String, FileMode, String)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String, System.IO.FileMode, System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateFromFile
    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
    startLine: 30
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Creates a memory-mapped file that has the specified access mode and name from a file on disk.
  syntax:
    content: public static MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName)
    content.vb: Public Shared Function CreateFromFile(path As String, mode As FileMode, mapName As String) As MemoryMappedFile
    parameters:
    - id: path
      type: System.String
      description: The path to the file to map.
    - id: mode
      type: System.IO.FileMode
      description: Access mode; must be <xref href="System.IO.FileMode.Open" data-throw-if-not-resolved="false"></xref>.
    - id: mapName
      type: System.String
      description: 'A name to assign to the memory-mapped file. '
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified name and access mode.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>path</em> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <xref href=\"System.IO.Path.GetInvalidFileNameChars\" data-throw-if-not-resolved=\"false\"></xref> method. -or-<em>path</em> refers to an invalid device.-or-<em>mapName</em> is an empty string.-or-<em>mode</em> is <xref href=\"System.IO.FileMode.Append\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>path</em> or <em>mapName</em> is null."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<em>mode</em> is <xref href=\"System.IO.FileMode.Create\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileMode.CreateNew\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.IO.FileMode.Truncate\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>mode</em> is <xref href=\"System.IO.FileMode.OpenOrCreate\" data-throw-if-not-resolved=\"false\"></xref> and the file on disk does not exist.-or-An I/O error occurred."
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<em>path</em> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permissions for the file.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)
  id: CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateFromFile(String, FileMode, String, Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String, System.IO.FileMode, System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateFromFile
    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
    startLine: 31
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Creates a memory-mapped file that has the specified access mode, name, and capacity from a file on disk.
  syntax:
    content: public static MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName, long capacity)
    content.vb: Public Shared Function CreateFromFile(path As String, mode As FileMode, mapName As String, capacity As Long) As MemoryMappedFile
    parameters:
    - id: path
      type: System.String
      description: The path to the file to map.
    - id: mode
      type: System.IO.FileMode
      description: Access mode; can be any of the <xref href="System.IO.FileMode" data-throw-if-not-resolved="false"></xref> enumeration values except <xref href="System.IO.FileMode.Append" data-throw-if-not-resolved="false"></xref>.
    - id: mapName
      type: System.String
      description: 'A name to assign to the memory-mapped file. '
    - id: capacity
      type: System.Int64
      description: The maximum size, in bytes, to allocate to the memory-mapped file. Specify 0 to set the capacity to the size of the file on disk.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified characteristics.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>path</em> is an empty string, contains only white space, or has one or more invalid characters, as defined by the <xref href=\"System.IO.Path.GetInvalidFileNameChars\" data-throw-if-not-resolved=\"false\"></xref> method. -or-<em>path</em> refers to an invalid device.-or-<em>mapName</em> is an empty string.-or-<em>mode</em> is <xref href=\"System.IO.FileMode.Append\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>path</em> or <em>mapName</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>capacity</em> is greater than the size of the logical address space.-or-<em>capacity</em> is less than zero.-or-<em>capacity</em> is less than the file size (but not zero).-or-<em>capacity</em> is zero, and the size of the file on disk is also zero."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An I/O error occurred.
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<em>path</em> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permissions for the file.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  id: CreateFromFile(System.String,System.IO.FileMode,System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateFromFile(String, FileMode, String, Int64, MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateFromFile(System.String, System.IO.FileMode, System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateFromFile
    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
    startLine: 32
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Creates a memory-mapped file that has the specified access mode, name, capacity, and access type from a file on disk.
  syntax:
    content: public static MemoryMappedFile CreateFromFile(string path, FileMode mode, string mapName, long capacity, MemoryMappedFileAccess access)
    content.vb: Public Shared Function CreateFromFile(path As String, mode As FileMode, mapName As String, capacity As Long, access As MemoryMappedFileAccess) As MemoryMappedFile
    parameters:
    - id: path
      type: System.String
      description: The path to the file to map.
    - id: mode
      type: System.IO.FileMode
      description: Access mode; can be any of the <xref href="System.IO.FileMode" data-throw-if-not-resolved="false"></xref> enumeration values except <xref href="System.IO.FileMode.Append" data-throw-if-not-resolved="false"></xref>.
    - id: mapName
      type: System.String
      description: 'A name to assign to the memory-mapped file. '
    - id: capacity
      type: System.Int64
      description: The maximum size, in bytes, to allocate to the memory-mapped file. Specify 0 to set the capacity to the size of the file on disk.
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: One of the enumeration values that specifies the type of access allowed to the memory-mapped file.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified characteristics.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mapName</em> is an empty string.-or-<em>access</em> is not an allowed value.-or-<em>path</em> specifies an empty file.-or-<em>access</em> is specified as <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Read\" data-throw-if-not-resolved=\"false\"></xref> and capacity is greater than the size of the file indicated by <em>path</em>.-or-<em>mode</em> is <xref href=\"System.IO.FileMode.Append\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>path</em> or <em>mapName</em> is null. "
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>capacity</em> is greater than the size of the logical address space.-or-<em>capacity</em> is less than zero.-or-<em>capacity</em> is less than the file size (but not zero).-or-<em>capacity</em> is zero, and the size of the file on disk is also zero.-or-<em>access</em> is not a defined <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\" data-throw-if-not-resolved=\"false\"></xref> value.-or-The size of the file indicated by <em>path</em> is greater than <em>capacity</em>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: -or-An I/O error occurred.
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<em>path</em> exceeds the maximum length defined by the operating system. In Windows, paths must contain fewer than 248 characters, and file names must contain fewer than 260 characters."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the required permissions for the file.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64)
  id: CreateNew(System.String,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateNew(String, Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateNew
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 260
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: 'Creates a memory-mapped file that has the specified capacity in system memory. '
  syntax:
    content: public static MemoryMappedFile CreateNew(string mapName, long capacity)
    content.vb: Public Shared Function CreateNew(mapName As String, capacity As Long) As MemoryMappedFile
    parameters:
    - id: mapName
      type: System.String
      description: A name to assign to the memory-mapped file.
    - id: capacity
      type: System.Int64
      description: The maximum size, in bytes, to allocate to the memory-mapped file.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified name and capacity.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mapName</em> is an empty string. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>mapName</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>capacity</em> is less than or equal to zero."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  id: CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateNew(String, Int64, MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateNew
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 266
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: 'Creates a memory-mapped file that has the specified capacity and access type in system memory. '
  syntax:
    content: public static MemoryMappedFile CreateNew(string mapName, long capacity, MemoryMappedFileAccess access)
    content.vb: Public Shared Function CreateNew(mapName As String, capacity As Long, access As MemoryMappedFileAccess) As MemoryMappedFile
    parameters:
    - id: mapName
      type: System.String
      description: A name to assign to the memory-mapped file.
    - id: capacity
      type: System.Int64
      description: The maximum size, in bytes, to allocate to the memory-mapped file.
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: 'One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <xref href="System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" data-throw-if-not-resolved="false"></xref>. '
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified characteristics.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mapName</em> is an empty string.-or-<em>access</em> is set to write-only with the <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> enumeration value. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>mapName</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>capacity</em> is less than or equal to zero.-or-<em>access</em> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\" data-throw-if-not-resolved=\"false\"></xref> enumeration value."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  id: CreateNew(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateNew(String, Int64, MemoryMappedFileAccess, MemoryMappedFileOptions, HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateNew(System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess, System.IO.MemoryMappedFiles.MemoryMappedFileOptions, System.IO.HandleInheritability)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateNew
    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
    startLine: 35
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Creates a memory-mapped file that has the specified name, capacity, access type, memory allocation options and inheritability.
  syntax:
    content: public static MemoryMappedFile CreateNew(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, HandleInheritability inheritability)
    content.vb: Public Shared Function CreateNew(mapName As String, capacity As Long, access As MemoryMappedFileAccess, options As MemoryMappedFileOptions, inheritability As HandleInheritability) As MemoryMappedFile
    parameters:
    - id: mapName
      type: System.String
      description: A name to assign to the memory-mapped file.
    - id: capacity
      type: System.Int64
      description: The maximum size, in bytes, to allocate to the memory-mapped file.
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <xref href="System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" data-throw-if-not-resolved="false"></xref>.
    - id: options
      type: System.IO.MemoryMappedFiles.MemoryMappedFileOptions
      description: A bitwise combination of enumeration values that specifies memory allocation options for the memory-mapped file.
    - id: inheritability
      type: System.IO.HandleInheritability
      description: A value that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <xref href="System.IO.HandleInheritability.None" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified characteristics.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mapName</em> is an empty string.-or-<em>access</em> is set to write-only with the <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> enumeration value. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>mapName</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>capacity</em> is less than or equal to zero.-or-<em>access</em> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\" data-throw-if-not-resolved=\"false\"></xref> enumeration value.-or-<em>inheritability</em> is not a valid <xref href=\"System.IO.HandleInheritability\" data-throw-if-not-resolved=\"false\"></xref> value."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64)
  id: CreateOrOpen(System.String,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateOrOpen(String, Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateOrOpen
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 321
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Creates or opens a memory-mapped file that has the specified capacity in system memory.
  syntax:
    content: public static MemoryMappedFile CreateOrOpen(string mapName, long capacity)
    content.vb: Public Shared Function CreateOrOpen(mapName As String, capacity As Long) As MemoryMappedFile
    parameters:
    - id: mapName
      type: System.String
      description: A name to assign to the memory-mapped file.
    - id: capacity
      type: System.Int64
      description: The maximum size, in bytes, to allocate to the memory-mapped file.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified name and size.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mapName</em> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>mapName</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>capacity</em> is greater than the size of the logical address space.-or-<em>capacity</em> is less than or equal to zero."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  id: CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateOrOpen(String, Int64, MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateOrOpen
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 327
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: 'Creates or opens a memory-mapped file that has the specified capacity and access type in system memory. '
  syntax:
    content: public static MemoryMappedFile CreateOrOpen(string mapName, long capacity, MemoryMappedFileAccess access)
    content.vb: Public Shared Function CreateOrOpen(mapName As String, capacity As Long, access As MemoryMappedFileAccess) As MemoryMappedFile
    parameters:
    - id: mapName
      type: System.String
      description: A name to assign to the memory-mapped file.
    - id: capacity
      type: System.Int64
      description: The maximum size, in bytes, to allocate to the memory-mapped file.
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: 'One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <xref href="System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" data-throw-if-not-resolved="false"></xref>. '
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified characteristics.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mapName</em> is an empty string.-or-<em>access</em> is set to write-only with the <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> enumeration value."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>mapName</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>capacity</em> is greater than the size of the logical address space.-or-<em>capacity</em> is less than or equal to zero.-or-<em>access</em> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\" data-throw-if-not-resolved=\"false\"></xref> enumeration value."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: 'The operating system denied the specified access to the file; for example, access is set to <xref href="System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" data-throw-if-not-resolved="false"></xref> or <xref href="System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" data-throw-if-not-resolved="false"></xref>, but the file or directory is read-only. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  id: CreateOrOpen(System.String,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess,System.IO.MemoryMappedFiles.MemoryMappedFileOptions,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateOrOpen(String, Int64, MemoryMappedFileAccess, MemoryMappedFileOptions, HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateOrOpen(System.String, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess, System.IO.MemoryMappedFiles.MemoryMappedFileOptions, System.IO.HandleInheritability)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateOrOpen
    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
    startLine: 38
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: 'Creates a new empty memory mapped file or opens an existing memory mapped file if one exists with the same name. If opening an existing file, the capacity, options, and memory arguments will be ignored. '
  syntax:
    content: public static MemoryMappedFile CreateOrOpen(string mapName, long capacity, MemoryMappedFileAccess access, MemoryMappedFileOptions options, HandleInheritability inheritability)
    content.vb: Public Shared Function CreateOrOpen(mapName As String, capacity As Long, access As MemoryMappedFileAccess, options As MemoryMappedFileOptions, inheritability As HandleInheritability) As MemoryMappedFile
    parameters:
    - id: mapName
      type: System.String
      description: A name to assign to the memory-mapped file.
    - id: capacity
      type: System.Int64
      description: The maximum size, in bytes, to allocate to the memory-mapped file.
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: 'One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <xref href="System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" data-throw-if-not-resolved="false"></xref>. '
    - id: options
      type: System.IO.MemoryMappedFiles.MemoryMappedFileOptions
      description: A bitwise combination of values that indicate the memory allocation options to apply to the file.
    - id: inheritability
      type: System.IO.HandleInheritability
      description: A value that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <xref href="System.IO.HandleInheritability.None" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified characteristics.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mapName</em> is an empty string.-or-<em>access</em> is set to write-only with the <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write\" data-throw-if-not-resolved=\"false\"></xref> enumeration value."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>mapName</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>capacity</em> is greater than the size of the logical address space.-or-<em>capacity</em> is less than or equal to zero.-or-<em>access</em> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\" data-throw-if-not-resolved=\"false\"></xref> enumeration value.-or-<em>inheritability</em> is not a valid <xref href=\"System.IO.HandleInheritability\" data-throw-if-not-resolved=\"false\"></xref> enumeration value."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: 'The operating system denied the specified access to the file; for example, access is set to <xref href="System.IO.MemoryMappedFiles.MemoryMappedFileAccess.Write" data-throw-if-not-resolved="false"></xref> or <xref href="System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" data-throw-if-not-resolved="false"></xref>, but the file or directory is read-only. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor
  id: CreateViewAccessor
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateViewAccessor()
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor()
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateViewAccessor
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 426
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Creates a <xref href="System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" data-throw-if-not-resolved="false"></xref> that maps to a view of the memory-mapped file.
  syntax:
    content: public MemoryMappedViewAccessor CreateViewAccessor()
    content.vb: Public Function CreateViewAccessor As MemoryMappedViewAccessor
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
      description: A randomly accessible block of memory.
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Access to the memory-mapped file is unauthorized.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64)
  id: CreateViewAccessor(System.Int64,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateViewAccessor(Int64, Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateViewAccessor
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 431
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Creates a <xref href="System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" data-throw-if-not-resolved="false"></xref> that maps to a view of the memory-mapped file, and that has the specified offset and size.
  syntax:
    content: public MemoryMappedViewAccessor CreateViewAccessor(long offset, long size)
    content.vb: Public Function CreateViewAccessor(offset As Long, size As Long) As MemoryMappedViewAccessor
    parameters:
    - id: offset
      type: System.Int64
      description: The byte at which to start the view.
    - id: size
      type: System.Int64
      description: The size of the view. Specify 0 (zero) to create a view that starts at <em>offset</em> and ends approximately at the end of the memory-mapped file.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
      description: A randomly accessible block of memory.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> or <em>size</em> is a negative value.-or-<em>size</em> is greater than the logical address space."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Access to the memory-mapped file is unauthorized.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An I/O error occurred.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  id: CreateViewAccessor(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateViewAccessor(Int64, Int64, MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewAccessor(System.Int64, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateViewAccessor
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 436
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Creates a <xref href="System.IO.MemoryMappedFiles.MemoryMappedViewAccessor" data-throw-if-not-resolved="false"></xref> that maps to a view of the memory-mapped file, and that has the specified offset, size, and access restrictions.
  syntax:
    content: public MemoryMappedViewAccessor CreateViewAccessor(long offset, long size, MemoryMappedFileAccess access)
    content.vb: Public Function CreateViewAccessor(offset As Long, size As Long, access As MemoryMappedFileAccess) As MemoryMappedViewAccessor
    parameters:
    - id: offset
      type: System.Int64
      description: The byte at which to start the view.
    - id: size
      type: System.Int64
      description: The size of the view. Specify 0 (zero) to create a view that starts at <em>offset</em> and ends approximately at the end of the memory-mapped file.
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <xref href="System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
      description: A randomly accessible block of memory.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> or <em>size</em> is a negative value.-or-<em>size</em> is greater than the logical address space."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<em>access</em> is invalid for the memory-mapped file."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: An I/O error occurred.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream
  id: CreateViewStream
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateViewStream()
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream()
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateViewStream
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 388
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: 'Creates a stream that maps to a view of the memory-mapped file.  '
  syntax:
    content: public MemoryMappedViewStream CreateViewStream()
    content.vb: Public Function CreateViewStream As MemoryMappedViewStream
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedViewStream
      description: A stream of memory.
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Access to the memory-mapped file is unauthorized.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64)
  id: CreateViewStream(System.Int64,System.Int64)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateViewStream(Int64, Int64)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateViewStream
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 393
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Creates a stream that maps to a view of the memory-mapped file, and that has the specified offset and size.
  syntax:
    content: public MemoryMappedViewStream CreateViewStream(long offset, long size)
    content.vb: Public Function CreateViewStream(offset As Long, size As Long) As MemoryMappedViewStream
    parameters:
    - id: offset
      type: System.Int64
      description: The byte at which to start the view.
    - id: size
      type: System.Int64
      description: The size of the view. Specify 0 (zero) to create a view that starts at <em>offset</em> and ends approximately at the end of the memory-mapped file.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedViewStream
      description: A stream of memory that has the specified offset and size.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> or <em>size</em> is a negative value.-or-<em>size</em> is greater than the logical address space."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: Access to the memory-mapped file is unauthorized.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<em>size</em> is greater than the total virtual memory."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  id: CreateViewStream(System.Int64,System.Int64,System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: CreateViewStream(Int64, Int64, MemoryMappedFileAccess)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.CreateViewStream(System.Int64, System.Int64, System.IO.MemoryMappedFiles.MemoryMappedFileAccess)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateViewStream
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 398
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Creates a stream that maps to a view of the memory-mapped file, and that has the specified offset, size, and access type.
  syntax:
    content: public MemoryMappedViewStream CreateViewStream(long offset, long size, MemoryMappedFileAccess access)
    content.vb: Public Function CreateViewStream(offset As Long, size As Long, access As MemoryMappedFileAccess) As MemoryMappedViewStream
    parameters:
    - id: offset
      type: System.Int64
      description: The byte at which to start the view.
    - id: size
      type: System.Int64
      description: The size of the view. Specify 0 (zero) to create a view that starts at <em>offset</em> and ends approximately at the end of the memory-mapped file.
    - id: access
      type: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
      description: One of the enumeration values that specifies the type of access allowed to the memory-mapped file. The default is <xref href="System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedViewStream
      description: A stream of memory that has the specified characteristics.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> or <em>size</em> is a negative value.-or-<em>size</em> is greater than the logical address space.-or-<em>access </em>is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileAccess\" data-throw-if-not-resolved=\"false\"></xref> enumeration value."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<em>access</em> is invalid for the memory-mapped file."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<em>size</em> is greater than the total virtual memory.-or-<em>access</em> is invalid for the memory-mapped file."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose
  id: Dispose
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose()
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 463
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: 'Releases all resources used by the <xref href="System.IO.MemoryMappedFiles.MemoryMappedFile" data-throw-if-not-resolved="false"></xref>. '
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 469
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: 'Releases the unmanaged resources used by the <xref href="System.IO.MemoryMappedFiles.MemoryMappedFile" data-throw-if-not-resolved="false"></xref> and optionally releases the managed resources. '
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: 'true to release both managed and unmanaged resources; false to release only unmanaged resources. '
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)
  id: OpenExisting(System.String)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: OpenExisting(String)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenExisting
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 49
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Opens an existing memory-mapped file that has the specified name in system memory.
  syntax:
    content: public static MemoryMappedFile OpenExisting(string mapName)
    content.vb: Public Shared Function OpenExisting(mapName As String) As MemoryMappedFile
    parameters:
    - id: mapName
      type: System.String
      description: The name of the memory-mapped file to open.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: 'A memory-mapped file that has the specified name. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mapName</em> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>mapName</em> is null."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The file specified for <em>mapName</em> does not exist.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)
  id: OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: OpenExisting(String, MemoryMappedFileRights)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String, System.IO.MemoryMappedFiles.MemoryMappedFileRights)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenExisting
    path: src/System.IO.MemoryMappedFiles/src/System/IO/MemoryMappedFiles/MemoryMappedFile.cs
    startLine: 54
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Opens an existing memory-mapped file that has the specified name and access rights in system memory.
  syntax:
    content: public static MemoryMappedFile OpenExisting(string mapName, MemoryMappedFileRights desiredAccessRights)
    content.vb: Public Shared Function OpenExisting(mapName As String, desiredAccessRights As MemoryMappedFileRights) As MemoryMappedFile
    parameters:
    - id: mapName
      type: System.String
      description: The name of the memory-mapped file to open.
    - id: desiredAccessRights
      type: System.IO.MemoryMappedFiles.MemoryMappedFileRights
      description: One of the enumeration values that specifies the access rights to apply to the memory-mapped file.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified characteristics.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mapName</em> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>mapName</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>desiredAccessRights</em> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileRights\" data-throw-if-not-resolved=\"false\"></xref> enumeration value."
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The file specified for <em>mapName</em> does not exist.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)
  commentId: M:System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)
  id: OpenExisting(System.String,System.IO.MemoryMappedFiles.MemoryMappedFileRights,System.IO.HandleInheritability)
  parent: System.IO.MemoryMappedFiles.MemoryMappedFile
  langs:
  - csharp
  - vb
  name: OpenExisting(String, MemoryMappedFileRights, HandleInheritability)
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile.OpenExisting(System.String, System.IO.MemoryMappedFiles.MemoryMappedFileRights, System.IO.HandleInheritability)
  type: Method
  source:
    remote:
      path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenExisting
    path: src/System.IO.MemoryMappedFiles/ref/System.IO.MemoryMappedFiles.cs
    startLine: 49
  assemblies:
  - System.IO.MemoryMappedFiles
  namespace: System.IO.MemoryMappedFiles
  summary: Opens an existing memory-mapped file that has the specified name, access rights, and inheritability in system memory.
  syntax:
    content: public static MemoryMappedFile OpenExisting(string mapName, MemoryMappedFileRights desiredAccessRights, HandleInheritability inheritability)
    content.vb: Public Shared Function OpenExisting(mapName As String, desiredAccessRights As MemoryMappedFileRights, inheritability As HandleInheritability) As MemoryMappedFile
    parameters:
    - id: mapName
      type: System.String
      description: The name of the memory-mapped file to open.
    - id: desiredAccessRights
      type: System.IO.MemoryMappedFiles.MemoryMappedFileRights
      description: One of the enumeration values that specifies the access rights to apply to the memory-mapped file.
    - id: inheritability
      type: System.IO.HandleInheritability
      description: One of the enumeration values that specifies whether a handle to the memory-mapped file can be inherited by a child process. The default is <xref href="System.IO.HandleInheritability.None" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.IO.MemoryMappedFiles.MemoryMappedFile
      description: A memory-mapped file that has the specified characteristics.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mapName</em> is an empty string."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>mapName</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>desiredAccessRights</em> is not a valid <xref href=\"System.IO.MemoryMappedFiles.MemoryMappedFileRights\" data-throw-if-not-resolved=\"false\"></xref> enumeration value.-or-<em>inheritability</em> is not a valid <xref href=\"System.IO.HandleInheritability\" data-throw-if-not-resolved=\"false\"></xref> enumeration value."
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The requested access is invalid for the memory-mapped file.
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: The file specified for <em>mapName</em> does not exist.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.IO.MemoryMappedFiles
  isExternal: false
  name: System.IO.MemoryMappedFiles
  fullName: System.IO.MemoryMappedFiles
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeMemoryMappedFileHandle
  fullName: Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.IO.FileStream
  parent: System.IO
  isExternal: false
  name: FileStream
  fullName: System.IO.FileStream
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedFileAccess
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFileAccess
- uid: System.IO.HandleInheritability
  parent: System.IO
  isExternal: false
  name: HandleInheritability
  fullName: System.IO.HandleInheritability
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.IO.MemoryMappedFiles.MemoryMappedFile
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedFile
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFile
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.MemoryMappedFiles.MemoryMappedFileOptions
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedFileOptions
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFileOptions
- uid: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedViewAccessor
  fullName: System.IO.MemoryMappedFiles.MemoryMappedViewAccessor
- uid: System.IO.MemoryMappedFiles.MemoryMappedViewStream
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedViewStream
  fullName: System.IO.MemoryMappedFiles.MemoryMappedViewStream
- uid: System.IO.MemoryMappedFiles.MemoryMappedFileRights
  parent: System.IO.MemoryMappedFiles
  isExternal: false
  name: MemoryMappedFileRights
  fullName: System.IO.MemoryMappedFiles.MemoryMappedFileRights
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.IO.PathTooLongException
  isExternal: false
  name: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.UnauthorizedAccessException
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
