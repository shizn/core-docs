items:
- uid: System.Net.Sockets.TcpListener
  commentId: T:System.Net.Sockets.TcpListener
  id: TcpListener
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.TcpListener.AcceptSocketAsync
  - System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  - System.Net.Sockets.TcpListener.Active
  - System.Net.Sockets.TcpListener.ExclusiveAddressUse
  - System.Net.Sockets.TcpListener.LocalEndpoint
  - System.Net.Sockets.TcpListener.Pending
  - System.Net.Sockets.TcpListener.Server
  - System.Net.Sockets.TcpListener.Start
  - System.Net.Sockets.TcpListener.Start(System.Int32)
  - System.Net.Sockets.TcpListener.Stop
  langs:
  - csharp
  - vb
  name: TcpListener
  fullName: System.Net.Sockets.TcpListener
  type: Class
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TcpListener
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 13
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Listens for connections from TCP network clients.
  syntax:
    content: 'public class TcpListener : object'
    content.vb: >-
      Public Class TcpListener
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  id: '#ctor(System.Net.IPAddress,System.Int32)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: TcpListener(IPAddress, Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(System.Net.IPAddress, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 441
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the <xref href="System.Net.Sockets.TcpListener" data-throw-if-not-resolved="false"></xref> class that listens for incoming connection attempts on the specified local IP address and port number.
  syntax:
    content: public TcpListener(IPAddress localaddr, int port)
    content.vb: Public Sub New(localaddr As IPAddress, port As Integer)
    parameters:
    - id: localaddr
      type: System.Net.IPAddress
      description: 'An <xref href="System.Net.IPAddress" data-throw-if-not-resolved="false"></xref> that represents the local IP address. '
    - id: port
      type: System.Int32
      description: 'The port on which to listen for incoming connection attempts. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>localaddr</em> is null. "
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>port</em> is not between <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  commentId: M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: TcpListener(IPEndPoint)
  fullName: System.Net.Sockets.TcpListener.TcpListener(System.Net.IPEndPoint)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 442
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Initializes a new instance of the <xref href="System.Net.Sockets.TcpListener" data-throw-if-not-resolved="false"></xref> class with the specified local endpoint.
  syntax:
    content: public TcpListener(IPEndPoint localEP)
    content.vb: Public Sub New(localEP As IPEndPoint)
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: 'An <xref href="System.Net.IPEndPoint" data-throw-if-not-resolved="false"></xref> that represents the local endpoint to which to bind the listener <xref href="System.Net.Sockets.Socket" data-throw-if-not-resolved="false"></xref>. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>localEP</em> is null. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.Active
  commentId: P:System.Net.Sockets.TcpListener.Active
  id: Active
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Active
  fullName: System.Net.Sockets.TcpListener.Active
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Active
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 77
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets a value that indicates whether <xref href="System.Net.Sockets.TcpListener" data-throw-if-not-resolved="false"></xref> is actively listening for client connections.
  syntax:
    content: protected bool Active { get; }
    content.vb: Protected ReadOnly Property Active As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if <xref href="System.Net.Sockets.TcpListener" data-throw-if-not-resolved="false"></xref> is actively listening; otherwise, false.
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  commentId: P:System.Net.Sockets.TcpListener.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: ExclusiveAddressUse
  fullName: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveAddressUse
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 94
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets or sets a <xref href="System.Boolean" data-throw-if-not-resolved="false"></xref> value that specifies whether the <xref href="System.Net.Sockets.TcpListener" data-throw-if-not-resolved="false"></xref> allows only one underlying socket to listen to a specific port.
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    content.vb: Public Property ExclusiveAddressUse As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the <xref href="System.Net.Sockets.TcpListener" data-throw-if-not-resolved="false"></xref> allows only one <xref href="System.Net.Sockets.TcpListener" data-throw-if-not-resolved="false"></xref> to listen to a specific port; otherwise, false. . The default is true for Windows Server 2003 and Windows XP Service Pack 2 and later, and false for all other versions.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Net.Sockets.TcpListener" data-throw-if-not-resolved="false"></xref> has been started. Call the <xref href="System.Net.Sockets.TcpListener.Stop" data-throw-if-not-resolved="false"></xref> method and then set the <xref href="System.Net.Sockets.Socket.ExclusiveAddressUse" data-throw-if-not-resolved="false"></xref> property.
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: An error occurred when attempting to access the underlying socket.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: 'The underlying <xref href="System.Net.Sockets.Socket" data-throw-if-not-resolved="false"></xref> has been closed. '
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.LocalEndpoint
  commentId: P:System.Net.Sockets.TcpListener.LocalEndpoint
  id: LocalEndpoint
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: LocalEndpoint
  fullName: System.Net.Sockets.TcpListener.LocalEndpoint
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalEndpoint
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 86
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the underlying <xref href="System.Net.EndPoint" data-throw-if-not-resolved="false"></xref> of the current <xref href="System.Net.Sockets.TcpListener" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public EndPoint LocalEndpoint { get; }
    content.vb: Public ReadOnly Property LocalEndpoint As EndPoint
    parameters: []
    return:
      type: System.Net.EndPoint
      description: The <xref href="System.Net.EndPoint" data-throw-if-not-resolved="false"></xref> to which the <xref href="System.Net.Sockets.Socket" data-throw-if-not-resolved="false"></xref> is bound.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.TcpListener.Server
  commentId: P:System.Net.Sockets.TcpListener.Server
  id: Server
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Server
  fullName: System.Net.Sockets.TcpListener.Server
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Server
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 67
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the underlying network <xref href="System.Net.Sockets.Socket" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public Socket Server { get; }
    content.vb: Public ReadOnly Property Server As Socket
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: The underlying <xref href="System.Net.Sockets.Socket" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync
  commentId: M:System.Net.Sockets.TcpListener.AcceptSocketAsync
  id: AcceptSocketAsync
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: AcceptSocketAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptSocketAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AcceptSocketAsync
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 316
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Accepts a pending connection request as an asynchronous operation.
  syntax:
    content: public Threading.Tasks.Task<Socket> AcceptSocketAsync()
    content.vb: Public Function AcceptSocketAsync As Threading.Tasks.Task(Of Socket)
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.Socket}
      description: Returns <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>The task object representing the asynchronous operation. The <xref href="System.Threading.Tasks.Task`1.Result" data-throw-if-not-resolved="false"></xref> property on the task object returns a <xref href="System.Net.Sockets.Socket" data-throw-if-not-resolved="false"></xref> used to send and receive data.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The listener has not been started with a call to <xref href="System.Net.Sockets.TcpListener.Start" data-throw-if-not-resolved="false"></xref>. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  id: AcceptTcpClientAsync
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: AcceptTcpClientAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClientAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AcceptTcpClientAsync
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 324
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: 'Accepts a pending connection request as an asynchronous operation. '
  syntax:
    content: public Threading.Tasks.Task<TcpClient> AcceptTcpClientAsync()
    content.vb: Public Function AcceptTcpClientAsync As Threading.Tasks.Task(Of TcpClient)
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
      description: Returns <xref href="System.Threading.Tasks.Task`1" data-throw-if-not-resolved="false"></xref>The task object representing the asynchronous operation. The <xref href="System.Threading.Tasks.Task`1.Result" data-throw-if-not-resolved="false"></xref> property on the task object returns a <xref href="System.Net.Sockets.TcpClient" data-throw-if-not-resolved="false"></xref> used to send and receive data.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The listener has not been started with a call to <xref href="System.Net.Sockets.TcpListener.Start" data-throw-if-not-resolved="false"></xref>. '
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Use the <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.Pending
  commentId: M:System.Net.Sockets.TcpListener.Pending
  id: Pending
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Pending()
  fullName: System.Net.Sockets.TcpListener.Pending()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pending
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 204
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Determines if there are pending connection requests.
  syntax:
    content: public bool Pending()
    content.vb: Public Function Pending As Boolean
    return:
      type: System.Boolean
      description: true if connections are pending; otherwise, false.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The listener has not been started with a call to <xref href="System.Net.Sockets.TcpListener.Start" data-throw-if-not-resolved="false"></xref>. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.Start
  commentId: M:System.Net.Sockets.TcpListener.Start
  id: Start
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Start()
  fullName: System.Net.Sockets.TcpListener.Start()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Start
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 113
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Starts listening for incoming connection requests.
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Use the <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.Start(System.Int32)
  commentId: M:System.Net.Sockets.TcpListener.Start(System.Int32)
  id: Start(System.Int32)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Start(Int32)
  fullName: System.Net.Sockets.TcpListener.Start(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Start
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 118
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Starts listening for incoming connection requests with a maximum number of pending connection.
  syntax:
    content: public void Start(int backlog)
    content.vb: Public Sub Start(backlog As Integer)
    parameters:
    - id: backlog
      type: System.Int32
      description: The maximum length of the pending connections queue.
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: 'An error occurred while accessing the socket. See the Remarks section for more information. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The<em> backlog</em> parameter is less than zero or exceeds the maximum number of permitted connections.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The underlying <xref href="System.Net.Sockets.Socket" data-throw-if-not-resolved="false"></xref> is null.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.TcpListener.Stop
  commentId: M:System.Net.Sockets.TcpListener.Stop
  id: Stop
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Stop()
  fullName: System.Net.Sockets.TcpListener.Stop()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Stop
    path: src/System.Net.Sockets/src/System/Net/Sockets/TCPListener.cs
    startLine: 171
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Closes the listener.
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "Use the <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Net.IPEndPoint
  isExternal: false
  name: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Net.EndPoint
  parent: System.Net
  isExternal: false
  name: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  name: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Threading.Tasks.Task{System.Net.Sockets.Socket}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<Socket>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.Socket>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.Socket)
  name.vb: Threading.Tasks.Task(Of Socket)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Sockets.Socket
    name: Socket
    fullName: System.Net.Sockets.Socket
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Sockets.Socket
    name: Socket
    fullName: System.Net.Sockets.Socket
  - name: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
  definition: System.Threading.Tasks.Task`1
  name: Threading.Tasks.Task<TcpClient>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.TcpClient>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.TcpClient)
  name.vb: Threading.Tasks.Task(Of TcpClient)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Sockets.TcpClient
    name: TcpClient
    fullName: System.Net.Sockets.TcpClient
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Threading.Tasks.Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Sockets.TcpClient
    name: TcpClient
    fullName: System.Net.Sockets.TcpClient
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Net.Sockets.SocketException
  isExternal: false
  name: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
