items:
- uid: System.Security.AccessControl.ObjectAce
  commentId: T:System.Security.AccessControl.ObjectAce
  id: ObjectAce
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.ObjectAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid,System.Boolean,System.Byte[])
  - System.Security.AccessControl.ObjectAce.BinaryLength
  - System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.ObjectAce.InheritedObjectAceType
  - System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)
  - System.Security.AccessControl.ObjectAce.ObjectAceFlags
  - System.Security.AccessControl.ObjectAce.ObjectAceType
  langs:
  - csharp
  - vb
  name: ObjectAce
  fullName: System.Security.AccessControl.ObjectAce
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ObjectAce
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 344
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Controls access to Directory Services objects. This class represents an Access Control Entry (ACE) associated with a directory object.
  syntax:
    content: 'public sealed class ObjectAce : QualifiedAce'
    content.vb: >-
      Public NotInheritable Class ObjectAce
          Inherits QualifiedAce
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericAce
  - System.Security.AccessControl.KnownAce
  - System.Security.AccessControl.QualifiedAce
  inheritedMembers:
  - System.Security.AccessControl.QualifiedAce.AceQualifier
  - System.Security.AccessControl.QualifiedAce.IsCallback
  - System.Security.AccessControl.QualifiedAce.OpaqueLength
  - System.Security.AccessControl.QualifiedAce.GetOpaque
  - System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  - System.Security.AccessControl.KnownAce.AccessMask
  - System.Security.AccessControl.KnownAce.SecurityIdentifier
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.PropagationFlags
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetHashCode
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.ObjectAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid,System.Boolean,System.Byte[])
  commentId: M:System.Security.AccessControl.ObjectAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid,System.Boolean,System.Byte[])
  id: '#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Security.AccessControl.ObjectAceFlags,System.Guid,System.Guid,System.Boolean,System.Byte[])'
  parent: System.Security.AccessControl.ObjectAce
  langs:
  - csharp
  - vb
  name: ObjectAce(AceFlags, AceQualifier, Int32, Principal.SecurityIdentifier, ObjectAceFlags, Guid, Guid, Boolean, Byte[])
  fullName: System.Security.AccessControl.ObjectAce.ObjectAce(System.Security.AccessControl.AceFlags, System.Security.AccessControl.AceQualifier, System.Int32, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid, System.Boolean, System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 346
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Initiates a new instance of the <xref href="System.Security.AccessControl.ObjectAce" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public ObjectAce(AceFlags aceFlags, AceQualifier qualifier, int accessMask, Principal.SecurityIdentifier sid, ObjectAceFlags flags, Guid type, Guid inheritedType, bool isCallback, byte[] opaque)
    content.vb: Public Sub New(aceFlags As AceFlags, qualifier As AceQualifier, accessMask As Integer, sid As Principal.SecurityIdentifier, flags As ObjectAceFlags, type As Guid, inheritedType As Guid, isCallback As Boolean, opaque As Byte())
    parameters:
    - id: aceFlags
      type: System.Security.AccessControl.AceFlags
      description: The inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).
    - id: qualifier
      type: System.Security.AccessControl.AceQualifier
      description: The use of the new ACE.
    - id: accessMask
      type: System.Int32
      description: The access mask for the ACE.
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: The <xref href="System.Security.Principal.SecurityIdentifier" data-throw-if-not-resolved="false"></xref> associated with the new ACE.
    - id: flags
      type: System.Security.AccessControl.ObjectAceFlags
      description: Whether the <em>type</em> and <em>inheritedType</em> parameters contain valid object GUIDs.
    - id: type
      type: System.Guid
      description: A GUID that identifies the object type to which the new ACE applies.
    - id: inheritedType
      type: System.Guid
      description: A GUID that identifies the object type that can inherit the new ACE.
    - id: isCallback
      type: System.Boolean
      description: true if the new ACE is a callback type ACE.
    - id: opaque
      type: System.Byte[]
      description: Opaque data associated with the new ACE. This is allowed only for callback ACE types. The length of this array must not be greater than the return value of the <xref href="System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)" data-throw-if-not-resolved="false"></xref> method.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The qualifier parameter contains an invalid value or the length of the value of the opaque parameter is greater than the return value of the <xref href="System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)" data-throw-if-not-resolved="false"></xref> method.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.ObjectAce.ObjectAce(System.Security.AccessControl.AceFlags, System.Security.AccessControl.AceQualifier, System.Int32, System.Security.Principal.SecurityIdentifier, System.Security.AccessControl.ObjectAceFlags, System.Guid, System.Guid, System.Boolean, System.Byte())
  name.vb: ObjectAce(AceFlags, AceQualifier, Int32, Principal.SecurityIdentifier, ObjectAceFlags, Guid, Guid, Boolean, Byte())
- uid: System.Security.AccessControl.ObjectAce.BinaryLength
  commentId: P:System.Security.AccessControl.ObjectAce.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.ObjectAce
  langs:
  - csharp
  - vb
  name: BinaryLength
  fullName: System.Security.AccessControl.ObjectAce.BinaryLength
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinaryLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 347
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.ObjectAce" data-throw-if-not-resolved="false"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href="System.Security.AccessControl.ObjectAce.GetBinaryForm" data-throw-if-not-resolved="false"></xref> method.
  syntax:
    content: public override int BinaryLength { get; }
    content.vb: Public Overrides ReadOnly Property BinaryLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: The length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.ObjectAce" data-throw-if-not-resolved="false"></xref> object.
  overridden: System.Security.AccessControl.GenericAce.BinaryLength
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.ObjectAce.InheritedObjectAceType
  commentId: P:System.Security.AccessControl.ObjectAce.InheritedObjectAceType
  id: InheritedObjectAceType
  parent: System.Security.AccessControl.ObjectAce
  langs:
  - csharp
  - vb
  name: InheritedObjectAceType
  fullName: System.Security.AccessControl.ObjectAce.InheritedObjectAceType
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InheritedObjectAceType
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 348
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets or sets the GUID of the object type that can inherit the Access Control Entry (ACE) that this <xref href="System.Security.AccessControl.ObjectAce" data-throw-if-not-resolved="false"></xref> object represents.
  syntax:
    content: public Guid InheritedObjectAceType { get; set; }
    content.vb: Public Property InheritedObjectAceType As Guid
    parameters: []
    return:
      type: System.Guid
      description: The GUID of the object type that can inherit the Access Control Entry (ACE) that this <xref href="System.Security.AccessControl.ObjectAce" data-throw-if-not-resolved="false"></xref> object represents.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectAce.ObjectAceFlags
  commentId: P:System.Security.AccessControl.ObjectAce.ObjectAceFlags
  id: ObjectAceFlags
  parent: System.Security.AccessControl.ObjectAce
  langs:
  - csharp
  - vb
  name: ObjectAceFlags
  fullName: System.Security.AccessControl.ObjectAce.ObjectAceFlags
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ObjectAceFlags
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 349
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets or sets flags that specify whether the <xref href="System.Security.AccessControl.ObjectAce.ObjectAceType" data-throw-if-not-resolved="false"></xref> and <xref href="System.Security.AccessControl.ObjectAce.InheritedObjectAceType" data-throw-if-not-resolved="false"></xref> properties contain values that identify valid object types.
  syntax:
    content: public ObjectAceFlags ObjectAceFlags { get; set; }
    content.vb: Public Property ObjectAceFlags As ObjectAceFlags
    parameters: []
    return:
      type: System.Security.AccessControl.ObjectAceFlags
      description: On or more members of the <xref href="System.Security.AccessControl.ObjectAceFlags" data-throw-if-not-resolved="false"></xref> enumeration combined with a logical OR operation.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectAce.ObjectAceType
  commentId: P:System.Security.AccessControl.ObjectAce.ObjectAceType
  id: ObjectAceType
  parent: System.Security.AccessControl.ObjectAce
  langs:
  - csharp
  - vb
  name: ObjectAceType
  fullName: System.Security.AccessControl.ObjectAce.ObjectAceType
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ObjectAceType
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 350
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets or sets the GUID of the object type associated with this <xref href="System.Security.AccessControl.ObjectAce" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public Guid ObjectAceType { get; set; }
    content.vb: Public Property ObjectAceType As Guid
    parameters: []
    return:
      type: System.Guid
      description: The GUID of the object type associated with this <xref href="System.Security.AccessControl.ObjectAce" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.ObjectAce
  langs:
  - csharp
  - vb
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 351
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Marshals the contents of the <xref href="System.Security.AccessControl.ObjectAce" data-throw-if-not-resolved="false"></xref> object into the specified byte array beginning at the specified offset.
  syntax:
    content: public override void GetBinaryForm(byte[] binaryForm, int offset)
    content.vb: Public Overrides Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: The byte array into which the contents of the <xref href="System.Security.AccessControl.ObjectAce" data-throw-if-not-resolved="false"></xref> is marshaled.
    - id: offset
      type: System.Int32
      description: The offset at which to start marshaling.
  overridden: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.ObjectAce\" data-throw-if-not-resolved=\"false\"></xref> to be copied into <em>array</em>."
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.AccessControl.ObjectAce.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
- uid: System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)
  commentId: M:System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)
  id: MaxOpaqueLength(System.Boolean)
  parent: System.Security.AccessControl.ObjectAce
  langs:
  - csharp
  - vb
  name: MaxOpaqueLength(Boolean)
  fullName: System.Security.AccessControl.ObjectAce.MaxOpaqueLength(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxOpaqueLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 352
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Returns the maximum allowed length, in bytes, of an opaque data BLOB for callback Access Control Entries (ACEs).
  syntax:
    content: public static int MaxOpaqueLength(bool isCallback)
    content.vb: Public Shared Function MaxOpaqueLength(isCallback As Boolean) As Integer
    parameters:
    - id: isCallback
      type: System.Boolean
      description: True if the <xref href="System.Security.AccessControl.ObjectAce" data-throw-if-not-resolved="false"></xref> is a callback ACE type.
    return:
      type: System.Int32
      description: The maximum allowed length, in bytes, of an opaque data BLOB for callback Access Control Entries (ACEs).
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.KnownAce
  parent: System.Security.AccessControl
  isExternal: false
  name: KnownAce
  fullName: System.Security.AccessControl.KnownAce
- uid: System.Security.AccessControl.QualifiedAce
  parent: System.Security.AccessControl
  isExternal: false
  name: QualifiedAce
  fullName: System.Security.AccessControl.QualifiedAce
- uid: System.Security.AccessControl.QualifiedAce.AceQualifier
  parent: System.Security.AccessControl.QualifiedAce
  isExternal: false
  name: AceQualifier
  fullName: System.Security.AccessControl.QualifiedAce.AceQualifier
- uid: System.Security.AccessControl.QualifiedAce.IsCallback
  parent: System.Security.AccessControl.QualifiedAce
  isExternal: false
  name: IsCallback
  fullName: System.Security.AccessControl.QualifiedAce.IsCallback
- uid: System.Security.AccessControl.QualifiedAce.OpaqueLength
  parent: System.Security.AccessControl.QualifiedAce
  isExternal: false
  name: OpaqueLength
  fullName: System.Security.AccessControl.QualifiedAce.OpaqueLength
- uid: System.Security.AccessControl.QualifiedAce.GetOpaque
  parent: System.Security.AccessControl.QualifiedAce
  isExternal: false
  name: GetOpaque()
  fullName: System.Security.AccessControl.QualifiedAce.GetOpaque()
  spec.csharp:
  - uid: System.Security.AccessControl.QualifiedAce.GetOpaque
    name: GetOpaque
    fullName: System.Security.AccessControl.QualifiedAce.GetOpaque
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.QualifiedAce.GetOpaque
    name: GetOpaque
    fullName: System.Security.AccessControl.QualifiedAce.GetOpaque
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  parent: System.Security.AccessControl.QualifiedAce
  isExternal: true
  name: SetOpaque(Byte[])
  fullName: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  fullname.vb: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte())
  name.vb: SetOpaque(Byte())
  spec.csharp:
  - uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
    name: SetOpaque
    fullName: System.Security.AccessControl.QualifiedAce.SetOpaque
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
    name: SetOpaque
    fullName: System.Security.AccessControl.QualifiedAce.SetOpaque
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Security.AccessControl.KnownAce.AccessMask
  parent: System.Security.AccessControl.KnownAce
  isExternal: false
  name: AccessMask
  fullName: System.Security.AccessControl.KnownAce.AccessMask
- uid: System.Security.AccessControl.KnownAce.SecurityIdentifier
  parent: System.Security.AccessControl.KnownAce
  isExternal: false
  name: SecurityIdentifier
  fullName: System.Security.AccessControl.KnownAce.SecurityIdentifier
- uid: System.Security.AccessControl.GenericAce.AceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
- uid: System.Security.AccessControl.GenericAce.Copy
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: Copy
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: Copy
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: CreateFromBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)
  name.vb: CreateFromBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: CreateFromBinaryForm
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: CreateFromBinaryForm
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: Equals
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: Equals
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: GetHashCode
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: GetHashCode
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.AccessControl.AceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AceFlags
  fullName: System.Security.AccessControl.AceFlags
- uid: System.Security.AccessControl.AceQualifier
  parent: System.Security.AccessControl
  isExternal: false
  name: AceQualifier
  fullName: System.Security.AccessControl.AceQualifier
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: Principal.SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.AccessControl.ObjectAceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: ObjectAceFlags
  fullName: System.Security.AccessControl.ObjectAceFlags
- uid: System.Guid
  parent: System
  isExternal: false
  name: Guid
  fullName: System.Guid
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
