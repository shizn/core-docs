items:
- uid: System.Reflection.Emit.PropertyBuilder
  commentId: T:System.Reflection.Emit.PropertyBuilder
  id: PropertyBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)
  - System.Reflection.Emit.PropertyBuilder.Attributes
  - System.Reflection.Emit.PropertyBuilder.CanRead
  - System.Reflection.Emit.PropertyBuilder.CanWrite
  - System.Reflection.Emit.PropertyBuilder.DeclaringType
  - System.Reflection.Emit.PropertyBuilder.GetIndexParameters
  - System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])
  - System.Reflection.Emit.PropertyBuilder.Name
  - System.Reflection.Emit.PropertyBuilder.PropertyType
  - System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)
  - System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  - System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)
  - System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)
  - System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])
  langs:
  - csharp
  - vb
  name: PropertyBuilder
  fullName: System.Reflection.Emit.PropertyBuilder
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PropertyBuilder
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 27
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Defines the properties for a type.
  syntax:
    content: 'public sealed class PropertyBuilder : PropertyInfo'
    content.vb: >-
      Public NotInheritable Class PropertyBuilder
          Inherits PropertyInfo
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.PropertyBuilder.Attributes
  commentId: P:System.Reflection.Emit.PropertyBuilder.Attributes
  id: Attributes
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.Emit.PropertyBuilder.Attributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Attributes
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 232
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets the attributes for this property.
  syntax:
    content: public override PropertyAttributes Attributes { get; }
    content.vb: Public Overrides ReadOnly Property Attributes As PropertyAttributes
    parameters: []
    return:
      type: System.Reflection.PropertyAttributes
      description: Attributes of this property.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.PropertyBuilder.CanRead
  commentId: P:System.Reflection.Emit.PropertyBuilder.CanRead
  id: CanRead
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.Reflection.Emit.PropertyBuilder.CanRead
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanRead
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 236
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets a value indicating whether the property can be read.
  syntax:
    content: public override bool CanRead { get; }
    content.vb: Public Overrides ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this property can be read; otherwise, false.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.PropertyBuilder.CanWrite
  commentId: P:System.Reflection.Emit.PropertyBuilder.CanWrite
  id: CanWrite
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.Reflection.Emit.PropertyBuilder.CanWrite
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanWrite
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 239
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets a value indicating whether the property can be written to.
  syntax:
    content: public override bool CanWrite { get; }
    content.vb: Public Overrides ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this property can be written to; otherwise, false.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.PropertyBuilder.DeclaringType
  commentId: P:System.Reflection.Emit.PropertyBuilder.DeclaringType
  id: DeclaringType
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: DeclaringType
  fullName: System.Reflection.Emit.PropertyBuilder.DeclaringType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaringType
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 284
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets the class that declares this member.
  syntax:
    content: public override Type DeclaringType { get; }
    content.vb: Public Overrides ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: System.Type
      description: The Type object for the class that declares this member.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.PropertyBuilder.Name
  commentId: P:System.Reflection.Emit.PropertyBuilder.Name
  id: Name
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Reflection.Emit.PropertyBuilder.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 280
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets the name of this member.
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: A <xref href="System.String" data-throw-if-not-resolved="false"></xref> containing the name of this member.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.PropertyBuilder.PropertyType
  commentId: P:System.Reflection.Emit.PropertyBuilder.PropertyType
  id: PropertyType
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: PropertyType
  fullName: System.Reflection.Emit.PropertyBuilder.PropertyType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PropertyType
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 228
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets the type of the field of this property.
  syntax:
    content: public override Type PropertyType { get; }
    content.vb: Public Overrides ReadOnly Property PropertyType As Type
    parameters: []
    return:
      type: System.Type
      description: The type of this property.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)
  commentId: M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)
  id: AddOtherMethod(System.Reflection.Emit.MethodBuilder)
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: AddOtherMethod(MethodBuilder)
  fullName: System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddOtherMethod
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 135
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Adds one of the other methods associated with this property.
  syntax:
    content: public void AddOtherMethod(MethodBuilder mdBuilder)
    content.vb: Public Sub AddOtherMethod(mdBuilder As MethodBuilder)
    parameters:
    - id: mdBuilder
      type: System.Reflection.Emit.MethodBuilder
      description: 'A MethodBuilder object that represents the other method. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>mdBuilder</em> is null. "
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref> has been called on the enclosing type. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.PropertyBuilder.GetIndexParameters
  commentId: M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters
  id: GetIndexParameters
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: GetIndexParameters()
  fullName: System.Reflection.Emit.PropertyBuilder.GetIndexParameters()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetIndexParameters
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 223
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Returns an array of all the index parameters for the property.
  syntax:
    content: public override ParameterInfo[] GetIndexParameters()
    content.vb: Public Overrides Function GetIndexParameters As ParameterInfo()
    return:
      type: System.Reflection.ParameterInfo[]
      description: An array of type ParameterInfo containing the parameters for the indexes.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'This method is not supported. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])
  commentId: M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])
  id: GetValue(System.Object,System.Object[])
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: GetValue(Object, Object[])
  fullName: System.Reflection.Emit.PropertyBuilder.GetValue(System.Object, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 178
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Gets the value of the indexed property by calling the property's getter method.
  syntax:
    content: public override object GetValue(object obj, object[] index)
    content.vb: Public Overrides Function GetValue(obj As Object, index As Object()) As Object
    parameters:
    - id: obj
      type: System.Object
      description: 'The object whose property value will be returned. '
    - id: index
      type: System.Object[]
      description: 'Optional index values for indexed properties. This value should be null for non-indexed properties. '
    return:
      type: System.Object
      description: The value of the specified indexed property.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'This method is not supported. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Reflection.Emit.PropertyBuilder.GetValue(System.Object, System.Object())
  name.vb: GetValue(Object, Object())
- uid: System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)
  commentId: M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)
  id: SetConstant(System.Object)
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: SetConstant(Object)
  fullName: System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetConstant
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 69
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets the default value of this property.
  syntax:
    content: public void SetConstant(object defaultValue)
    content.vb: Public Sub SetConstant(defaultValue As Object)
    parameters:
    - id: defaultValue
      type: System.Object
      description: 'The default value of this property. '
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref> has been called on the enclosing type. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The property is not one of the supported types.-or-The type of <em>defaultValue</em> does not match the type of the property.-or-The property is of type <xref href="System.Object" data-throw-if-not-resolved="false"></xref> or other reference type, <em>defaultValue</em> is not null, and the value cannot be assigned to the reference type. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 144
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Set a custom attribute using a specified custom attribute blob.
  syntax:
    content: public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: 'The constructor for the custom attribute. '
    - id: binaryAttribute
      type: System.Byte[]
      description: 'A byte blob representing the attributes. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>con</em> or <em>binaryAttribute</em> is null. "
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref> has been called on the enclosing type. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 166
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Set a custom attribute using a custom attribute builder.
  syntax:
    content: public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: 'An instance of a helper class to define the custom attribute. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>customBuilder</em> is null. "
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'if <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref> has been called on the enclosing type. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)
  commentId: M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)
  id: SetGetMethod(System.Reflection.Emit.MethodBuilder)
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: SetGetMethod(MethodBuilder)
  fullName: System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetGetMethod
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 121
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets the method that gets the property value.
  syntax:
    content: public void SetGetMethod(MethodBuilder mdBuilder)
    content.vb: Public Sub SetGetMethod(mdBuilder As MethodBuilder)
    parameters:
    - id: mdBuilder
      type: System.Reflection.Emit.MethodBuilder
      description: 'A MethodBuilder object that represents the method that gets the property value. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>mdBuilder</em> is null. "
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref> has been called on the enclosing type. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)
  commentId: M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)
  id: SetSetMethod(System.Reflection.Emit.MethodBuilder)
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: SetSetMethod(MethodBuilder)
  fullName: System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetSetMethod
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 128
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets the method that sets the property value.
  syntax:
    content: public void SetSetMethod(MethodBuilder mdBuilder)
    content.vb: Public Sub SetSetMethod(mdBuilder As MethodBuilder)
    parameters:
    - id: mdBuilder
      type: System.Reflection.Emit.MethodBuilder
      description: 'A MethodBuilder object that represents the method that sets the property value. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>mdBuilder</em> is null. "
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<xref href=\"System.Reflection.Emit.TypeBuilder.CreateType\" data-throw-if-not-resolved=\"false\"></xref> has been called on the enclosing type. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])
  commentId: M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])
  id: SetValue(System.Object,System.Object,System.Object[])
  parent: System.Reflection.Emit.PropertyBuilder
  langs:
  - csharp
  - vb
  name: SetValue(Object, Object, Object[])
  fullName: System.Reflection.Emit.PropertyBuilder.SetValue(System.Object, System.Object, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetValue
    path: src/mscorlib/src/System/Reflection/Emit/PropertyBuilder.cs
    startLine: 188
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: Sets the value of the property with optional index values for index properties.
  syntax:
    content: public override void SetValue(object obj, object value, object[] index)
    content.vb: Public Overrides Sub SetValue(obj As Object, value As Object, index As Object())
    parameters:
    - id: obj
      type: System.Object
      description: 'The object whose property value will be set. '
    - id: value
      type: System.Object
      description: 'The new value for this property. '
    - id: index
      type: System.Object[]
      description: 'Optional index values for indexed properties. This value should be null for non-indexed properties. '
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'This method is not supported. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Reflection.Emit.PropertyBuilder.SetValue(System.Object, System.Object, System.Object())
  name.vb: SetValue(Object, Object, Object())
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.PropertyAttributes
  parent: System.Reflection
  isExternal: false
  name: PropertyAttributes
  fullName: System.Reflection.PropertyAttributes
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Reflection.Emit.MethodBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
- uid: System.Reflection.ParameterInfo[]
  isExternal: false
  name: ParameterInfo[]
  fullName: System.Reflection.ParameterInfo[]
  fullname.vb: System.Reflection.ParameterInfo()
  name.vb: ParameterInfo()
  spec.csharp:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: ()
    fullName: ()
- uid: System.Object[]
  isExternal: false
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ()
    fullName: ()
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
