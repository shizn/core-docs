items:
- uid: System.Threading.Tasks.ParallelLoopResult
  commentId: T:System.Threading.Tasks.ParallelLoopResult
  id: ParallelLoopResult
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.ParallelLoopResult.IsCompleted
  - System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration
  langs:
  - csharp
  - vb
  name: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ParallelLoopResult
    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 616
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Provides completion status on the execution of a <xref href="System.Threading.Tasks.Parallel" data-throw-if-not-resolved="false"></xref> loop.
  syntax:
    content: public struct ParallelLoopResult
    content.vb: Public Structure ParallelLoopResult
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Threading.Tasks.ParallelLoopResult.IsCompleted
  commentId: P:System.Threading.Tasks.ParallelLoopResult.IsCompleted
  id: IsCompleted
  parent: System.Threading.Tasks.ParallelLoopResult
  langs:
  - csharp
  - vb
  name: IsCompleted
  fullName: System.Threading.Tasks.ParallelLoopResult.IsCompleted
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsCompleted
    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 625
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Gets whether the loop ran to completion, such that all iterations of the loop were executed and the loop didn't receive a request to end prematurely.
  syntax:
    content: public bool IsCompleted { get; }
    content.vb: Public ReadOnly Property IsCompleted As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the loop ran to completion; otherwise false;
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration
  commentId: P:System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration
  id: LowestBreakIteration
  parent: System.Threading.Tasks.ParallelLoopResult
  langs:
  - csharp
  - vb
  name: LowestBreakIteration
  fullName: System.Threading.Tasks.ParallelLoopResult.LowestBreakIteration
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LowestBreakIteration
    path: src/mscorlib/src/System/Threading/Tasks/ParallelLoopState.cs
    startLine: 636
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Gets the index of the lowest iteration from which <xref href="System.Threading.Tasks.ParallelLoopState.Break" data-throw-if-not-resolved="false"></xref> was called.
  syntax:
    content: public Nullable<long> LowestBreakIteration { get; }
    content.vb: Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)
    parameters: []
    return:
      type: System.Nullable{System.Int64}
      description: Returns an integer that represents the lowest iteration from which the Break statement was called.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Nullable{System.Int64}
  definition: System.Nullable`1
  name: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<>
  fullName: System.Nullable<>
  fullname.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
