items:
- uid: System.Security.AccessControl.RawAcl
  commentId: T:System.Security.AccessControl.RawAcl
  id: RawAcl
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.RawAcl.#ctor(System.Byte,System.Int32)
  - System.Security.AccessControl.RawAcl.#ctor(System.Byte[],System.Int32)
  - System.Security.AccessControl.RawAcl.BinaryLength
  - System.Security.AccessControl.RawAcl.Count
  - System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.RawAcl.InsertAce(System.Int32,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.RawAcl.Item(System.Int32)
  - System.Security.AccessControl.RawAcl.RemoveAce(System.Int32)
  - System.Security.AccessControl.RawAcl.Revision
  langs:
  - csharp
  - vb
  name: RawAcl
  fullName: System.Security.AccessControl.RawAcl
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RawAcl
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 464
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Represents an Access Control List (ACL).
  syntax:
    content: 'public sealed class RawAcl : GenericAcl, Collections.IEnumerable'
    content.vb: >-
      Public NotInheritable Class RawAcl
          Inherits GenericAcl
          Implements Collections.IEnumerable
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericAcl
  implements:
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Security.AccessControl.GenericAcl.AclRevision
  - System.Security.AccessControl.GenericAcl.AclRevisionDS
  - System.Security.AccessControl.GenericAcl.MaxBinaryLength
  - System.Security.AccessControl.GenericAcl.IsSynchronized
  - System.Security.AccessControl.GenericAcl.SyncRoot
  - System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
  - System.Security.AccessControl.GenericAcl.GetEnumerator
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.RawAcl.#ctor(System.Byte,System.Int32)
  commentId: M:System.Security.AccessControl.RawAcl.#ctor(System.Byte,System.Int32)
  id: '#ctor(System.Byte,System.Int32)'
  parent: System.Security.AccessControl.RawAcl
  langs:
  - csharp
  - vb
  name: RawAcl(Byte, Int32)
  fullName: System.Security.AccessControl.RawAcl.RawAcl(System.Byte, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 466
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Initializes a new instance of the <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref> class with the specified revision level.
  syntax:
    content: public RawAcl(byte revision, int capacity)
    content.vb: Public Sub New(revision As Byte, capacity As Integer)
    parameters:
    - id: revision
      type: System.Byte
      description: The revision level of the new Access Control List (ACL).
    - id: capacity
      type: System.Int32
      description: The number of Access Control Entries (ACEs) this <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref> object can contain. This number is to be used only as a hint.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RawAcl.#ctor(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.RawAcl.#ctor(System.Byte[],System.Int32)
  id: '#ctor(System.Byte[],System.Int32)'
  parent: System.Security.AccessControl.RawAcl
  langs:
  - csharp
  - vb
  name: RawAcl(Byte[], Int32)
  fullName: System.Security.AccessControl.RawAcl.RawAcl(System.Byte[], System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 467
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Initializes a new instance of the <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref> class from the specified binary form.
  syntax:
    content: public RawAcl(byte[] binaryForm, int offset)
    content.vb: Public Sub New(binaryForm As Byte(), offset As Integer)
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: An array of byte values that represent an Access Control List (ACL).
    - id: offset
      type: System.Int32
      description: The offset in the <em>binaryForm</em> parameter at which to begin unmarshaling data.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.RawAcl.RawAcl(System.Byte(), System.Int32)
  name.vb: RawAcl(Byte(), Int32)
- uid: System.Security.AccessControl.RawAcl.BinaryLength
  commentId: P:System.Security.AccessControl.RawAcl.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.RawAcl
  langs:
  - csharp
  - vb
  name: BinaryLength
  fullName: System.Security.AccessControl.RawAcl.BinaryLength
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinaryLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 468
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href="System.Security.AccessControl.RawAcl.GetBinaryForm" data-throw-if-not-resolved="false"></xref> method.
  syntax:
    content: public override int BinaryLength { get; }
    content.vb: Public Overrides ReadOnly Property BinaryLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: The length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref> object.
  overridden: System.Security.AccessControl.GenericAcl.BinaryLength
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.RawAcl.Count
  commentId: P:System.Security.AccessControl.RawAcl.Count
  id: Count
  parent: System.Security.AccessControl.RawAcl
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Security.AccessControl.RawAcl.Count
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 469
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the number of access control entries (ACEs) in the current <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public override int Count { get; }
    content.vb: Public Overrides ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of ACEs in the current <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref> object.
  overridden: System.Security.AccessControl.GenericAcl.Count
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.RawAcl.Item(System.Int32)
  commentId: P:System.Security.AccessControl.RawAcl.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Security.AccessControl.RawAcl
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Security.AccessControl.RawAcl.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 470
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets or sets the Access Control Entry (ACE) at the specified index.
  syntax:
    content: public override GenericAce this[int index] { get; set; }
    content.vb: Public Overrides Property Item(index As Integer) As GenericAce
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the ACE to get or set.
    return:
      type: System.Security.AccessControl.GenericAce
      description: The ACE at the specified index.
  overridden: System.Security.AccessControl.GenericAcl.Item(System.Int32)
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.AccessControl.RawAcl.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Security.AccessControl.RawAcl.Revision
  commentId: P:System.Security.AccessControl.RawAcl.Revision
  id: Revision
  parent: System.Security.AccessControl.RawAcl
  langs:
  - csharp
  - vb
  name: Revision
  fullName: System.Security.AccessControl.RawAcl.Revision
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Revision
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 471
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the revision level of the <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public override byte Revision { get; }
    content.vb: Public Overrides ReadOnly Property Revision As Byte
    parameters: []
    return:
      type: System.Byte
      description: A byte value that specifies the revision level of the <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref>.
  overridden: System.Security.AccessControl.GenericAcl.Revision
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.RawAcl
  langs:
  - csharp
  - vb
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 472
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Marshals the contents of the <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref> object into the specified byte array beginning at the specified offset.
  syntax:
    content: public override void GetBinaryForm(byte[] binaryForm, int offset)
    content.vb: Public Overrides Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: The byte array into which the contents of the <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref> is marshaled.
    - id: offset
      type: System.Int32
      description: The offset at which to start marshaling.
  overridden: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.RawAcl\" data-throw-if-not-resolved=\"false\"></xref> to be copied into <em>array</em>."
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.AccessControl.RawAcl.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
- uid: System.Security.AccessControl.RawAcl.InsertAce(System.Int32,System.Security.AccessControl.GenericAce)
  commentId: M:System.Security.AccessControl.RawAcl.InsertAce(System.Int32,System.Security.AccessControl.GenericAce)
  id: InsertAce(System.Int32,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.RawAcl
  langs:
  - csharp
  - vb
  name: InsertAce(Int32, GenericAce)
  fullName: System.Security.AccessControl.RawAcl.InsertAce(System.Int32, System.Security.AccessControl.GenericAce)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InsertAce
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 473
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Inserts the specified Access Control Entry (ACE) at the specified index.
  syntax:
    content: public void InsertAce(int index, GenericAce ace)
    content.vb: Public Sub InsertAce(index As Integer, ace As GenericAce)
    parameters:
    - id: index
      type: System.Int32
      description: The position at which to add the new ACE. Specify the value of the <xref href="System.Security.AccessControl.RawAcl.Count" data-throw-if-not-resolved="false"></xref> property to insert an ACE at the end of the <xref href="System.Security.AccessControl.RawAcl" data-throw-if-not-resolved="false"></xref> object.
    - id: ace
      type: System.Security.AccessControl.GenericAce
      description: The ACE to insert.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.GenericAcl\" data-throw-if-not-resolved=\"false\"></xref> to be copied into <em>array</em>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.RawAcl.RemoveAce(System.Int32)
  commentId: M:System.Security.AccessControl.RawAcl.RemoveAce(System.Int32)
  id: RemoveAce(System.Int32)
  parent: System.Security.AccessControl.RawAcl
  langs:
  - csharp
  - vb
  name: RemoveAce(Int32)
  fullName: System.Security.AccessControl.RawAcl.RemoveAce(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAce
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 474
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Removes the Access Control Entry (ACE) at the specified location.
  syntax:
    content: public void RemoveAce(int index)
    content.vb: Public Sub RemoveAce(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the ACE to remove.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value of the <em>index</em> parameter is higher than the value of the <xref href="System.Security.AccessControl.RawAcl.Count" data-throw-if-not-resolved="false"></xref> property minus one or is negative.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.AccessControl.GenericAcl
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAcl
  fullName: System.Security.AccessControl.GenericAcl
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Security.AccessControl.GenericAcl.AclRevision
  parent: System.Security.AccessControl.GenericAcl
  isExternal: false
  name: AclRevision
  fullName: System.Security.AccessControl.GenericAcl.AclRevision
- uid: System.Security.AccessControl.GenericAcl.AclRevisionDS
  parent: System.Security.AccessControl.GenericAcl
  isExternal: false
  name: AclRevisionDS
  fullName: System.Security.AccessControl.GenericAcl.AclRevisionDS
- uid: System.Security.AccessControl.GenericAcl.MaxBinaryLength
  parent: System.Security.AccessControl.GenericAcl
  isExternal: false
  name: MaxBinaryLength
  fullName: System.Security.AccessControl.GenericAcl.MaxBinaryLength
- uid: System.Security.AccessControl.GenericAcl.IsSynchronized
  parent: System.Security.AccessControl.GenericAcl
  isExternal: false
  name: IsSynchronized
  fullName: System.Security.AccessControl.GenericAcl.IsSynchronized
- uid: System.Security.AccessControl.GenericAcl.SyncRoot
  parent: System.Security.AccessControl.GenericAcl
  isExternal: false
  name: SyncRoot
  fullName: System.Security.AccessControl.GenericAcl.SyncRoot
- uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
  parent: System.Security.AccessControl.GenericAcl
  isExternal: true
  name: CopyTo(GenericAce[], Int32)
  fullName: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce(), System.Int32)
  name.vb: CopyTo(GenericAce(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
    name: CopyTo
    fullName: System.Security.AccessControl.GenericAcl.CopyTo
  - name: (
    fullName: (
  - uid: System.Security.AccessControl.GenericAce
    name: GenericAce
    fullName: System.Security.AccessControl.GenericAce
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAcl.CopyTo(System.Security.AccessControl.GenericAce[],System.Int32)
    name: CopyTo
    fullName: System.Security.AccessControl.GenericAcl.CopyTo
  - name: (
    fullName: (
  - uid: System.Security.AccessControl.GenericAce
    name: GenericAce
    fullName: System.Security.AccessControl.GenericAce
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAcl.GetEnumerator
  parent: System.Security.AccessControl.GenericAcl
  isExternal: false
  name: GetEnumerator()
  fullName: System.Security.AccessControl.GenericAcl.GetEnumerator()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAcl.GetEnumerator
    name: GetEnumerator
    fullName: System.Security.AccessControl.GenericAcl.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAcl.GetEnumerator
    name: GetEnumerator
    fullName: System.Security.AccessControl.GenericAcl.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Security.AccessControl.GenericAcl.BinaryLength
  parent: System.Security.AccessControl.GenericAcl
  isExternal: false
  name: BinaryLength
  fullName: System.Security.AccessControl.GenericAcl.BinaryLength
- uid: System.Security.AccessControl.GenericAcl.Count
  parent: System.Security.AccessControl.GenericAcl
  isExternal: false
  name: Count
  fullName: System.Security.AccessControl.GenericAcl.Count
- uid: System.Security.AccessControl.GenericAcl.Item(System.Int32)
  parent: System.Security.AccessControl.GenericAcl
  isExternal: true
  name: Item[Int32]
  fullName: System.Security.AccessControl.GenericAcl.Item[System.Int32]
  fullname.vb: System.Security.AccessControl.GenericAcl.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAcl.Item(System.Int32)
    name: Item
    fullName: System.Security.AccessControl.GenericAcl.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Security.AccessControl.GenericAcl.Item(System.Int32)
    name: Item
    fullName: System.Security.AccessControl.GenericAcl.Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.GenericAcl.Revision
  parent: System.Security.AccessControl.GenericAcl
  isExternal: false
  name: Revision
  fullName: System.Security.AccessControl.GenericAcl.Revision
- uid: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAcl
  isExternal: true
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericAcl.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAcl.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericAcl.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
