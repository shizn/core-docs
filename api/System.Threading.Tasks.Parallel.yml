items:
- uid: System.Threading.Tasks.Parallel
  commentId: T:System.Threading.Tasks.Parallel
  id: Parallel
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  - System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  - System.Threading.Tasks.Parallel.Invoke(System.Action[])
  - System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  langs:
  - csharp
  - vb
  name: Parallel
  fullName: System.Threading.Tasks.Parallel
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parallel
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 144
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Provides support for parallel loops and regions.
  syntax:
    content: 'public class Parallel : object'
    content.vb: >-
      Public Class Parallel
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int32,System.Int32,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int32, Int32, Action<Int32, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 588
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: 'Executes a for (For in Visual Basic) loop in which iterations may run in parallel and the state of the loop can be monitored and manipulated.  '
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>body</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState))
  name.vb: For(Int32, Int32, Action(Of Int32, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})
  id: For(System.Int32,System.Int32,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int32, Int32, Action<Int32>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action<System.Int32>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 421
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop in which iterations may run in parallel.
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, Action<int> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, body As Action(Of Integer)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int32}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>body</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Action(Of System.Int32))
  name.vb: For(Int32, Int32, Action(Of Int32))
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int32, Int32, ParallelOptions, Action<Int32, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 659
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, body As Action(Of Integer, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>body</em> argument is null.-or-The <em>parallelOptions</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState))
  name.vb: For(Int32, Int32, ParallelOptions, Action(Of Int32, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  id: For(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Action{System.Int32})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int32, Int32, ParallelOptions, Action<Int32>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action<System.Int32>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 489
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop in which iterations may run in parallel and loop options can be configured.
  syntax:
    content: public static ParallelLoopResult For(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Action<int> body)
    content.vb: Public Shared Function For(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, body As Action(Of Integer)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int32}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>body</em> argument is null.-or-The <em>parallelOptions</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int32))
  name.vb: For(Int32, Int32, ParallelOptions, Action(Of Int32))
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int64,System.Int64,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int64, Int64, Action<Int64, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 618
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action<long, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A <xref href="System.Threading.Tasks.ParallelLoopResult" data-throw-if-not-resolved="false"></xref> structure that contains information on what portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>body</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState))
  name.vb: For(Int64, Int64, Action(Of Int64, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Action{System.Int64})
  id: For(System.Int64,System.Int64,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int64, Int64, Action<Int64>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action<System.Int64>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 450
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel.
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, Action<long> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, body As Action(Of Long)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: body
      type: System.Action{System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>body</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Action(Of System.Int64))
  name.vb: For(Int64, Int64, Action(Of Int64))
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int64, Int64, ParallelOptions, Action<Int64, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 704
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic)  loop with 64-bit indexes in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action<long, ParallelLoopState> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, body As Action(Of Long, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>body</em> argument is null.-or-The <em>parallelOptions</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState))
  name.vb: For(Int64, Int64, ParallelOptions, Action(Of Int64, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  commentId: M:System.Threading.Tasks.Parallel.For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  id: For(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Action{System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For(Int64, Int64, ParallelOptions, Action<Int64>)
  fullName: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action<System.Int64>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 532
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for  (For in Visual Basic) loop with 64-bit indexes in which iterations may run in parallel and loop options can be configured.
  syntax:
    content: public static ParallelLoopResult For(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Action<long> body)
    content.vb: Public Shared Function For(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, body As Action(Of Long)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{System.Int64}
      description: The delegate that is invoked once per iteration.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>body</em> argument is null.-or-The <em>parallelOptions</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Action(Of System.Int64))
  name.vb: For(Int64, Int64, ParallelOptions, Action(Of Int64))
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int32,System.Int32,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For<TLocal>(Int32, Int32, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int32, System.Int32, System.Func<TLocal>, System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 759
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop with thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, Func<TLocal> localInit, Func<int, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Integer, toExclusive As Integer, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>body</em> argument is null.-or-The <em>localInit</em> argument is null.-or-The <em>localFinally</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int32, System.Int32, System.Func(Of TLocal), System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: For(Of TLocal)(Int32, Int32, Func(Of TLocal), Func(Of Int32, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int32,System.Int32,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For<TLocal>(Int32, Int32, ParallelOptions, Func<TLocal>, Func<Int32, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 894
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic)  loop with thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For<TLocal>(int fromInclusive, int toExclusive, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<int, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Integer, toExclusive As Integer, parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of Integer, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int32
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>body</em> argument is null.-or-The <em>localInit</em> argument is null.-or-The <em>localFinally</em> argument is null.-or-The <em>parallelOptions</em> argument is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int32, System.Int32, System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: For(Of TLocal)(Int32, Int32, ParallelOptions, Func(Of TLocal), Func(Of Int32, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int64,System.Int64,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For<TLocal>(Int64, Int64, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int64, System.Int64, System.Func<TLocal>, System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 821
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic)  loop with 64-bit indexes and thread-local data in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, Func<TLocal> localInit, Func<long, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Long, toExclusive As Long, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>body</em> argument is null.-or-The <em>localInit</em> argument is null.-or-The <em>localFinally</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int64, System.Int64, System.Func(Of TLocal), System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: For(Of TLocal)(Int64, Int64, Func(Of TLocal), Func(Of Int64, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  id: For``1(System.Int64,System.Int64,System.Threading.Tasks.ParallelOptions,System.Func{``0},System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,``0,``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: For<TLocal>(Int64, Int64, ParallelOptions, Func<TLocal>, Func<Int64, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.For<TLocal>(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: For
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 971
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a for (For in Visual Basic) loop with 64-bit indexes and thread-local data in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult For<TLocal>(long fromInclusive, long toExclusive, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<long, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function For(Of TLocal)(fromInclusive As Long, toExclusive As Long, parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of Long, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The start index, inclusive.
    - id: toExclusive
      type: System.Int64
      description: The end index, exclusive.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each thread.
    - id: body
      type: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each thread.
    typeParameters:
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>body</em> argument is null.-or-The <em>localInit</em> argument is null.-or-The <em>localFinally</em> argument is null.-or-The <em>parallelOptions</em> argument is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.For(Of TLocal)(System.Int64, System.Int64, System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: For(Of TLocal)(Int64, Int64, ParallelOptions, Func(Of TLocal), Func(Of Int64, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Collections.Concurrent.OrderablePartitioner<TSource>, Action<TSource, ParallelLoopState, Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2533
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on a <xref href="System.Collections.Concurrent.OrderablePartitioner`1" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Collections.Concurrent.OrderablePartitioner<TSource> source, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Collections.Concurrent.OrderablePartitioner(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The orderable partitioner that contains the original data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>body</em> argument is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" data-throw-if-not-resolved="false"></xref> property in the <em>source</em> orderable partitioner returns false.-or-The <xref href="System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" data-throw-if-not-resolved="false"></xref> property in the source orderable partitioner returns false.-or-Any methods in the source orderable partitioner return null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  name.vb: ForEach(Of TSource)(Collections.Concurrent.OrderablePartitioner(Of TSource), Action(Of TSource, ParallelLoopState, Int64))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Collections.Concurrent.OrderablePartitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2941
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on a <xref href="System.Collections.Concurrent.OrderablePartitioner`1" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Collections.Concurrent.OrderablePartitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Collections.Concurrent.OrderablePartitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The orderable partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is  null.-or-The <em>parallelOptions</em> argument is null.-or-The <em>body</em> argument is null.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" data-throw-if-not-resolved="false"></xref> property in the <em>source</em> orderable partitioner returns false.-or-The <xref href="System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized" data-throw-if-not-resolved="false"></xref> property in the <em>source</em> orderable partitioner returns false.-or-The exception that is thrown when any methods in the <em>source</em> orderable partitioner return null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  name.vb: ForEach(Of TSource)(Collections.Concurrent.OrderablePartitioner(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState, Int64))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Collections.Concurrent.Partitioner<TSource>, Action<TSource, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2471
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on a <xref href="System.Collections.Concurrent.Partitioner" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Collections.Concurrent.Partitioner<TSource> source, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Collections.Concurrent.Partitioner(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The partitioner that contains the original data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>body</em> argument is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" data-throw-if-not-resolved="false"></xref> property in the <em>source</em> partitioner returns false.-or-A method in the <em>source</em> partitioner returns null.-or-The <xref href="System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" data-throw-if-not-resolved="false"></xref> method in the <em>source</em> partitioner does not return the correct number of partitions.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  name.vb: ForEach(Of TSource)(Collections.Concurrent.Partitioner(Of TSource), Action(Of TSource, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Collections.Concurrent.Partitioner<TSource>, Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Action<TSource>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2412
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on a <xref href="System.Collections.Concurrent.Partitioner" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Collections.Concurrent.Partitioner<TSource> source, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Collections.Concurrent.Partitioner(Of TSource), body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The partitioner that contains the original data source.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is  null.-or-The <em>body</em> argument is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" data-throw-if-not-resolved="false"></xref> property in the <em>source</em> partitioner returns false.-or-The exception that is thrown when any methods in the <em>source</em> partitioner return null.-or-The <xref href="System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)" data-throw-if-not-resolved="false"></xref> method in the <em>source</em> partitioner does not return the correct number of partitions.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Action(Of TSource))
  name.vb: ForEach(Of TSource)(Collections.Concurrent.Partitioner(Of TSource), Action(Of TSource))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Collections.Concurrent.Partitioner<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2863
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on a <xref href="System.Collections.Concurrent.Partitioner" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Collections.Concurrent.Partitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Collections.Concurrent.Partitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A  structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>parallelOptions</em> argument is null.-or-The <em>body</em> argument is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" data-throw-if-not-resolved="false"></xref> property in the <em>source</em> partitioner returns false.-or-The exception that is thrown when any methods in the <em>source</em> partitioner return null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  name.vb: ForEach(Of TSource)(Collections.Concurrent.Partitioner(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  id: ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Collections.Concurrent.Partitioner<TSource>, ParallelOptions, Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2788
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on a <xref href="System.Collections.Concurrent.Partitioner" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel and loop options can be configured.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Collections.Concurrent.Partitioner<TSource> source, ParallelOptions parallelOptions, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Collections.Concurrent.Partitioner(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>parallelOptions</em> argument is null.-or-The <em>body</em> argument is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" data-throw-if-not-resolved="false"></xref> property in the <em>source</em> partitioner returns false.-or-The exception that is thrown when any methods in the <em>source</em> partitioner return null.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource))
  name.vb: ForEach(Of TSource)(Collections.Concurrent.Partitioner(Of TSource), ParallelOptions, Action(Of TSource))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Collections.Generic.IEnumerable<TSource>, Action<TSource, ParallelLoopState, Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1826
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with 64-bit indexes on an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Collections.Generic.IEnumerable<TSource> source, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>body</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  name.vb: ForEach(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Action(Of TSource, ParallelLoopState, Int64))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Collections.Generic.IEnumerable<TSource>, Action<TSource, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1739
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Collections.Generic.IEnumerable<TSource> source, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>body</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  name.vb: ForEach(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Action(Of TSource, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Collections.Generic.IEnumerable<TSource>, Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Action<TSource>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1654
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Collections.Generic.IEnumerable<TSource> source, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>body</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Action(Of TSource))
  name.vb: ForEach(Of TSource)(Collections.Generic.IEnumerable(Of TSource), Action(Of TSource))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Collections.Generic.IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState, Int64>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1873
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with 64-bit indexes on an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Collections.Generic.IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState, long> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState, Long)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>parallelOptions</em> argument is null.-or-The <em>body</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64))
  name.vb: ForEach(Of TSource)(Collections.Generic.IEnumerable(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState, Int64))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0,System.Threading.Tasks.ParallelLoopState})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Collections.Generic.IEnumerable<TSource>, ParallelOptions, Action<TSource, ParallelLoopState>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource, System.Threading.Tasks.ParallelLoopState>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1786
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Collections.Generic.IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource, ParallelLoopState> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource, ParallelLoopState)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>parallelOptions</em> argument is null.-or-The <em>body</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState))
  name.vb: ForEach(Of TSource)(Collections.Generic.IEnumerable(Of TSource), ParallelOptions, Action(Of TSource, ParallelLoopState))
- uid: System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  id: ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Action{``0})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource>(Collections.Generic.IEnumerable<TSource>, ParallelOptions, Action<TSource>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Action<TSource>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1699
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation on an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel and loop options can be configured.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource>(Collections.Generic.IEnumerable<TSource> source, ParallelOptions parallelOptions, Action<TSource> body)
    content.vb: Public Shared Function ForEach(Of TSource)(source As Collections.Generic.IEnumerable(Of TSource), parallelOptions As ParallelOptions, body As Action(Of TSource)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: body
      type: System.Action{{TSource}}
      description: The delegate that is invoked once per iteration.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>parallelOptions</em> argument is null.-or-The <em>body</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Action(Of TSource))
  name.vb: ForEach(Of TSource)(Collections.Generic.IEnumerable(Of TSource), ParallelOptions, Action(Of TSource))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(Collections.Concurrent.OrderablePartitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2705
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with thread-local data on a <xref href="System.Collections.Concurrent.OrderablePartitioner`1" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Collections.Concurrent.OrderablePartitioner<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Collections.Concurrent.OrderablePartitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The orderable partitioner that contains the original data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>body</em> argument is null.-or-The <em>localInit</em> argument is null.-or-The <em>localFinally</em> argument is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" data-throw-if-not-resolved="false"></xref> property in the <em>source</em><xref href="System.Collections.Concurrent.Partitioner" data-throw-if-not-resolved="false"></xref> returns false or the partitioner returns null partitions.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(Collections.Concurrent.OrderablePartitioner(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.OrderablePartitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(Collections.Concurrent.OrderablePartitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.OrderablePartitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 3145
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with 64-bit indexes and  with thread-local data on a <xref href="System.Collections.Concurrent.OrderablePartitioner`1" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel , loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Collections.Concurrent.OrderablePartitioner<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Collections.Concurrent.OrderablePartitioner(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: The orderable partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>parallelOptions</em> argument is null.-or-The <em>body</em> argument is null.-or-The <em>localInit</em> or <em>localFinally</em> argument is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" data-throw-if-not-resolved="false"></xref> property in the <em>source</em><xref href="System.Collections.Concurrent.Partitioner" data-throw-if-not-resolved="false"></xref> returns false or the partitioner returns null  partitions.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.OrderablePartitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(Collections.Concurrent.OrderablePartitioner(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(Collections.Concurrent.Partitioner<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2615
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with thread-local data on a <xref href="System.Collections.Concurrent.Partitioner" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Collections.Concurrent.Partitioner<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Collections.Concurrent.Partitioner(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The partitioner that contains the original data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>body</em> argument is null.-or-The <em>localInit</em> argument is null.-or-The <em>localFinally</em> argument is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" data-throw-if-not-resolved="false"></xref> property in the <em>source</em><xref href="System.Collections.Concurrent.Partitioner" data-throw-if-not-resolved="false"></xref> returns false or the partitioner returns null partitions.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.Partitioner(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(Collections.Concurrent.Partitioner(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Concurrent.Partitioner{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(Collections.Concurrent.Partitioner<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Concurrent.Partitioner<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 3039
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation  with thread-local data on a <xref href="System.Collections.Concurrent.Partitioner" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Collections.Concurrent.Partitioner<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Collections.Concurrent.Partitioner(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: The partitioner that contains the original data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
      description: The type of the elements in <em>source</em>.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>parallelOptions</em> argument is null.-or-The <em>body</em> argument is null.-or-The <em>localInit</em> argument is null.-or-The <em>localFinally</em> argument is null.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions" data-throw-if-not-resolved="false"></xref> property in the <em>source</em><xref href="System.Collections.Concurrent.Partitioner" data-throw-if-not-resolved="false"></xref> returns false or the partitioner returns null partitions.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Concurrent.Partitioner(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(Collections.Concurrent.Partitioner(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(Collections.Generic.IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 1933
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with thread-local data on an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Collections.Generic.IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Collections.Generic.IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>body</em> argument is null.-or-The <em>localInit</em> argument is null.-or-The <em>localFinally</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(Collections.Generic.IEnumerable(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(Collections.Generic.IEnumerable<TSource>, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2079
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with thread-local data on an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Collections.Generic.IEnumerable<TSource> source, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Collections.Generic.IEnumerable(Of TSource), localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>body</em> argument is null.-or-The <em>localInit</em> argument is null.-or-The <em>localFinally</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(Collections.Generic.IEnumerable(Of TSource), Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(Collections.Generic.IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2009
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with thread-local data on an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated..
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Collections.Generic.IEnumerable<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Collections.Generic.IEnumerable(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>parallelOptions</em> argument is null.-or-The <em>body</em> argument is null.-or-The <em>localInit</em> argument is null.-or-The <em>localFinally</em> argument is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(Collections.Generic.IEnumerable(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Parallel.ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  id: ForEach``2(System.Collections.Generic.IEnumerable{``0},System.Threading.Tasks.ParallelOptions,System.Func{``1},System.Func{``0,System.Threading.Tasks.ParallelLoopState,System.Int64,``1,``1},System.Action{``1})
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: ForEach<TSource, TLocal>(Collections.Generic.IEnumerable<TSource>, ParallelOptions, Func<TLocal>, Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>, Action<TLocal>)
  fullName: System.Threading.Tasks.Parallel.ForEach<TSource, TLocal>(System.Collections.Generic.IEnumerable<TSource>, System.Threading.Tasks.ParallelOptions, System.Func<TLocal>, System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>, System.Action<TLocal>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 2155
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes a foreach (For Each in Visual Basic) operation with thread-local data and 64-bit indexes on an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> in which iterations may run in parallel, loop options can be configured, and the state of the loop can be monitored and manipulated.
  syntax:
    content: public static ParallelLoopResult ForEach<TSource, TLocal>(Collections.Generic.IEnumerable<TSource> source, ParallelOptions parallelOptions, Func<TLocal> localInit, Func<TSource, ParallelLoopState, long, TLocal, TLocal> body, Action<TLocal> localFinally)
    content.vb: Public Shared Function ForEach(Of TSource, TLocal)(source As Collections.Generic.IEnumerable(Of TSource), parallelOptions As ParallelOptions, localInit As Func(Of TLocal), body As Func(Of TSource, ParallelLoopState, Long, TLocal, TLocal), localFinally As Action(Of TLocal)) As ParallelLoopResult
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An enumerable data source.
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: localInit
      type: System.Func{{TLocal}}
      description: The function delegate that returns the initial state of the local data for each task.
    - id: body
      type: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
      description: The delegate that is invoked once per iteration.
    - id: localFinally
      type: System.Action{{TLocal}}
      description: The delegate that performs a final action on the local state of each task.
    typeParameters:
    - id: TSource
      description: The type of the data in the source.
    - id: TLocal
      description: The type of the thread-local data.
    return:
      type: System.Threading.Tasks.ParallelLoopResult
      description: A structure that contains information about which portion of the loop completed.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>source</em> argument is null.-or-The <em>parallelOptions</em> argument is null.-or-The <em>body</em> argument is null.-or-The <em>localInit</em> argument is null.-or-The <em>localFinally</em> argument is null.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> argument is canceled.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that contains all the individual exceptions thrown on all threads.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.ForEach(Of TSource, TLocal)(System.Collections.Generic.IEnumerable(Of TSource), System.Threading.Tasks.ParallelOptions, System.Func(Of TLocal), System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal), System.Action(Of TLocal))
  name.vb: ForEach(Of TSource, TLocal)(Collections.Generic.IEnumerable(Of TSource), ParallelOptions, Func(Of TLocal), Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal), Action(Of TLocal))
- uid: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  commentId: M:System.Threading.Tasks.Parallel.Invoke(System.Action[])
  id: Invoke(System.Action[])
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: Invoke(Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(System.Action[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Invoke
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 173
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes each of the provided actions, possibly in parallel.
  syntax:
    content: public static void Invoke(params Action[] actions)
    content.vb: Public Shared Sub Invoke(ParamArray actions As Action())
    parameters:
    - id: actions
      type: System.Action[]
      description: An array of <xref href="System.Action" data-throw-if-not-resolved="false"></xref> to execute.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>actions</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that is thrown when any action in the <em>actions</em> array throws an exception.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>actions</em> array contains a null element.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.Invoke(System.Action())
  name.vb: Invoke(Action())
- uid: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  commentId: M:System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  id: Invoke(System.Threading.Tasks.ParallelOptions,System.Action[])
  parent: System.Threading.Tasks.Parallel
  langs:
  - csharp
  - vb
  name: Invoke(ParallelOptions, Action[])
  fullName: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions, System.Action[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Invoke
    path: src/mscorlib/src/System/Threading/Tasks/Parallel.cs
    startLine: 206
  assemblies:
  - System.Threading.Tasks.Parallel
  namespace: System.Threading.Tasks
  summary: Executes each of the provided actions, possibly in parallel, unless the operation is cancelled by the user.
  syntax:
    content: public static void Invoke(ParallelOptions parallelOptions, params Action[] actions)
    content.vb: Public Shared Sub Invoke(parallelOptions As ParallelOptions, ParamArray actions As Action())
    parameters:
    - id: parallelOptions
      type: System.Threading.Tasks.ParallelOptions
      description: An object that configures the behavior of this operation.
    - id: actions
      type: System.Action[]
      description: An array of actions to execute.
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> is set.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>actions</em> argument is null.-or-The <em>parallelOptions</em> argument is null.
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: The exception that is thrown when any action in the <em>actions</em> array throws an exception.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>actions</em> array contains a null element.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> associated with the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> in the <em>parallelOptions</em> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Tasks.Parallel.Invoke(System.Threading.Tasks.ParallelOptions, System.Action())
  name.vb: Invoke(ParallelOptions, Action())
references:
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Action{System.Int32,System.Threading.Tasks.ParallelLoopState}
  definition: System.Action`2
  name: Action<Int32, ParallelLoopState>
  fullName: System.Action<System.Int32, System.Threading.Tasks.ParallelLoopState>
  fullname.vb: System.Action(Of System.Int32, System.Threading.Tasks.ParallelLoopState)
  name.vb: Action(Of Int32, ParallelLoopState)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: )
    fullName: )
- uid: System.Threading.Tasks.ParallelLoopResult
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelLoopResult
  fullName: System.Threading.Tasks.ParallelLoopResult
- uid: System.Action`2
  isExternal: false
  name: Action<, >
  fullName: System.Action<, >
  fullname.vb: System.Action(Of , )
  name.vb: Action(Of , )
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Action{System.Int32}
  definition: System.Action`1
  name: Action<Int32>
  fullName: System.Action<System.Int32>
  fullname.vb: System.Action(Of System.Int32)
  name.vb: Action(Of Int32)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Action`1
  isExternal: false
  name: Action<>
  fullName: System.Action<>
  fullname.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Threading.Tasks.ParallelOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: ParallelOptions
  fullName: System.Threading.Tasks.ParallelOptions
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Action{System.Int64,System.Threading.Tasks.ParallelLoopState}
  definition: System.Action`2
  name: Action<Int64, ParallelLoopState>
  fullName: System.Action<System.Int64, System.Threading.Tasks.ParallelLoopState>
  fullname.vb: System.Action(Of System.Int64, System.Threading.Tasks.ParallelLoopState)
  name.vb: Action(Of Int64, ParallelLoopState)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: )
    fullName: )
- uid: System.Action{System.Int64}
  definition: System.Action`1
  name: Action<Int64>
  fullName: System.Action<System.Int64>
  fullname.vb: System.Action(Of System.Int64)
  name.vb: Action(Of Int64)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{{TLocal}}
  definition: System.Func`1
  name: Func<TLocal>
  fullName: System.Func<TLocal>
  fullname.vb: System.Func(Of TLocal)
  name.vb: Func(Of TLocal)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func{System.Int32,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
  definition: System.Func`4
  name: Func<Int32, ParallelLoopState, TLocal, TLocal>
  fullName: System.Func<System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>
  fullname.vb: System.Func(Of System.Int32, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)
  name.vb: Func(Of Int32, ParallelLoopState, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Action{{TLocal}}
  definition: System.Action`1
  name: Action<TLocal>
  fullName: System.Action<TLocal>
  fullname.vb: System.Action(Of TLocal)
  name.vb: Action(Of TLocal)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<>
  fullName: System.Func<>
  fullname.vb: System.Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Func`4
  isExternal: false
  name: Func<, , , >
  fullName: System.Func<, , , >
  fullname.vb: System.Func(Of , , , )
  name.vb: Func(Of , , , )
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Func{System.Int64,System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
  definition: System.Func`4
  name: Func<Int64, ParallelLoopState, TLocal, TLocal>
  fullName: System.Func<System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>
  fullname.vb: System.Func(Of System.Int64, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)
  name.vb: Func(Of Int64, ParallelLoopState, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.OrderablePartitioner`1
  name: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  fullname.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  name.vb: OrderablePartitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64}
  definition: System.Action`3
  name: Action<TSource, ParallelLoopState, Int64>
  fullName: System.Action<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64>
  fullname.vb: System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64)
  name.vb: Action(Of TSource, ParallelLoopState, Int64)
  spec.csharp:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  fullname.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  name.vb: OrderablePartitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Action`3
  isExternal: false
  name: Action<, , >
  fullName: System.Action<, , >
  fullname.vb: System.Action(Of , , )
  name.vb: Action(Of , , )
  spec.csharp:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`3
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.Partitioner`1
  name: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  name.vb: Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Action{{TSource},System.Threading.Tasks.ParallelLoopState}
  definition: System.Action`2
  name: Action<TSource, ParallelLoopState>
  fullName: System.Action<TSource, System.Threading.Tasks.ParallelLoopState>
  fullname.vb: System.Action(Of TSource, System.Threading.Tasks.ParallelLoopState)
  name.vb: Action(Of TSource, ParallelLoopState)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.Partitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  name.vb: Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Action{{TSource}}
  definition: System.Action`1
  name: Action<TSource>
  fullName: System.Action<TSource>
  fullname.vb: System.Action(Of TSource)
  name.vb: Action(Of TSource)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,System.Int64,{TLocal},{TLocal}}
  definition: System.Func`5
  name: Func<TSource, ParallelLoopState, Int64, TLocal, TLocal>
  fullName: System.Func<TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal>
  fullname.vb: System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, System.Int64, TLocal, TLocal)
  name.vb: Func(Of TSource, ParallelLoopState, Int64, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Func`5
  isExternal: false
  name: Func<, , , , >
  fullName: System.Func<, , , , >
  fullname.vb: System.Func(Of , , , , )
  name.vb: Func(Of , , , , )
  spec.csharp:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Func{{TSource},System.Threading.Tasks.ParallelLoopState,{TLocal},{TLocal}}
  definition: System.Func`4
  name: Func<TSource, ParallelLoopState, TLocal, TLocal>
  fullName: System.Func<TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal>
  fullname.vb: System.Func(Of TSource, System.Threading.Tasks.ParallelLoopState, TLocal, TLocal)
  name.vb: Func(Of TSource, ParallelLoopState, TLocal, TLocal)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Threading.Tasks.ParallelLoopState
    name: ParallelLoopState
    fullName: System.Threading.Tasks.ParallelLoopState
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: ', '
    fullName: ', '
  - name: TLocal
    fullName: TLocal
  - name: )
    fullName: )
- uid: System.Action[]
  isExternal: true
  name: Action[]
  fullName: System.Action[]
  fullname.vb: System.Action()
  name.vb: Action()
  spec.csharp:
  - uid: System.Action
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Action
    name: Action
    fullName: System.Action
    isExternal: true
  - name: ()
    fullName: ()
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  fullName: System.AggregateException
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  fullName: System.OperationCanceledException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
