items:
- uid: System.Runtime.InteropServices.HandleCollector
  commentId: T:System.Runtime.InteropServices.HandleCollector
  id: HandleCollector
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)
  - System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)
  - System.Runtime.InteropServices.HandleCollector.Add
  - System.Runtime.InteropServices.HandleCollector.Count
  - System.Runtime.InteropServices.HandleCollector.InitialThreshold
  - System.Runtime.InteropServices.HandleCollector.MaximumThreshold
  - System.Runtime.InteropServices.HandleCollector.Name
  - System.Runtime.InteropServices.HandleCollector.Remove
  langs:
  - csharp
  - vb
  name: HandleCollector
  fullName: System.Runtime.InteropServices.HandleCollector
  type: Class
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HandleCollector
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
    startLine: 8
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.
  syntax:
    content: 'public sealed class HandleCollector : object'
    content.vb: >-
      Public NotInheritable Class HandleCollector
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)
  commentId: M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Runtime.InteropServices.HandleCollector
  langs:
  - csharp
  - vb
  name: HandleCollector(String, Int32)
  fullName: System.Runtime.InteropServices.HandleCollector.HandleCollector(System.String, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
    startLine: 20
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: 'Initializes a new instance of the <xref href="System.Runtime.InteropServices.HandleCollector" data-throw-if-not-resolved="false"></xref> class using a name and a threshold at which to begin handle collection. '
  syntax:
    content: public HandleCollector(string name, int initialThreshold)
    content.vb: Public Sub New(name As String, initialThreshold As Integer)
    parameters:
    - id: name
      type: System.String
      description: A name for the collector. This parameter allows you to name collectors that track handle types separately.
    - id: initialThreshold
      type: System.Int32
      description: A value that specifies the point at which collections should begin.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>initialThreshold</em> parameter is less than 0.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: System.Runtime.InteropServices.HandleCollector
  langs:
  - csharp
  - vb
  name: HandleCollector(String, Int32, Int32)
  fullName: System.Runtime.InteropServices.HandleCollector.HandleCollector(System.String, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
    startLine: 25
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: 'Initializes a new instance of the <xref href="System.Runtime.InteropServices.HandleCollector" data-throw-if-not-resolved="false"></xref> class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur. '
  syntax:
    content: public HandleCollector(string name, int initialThreshold, int maximumThreshold)
    content.vb: Public Sub New(name As String, initialThreshold As Integer, maximumThreshold As Integer)
    parameters:
    - id: name
      type: System.String
      description: A name for the collector.  This parameter allows you to name collectors that track handle types separately.
    - id: initialThreshold
      type: System.Int32
      description: A value that specifies the point at which collections should begin.
    - id: maximumThreshold
      type: System.Int32
      description: A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>initialThreshold</em> parameter is less than 0.-or-The <em>maximumThreshold</em> parameter is less than 0.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>maximumThreshold</em> parameter is less than the <em>initialThreshold</em> parameter.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.HandleCollector.Count
  commentId: P:System.Runtime.InteropServices.HandleCollector.Count
  id: Count
  parent: System.Runtime.InteropServices.HandleCollector
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Runtime.InteropServices.HandleCollector.Count
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
    startLine: 57
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Gets the number of handles collected.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of handles collected.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.InteropServices.HandleCollector.InitialThreshold
  commentId: P:System.Runtime.InteropServices.HandleCollector.InitialThreshold
  id: InitialThreshold
  parent: System.Runtime.InteropServices.HandleCollector
  langs:
  - csharp
  - vb
  name: InitialThreshold
  fullName: System.Runtime.InteropServices.HandleCollector.InitialThreshold
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InitialThreshold
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
    startLine: 59
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Gets a value that specifies the point at which collections should begin.
  syntax:
    content: public int InitialThreshold { get; }
    content.vb: Public ReadOnly Property InitialThreshold As Integer
    parameters: []
    return:
      type: System.Int32
      description: A value that specifies the point at which collections should begin.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.InteropServices.HandleCollector.MaximumThreshold
  commentId: P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold
  id: MaximumThreshold
  parent: System.Runtime.InteropServices.HandleCollector
  langs:
  - csharp
  - vb
  name: MaximumThreshold
  fullName: System.Runtime.InteropServices.HandleCollector.MaximumThreshold
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaximumThreshold
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
    startLine: 61
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Gets a value that specifies the point at which collections must occur.
  syntax:
    content: public int MaximumThreshold { get; }
    content.vb: Public ReadOnly Property MaximumThreshold As Integer
    parameters: []
    return:
      type: System.Int32
      description: A value that specifies the point at which collections must occur.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.InteropServices.HandleCollector.Name
  commentId: P:System.Runtime.InteropServices.HandleCollector.Name
  id: Name
  parent: System.Runtime.InteropServices.HandleCollector
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Runtime.InteropServices.HandleCollector.Name
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
    startLine: 63
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Gets the name of a <xref href="System.Runtime.InteropServices.HandleCollector" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: This <xref href="System.Runtime.InteropServices.HandleCollector.Name" data-throw-if-not-resolved="false"></xref> property allows you to name collectors that track handle types separately.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.InteropServices.HandleCollector.Add
  commentId: M:System.Runtime.InteropServices.HandleCollector.Add
  id: Add
  parent: System.Runtime.InteropServices.HandleCollector
  langs:
  - csharp
  - vb
  name: Add()
  fullName: System.Runtime.InteropServices.HandleCollector.Add()
  type: Method
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
    startLine: 65
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Increments the current handle count.
  syntax:
    content: public void Add()
    content.vb: Public Sub Add
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Runtime.InteropServices.HandleCollector.Count" data-throw-if-not-resolved="false"></xref> property is less than 0.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.HandleCollector.Remove
  commentId: M:System.Runtime.InteropServices.HandleCollector.Remove
  id: Remove
  parent: System.Runtime.InteropServices.HandleCollector
  langs:
  - csharp
  - vb
  name: Remove()
  fullName: System.Runtime.InteropServices.HandleCollector.Remove()
  type: Method
  source:
    remote:
      path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Runtime.InteropServices/src/System/Runtime/InteropServices/HandleCollector.cs
    startLine: 102
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: Decrements the current handle count.
  syntax:
    content: public void Remove()
    content.vb: Public Sub Remove
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The <xref href="System.Runtime.InteropServices.HandleCollector.Count" data-throw-if-not-resolved="false"></xref> property is less than 0.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
