items:
- uid: System.Math
  commentId: T:System.Math
  id: Math
  parent: System
  children:
  - System.Math.Abs(System.Decimal)
  - System.Math.Abs(System.Double)
  - System.Math.Abs(System.Int16)
  - System.Math.Abs(System.Int32)
  - System.Math.Abs(System.Int64)
  - System.Math.Abs(System.SByte)
  - System.Math.Abs(System.Single)
  - System.Math.Acos(System.Double)
  - System.Math.Asin(System.Double)
  - System.Math.Atan(System.Double)
  - System.Math.Atan2(System.Double,System.Double)
  - System.Math.Ceiling(System.Decimal)
  - System.Math.Ceiling(System.Double)
  - System.Math.Cos(System.Double)
  - System.Math.Cosh(System.Double)
  - System.Math.E
  - System.Math.Exp(System.Double)
  - System.Math.Floor(System.Decimal)
  - System.Math.Floor(System.Double)
  - System.Math.IEEERemainder(System.Double,System.Double)
  - System.Math.Log(System.Double)
  - System.Math.Log(System.Double,System.Double)
  - System.Math.Log10(System.Double)
  - System.Math.Max(System.Byte,System.Byte)
  - System.Math.Max(System.Decimal,System.Decimal)
  - System.Math.Max(System.Double,System.Double)
  - System.Math.Max(System.Int16,System.Int16)
  - System.Math.Max(System.Int32,System.Int32)
  - System.Math.Max(System.Int64,System.Int64)
  - System.Math.Max(System.SByte,System.SByte)
  - System.Math.Max(System.Single,System.Single)
  - System.Math.Max(System.UInt16,System.UInt16)
  - System.Math.Max(System.UInt32,System.UInt32)
  - System.Math.Max(System.UInt64,System.UInt64)
  - System.Math.Min(System.Byte,System.Byte)
  - System.Math.Min(System.Decimal,System.Decimal)
  - System.Math.Min(System.Double,System.Double)
  - System.Math.Min(System.Int16,System.Int16)
  - System.Math.Min(System.Int32,System.Int32)
  - System.Math.Min(System.Int64,System.Int64)
  - System.Math.Min(System.SByte,System.SByte)
  - System.Math.Min(System.Single,System.Single)
  - System.Math.Min(System.UInt16,System.UInt16)
  - System.Math.Min(System.UInt32,System.UInt32)
  - System.Math.Min(System.UInt64,System.UInt64)
  - System.Math.PI
  - System.Math.Pow(System.Double,System.Double)
  - System.Math.Round(System.Decimal)
  - System.Math.Round(System.Decimal,System.Int32)
  - System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)
  - System.Math.Round(System.Decimal,System.MidpointRounding)
  - System.Math.Round(System.Double)
  - System.Math.Round(System.Double,System.Int32)
  - System.Math.Round(System.Double,System.Int32,System.MidpointRounding)
  - System.Math.Round(System.Double,System.MidpointRounding)
  - System.Math.Sign(System.Decimal)
  - System.Math.Sign(System.Double)
  - System.Math.Sign(System.Int16)
  - System.Math.Sign(System.Int32)
  - System.Math.Sign(System.Int64)
  - System.Math.Sign(System.SByte)
  - System.Math.Sign(System.Single)
  - System.Math.Sin(System.Double)
  - System.Math.Sinh(System.Double)
  - System.Math.Sqrt(System.Double)
  - System.Math.Tan(System.Double)
  - System.Math.Tanh(System.Double)
  - System.Math.Truncate(System.Decimal)
  - System.Math.Truncate(System.Double)
  langs:
  - csharp
  - vb
  name: Math
  fullName: System.Math
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Math
    path: src/mscorlib/src/System/Math.cs
    startLine: 22
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Provides constants and static methods for trigonometric, logarithmic, and other common mathematical functions.To browse the .NET Framework source code for this type, see the Reference Source.
  syntax:
    content: 'public class Math : object'
    content.vb: >-
      Public Class Math
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Math.Abs(System.Decimal)
  commentId: M:System.Math.Abs(System.Decimal)
  id: Abs(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(Decimal)
  fullName: System.Math.Abs(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Abs
    path: src/mscorlib/src/System/Math.cs
    startLine: 310
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the absolute value of a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> number.
  syntax:
    content: public static decimal Abs(decimal value)
    content.vb: Public Shared Function Abs(value As Decimal) As Decimal
    parameters:
    - id: value
      type: System.Decimal
      description: 'A number that is greater than or equal to <xref href="System.Decimal.MinValue" data-throw-if-not-resolved="false"></xref>, but less than or equal to <xref href="System.Decimal.MaxValue" data-throw-if-not-resolved="false"></xref>. '
    return:
      type: System.Decimal
      description: "A decimal number, x, such that 0 ≤ x ≤<xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Abs(System.Double)
  commentId: M:System.Math.Abs(System.Double)
  id: Abs(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(Double)
  fullName: System.Math.Abs(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the absolute value of a double-precision floating-point number.
  syntax:
    content: public static double Abs(double value)
    content.vb: Public Shared Function Abs(value As Double) As Double
    parameters:
    - id: value
      type: System.Double
      description: A number that is greater than or equal to <xref href="System.Double.MinValue" data-throw-if-not-resolved="false"></xref>, but less than or equal to <xref href="System.Double.MaxValue" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Double
      description: "A double-precision floating-point number, x, such that 0 ≤ x ≤<xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Abs(System.Int16)
  commentId: M:System.Math.Abs(System.Int16)
  id: Abs(System.Int16)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(Int16)
  fullName: System.Math.Abs(System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Abs
    path: src/mscorlib/src/System/Math.cs
    startLine: 241
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the absolute value of a 16-bit signed integer.
  syntax:
    content: public static short Abs(short value)
    content.vb: Public Shared Function Abs(value As Short) As Short
    parameters:
    - id: value
      type: System.Int16
      description: A number that is greater than <xref href="System.Int16.MinValue" data-throw-if-not-resolved="false"></xref>, but less than or equal to <xref href="System.Int16.MaxValue" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Int16
      description: "A 16-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> equals <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Abs(System.Int32)
  commentId: M:System.Math.Abs(System.Int32)
  id: Abs(System.Int32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(Int32)
  fullName: System.Math.Abs(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Abs
    path: src/mscorlib/src/System/Math.cs
    startLine: 256
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the absolute value of a 32-bit signed integer.
  syntax:
    content: public static int Abs(int value)
    content.vb: Public Shared Function Abs(value As Integer) As Integer
    parameters:
    - id: value
      type: System.Int32
      description: A number that is greater than <xref href="System.Int32.MinValue" data-throw-if-not-resolved="false"></xref>, but less than or equal to <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Int32
      description: "A 32-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> equals <xref href=\"System.Int32.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Abs(System.Int64)
  commentId: M:System.Math.Abs(System.Int64)
  id: Abs(System.Int64)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(Int64)
  fullName: System.Math.Abs(System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Abs
    path: src/mscorlib/src/System/Math.cs
    startLine: 271
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the absolute value of a 64-bit signed integer.
  syntax:
    content: public static long Abs(long value)
    content.vb: Public Shared Function Abs(value As Long) As Long
    parameters:
    - id: value
      type: System.Int64
      description: A number that is greater than <xref href="System.Int64.MinValue" data-throw-if-not-resolved="false"></xref>, but less than or equal to <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Int64
      description: "A 64-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> equals <xref href=\"System.Int64.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Abs(System.SByte)
  commentId: M:System.Math.Abs(System.SByte)
  id: Abs(System.SByte)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(SByte)
  fullName: System.Math.Abs(System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Abs
    path: src/mscorlib/src/System/Math.cs
    startLine: 224
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the absolute value of an 8-bit signed integer.
  syntax:
    content: public static sbyte Abs(sbyte value)
    content.vb: Public Shared Function Abs(value As SByte) As SByte
    parameters:
    - id: value
      type: System.SByte
      description: A number that is greater than <xref href="System.SByte.MinValue" data-throw-if-not-resolved="false"></xref>, but less than or equal to <xref href="System.SByte.MaxValue" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.SByte
      description: "An 8-bit signed integer, x, such that 0 ≤ x ≤<xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<em>value</em> equals <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Abs(System.Single)
  commentId: M:System.Math.Abs(System.Single)
  id: Abs(System.Single)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Abs(Single)
  fullName: System.Math.Abs(System.Single)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the absolute value of a single-precision floating-point number.
  syntax:
    content: public static float Abs(float value)
    content.vb: Public Shared Function Abs(value As Single) As Single
    parameters:
    - id: value
      type: System.Single
      description: A number that is greater than or equal to <xref href="System.Single.MinValue" data-throw-if-not-resolved="false"></xref>, but less than or equal to <xref href="System.Single.MaxValue" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Single
      description: "A single-precision floating-point number, x, such that 0 ≤ x ≤<xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Acos(System.Double)
  commentId: M:System.Math.Acos(System.Double)
  id: Acos(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Acos(Double)
  fullName: System.Math.Acos(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the angle whose cosine is the specified number.
  syntax:
    content: public static double Acos(double d)
    content.vb: Public Shared Function Acos(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
      description: 'A number representing a cosine, where <em>d</em> must be greater than or equal to -1, but less than or equal to 1. '
    return:
      type: System.Double
      description: "An angle, θ, measured in radians, such that 0 ≤θ≤π-or- <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref> if <em>d</em> < -1 or <em>d</em> > 1 or <em>d</em> equals <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Asin(System.Double)
  commentId: M:System.Math.Asin(System.Double)
  id: Asin(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Asin(Double)
  fullName: System.Math.Asin(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the angle whose sine is the specified number.
  syntax:
    content: public static double Asin(double d)
    content.vb: Public Shared Function Asin(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
      description: 'A number representing a sine, where <em>d</em> must be greater than or equal to -1, but less than or equal to 1. '
    return:
      type: System.Double
      description: "An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2 -or- <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref> if <em>d</em> < -1 or <em>d</em> > 1 or <em>d</em> equals <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Atan(System.Double)
  commentId: M:System.Math.Atan(System.Double)
  id: Atan(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Atan(Double)
  fullName: System.Math.Atan(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the angle whose tangent is the specified number.
  syntax:
    content: public static double Atan(double d)
    content.vb: Public Shared Function Atan(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
      description: 'A number representing a tangent. '
    return:
      type: System.Double
      description: "An angle, θ, measured in radians, such that -π/2 ≤θ≤π/2.-or- <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref> if <em>d</em> equals <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>, -π/2 rounded to double precision (-1.5707963267949) if <em>d</em> equals <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>, or π/2 rounded to double precision (1.5707963267949) if <em>d</em> equals <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Atan2(System.Double,System.Double)
  commentId: M:System.Math.Atan2(System.Double,System.Double)
  id: Atan2(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Atan2(Double, Double)
  fullName: System.Math.Atan2(System.Double, System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the angle whose tangent is the quotient of two specified numbers.
  syntax:
    content: public static double Atan2(double y, double x)
    content.vb: Public Shared Function Atan2(y As Double, x As Double) As Double
    parameters:
    - id: y
      type: System.Double
      description: 'The y coordinate of a point. '
    - id: x
      type: System.Double
      description: 'The x coordinate of a point. '
    return:
      type: System.Double
      description: "An angle, θ, measured in radians, such that -π≤θ≤π, and tan(θ) = <em>y</em> / <em>x</em>, where (<em>x</em>, <em>y</em>) is a point in the Cartesian plane. Observe the following: For (<em>x</em>, <em>y</em>) in quadrant 1, 0 < θ < π/2.For (<em>x</em>, <em>y</em>) in quadrant 2, π/2 < θ≤π.For (<em>x</em>, <em>y</em>) in quadrant 3, -π < θ < -π/2.For (<em>x</em>, <em>y</em>) in quadrant 4, -π/2 < θ < 0.For points on the boundaries of the quadrants, the return value is the following:If y is 0 and x is not negative, θ = 0.If y is 0 and x is negative, θ = π.If y is positive and x is 0, θ = π/2.If y is negative and x is 0, θ = -π/2.If y is 0 and x is 0, θ = 0. If <em>x</em> or <em>y</em> is <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>, or if <em>x</em> and <em>y</em> are either <xref href=\"System.Double.PositiveInfinity\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Double.NegativeInfinity\" data-throw-if-not-resolved=\"false\"></xref>, the method returns <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Ceiling(System.Decimal)
  commentId: M:System.Math.Ceiling(System.Decimal)
  id: Ceiling(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Ceiling(Decimal)
  fullName: System.Math.Ceiling(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Ceiling
    path: src/mscorlib/src/System/Math.cs
    startLine: 50
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smallest integral value that is greater than or equal to the specified decimal number.
  syntax:
    content: public static decimal Ceiling(decimal d)
    content.vb: Public Shared Function Ceiling(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
      description: 'A decimal number. '
    return:
      type: System.Decimal
      description: The smallest integral value that is greater than or equal to <em>d</em>. Note that this method returns a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> instead of an integral type.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Ceiling(System.Double)
  commentId: M:System.Math.Ceiling(System.Double)
  id: Ceiling(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Ceiling(Double)
  fullName: System.Math.Ceiling(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smallest integral value that is greater than or equal to the specified double-precision floating-point number.
  syntax:
    content: public static double Ceiling(double a)
    content.vb: Public Shared Function Ceiling(a As Double) As Double
    parameters:
    - id: a
      type: System.Double
      description: 'A double-precision floating-point number. '
    return:
      type: System.Double
      description: The smallest integral value that is greater than or equal to <em>a</em>. If <em>a</em> is equal to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>, <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref>, or <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>, that value is returned. Note that this method returns a <xref href="System.Double" data-throw-if-not-resolved="false"></xref> instead of an integral type.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Cos(System.Double)
  commentId: M:System.Math.Cos(System.Double)
  id: Cos(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Cos(Double)
  fullName: System.Math.Cos(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the cosine of the specified angle.
  syntax:
    content: public static double Cos(double d)
    content.vb: Public Shared Function Cos(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
      description: 'An angle, measured in radians. '
    return:
      type: System.Double
      description: The cosine of <em>d</em>. If <em>d</em> is equal to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>, <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref>, or <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>, this method returns <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Cosh(System.Double)
  commentId: M:System.Math.Cosh(System.Double)
  id: Cosh(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Cosh(Double)
  fullName: System.Math.Cosh(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the hyperbolic cosine of the specified angle.
  syntax:
    content: public static double Cosh(double value)
    content.vb: Public Shared Function Cosh(value As Double) As Double
    parameters:
    - id: value
      type: System.Double
      description: 'An angle, measured in radians. '
    return:
      type: System.Double
      description: The hyperbolic cosine of <em>value</em>. If <em>value</em> is equal to <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref> or <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>, <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref> is returned. If <em>value</em> is equal to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>, <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref> is returned.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Exp(System.Double)
  commentId: M:System.Math.Exp(System.Double)
  id: Exp(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Exp(Double)
  fullName: System.Math.Exp(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns e raised to the specified power.
  syntax:
    content: public static double Exp(double d)
    content.vb: Public Shared Function Exp(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
      description: 'A number specifying a power. '
    return:
      type: System.Double
      description: The number e raised to the power <em>d</em>. If <em>d</em> equals <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref> or <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>, that value is returned. If <em>d</em> equals <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref>, 0 is returned.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Floor(System.Decimal)
  commentId: M:System.Math.Floor(System.Decimal)
  id: Floor(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Floor(Decimal)
  fullName: System.Math.Floor(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Floor
    path: src/mscorlib/src/System/Math.cs
    startLine: 66
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the largest integer less than or equal to the specified decimal number.
  syntax:
    content: public static decimal Floor(decimal d)
    content.vb: Public Shared Function Floor(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
      description: 'A decimal number. '
    return:
      type: System.Decimal
      description: 'The largest integer less than or equal to <em>d</em>.  Note that the method returns an integral value of type <xref href="System.Math" data-throw-if-not-resolved="false"></xref>. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Floor(System.Double)
  commentId: M:System.Math.Floor(System.Double)
  id: Floor(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Floor(Double)
  fullName: System.Math.Floor(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the largest integer less than or equal to the specified double-precision floating-point number.
  syntax:
    content: public static double Floor(double d)
    content.vb: Public Shared Function Floor(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
      description: 'A double-precision floating-point number. '
    return:
      type: System.Double
      description: The largest integer less than or equal to <em>d</em>. If <em>d</em> is equal to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>, <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref>, or <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>, that value is returned.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.IEEERemainder(System.Double,System.Double)
  commentId: M:System.Math.IEEERemainder(System.Double,System.Double)
  id: IEEERemainder(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: IEEERemainder(Double, Double)
  fullName: System.Math.IEEERemainder(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IEEERemainder
    path: src/mscorlib/src/System/Math.cs
    startLine: 184
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the remainder resulting from the division of a specified number by another specified number.
  syntax:
    content: public static double IEEERemainder(double x, double y)
    content.vb: Public Shared Function IEEERemainder(x As Double, y As Double) As Double
    parameters:
    - id: x
      type: System.Double
      description: 'A dividend. '
    - id: y
      type: System.Double
      description: 'A divisor. '
    return:
      type: System.Double
      description: A number equal to <em>x</em> - (<em>y</em> Q), where Q is the quotient of <em>x</em> / <em>y</em> rounded to the nearest integer (if <em>x</em> / <em>y</em> falls halfway between two integers, the even integer is returned).If <em>x</em> - (<em>y</em> Q) is zero, the value +0 is returned if <em>x</em> is positive, or -0 if <em>x</em> is negative.If <em>y</em> = 0, <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref> is returned.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Log(System.Double)
  commentId: M:System.Math.Log(System.Double)
  id: Log(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Log(Double)
  fullName: System.Math.Log(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the natural (base e) logarithm of a specified number.
  syntax:
    content: public static double Log(double d)
    content.vb: Public Shared Function Log(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
      description: 'The number whose logarithm is to be found. '
    return:
      type: System.Double
      description: One of the values in the following table. <em>d</em> parameterReturn value Positive The natural logarithm of <em>d</em>; that is, ln <em>d</em>, or log e<em>d</em>Zero <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref>Negative <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>Equal to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref><xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>Equal to <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref><xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Log(System.Double,System.Double)
  commentId: M:System.Math.Log(System.Double,System.Double)
  id: Log(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Log(Double, Double)
  fullName: System.Math.Log(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Log
    path: src/mscorlib/src/System/Math.cs
    startLine: 482
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the logarithm of a specified number in a specified base.
  syntax:
    content: public static double Log(double a, double newBase)
    content.vb: Public Shared Function Log(a As Double, newBase As Double) As Double
    parameters:
    - id: a
      type: System.Double
      description: 'The number whose logarithm is to be found. '
    - id: newBase
      type: System.Double
      description: 'The base of the logarithm. '
    return:
      type: System.Double
      description: One of the values in the following table. (+Infinity denotes <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>, -Infinity denotes <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref>, and NaN denotes <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>.)<em>a</em><em>newBase</em>Return value<em>a</em>> 0(0 <<em>newBase</em>< 1) -or-(<em>newBase</em>> 1)lognewBase(a)<em>a</em>< 0(any value)NaN(any value)<em>newBase</em>< 0NaN<em>a</em> != 1<em>newBase</em> = 0NaN<em>a</em> != 1<em>newBase</em> = +InfinityNaN<em>a</em> = NaN(any value)NaN(any value)<em>newBase</em> = NaNNaN(any value)<em>newBase</em> = 1NaN<em>a</em> = 00 <<em>newBase</em>< 1 +Infinity<em>a</em> = 0<em>newBase</em>> 1-Infinity<em>a</em> =  +Infinity0 <<em>newBase</em>< 1-Infinity<em>a</em> =  +Infinity<em>newBase</em>> 1+Infinity<em>a</em> = 1<em>newBase</em> = 00<em>a</em> = 1<em>newBase</em> = +Infinity0
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Log10(System.Double)
  commentId: M:System.Math.Log10(System.Double)
  id: Log10(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Log10(Double)
  fullName: System.Math.Log10(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the base 10 logarithm of a specified number.
  syntax:
    content: public static double Log10(double d)
    content.vb: Public Shared Function Log10(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
      description: 'A number whose logarithm is to be found. '
    return:
      type: System.Double
      description: One of the values in the following table. <em>d</em> parameter Return value Positive The base 10 log of <em>d</em>; that is, log 10<em>d</em>. Zero <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref>Negative <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>Equal to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref><xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>Equal to <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref><xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Byte,System.Byte)
  commentId: M:System.Math.Max(System.Byte,System.Byte)
  id: Max(System.Byte,System.Byte)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Byte, Byte)
  fullName: System.Math.Max(System.Byte, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 325
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the larger of two 8-bit unsigned integers.
  syntax:
    content: public static byte Max(byte val1, byte val2)
    content.vb: Public Shared Function Max(val1 As Byte, val2 As Byte) As Byte
    parameters:
    - id: val1
      type: System.Byte
      description: 'The first of two 8-bit unsigned integers to compare. '
    - id: val2
      type: System.Byte
      description: 'The second of two 8-bit unsigned integers to compare. '
    return:
      type: System.Byte
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is larger.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Decimal,System.Decimal)
  commentId: M:System.Math.Max(System.Decimal,System.Decimal)
  id: Max(System.Decimal,System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Decimal, Decimal)
  fullName: System.Math.Max(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 392
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the larger of two decimal numbers.
  syntax:
    content: public static decimal Max(decimal val1, decimal val2)
    content.vb: Public Shared Function Max(val1 As Decimal, val2 As Decimal) As Decimal
    parameters:
    - id: val1
      type: System.Decimal
      description: 'The first of two decimal numbers to compare. '
    - id: val2
      type: System.Decimal
      description: 'The second of two decimal numbers to compare. '
    return:
      type: System.Decimal
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is larger.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Double,System.Double)
  commentId: M:System.Math.Max(System.Double,System.Double)
  id: Max(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Double, Double)
  fullName: System.Math.Max(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 381
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the larger of two double-precision floating-point numbers.
  syntax:
    content: public static double Max(double val1, double val2)
    content.vb: Public Shared Function Max(val1 As Double, val2 As Double) As Double
    parameters:
    - id: val1
      type: System.Double
      description: 'The first of two double-precision floating-point numbers to compare. '
    - id: val2
      type: System.Double
      description: 'The second of two double-precision floating-point numbers to compare. '
    return:
      type: System.Double
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is larger. If <em>val1</em>, <em>val2</em>, or both <em>val1</em> and <em>val2</em> are equal to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>, <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref> is returned.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Int16,System.Int16)
  commentId: M:System.Math.Max(System.Int16,System.Int16)
  id: Max(System.Int16,System.Int16)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Int16, Int16)
  fullName: System.Math.Max(System.Int16, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 331
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the larger of two 16-bit signed integers.
  syntax:
    content: public static short Max(short val1, short val2)
    content.vb: Public Shared Function Max(val1 As Short, val2 As Short) As Short
    parameters:
    - id: val1
      type: System.Int16
      description: 'The first of two 16-bit signed integers to compare. '
    - id: val2
      type: System.Int16
      description: 'The second of two 16-bit signed integers to compare. '
    return:
      type: System.Int16
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is larger.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Int32,System.Int32)
  commentId: M:System.Math.Max(System.Int32,System.Int32)
  id: Max(System.Int32,System.Int32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Int32, Int32)
  fullName: System.Math.Max(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 344
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the larger of two 32-bit signed integers.
  syntax:
    content: public static int Max(int val1, int val2)
    content.vb: Public Shared Function Max(val1 As Integer, val2 As Integer) As Integer
    parameters:
    - id: val1
      type: System.Int32
      description: 'The first of two 32-bit signed integers to compare. '
    - id: val2
      type: System.Int32
      description: 'The second of two 32-bit signed integers to compare. '
    return:
      type: System.Int32
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is larger.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Int64,System.Int64)
  commentId: M:System.Math.Max(System.Int64,System.Int64)
  id: Max(System.Int64,System.Int64)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Int64, Int64)
  fullName: System.Math.Max(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 357
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the larger of two 64-bit signed integers.
  syntax:
    content: public static long Max(long val1, long val2)
    content.vb: Public Shared Function Max(val1 As Long, val2 As Long) As Long
    parameters:
    - id: val1
      type: System.Int64
      description: 'The first of two 64-bit signed integers to compare. '
    - id: val2
      type: System.Int64
      description: 'The second of two 64-bit signed integers to compare. '
    return:
      type: System.Int64
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is larger.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.SByte,System.SByte)
  commentId: M:System.Math.Max(System.SByte,System.SByte)
  id: Max(System.SByte,System.SByte)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(SByte, SByte)
  fullName: System.Math.Max(System.SByte, System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 318
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the larger of two 8-bit signed integers.
  syntax:
    content: public static sbyte Max(sbyte val1, sbyte val2)
    content.vb: Public Shared Function Max(val1 As SByte, val2 As SByte) As SByte
    parameters:
    - id: val1
      type: System.SByte
      description: 'The first of two 8-bit signed integers to compare. '
    - id: val2
      type: System.SByte
      description: 'The second of two 8-bit signed integers to compare. '
    return:
      type: System.SByte
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is larger.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.Single,System.Single)
  commentId: M:System.Math.Max(System.Single,System.Single)
  id: Max(System.Single,System.Single)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(Single, Single)
  fullName: System.Math.Max(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 370
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the larger of two single-precision floating-point numbers.
  syntax:
    content: public static float Max(float val1, float val2)
    content.vb: Public Shared Function Max(val1 As Single, val2 As Single) As Single
    parameters:
    - id: val1
      type: System.Single
      description: 'The first of two single-precision floating-point numbers to compare. '
    - id: val2
      type: System.Single
      description: 'The second of two single-precision floating-point numbers to compare. '
    return:
      type: System.Single
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is larger. If <em>val1</em>, or <em>val2</em>, or both <em>val1</em> and <em>val2</em> are equal to <xref href="System.Single.NaN" data-throw-if-not-resolved="false"></xref>, <xref href="System.Single.NaN" data-throw-if-not-resolved="false"></xref> is returned.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.UInt16,System.UInt16)
  commentId: M:System.Math.Max(System.UInt16,System.UInt16)
  id: Max(System.UInt16,System.UInt16)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(UInt16, UInt16)
  fullName: System.Math.Max(System.UInt16, System.UInt16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 337
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the larger of two 16-bit unsigned integers.
  syntax:
    content: public static ushort Max(ushort val1, ushort val2)
    content.vb: Public Shared Function Max(val1 As UShort, val2 As UShort) As UShort
    parameters:
    - id: val1
      type: System.UInt16
      description: 'The first of two 16-bit unsigned integers to compare. '
    - id: val2
      type: System.UInt16
      description: 'The second of two 16-bit unsigned integers to compare. '
    return:
      type: System.UInt16
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is larger.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.UInt32,System.UInt32)
  commentId: M:System.Math.Max(System.UInt32,System.UInt32)
  id: Max(System.UInt32,System.UInt32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(UInt32, UInt32)
  fullName: System.Math.Max(System.UInt32, System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 350
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the larger of two 32-bit unsigned integers.
  syntax:
    content: public static uint Max(uint val1, uint val2)
    content.vb: Public Shared Function Max(val1 As UInteger, val2 As UInteger) As UInteger
    parameters:
    - id: val1
      type: System.UInt32
      description: 'The first of two 32-bit unsigned integers to compare. '
    - id: val2
      type: System.UInt32
      description: 'The second of two 32-bit unsigned integers to compare. '
    return:
      type: System.UInt32
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is larger.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Max(System.UInt64,System.UInt64)
  commentId: M:System.Math.Max(System.UInt64,System.UInt64)
  id: Max(System.UInt64,System.UInt64)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Max(UInt64, UInt64)
  fullName: System.Math.Max(System.UInt64, System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Max
    path: src/mscorlib/src/System/Math.cs
    startLine: 363
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the larger of two 64-bit unsigned integers.
  syntax:
    content: public static ulong Max(ulong val1, ulong val2)
    content.vb: Public Shared Function Max(val1 As ULong, val2 As ULong) As ULong
    parameters:
    - id: val1
      type: System.UInt64
      description: 'The first of two 64-bit unsigned integers to compare. '
    - id: val2
      type: System.UInt64
      description: 'The second of two 64-bit unsigned integers to compare. '
    return:
      type: System.UInt64
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is larger.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Byte,System.Byte)
  commentId: M:System.Math.Min(System.Byte,System.Byte)
  id: Min(System.Byte,System.Byte)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Byte, Byte)
  fullName: System.Math.Min(System.Byte, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 407
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smaller of two 8-bit unsigned integers.
  syntax:
    content: public static byte Min(byte val1, byte val2)
    content.vb: Public Shared Function Min(val1 As Byte, val2 As Byte) As Byte
    parameters:
    - id: val1
      type: System.Byte
      description: 'The first of two 8-bit unsigned integers to compare. '
    - id: val2
      type: System.Byte
      description: 'The second of two 8-bit unsigned integers to compare. '
    return:
      type: System.Byte
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Decimal,System.Decimal)
  commentId: M:System.Math.Min(System.Decimal,System.Decimal)
  id: Min(System.Decimal,System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Decimal, Decimal)
  fullName: System.Math.Min(System.Decimal, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 474
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smaller of two decimal numbers.
  syntax:
    content: public static decimal Min(decimal val1, decimal val2)
    content.vb: Public Shared Function Min(val1 As Decimal, val2 As Decimal) As Decimal
    parameters:
    - id: val1
      type: System.Decimal
      description: 'The first of two decimal numbers to compare. '
    - id: val2
      type: System.Decimal
      description: 'The second of two decimal numbers to compare. '
    return:
      type: System.Decimal
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Double,System.Double)
  commentId: M:System.Math.Min(System.Double,System.Double)
  id: Min(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Double, Double)
  fullName: System.Math.Min(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 463
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smaller of two double-precision floating-point numbers.
  syntax:
    content: public static double Min(double val1, double val2)
    content.vb: Public Shared Function Min(val1 As Double, val2 As Double) As Double
    parameters:
    - id: val1
      type: System.Double
      description: 'The first of two double-precision floating-point numbers to compare. '
    - id: val2
      type: System.Double
      description: 'The second of two double-precision floating-point numbers to compare. '
    return:
      type: System.Double
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is smaller. If <em>val1</em>, <em>val2</em>, or both <em>val1</em> and <em>val2</em> are equal to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>, <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref> is returned.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Int16,System.Int16)
  commentId: M:System.Math.Min(System.Int16,System.Int16)
  id: Min(System.Int16,System.Int16)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Int16, Int16)
  fullName: System.Math.Min(System.Int16, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 413
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smaller of two 16-bit signed integers.
  syntax:
    content: public static short Min(short val1, short val2)
    content.vb: Public Shared Function Min(val1 As Short, val2 As Short) As Short
    parameters:
    - id: val1
      type: System.Int16
      description: 'The first of two 16-bit signed integers to compare. '
    - id: val2
      type: System.Int16
      description: 'The second of two 16-bit signed integers to compare. '
    return:
      type: System.Int16
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Int32,System.Int32)
  commentId: M:System.Math.Min(System.Int32,System.Int32)
  id: Min(System.Int32,System.Int32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Int32, Int32)
  fullName: System.Math.Min(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 426
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smaller of two 32-bit signed integers.
  syntax:
    content: public static int Min(int val1, int val2)
    content.vb: Public Shared Function Min(val1 As Integer, val2 As Integer) As Integer
    parameters:
    - id: val1
      type: System.Int32
      description: 'The first of two 32-bit signed integers to compare. '
    - id: val2
      type: System.Int32
      description: 'The second of two 32-bit signed integers to compare. '
    return:
      type: System.Int32
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Int64,System.Int64)
  commentId: M:System.Math.Min(System.Int64,System.Int64)
  id: Min(System.Int64,System.Int64)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Int64, Int64)
  fullName: System.Math.Min(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 439
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smaller of two 64-bit signed integers.
  syntax:
    content: public static long Min(long val1, long val2)
    content.vb: Public Shared Function Min(val1 As Long, val2 As Long) As Long
    parameters:
    - id: val1
      type: System.Int64
      description: 'The first of two 64-bit signed integers to compare. '
    - id: val2
      type: System.Int64
      description: 'The second of two 64-bit signed integers to compare. '
    return:
      type: System.Int64
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.SByte,System.SByte)
  commentId: M:System.Math.Min(System.SByte,System.SByte)
  id: Min(System.SByte,System.SByte)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(SByte, SByte)
  fullName: System.Math.Min(System.SByte, System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 400
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smaller of two 8-bit signed integers.
  syntax:
    content: public static sbyte Min(sbyte val1, sbyte val2)
    content.vb: Public Shared Function Min(val1 As SByte, val2 As SByte) As SByte
    parameters:
    - id: val1
      type: System.SByte
      description: 'The first of two 8-bit signed integers to compare. '
    - id: val2
      type: System.SByte
      description: 'The second of two 8-bit signed integers to compare. '
    return:
      type: System.SByte
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.Single,System.Single)
  commentId: M:System.Math.Min(System.Single,System.Single)
  id: Min(System.Single,System.Single)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(Single, Single)
  fullName: System.Math.Min(System.Single, System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 452
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smaller of two single-precision floating-point numbers.
  syntax:
    content: public static float Min(float val1, float val2)
    content.vb: Public Shared Function Min(val1 As Single, val2 As Single) As Single
    parameters:
    - id: val1
      type: System.Single
      description: 'The first of two single-precision floating-point numbers to compare. '
    - id: val2
      type: System.Single
      description: 'The second of two single-precision floating-point numbers to compare. '
    return:
      type: System.Single
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is smaller. If <em>val1</em>, <em>val2</em>, or both <em>val1</em> and <em>val2</em> are equal to <xref href="System.Single.NaN" data-throw-if-not-resolved="false"></xref>, <xref href="System.Single.NaN" data-throw-if-not-resolved="false"></xref> is returned.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.UInt16,System.UInt16)
  commentId: M:System.Math.Min(System.UInt16,System.UInt16)
  id: Min(System.UInt16,System.UInt16)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(UInt16, UInt16)
  fullName: System.Math.Min(System.UInt16, System.UInt16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 419
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smaller of two 16-bit unsigned integers.
  syntax:
    content: public static ushort Min(ushort val1, ushort val2)
    content.vb: Public Shared Function Min(val1 As UShort, val2 As UShort) As UShort
    parameters:
    - id: val1
      type: System.UInt16
      description: 'The first of two 16-bit unsigned integers to compare. '
    - id: val2
      type: System.UInt16
      description: 'The second of two 16-bit unsigned integers to compare. '
    return:
      type: System.UInt16
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.UInt32,System.UInt32)
  commentId: M:System.Math.Min(System.UInt32,System.UInt32)
  id: Min(System.UInt32,System.UInt32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(UInt32, UInt32)
  fullName: System.Math.Min(System.UInt32, System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 432
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smaller of two 32-bit unsigned integers.
  syntax:
    content: public static uint Min(uint val1, uint val2)
    content.vb: Public Shared Function Min(val1 As UInteger, val2 As UInteger) As UInteger
    parameters:
    - id: val1
      type: System.UInt32
      description: 'The first of two 32-bit unsigned integers to compare. '
    - id: val2
      type: System.UInt32
      description: 'The second of two 32-bit unsigned integers to compare. '
    return:
      type: System.UInt32
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Min(System.UInt64,System.UInt64)
  commentId: M:System.Math.Min(System.UInt64,System.UInt64)
  id: Min(System.UInt64,System.UInt64)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Min(UInt64, UInt64)
  fullName: System.Math.Min(System.UInt64, System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Min
    path: src/mscorlib/src/System/Math.cs
    startLine: 445
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the smaller of two 64-bit unsigned integers.
  syntax:
    content: public static ulong Min(ulong val1, ulong val2)
    content.vb: Public Shared Function Min(val1 As ULong, val2 As ULong) As ULong
    parameters:
    - id: val1
      type: System.UInt64
      description: 'The first of two 64-bit unsigned integers to compare. '
    - id: val2
      type: System.UInt64
      description: 'The second of two 64-bit unsigned integers to compare. '
    return:
      type: System.UInt64
      description: Parameter <em>val1</em> or <em>val2</em>, whichever is smaller.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Pow(System.Double,System.Double)
  commentId: M:System.Math.Pow(System.Double,System.Double)
  id: Pow(System.Double,System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Pow(Double, Double)
  fullName: System.Math.Pow(System.Double, System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns a specified number raised to the specified power.
  syntax:
    content: public static double Pow(double x, double y)
    content.vb: Public Shared Function Pow(x As Double, y As Double) As Double
    parameters:
    - id: x
      type: System.Double
      description: 'A double-precision floating-point number to be raised to a power. '
    - id: y
      type: System.Double
      description: 'A double-precision floating-point number that specifies a power. '
    return:
      type: System.Double
      description: The number <em>x</em> raised to the power <em>y</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Decimal)
  commentId: M:System.Math.Round(System.Decimal)
  id: Round(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Decimal)
  fullName: System.Math.Round(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 139
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Rounds a decimal value to the nearest integral value.
  syntax:
    content: public static decimal Round(decimal d)
    content.vb: Public Shared Function Round(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
      description: 'A decimal number to be rounded. '
    return:
      type: System.Decimal
      description: The integer nearest parameter <em>d</em>. If the fractional component of <em>d</em> is halfway between two integers, one of which is even and the other odd, the even number is returned. Note that this method returns a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> instead of an integral type.
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The result is outside the range of a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Decimal,System.Int32)
  commentId: M:System.Math.Round(System.Decimal,System.Int32)
  id: Round(System.Decimal,System.Int32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Decimal, Int32)
  fullName: System.Math.Round(System.Decimal, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 143
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Rounds a decimal value to a specified number of fractional digits.
  syntax:
    content: public static decimal Round(decimal d, int decimals)
    content.vb: Public Shared Function Round(d As Decimal, decimals As Integer) As Decimal
    parameters:
    - id: d
      type: System.Decimal
      description: 'A decimal number to be rounded. '
    - id: decimals
      type: System.Int32
      description: 'The number of decimal places in the return value. '
    return:
      type: System.Decimal
      description: 'The number nearest to <em>d</em> that contains a number of fractional digits equal to <em>decimals</em>. '
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>decimals</em> is less than 0 or greater than 28. "
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The result is outside the range of a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)
  commentId: M:System.Math.Round(System.Decimal,System.Int32,System.MidpointRounding)
  id: Round(System.Decimal,System.Int32,System.MidpointRounding)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Decimal, Int32, MidpointRounding)
  fullName: System.Math.Round(System.Decimal, System.Int32, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 151
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Rounds a decimal value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.
  syntax:
    content: public static decimal Round(decimal d, int decimals, MidpointRounding mode)
    content.vb: Public Shared Function Round(d As Decimal, decimals As Integer, mode As MidpointRounding) As Decimal
    parameters:
    - id: d
      type: System.Decimal
      description: 'A decimal number to be rounded. '
    - id: decimals
      type: System.Int32
      description: 'The number of decimal places in the return value. '
    - id: mode
      type: System.MidpointRounding
      description: Specification for how to round <em>d</em> if it is midway between two other numbers.
    return:
      type: System.Decimal
      description: The number nearest to <em>d</em> that contains a number of fractional digits equal to <em>decimals</em>. If <em>d</em> has fewer fractional digits than <em>decimals</em>, <em>d</em> is returned unchanged.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>decimals</em> is less than 0 or greater than 28. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mode</em> is not a valid value of <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The result is outside the range of a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Decimal,System.MidpointRounding)
  commentId: M:System.Math.Round(System.Decimal,System.MidpointRounding)
  id: Round(System.Decimal,System.MidpointRounding)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Decimal, MidpointRounding)
  fullName: System.Math.Round(System.Decimal, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 147
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Rounds a decimal value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.
  syntax:
    content: public static decimal Round(decimal d, MidpointRounding mode)
    content.vb: Public Shared Function Round(d As Decimal, mode As MidpointRounding) As Decimal
    parameters:
    - id: d
      type: System.Decimal
      description: 'A decimal number to be rounded. '
    - id: mode
      type: System.MidpointRounding
      description: Specification for how to round <em>d</em> if it is midway between two other numbers.
    return:
      type: System.Decimal
      description: 'The integer nearest <em>d</em>. If <em>d</em> is halfway between two numbers, one of which is even and the other odd, then <em>mode</em> determines which of the two is returned. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mode</em> is not a valid value of <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The result is outside the range of a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Double)
  commentId: M:System.Math.Round(System.Double)
  id: Round(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Double)
  fullName: System.Math.Round(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Rounds a double-precision floating-point value to the nearest integral value.
  syntax:
    content: public static double Round(double a)
    content.vb: Public Shared Function Round(a As Double) As Double
    parameters:
    - id: a
      type: System.Double
      description: 'A double-precision floating-point number to be rounded. '
    return:
      type: System.Double
      description: The integer nearest <em>a</em>. If the fractional component of <em>a</em> is halfway between two integers, one of which is even and the other odd, then the even number is returned. Note that this method returns a <xref href="System.Double" data-throw-if-not-resolved="false"></xref> instead of an integral type.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Double,System.Int32)
  commentId: M:System.Math.Round(System.Double,System.Int32)
  id: Round(System.Double,System.Int32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Double, Int32)
  fullName: System.Math.Round(System.Double, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 117
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Rounds a double-precision floating-point value to a specified number of fractional digits.
  syntax:
    content: public static double Round(double value, int digits)
    content.vb: Public Shared Function Round(value As Double, digits As Integer) As Double
    parameters:
    - id: value
      type: System.Double
      description: 'A double-precision floating-point number to be rounded. '
    - id: digits
      type: System.Int32
      description: 'The number of fractional digits in the return value. '
    return:
      type: System.Double
      description: The number nearest to <em>value</em> that contains a number of fractional digits equal to <em>digits</em>.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>digits</em> is less than 0 or greater than 15. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Double,System.Int32,System.MidpointRounding)
  commentId: M:System.Math.Round(System.Double,System.Int32,System.MidpointRounding)
  id: Round(System.Double,System.Int32,System.MidpointRounding)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Double, Int32, MidpointRounding)
  fullName: System.Math.Round(System.Double, System.Int32, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 129
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Rounds a double-precision floating-point value to a specified number of fractional digits. A parameter specifies how to round the value if it is midway between two numbers.
  syntax:
    content: public static double Round(double value, int digits, MidpointRounding mode)
    content.vb: Public Shared Function Round(value As Double, digits As Integer, mode As MidpointRounding) As Double
    parameters:
    - id: value
      type: System.Double
      description: 'A double-precision floating-point number to be rounded. '
    - id: digits
      type: System.Int32
      description: 'The number of fractional digits in the return value. '
    - id: mode
      type: System.MidpointRounding
      description: Specification for how to round <em>value</em> if it is midway between two other numbers.
    return:
      type: System.Double
      description: The number nearest to <em>value</em> that has a number of fractional digits equal to <em>digits</em>. If <em>value</em> has fewer fractional digits than <em>digits</em>, <em>value</em> is returned unchanged.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>digits</em> is less than 0 or greater than 15. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mode</em> is not a valid value of <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Round(System.Double,System.MidpointRounding)
  commentId: M:System.Math.Round(System.Double,System.MidpointRounding)
  id: Round(System.Double,System.MidpointRounding)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Round(Double, MidpointRounding)
  fullName: System.Math.Round(System.Double, System.MidpointRounding)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Round
    path: src/mscorlib/src/System/Math.cs
    startLine: 125
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Rounds a double-precision floating-point value to the nearest integer. A parameter specifies how to round the value if it is midway between two numbers.
  syntax:
    content: public static double Round(double value, MidpointRounding mode)
    content.vb: Public Shared Function Round(value As Double, mode As MidpointRounding) As Double
    parameters:
    - id: value
      type: System.Double
      description: 'A double-precision floating-point number to be rounded. '
    - id: mode
      type: System.MidpointRounding
      description: Specification for how to round <em>value</em> if it is midway between two other numbers.
    return:
      type: System.Double
      description: The integer nearest <em>value</em>. If <em>value</em> is halfway between two integers, one of which is even and the other odd, then <em>mode</em> determines which of the two is returned.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>mode</em> is not a valid value of <xref href=\"System.MidpointRounding\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.Decimal)
  commentId: M:System.Math.Sign(System.Decimal)
  id: Sign(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(Decimal)
  fullName: System.Math.Sign(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 569
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns a value indicating the sign of a decimal number.
  syntax:
    content: public static int Sign(decimal value)
    content.vb: Public Shared Function Sign(value As Decimal) As Integer
    parameters:
    - id: value
      type: System.Decimal
      description: 'A signed decimal number. '
    return:
      type: System.Int32
      description: 'A number that indicates the sign of <em>value</em>, as shown in the following table.Return value Meaning -1 <em>value</em> is less than zero. 0 <em>value</em> is equal to zero. 1 <em>value</em> is greater than zero. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.Double)
  commentId: M:System.Math.Sign(System.Double)
  id: Sign(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(Double)
  fullName: System.Math.Sign(System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 558
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns a value indicating the sign of a double-precision floating-point number.
  syntax:
    content: public static int Sign(double value)
    content.vb: Public Shared Function Sign(value As Double) As Integer
    parameters:
    - id: value
      type: System.Double
      description: 'A signed number. '
    return:
      type: System.Int32
      description: 'A number that indicates the sign of <em>value</em>, as shown in the following table.Return value Meaning -1 <em>value</em> is less than zero. 0 <em>value</em> is equal to zero. 1 <em>value</em> is greater than zero. '
  exceptions:
  - type: System.ArithmeticException
    commentId: T:System.ArithmeticException
    description: "\n<em>value</em> is equal to <xref href=\"System.Double.NaN\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.Int16)
  commentId: M:System.Math.Sign(System.Int16)
  id: Sign(System.Int16)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(Int16)
  fullName: System.Math.Sign(System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 515
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns a value indicating the sign of a 16-bit signed integer.
  syntax:
    content: public static int Sign(short value)
    content.vb: Public Shared Function Sign(value As Short) As Integer
    parameters:
    - id: value
      type: System.Int16
      description: 'A signed number. '
    return:
      type: System.Int32
      description: 'A number that indicates the sign of <em>value</em>, as shown in the following table.Return value Meaning -1 <em>value</em> is less than zero. 0 <em>value</em> is equal to zero. 1 <em>value</em> is greater than zero. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.Int32)
  commentId: M:System.Math.Sign(System.Int32)
  id: Sign(System.Int32)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(Int32)
  fullName: System.Math.Sign(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 527
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns a value indicating the sign of a 32-bit signed integer.
  syntax:
    content: public static int Sign(int value)
    content.vb: Public Shared Function Sign(value As Integer) As Integer
    parameters:
    - id: value
      type: System.Int32
      description: 'A signed number. '
    return:
      type: System.Int32
      description: 'A number that indicates the sign of <em>value</em>, as shown in the following table.Return value Meaning -1 <em>value</em> is less than zero. 0 <em>value</em> is equal to zero. 1 <em>value</em> is greater than zero. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.Int64)
  commentId: M:System.Math.Sign(System.Int64)
  id: Sign(System.Int64)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(Int64)
  fullName: System.Math.Sign(System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 537
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns a value indicating the sign of a 64-bit signed integer.
  syntax:
    content: public static int Sign(long value)
    content.vb: Public Shared Function Sign(value As Long) As Integer
    parameters:
    - id: value
      type: System.Int64
      description: 'A signed number. '
    return:
      type: System.Int32
      description: 'A number that indicates the sign of <em>value</em>, as shown in the following table.Return value Meaning -1 <em>value</em> is less than zero. 0 <em>value</em> is equal to zero. 1 <em>value</em> is greater than zero. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.SByte)
  commentId: M:System.Math.Sign(System.SByte)
  id: Sign(System.SByte)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(SByte)
  fullName: System.Math.Sign(System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 501
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns a value indicating the sign of an 8-bit signed integer.
  syntax:
    content: public static int Sign(sbyte value)
    content.vb: Public Shared Function Sign(value As SByte) As Integer
    parameters:
    - id: value
      type: System.SByte
      description: 'A signed number. '
    return:
      type: System.Int32
      description: 'A number that indicates the sign of <em>value</em>, as shown in the following table.Return value Meaning -1 <em>value</em> is less than zero. 0 <em>value</em> is equal to zero. 1 <em>value</em> is greater than zero. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sign(System.Single)
  commentId: M:System.Math.Sign(System.Single)
  id: Sign(System.Single)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sign(Single)
  fullName: System.Math.Sign(System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sign
    path: src/mscorlib/src/System/Math.cs
    startLine: 547
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns a value indicating the sign of a single-precision floating-point number.
  syntax:
    content: public static int Sign(float value)
    content.vb: Public Shared Function Sign(value As Single) As Integer
    parameters:
    - id: value
      type: System.Single
      description: 'A signed number. '
    return:
      type: System.Int32
      description: 'A number that indicates the sign of <em>value</em>, as shown in the following table.Return value Meaning -1 <em>value</em> is less than zero. 0 <em>value</em> is equal to zero. 1 <em>value</em> is greater than zero. '
  exceptions:
  - type: System.ArithmeticException
    commentId: T:System.ArithmeticException
    description: "\n<em>value</em> is equal to <xref href=\"System.Single.NaN\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sin(System.Double)
  commentId: M:System.Math.Sin(System.Double)
  id: Sin(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sin(Double)
  fullName: System.Math.Sin(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the sine of the specified angle.
  syntax:
    content: public static double Sin(double a)
    content.vb: Public Shared Function Sin(a As Double) As Double
    parameters:
    - id: a
      type: System.Double
      description: 'An angle, measured in radians. '
    return:
      type: System.Double
      description: The sine of <em>a</em>. If <em>a</em> is equal to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>, <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref>, or <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>, this method returns <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sinh(System.Double)
  commentId: M:System.Math.Sinh(System.Double)
  id: Sinh(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sinh(Double)
  fullName: System.Math.Sinh(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the hyperbolic sine of the specified angle.
  syntax:
    content: public static double Sinh(double value)
    content.vb: Public Shared Function Sinh(value As Double) As Double
    parameters:
    - id: value
      type: System.Double
      description: 'An angle, measured in radians. '
    return:
      type: System.Double
      description: The hyperbolic sine of <em>value</em>. If <em>value</em> is equal to <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref>, <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>, or <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>, this method returns a <xref href="System.Double" data-throw-if-not-resolved="false"></xref> equal to <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Sqrt(System.Double)
  commentId: M:System.Math.Sqrt(System.Double)
  id: Sqrt(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Sqrt(Double)
  fullName: System.Math.Sqrt(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the square root of a specified number.
  syntax:
    content: public static double Sqrt(double d)
    content.vb: Public Shared Function Sqrt(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
      description: 'The number whose square root is to be found. '
    return:
      type: System.Double
      description: One of the values in the following table. <em>d</em> parameter Return value Zero or positive The positive square root of <em>d</em>. Negative <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>Equals <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref><xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>Equals <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref><xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Tan(System.Double)
  commentId: M:System.Math.Tan(System.Double)
  id: Tan(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Tan(Double)
  fullName: System.Math.Tan(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the tangent of the specified angle.
  syntax:
    content: public static double Tan(double a)
    content.vb: Public Shared Function Tan(a As Double) As Double
    parameters:
    - id: a
      type: System.Double
      description: 'An angle, measured in radians. '
    return:
      type: System.Double
      description: The tangent of <em>a</em>. If <em>a</em> is equal to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>, <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref>, or <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>, this method returns <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Tanh(System.Double)
  commentId: M:System.Math.Tanh(System.Double)
  id: Tanh(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Tanh(Double)
  fullName: System.Math.Tanh(System.Double)
  type: Method
  source:
    path: mscorlib
    isExternal: true
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Returns the hyperbolic tangent of the specified angle.
  syntax:
    content: public static double Tanh(double value)
    content.vb: Public Shared Function Tanh(value As Double) As Double
    parameters:
    - id: value
      type: System.Double
      description: 'An angle, measured in radians. '
    return:
      type: System.Double
      description: The hyperbolic tangent of <em>value</em>. If <em>value</em> is equal to <xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref>, this method returns -1. If value is equal to <xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>, this method returns 1. If <em>value</em> is equal to <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>, this method returns <xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Truncate(System.Decimal)
  commentId: M:System.Math.Truncate(System.Decimal)
  id: Truncate(System.Decimal)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Truncate(Decimal)
  fullName: System.Math.Truncate(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Truncate
    path: src/mscorlib/src/System/Math.cs
    startLine: 159
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: 'Calculates the integral part of a specified decimal number. '
  syntax:
    content: public static decimal Truncate(decimal d)
    content.vb: Public Shared Function Truncate(d As Decimal) As Decimal
    parameters:
    - id: d
      type: System.Decimal
      description: A number to truncate.
    return:
      type: System.Decimal
      description: The integral part of <em>d</em>; that is, the number that remains after any fractional digits have been discarded.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.Truncate(System.Double)
  commentId: M:System.Math.Truncate(System.Double)
  id: Truncate(System.Double)
  parent: System.Math
  langs:
  - csharp
  - vb
  name: Truncate(Double)
  fullName: System.Math.Truncate(System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Truncate
    path: src/mscorlib/src/System/Math.cs
    startLine: 163
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: 'Calculates the integral part of a specified double-precision floating-point number. '
  syntax:
    content: public static double Truncate(double d)
    content.vb: Public Shared Function Truncate(d As Double) As Double
    parameters:
    - id: d
      type: System.Double
      description: A number to truncate.
    return:
      type: System.Double
      description: The integral part of <em>d</em>; that is, the number that remains after any fractional digits have been discarded, or one of the values listed in the following table. <em>d</em>Return value<xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref><xref href="System.Double.NaN" data-throw-if-not-resolved="false"></xref><xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref><xref href="System.Double.NegativeInfinity" data-throw-if-not-resolved="false"></xref><xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref><xref href="System.Double.PositiveInfinity" data-throw-if-not-resolved="false"></xref>
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Math.PI
  commentId: F:System.Math.PI
  id: PI
  parent: System.Math
  langs:
  - csharp
  - vb
  name: PI
  fullName: System.Math.PI
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PI
    path: src/mscorlib/src/System/Math.cs
    startLine: 34
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "Represents the ratio of the circumference of a circle to its diameter, specified by the constant, π."
  syntax:
    content: public const double PI = null
    content.vb: Public Const PI As Double = Nothing
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Math.E
  commentId: F:System.Math.E
  id: E
  parent: System.Math
  langs:
  - csharp
  - vb
  name: E
  fullName: System.Math.E
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Math.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: E
    path: src/mscorlib/src/System/Math.cs
    startLine: 35
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: Represents the natural logarithmic base, specified by the constant, e.
  syntax:
    content: public const double E = null
    content.vb: Public Const E As Double = Nothing
    return:
      type: System.Double
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.MidpointRounding
  parent: System
  isExternal: false
  name: MidpointRounding
  fullName: System.MidpointRounding
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArithmeticException
  parent: System
  isExternal: false
  name: ArithmeticException
  fullName: System.ArithmeticException
