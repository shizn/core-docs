items:
- uid: System.Reflection.Emit.AssemblyBuilderAccess
  commentId: T:System.Reflection.Emit.AssemblyBuilderAccess
  id: AssemblyBuilderAccess
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.AssemblyBuilderAccess.Run
  - System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect
  langs:
  - csharp
  - vb
  name: AssemblyBuilderAccess
  fullName: System.Reflection.Emit.AssemblyBuilderAccess
  type: Enum
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilderAccess.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AssemblyBuilderAccess
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilderAccess.cs
    startLine: 11
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: 'Defines the access modes for a dynamic assembly. '
  syntax:
    content: 'public enum AssemblyBuilderAccess : int'
    content.vb: Public Enum AssemblyBuilderAccess As Integer
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Reflection.Emit.AssemblyBuilderAccess.Run
  commentId: F:System.Reflection.Emit.AssemblyBuilderAccess.Run
  id: Run
  parent: System.Reflection.Emit.AssemblyBuilderAccess
  langs:
  - csharp
  - vb
  name: Run
  fullName: System.Reflection.Emit.AssemblyBuilderAccess.Run
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilderAccess.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Run
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilderAccess.cs
    startLine: 16
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: The dynamic assembly can be executed, but not saved.
  syntax:
    content: Run = null
    content.vb: Run = Nothing
    return:
      type: System.Reflection.Emit.AssemblyBuilderAccess
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect
  commentId: F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect
  id: RunAndCollect
  parent: System.Reflection.Emit.AssemblyBuilderAccess
  langs:
  - csharp
  - vb
  name: RunAndCollect
  fullName: System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilderAccess.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RunAndCollect
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilderAccess.cs
    startLine: 25
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: The dynamic assembly can be unloaded and its memory reclaimed, subject to the restrictions described in Collectible Assemblies for Dynamic Type Generation.
  syntax:
    content: RunAndCollect = null
    content.vb: RunAndCollect = Nothing
    return:
      type: System.Reflection.Emit.AssemblyBuilderAccess
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Reflection.Emit.AssemblyBuilderAccess
  parent: System.Reflection.Emit
  isExternal: false
  name: AssemblyBuilderAccess
  fullName: System.Reflection.Emit.AssemblyBuilderAccess
