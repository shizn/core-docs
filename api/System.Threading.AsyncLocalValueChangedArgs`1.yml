items:
- uid: System.Threading.AsyncLocalValueChangedArgs`1
  commentId: T:System.Threading.AsyncLocalValueChangedArgs`1
  id: AsyncLocalValueChangedArgs`1
  parent: System.Threading
  children:
  - System.Threading.AsyncLocalValueChangedArgs`1.CurrentValue
  - System.Threading.AsyncLocalValueChangedArgs`1.PreviousValue
  - System.Threading.AsyncLocalValueChangedArgs`1.ThreadContextChanged
  langs:
  - csharp
  - vb
  name: AsyncLocalValueChangedArgs<T>
  fullName: System.Threading.AsyncLocalValueChangedArgs<T>
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AsyncLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AsyncLocalValueChangedArgs
    path: src/mscorlib/src/System/Threading/AsyncLocal.cs
    startLine: 96
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'The class that provides data change information to <xref href="System.Threading.AsyncLocal`1" data-throw-if-not-resolved="false"></xref> instances that register for change notifications. '
  syntax:
    content: public struct AsyncLocalValueChangedArgs<T>
    content.vb: Public Structure AsyncLocalValueChangedArgs(Of T)
    typeParameters:
    - id: T
      description: 'The type of the data. '
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: System.Threading.AsyncLocalValueChangedArgs(Of T)
  name.vb: AsyncLocalValueChangedArgs(Of T)
- uid: System.Threading.AsyncLocalValueChangedArgs`1.CurrentValue
  commentId: P:System.Threading.AsyncLocalValueChangedArgs`1.CurrentValue
  id: CurrentValue
  parent: System.Threading.AsyncLocalValueChangedArgs`1
  langs:
  - csharp
  - vb
  name: CurrentValue
  fullName: System.Threading.AsyncLocalValueChangedArgs<T>.CurrentValue
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AsyncLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentValue
    path: src/mscorlib/src/System/Threading/AsyncLocal.cs
    startLine: 99
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'Gets the data''s current value. '
  syntax:
    content: public T CurrentValue { get; }
    content.vb: Public ReadOnly Property CurrentValue As T
    parameters: []
    return:
      type: '{T}'
      description: 'The data''s current value. '
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.AsyncLocalValueChangedArgs(Of T).CurrentValue
- uid: System.Threading.AsyncLocalValueChangedArgs`1.PreviousValue
  commentId: P:System.Threading.AsyncLocalValueChangedArgs`1.PreviousValue
  id: PreviousValue
  parent: System.Threading.AsyncLocalValueChangedArgs`1
  langs:
  - csharp
  - vb
  name: PreviousValue
  fullName: System.Threading.AsyncLocalValueChangedArgs<T>.PreviousValue
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AsyncLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PreviousValue
    path: src/mscorlib/src/System/Threading/AsyncLocal.cs
    startLine: 98
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Gets the data's previous value.
  syntax:
    content: public T PreviousValue { get; }
    content.vb: Public ReadOnly Property PreviousValue As T
    parameters: []
    return:
      type: '{T}'
      description: 'The data''s previous value. '
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.AsyncLocalValueChangedArgs(Of T).PreviousValue
- uid: System.Threading.AsyncLocalValueChangedArgs`1.ThreadContextChanged
  commentId: P:System.Threading.AsyncLocalValueChangedArgs`1.ThreadContextChanged
  id: ThreadContextChanged
  parent: System.Threading.AsyncLocalValueChangedArgs`1
  langs:
  - csharp
  - vb
  name: ThreadContextChanged
  fullName: System.Threading.AsyncLocalValueChangedArgs<T>.ThreadContextChanged
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AsyncLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ThreadContextChanged
    path: src/mscorlib/src/System/Threading/AsyncLocal.cs
    startLine: 105
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'Returns a value that indicates whether the value changes because of a change of execution context. '
  syntax:
    content: public bool ThreadContextChanged { get; }
    content.vb: Public ReadOnly Property ThreadContextChanged As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: 'true if the value changed because of a change of execution context; otherwise, false. '
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.AsyncLocalValueChangedArgs(Of T).ThreadContextChanged
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System
  isExternal: false
  name: System
  fullName: System
