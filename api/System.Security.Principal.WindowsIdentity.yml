items:
- uid: System.Security.Principal.WindowsIdentity
  commentId: T:System.Security.Principal.WindowsIdentity
  id: WindowsIdentity
  parent: System.Security.Principal
  children:
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  - System.Security.Principal.WindowsIdentity.#ctor(System.String)
  - System.Security.Principal.WindowsIdentity.AccessToken
  - System.Security.Principal.WindowsIdentity.AuthenticationType
  - System.Security.Principal.WindowsIdentity.Claims
  - System.Security.Principal.WindowsIdentity.Clone
  - System.Security.Principal.WindowsIdentity.DefaultIssuer
  - System.Security.Principal.WindowsIdentity.Dispose
  - System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  - System.Security.Principal.WindowsIdentity.GetAnonymous
  - System.Security.Principal.WindowsIdentity.GetCurrent
  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  - System.Security.Principal.WindowsIdentity.Groups
  - System.Security.Principal.WindowsIdentity.ImpersonationLevel
  - System.Security.Principal.WindowsIdentity.IsAnonymous
  - System.Security.Principal.WindowsIdentity.IsAuthenticated
  - System.Security.Principal.WindowsIdentity.IsGuest
  - System.Security.Principal.WindowsIdentity.IsSystem
  - System.Security.Principal.WindowsIdentity.Name
  - System.Security.Principal.WindowsIdentity.Owner
  - System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  - System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
  - System.Security.Principal.WindowsIdentity.User
  langs:
  - csharp
  - vb
  name: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
  type: Class
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WindowsIdentity
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 25
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Represents a Windows user.
  syntax:
    content: 'public class WindowsIdentity : Claims.ClaimsIdentity, IDisposable'
    content.vb: >-
      Public Class WindowsIdentity
          Inherits Claims.ClaimsIdentity
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Principal.WindowsIdentity.DefaultIssuer
  commentId: F:System.Security.Principal.WindowsIdentity.DefaultIssuer
  id: DefaultIssuer
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: DefaultIssuer
  fullName: System.Security.Principal.WindowsIdentity.DefaultIssuer
  type: Field
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIssuer
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 38
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Identifies the name of the default <xref href="System.Security.Claims.ClaimsIdentity" data-throw-if-not-resolved="false"></xref> issuer.
  syntax:
    content: public const string DefaultIssuer = null
    content.vb: Public Const DefaultIssuer As String = Nothing
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  commentId: M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: WindowsIdentity(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(System.IntPtr)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 193
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Initializes a new instance of the <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref> class for the user represented by the specified Windows account token.
  syntax:
    content: public WindowsIdentity(IntPtr userToken)
    content.vb: Public Sub New(userToken As IntPtr)
    parameters:
    - id: userToken
      type: System.IntPtr
      description: 'The account token for the user on whose behalf the code is running. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>userToken</em> is 0.-or-<em>userToken</em> is duplicated and invalid for impersonation."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the correct permissions. -or-A Win32 error occurred.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  commentId: M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  id: '#ctor(System.IntPtr,System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: WindowsIdentity(IntPtr, String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(System.IntPtr, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 194
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Initializes a new instance of the <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref> class for the user represented by the specified Windows account token and the specified authentication type.
  syntax:
    content: public WindowsIdentity(IntPtr userToken, string type)
    content.vb: Public Sub New(userToken As IntPtr, type As String)
    parameters:
    - id: userToken
      type: System.IntPtr
      description: 'The account token for the user on whose behalf the code is running. '
    - id: type
      type: System.String
      description: (Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>userToken</em> is 0.-or-<em>userToken</em> is duplicated and invalid for impersonation."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the correct permissions. -or-A Win32 error occurred.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String)
  commentId: M:System.Security.Principal.WindowsIdentity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: WindowsIdentity(String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 60
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Initializes a new instance of the <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref> class for the user represented by the specified User Principal Name (UPN).
  syntax:
    content: public WindowsIdentity(string sUserPrincipalName)
    content.vb: Public Sub New(sUserPrincipalName As String)
    parameters:
    - id: sUserPrincipalName
      type: System.String
      description: 'The UPN for the user on whose behalf the code is running. '
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows returned the WindowsÂ NT status code STATUS_ACCESS_DENIED."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the correct permissions. -or-The computer is not attached to a Windows 2003 or later domain.-or-The computer is not running Windows 2003 or later.-or-The user is not a member of the domain the computer is attached to.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.WindowsIdentity.AccessToken
  commentId: P:System.Security.Principal.WindowsIdentity.AccessToken
  id: AccessToken
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: AccessToken
  fullName: System.Security.Principal.WindowsIdentity.AccessToken
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessToken
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 550
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: 'Gets this <xref href="Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" data-throw-if-not-resolved="false"></xref> for this <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref> instance. '
  syntax:
    content: public SafeAccessTokenHandle AccessToken { get; }
    content.vb: Public ReadOnly Property AccessToken As SafeAccessTokenHandle
    parameters: []
    return:
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: Returns a <xref href="Microsoft.Win32.SafeHandles.SafeAccessTokenHandle" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.AuthenticationType
  commentId: P:System.Security.Principal.WindowsIdentity.AuthenticationType
  id: AuthenticationType
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: AuthenticationType
  fullName: System.Security.Principal.WindowsIdentity.AuthenticationType
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticationType
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 266
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Gets the type of authentication used to identify the user.
  syntax:
    content: public override sealed string AuthenticationType { get; }
    content.vb: Public NotOverridable Overrides ReadOnly Property AuthenticationType As String
    parameters: []
    return:
      type: System.String
      description: The type of authentication used to identify the user.
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows returned the WindowsÂ NT status code STATUS_ACCESS_DENIED."
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is insufficient memory available.
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: The caller does not have the correct permissions. -or-The computer is not attached to a Windows 2003 or later domain.-or-The computer is not running Windows 2003 or later.-or-The user is not a member of the domain the computer is attached to.
  modifiers.csharp:
  - public
  - override
  - sealed
  - get
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Claims
  commentId: P:System.Security.Principal.WindowsIdentity.Claims
  id: Claims
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Claims
  fullName: System.Security.Principal.WindowsIdentity.Claims
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Claims
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 918
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Gets all claims for the user represented by this Windows identity.
  syntax:
    content: public override Collections.Generic.IEnumerable<Claims.Claim> Claims { get; }
    content.vb: Public Overrides ReadOnly Property Claims As Collections.Generic.IEnumerable(Of Claims.Claim)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: A collection of claims for this <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Groups
  commentId: P:System.Security.Principal.WindowsIdentity.Groups
  id: Groups
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Groups
  fullName: System.Security.Principal.WindowsIdentity.Groups
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Groups
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 510
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Gets the groups the current Windows user belongs to.
  syntax:
    content: public IdentityReferenceCollection Groups { get; }
    content.vb: Public ReadOnly Property Groups As IdentityReferenceCollection
    parameters: []
    return:
      type: System.Security.Principal.IdentityReferenceCollection
      description: An object representing the groups the current Windows user belongs to.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  commentId: P:System.Security.Principal.WindowsIdentity.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: ImpersonationLevel
  fullName: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ImpersonationLevel
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 303
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Gets the impersonation level for the user.
  syntax:
    content: public TokenImpersonationLevel ImpersonationLevel { get; }
    content.vb: Public ReadOnly Property ImpersonationLevel As TokenImpersonationLevel
    parameters: []
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: 'One of the enumeration values that specifies the impersonation level. '
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.IsAnonymous
  commentId: P:System.Security.Principal.WindowsIdentity.IsAnonymous
  id: IsAnonymous
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: IsAnonymous
  fullName: System.Security.Principal.WindowsIdentity.IsAnonymous
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAnonymous
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 430
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Gets a value that indicates whether the user account is identified as an anonymous account by the system.
  syntax:
    content: public virtual bool IsAnonymous { get; }
    content.vb: Public Overridable ReadOnly Property IsAnonymous As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the user account is an anonymous account; otherwise, false.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated
  commentId: P:System.Security.Principal.WindowsIdentity.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: IsAuthenticated
  fullName: System.Security.Principal.WindowsIdentity.IsAuthenticated
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAuthenticated
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 340
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Gets a value indicating whether the user has been authenticated by Windows.
  syntax:
    content: public override bool IsAuthenticated { get; }
    content.vb: Public Overrides ReadOnly Property IsAuthenticated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the user was authenticated; otherwise, false.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.IsGuest
  commentId: P:System.Security.Principal.WindowsIdentity.IsGuest
  id: IsGuest
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: IsGuest
  fullName: System.Security.Principal.WindowsIdentity.IsGuest
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGuest
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 404
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Gets a value indicating whether the user account is identified as a <xref href="System.Security.Principal.WindowsAccountType.Guest" data-throw-if-not-resolved="false"></xref> account by the system.
  syntax:
    content: public virtual bool IsGuest { get; }
    content.vb: Public Overridable ReadOnly Property IsGuest As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the user account is a <xref href="System.Security.Principal.WindowsAccountType.Guest" data-throw-if-not-resolved="false"></xref> account; otherwise, false.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.IsSystem
  commentId: P:System.Security.Principal.WindowsIdentity.IsSystem
  id: IsSystem
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: IsSystem
  fullName: System.Security.Principal.WindowsIdentity.IsSystem
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSystem
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 417
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Gets a value indicating whether the user account is identified as a <xref href="System.Security.Principal.WindowsAccountType.System" data-throw-if-not-resolved="false"></xref> account by the system.
  syntax:
    content: public virtual bool IsSystem { get; }
    content.vb: Public Overridable ReadOnly Property IsSystem As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the user account is a <xref href="System.Security.Principal.WindowsAccountType.System" data-throw-if-not-resolved="false"></xref> account; otherwise, false.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Name
  commentId: P:System.Security.Principal.WindowsIdentity.Name
  id: Name
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Security.Principal.WindowsIdentity.Name
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 443
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Gets the user's Windows logon name.
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: The Windows logon name of the user on whose behalf the code is being run.
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Owner
  commentId: P:System.Security.Principal.WindowsIdentity.Owner
  id: Owner
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Owner
  fullName: System.Security.Principal.WindowsIdentity.Owner
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Owner
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 470
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Gets the security identifier (SID) for the token owner.
  syntax:
    content: public SecurityIdentifier Owner { get; }
    content.vb: Public ReadOnly Property Owner As SecurityIdentifier
    parameters: []
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: An object for the token owner.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.User
  commentId: P:System.Security.Principal.WindowsIdentity.User
  id: User
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: User
  fullName: System.Security.Principal.WindowsIdentity.User
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: User
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 490
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Gets the security identifier (SID) for the user.
  syntax:
    content: public SecurityIdentifier User { get; }
    content.vb: Public ReadOnly Property User As SecurityIdentifier
    parameters: []
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: An object for the user.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Clone
  commentId: M:System.Security.Principal.WindowsIdentity.Clone
  id: Clone
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Security.Principal.WindowsIdentity.Clone()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 883
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Creates a new  object that is a copy of the current instance.
  syntax:
    content: public override Claims.ClaimsIdentity Clone()
    content.vb: Public Overrides Function Clone As Claims.ClaimsIdentity
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: A copy of the current instance.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Principal.WindowsIdentity.Dispose
  commentId: M:System.Security.Principal.WindowsIdentity.Dispose
  id: Dispose
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Principal.WindowsIdentity.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 594
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: 'Releases all resources used by the <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref>. '
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  commentId: M:System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 582
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: 'Releases the unmanaged resources used by the <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref> and optionally releases the managed resources. '
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: 'true to release both managed and unmanaged resources; false to release only unmanaged resources. '
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Principal.WindowsIdentity.GetAnonymous
  commentId: M:System.Security.Principal.WindowsIdentity.GetAnonymous
  id: GetAnonymous
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: GetAnonymous()
  fullName: System.Security.Principal.WindowsIdentity.GetAnonymous()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAnonymous
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 257
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Returns a <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref> object that you can use as a sentinel value in your code to represent an anonymous user. The property value does not represent the built-in anonymous identity used by the Windows operating system.
  syntax:
    content: public static WindowsIdentity GetAnonymous()
    content.vb: Public Shared Function GetAnonymous As WindowsIdentity
    return:
      type: System.Security.Principal.WindowsIdentity
      description: An object that represents an anonymous user.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.GetCurrent
  commentId: M:System.Security.Principal.WindowsIdentity.GetCurrent
  id: GetCurrent
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: GetCurrent()
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCurrent
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 235
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Returns a <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref> object that represents the current Windows user.
  syntax:
    content: public static WindowsIdentity GetCurrent()
    content.vb: Public Shared Function GetCurrent As WindowsIdentity
    return:
      type: System.Security.Principal.WindowsIdentity
      description: An object that represents the current user.
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: 'The caller does not have the correct permissions. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  commentId: M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  id: GetCurrent(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: GetCurrent(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCurrent
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 241
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Returns a <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref> object that represents the Windows identity for either the thread or the process, depending on the value of the <em>ifImpersonating</em> parameter.
  syntax:
    content: public static WindowsIdentity GetCurrent(bool ifImpersonating)
    content.vb: Public Shared Function GetCurrent(ifImpersonating As Boolean) As WindowsIdentity
    parameters:
    - id: ifImpersonating
      type: System.Boolean
      description: true to return the <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref> only if the thread is currently impersonating; false to return the <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref>   of the thread if it is impersonating or the <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref> of the process if the thread is not currently impersonating.
    return:
      type: System.Security.Principal.WindowsIdentity
      description: An object that represents a Windows user.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  commentId: M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  id: GetCurrent(System.Security.Principal.TokenAccessLevels)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: GetCurrent(TokenAccessLevels)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCurrent
    path: src/System.Security.Principal.Windows/src/System/Security/Principal/WindowsIdentity.cs
    startLine: 247
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Returns a <xref href="System.Security.Principal.WindowsIdentity" data-throw-if-not-resolved="false"></xref> object that represents the current Windows user, using the specified desired token access level.
  syntax:
    content: public static WindowsIdentity GetCurrent(TokenAccessLevels desiredAccess)
    content.vb: Public Shared Function GetCurrent(desiredAccess As TokenAccessLevels) As WindowsIdentity
    parameters:
    - id: desiredAccess
      type: System.Security.Principal.TokenAccessLevels
      description: 'A bitwise combination of the enumeration values. '
    return:
      type: System.Security.Principal.WindowsIdentity
      description: An object that represents the current user.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  commentId: M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  id: RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: RunImpersonated(SafeAccessTokenHandle, Action)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Action)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RunImpersonated
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 215
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Runs the specified action as the impersonated Windows identity. Instead of using an impersonated method call and running your function in <xref href="System.Security.Principal.WindowsImpersonationContext" data-throw-if-not-resolved="false"></xref>, you can use <xref href="System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)" data-throw-if-not-resolved="false"></xref> and provide your function directly as a parameter.
  syntax:
    content: public static void RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Action action)
    content.vb: Public Shared Sub RunImpersonated(safeAccessTokenHandle As SafeAccessTokenHandle, action As Action)
    parameters:
    - id: safeAccessTokenHandle
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: The SafeAccessTokenHandle of the impersonated Windows identity.
    - id: action
      type: System.Action
      description: 'The System.Action to run. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
  commentId: M:System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
  id: RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: RunImpersonated<T>(SafeAccessTokenHandle, Func<T>)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated<T>(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Func<T>)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RunImpersonated
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 216
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: Runs the specified function as the impersonated Windows identity. Instead of using an impersonated method call and running your function in <xref href="System.Security.Principal.WindowsImpersonationContext" data-throw-if-not-resolved="false"></xref>, you can use <xref href="System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)" data-throw-if-not-resolved="false"></xref> and provide your function directly as a parameter.
  syntax:
    content: public static T RunImpersonated<T>(SafeAccessTokenHandle safeAccessTokenHandle, Func<T> func)
    content.vb: Public Shared Function RunImpersonated(Of T)(safeAccessTokenHandle As SafeAccessTokenHandle, func As Func(Of T)) As T
    parameters:
    - id: safeAccessTokenHandle
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: The SafeAccessTokenHandle of the impersonated Windows identity.
    - id: func
      type: System.Func{{T}}
      description: The System.Func to run.
    typeParameters:
    - id: T
      description: The type of object used by and returned by the function.
    return:
      type: '{T}'
      description: Returns the result of the function.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Security.Principal.WindowsIdentity.RunImpersonated(Of T)(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Func(Of T))
  name.vb: RunImpersonated(Of T)(SafeAccessTokenHandle, Func(Of T))
references:
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeAccessTokenHandle
  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: Collections.Generic.IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Security.Principal.IdentityReferenceCollection
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReferenceCollection
  fullName: System.Security.Principal.IdentityReferenceCollection
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: false
  name: Security.Principal.TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: Principal.SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  fullName: System.Security.Claims
- uid: System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: System.Security.Principal.TokenAccessLevels
  parent: System.Security.Principal
  isExternal: false
  name: TokenAccessLevels
  fullName: System.Security.Principal.TokenAccessLevels
- uid: System.Action
  isExternal: false
  name: Action
  fullName: System.Action
- uid: System.Func{{T}}
  parent: System
  definition: System.Func`1
  name: Func<T>
  fullName: System.Func<T>
  fullname.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Func`1
  parent: System
  isExternal: false
  name: Func<>
  fullName: System.Func<>
  fullname.vb: System.Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
- uid: System.UnauthorizedAccessException
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
