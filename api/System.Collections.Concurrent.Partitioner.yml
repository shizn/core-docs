items:
- uid: System.Collections.Concurrent.Partitioner
  commentId: T:System.Collections.Concurrent.Partitioner
  id: Partitioner
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
  - System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
  - System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
  - System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
  - System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  - System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  langs:
  - csharp
  - vb
  name: Partitioner
  fullName: System.Collections.Concurrent.Partitioner
  type: Class
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Partitioner
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 67
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Provides common partitioning strategies for arrays, lists, and enumerables.
  syntax:
    content: 'public class Partitioner : object'
    content.vb: >-
      Public Class Partitioner
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
  commentId: M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)
  id: Create(System.Int32,System.Int32)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  - vb
  name: Create(Int32, Int32)
  fullName: System.Collections.Concurrent.Partitioner.Create(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 239
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Creates a partitioner that chunks the user-specified range.
  syntax:
    content: public static OrderablePartitioner<Tuple<int, int>> Create(int fromInclusive, int toExclusive)
    content.vb: Public Shared Function Create(fromInclusive As Integer, toExclusive As Integer) As OrderablePartitioner(Of Tuple(Of Integer, Integer))
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The lower, inclusive bound of the range.
    - id: toExclusive
      type: System.Int32
      description: The upper, exclusive bound of the range.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}
      description: A partitioner.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>toExclusive</em> argument is less than or equal to the <em>fromInclusive</em> argument.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)
  id: Create(System.Int32,System.Int32,System.Int32)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  - vb
  name: Create(Int32, Int32, Int32)
  fullName: System.Collections.Concurrent.Partitioner.Create(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 262
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Creates a partitioner that chunks the user-specified range.
  syntax:
    content: public static OrderablePartitioner<Tuple<int, int>> Create(int fromInclusive, int toExclusive, int rangeSize)
    content.vb: Public Shared Function Create(fromInclusive As Integer, toExclusive As Integer, rangeSize As Integer) As OrderablePartitioner(Of Tuple(Of Integer, Integer))
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: The lower, inclusive bound of the range.
    - id: toExclusive
      type: System.Int32
      description: The upper, exclusive bound of the range.
    - id: rangeSize
      type: System.Int32
      description: The size of each subrange.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}
      description: A partitioner.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>toExclusive</em> argument is less than or equal to the <em>fromInclusive</em> argument.-or-The <em>rangeSize</em> argument is less than or equal to 0.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
  commentId: M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)
  id: Create(System.Int64,System.Int64)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  - vb
  name: Create(Int64, Int64)
  fullName: System.Collections.Concurrent.Partitioner.Create(System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 182
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Creates a partitioner that chunks the user-specified range.
  syntax:
    content: public static OrderablePartitioner<Tuple<long, long>> Create(long fromInclusive, long toExclusive)
    content.vb: Public Shared Function Create(fromInclusive As Long, toExclusive As Long) As OrderablePartitioner(Of Tuple(Of Long, Long))
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The lower, inclusive bound of the range.
    - id: toExclusive
      type: System.Int64
      description: The upper, exclusive bound of the range.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}
      description: A partitioner.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>toExclusive</em> argument is less than or equal to the <em>fromInclusive</em> argument.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
  commentId: M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)
  id: Create(System.Int64,System.Int64,System.Int64)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  - vb
  name: Create(Int64, Int64, Int64)
  fullName: System.Collections.Concurrent.Partitioner.Create(System.Int64, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 205
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Creates a partitioner that chunks the user-specified range.
  syntax:
    content: public static OrderablePartitioner<Tuple<long, long>> Create(long fromInclusive, long toExclusive, long rangeSize)
    content.vb: Public Shared Function Create(fromInclusive As Long, toExclusive As Long, rangeSize As Long) As OrderablePartitioner(Of Tuple(Of Long, Long))
    parameters:
    - id: fromInclusive
      type: System.Int64
      description: The lower, inclusive bound of the range.
    - id: toExclusive
      type: System.Int64
      description: The upper, exclusive bound of the range.
    - id: rangeSize
      type: System.Int64
      description: The size of each subrange.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}
      description: A partitioner.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>toExclusive</em> argument is less than or equal to the <em>fromInclusive</em> argument.-or-The <em>rangeSize</em> argument is less than or equal to 0.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
  commentId: M:System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)
  id: Create``1(``0[],System.Boolean)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  - vb
  name: Create<TSource>(TSource[], Boolean)
  fullName: System.Collections.Concurrent.Partitioner.Create<TSource>(TSource[], System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/PartitionerStatic.cs
    startLine: 110
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Creates an orderable partitioner from a <xref href="System.Array" data-throw-if-not-resolved="false"></xref> instance.
  syntax:
    content: public static OrderablePartitioner<TSource> Create<TSource>(TSource[] array, bool loadBalance)
    content.vb: Public Shared Function Create(Of TSource)(array As TSource(), loadBalance As Boolean) As OrderablePartitioner(Of TSource)
    parameters:
    - id: array
      type: '{TSource}[]'
      description: The array to be partitioned.
    - id: loadBalance
      type: System.Boolean
      description: A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.
    typeParameters:
    - id: TSource
      description: Type of the elements in source array.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: An orderable partitioner based on the input array.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.Partitioner.Create(Of TSource)(TSource(), System.Boolean)
  name.vb: Create(Of TSource)(TSource(), Boolean)
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})
  id: Create``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  - vb
  name: Create<TSource>(Generic.IEnumerable<TSource>)
  fullName: System.Collections.Concurrent.Partitioner.Create<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 198
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Creates an orderable partitioner from a <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> instance.
  syntax:
    content: public static OrderablePartitioner<TSource> Create<TSource>(Generic.IEnumerable<TSource> source)
    content.vb: Public Shared Function Create(Of TSource)(source As Generic.IEnumerable(Of TSource)) As OrderablePartitioner(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The enumerable to be partitioned.
    typeParameters:
    - id: TSource
      description: Type of the elements in source enumerable.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: An orderable partitioner based on the input array.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.Partitioner.Create(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Create(Of TSource)(Generic.IEnumerable(Of TSource))
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  commentId: M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  id: Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  - vb
  name: Create<TSource>(Generic.IEnumerable<TSource>, EnumerablePartitionerOptions)
  fullName: System.Collections.Concurrent.Partitioner.Create<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Concurrent.EnumerablePartitionerOptions)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 199
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Creates an orderable partitioner from a <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> instance.
  syntax:
    content: public static OrderablePartitioner<TSource> Create<TSource>(Generic.IEnumerable<TSource> source, EnumerablePartitionerOptions partitionerOptions)
    content.vb: Public Shared Function Create(Of TSource)(source As Generic.IEnumerable(Of TSource), partitionerOptions As EnumerablePartitionerOptions) As OrderablePartitioner(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The enumerable to be partitioned.
    - id: partitionerOptions
      type: System.Collections.Concurrent.EnumerablePartitionerOptions
      description: Options to control the buffering behavior of the partitioner.
    typeParameters:
    - id: TSource
      description: Type of the elements in source enumerable.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: An orderable partitioner based on the input array.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The <em>partitionerOptions</em> argument specifies an invalid value for <xref href="System.Collections.Concurrent.EnumerablePartitionerOptions" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.Partitioner.Create(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Concurrent.EnumerablePartitionerOptions)
  name.vb: Create(Of TSource)(Generic.IEnumerable(Of TSource), EnumerablePartitionerOptions)
- uid: System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  commentId: M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  id: Create``1(System.Collections.Generic.IList{``0},System.Boolean)
  parent: System.Collections.Concurrent.Partitioner
  langs:
  - csharp
  - vb
  name: Create<TSource>(Generic.IList<TSource>, Boolean)
  fullName: System.Collections.Concurrent.Partitioner.Create<TSource>(System.Collections.Generic.IList<TSource>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Collections.Concurrent/ref/System.Collections.Concurrent.cs
    startLine: 200
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Creates an orderable partitioner from an <xref href="System.Collections.Generic.IList`1" data-throw-if-not-resolved="false"></xref> instance.
  syntax:
    content: public static OrderablePartitioner<TSource> Create<TSource>(Generic.IList<TSource> list, bool loadBalance)
    content.vb: Public Shared Function Create(Of TSource)(list As Generic.IList(Of TSource), loadBalance As Boolean) As OrderablePartitioner(Of TSource)
    parameters:
    - id: list
      type: System.Collections.Generic.IList{{TSource}}
      description: The list to be partitioned.
    - id: loadBalance
      type: System.Boolean
      description: A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.
    typeParameters:
    - id: TSource
      description: Type of the elements in source list.
    return:
      type: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
      description: An orderable partitioner based on the input list.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.Partitioner.Create(Of TSource)(System.Collections.Generic.IList(Of TSource), System.Boolean)
  name.vb: Create(Of TSource)(Generic.IList(Of TSource), Boolean)
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int32,System.Int32}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.OrderablePartitioner`1
  name: OrderablePartitioner<Tuple<Int32, Int32>>
  fullName: System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int32, System.Int32>>
  fullname.vb: System.Collections.Concurrent.OrderablePartitioner(Of System.Tuple(Of System.Int32, System.Int32))
  name.vb: OrderablePartitioner(Of Tuple(Of Int32, Int32))
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Concurrent.OrderablePartitioner`1
  parent: System.Collections.Concurrent
  isExternal: false
  name: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  fullname.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  name.vb: OrderablePartitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Collections.Concurrent.OrderablePartitioner{System.Tuple{System.Int64,System.Int64}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.OrderablePartitioner`1
  name: OrderablePartitioner<Tuple<Int64, Int64>>
  fullName: System.Collections.Concurrent.OrderablePartitioner<System.Tuple<System.Int64, System.Int64>>
  fullname.vb: System.Collections.Concurrent.OrderablePartitioner(Of System.Tuple(Of System.Int64, System.Int64))
  name.vb: OrderablePartitioner(Of Tuple(Of Int64, Int64))
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: '{TSource}[]'
  isExternal: false
  name: TSource[]
  fullName: TSource[]
  fullname.vb: TSource()
  name.vb: TSource()
  spec.csharp:
  - name: TSource
    fullName: TSource
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TSource
    fullName: TSource
  - name: ()
    fullName: ()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Concurrent.OrderablePartitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.OrderablePartitioner`1
  name: OrderablePartitioner<TSource>
  fullName: System.Collections.Concurrent.OrderablePartitioner<TSource>
  fullname.vb: System.Collections.Concurrent.OrderablePartitioner(Of TSource)
  name.vb: OrderablePartitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.OrderablePartitioner`1
    name: OrderablePartitioner
    fullName: System.Collections.Concurrent.OrderablePartitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Concurrent.EnumerablePartitionerOptions
  parent: System.Collections.Concurrent
  isExternal: false
  name: EnumerablePartitionerOptions
  fullName: System.Collections.Concurrent.EnumerablePartitionerOptions
- uid: System.Collections.Generic.IList{{TSource}}
  definition: System.Collections.Generic.IList`1
  name: Generic.IList<TSource>
  fullName: System.Collections.Generic.IList<TSource>
  fullname.vb: System.Collections.Generic.IList(Of TSource)
  name.vb: Generic.IList(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IList<>
  fullName: System.Collections.Generic.IList<>
  fullname.vb: System.Collections.Generic.IList(Of )
  name.vb: Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
