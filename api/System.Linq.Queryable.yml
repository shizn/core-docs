items:
- uid: System.Linq.Queryable
  commentId: T:System.Linq.Queryable
  id: Queryable
  parent: System.Linq
  children:
  - System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
  - System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
  - System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  - System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  - System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})
  - System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  - System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  - System.Linq.Queryable.Cast``1(System.Linq.IQueryable)
  - System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)
  - System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
  - System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
  - System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
  - System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  - System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  - System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  - System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  - System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OfType``1(System.Linq.IQueryable)
  - System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
  - System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  - System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  - System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  - System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  - System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})
  - System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)
  - System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})
  - System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  - System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  - System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)
  - System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  - System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  - System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  - System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  - System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  langs:
  - csharp
  - vb
  name: Queryable
  fullName: System.Linq.Queryable
  type: Class
  source:
    remote:
      path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Queryable
    path: src/System.Linq.Queryable/src/System/Linq/Queryable.cs
    startLine: 11
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Provides a set of static (Shared in Visual Basic) methods for querying data structures that implement <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: 'public class Queryable : object'
    content.vb: >-
      Public Class Queryable
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
  commentId: M:System.Linq.Queryable.Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
  id: Aggregate``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``0,``0}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TSource, TSource>>)
  fullName: System.Linq.Queryable.Aggregate<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TSource, TSource>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 39
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Applies an accumulator function over a sequence.
  syntax:
    content: public static TSource Aggregate<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TSource, TSource>> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource)(source As IQueryable(Of TSource), func As Expressions.Expression(Of Func(Of TSource, TSource, TSource))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence to aggregate over.
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TSource},{TSource}}}
      description: An accumulator function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The final accumulator value.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>func</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Aggregate(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TSource, TSource)))
  name.vb: Aggregate(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TSource, TSource)))
- uid: System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
  commentId: M:System.Linq.Queryable.Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
  id: Aggregate``2(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate>(IQueryable<TSource>, TAccumulate, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>)
  fullName: System.Linq.Queryable.Aggregate<TSource, TAccumulate>(System.Linq.IQueryable<TSource>, TAccumulate, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 40
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.
  syntax:
    content: public static TAccumulate Aggregate<TSource, TAccumulate>(this IQueryable<TSource> source, TAccumulate seed, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate)(source As IQueryable(Of TSource), seed As TAccumulate, func As Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate))) As TAccumulate
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence to aggregate over.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TSource},{TAccumulate}}}
      description: An accumulator function to invoke on each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TAccumulate
      description: The type of the accumulator value.
    return:
      type: '{TAccumulate}'
      description: The final accumulator value.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>func</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Aggregate(Of TSource, TAccumulate)(System.Linq.IQueryable(Of TSource), TAccumulate, System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TSource, TAccumulate)))
  name.vb: Aggregate(Of TSource, TAccumulate)(IQueryable(Of TSource), TAccumulate, Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate)))
- uid: System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  commentId: M:System.Linq.Queryable.Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  id: Aggregate``3(System.Linq.IQueryable{``0},``1,System.Linq.Expressions.Expression{System.Func{``1,``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,``2}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate, TResult>(IQueryable<TSource>, TAccumulate, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>, Expressions.Expression<Func<TAccumulate, TResult>>)
  fullName: System.Linq.Queryable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.IQueryable<TSource>, TAccumulate, System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>>, System.Linq.Expressions.Expression<System.Func<TAccumulate, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 41
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Applies an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this IQueryable<TSource> source, TAccumulate seed, Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>> func, Expressions.Expression<Func<TAccumulate, TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As IQueryable(Of TSource), seed As TAccumulate, func As Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate)), selector As Expressions.Expression(Of Func(Of TAccumulate, TResult))) As TResult
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence to aggregate over.
    - id: seed
      type: '{TAccumulate}'
      description: The initial accumulator value.
    - id: func
      type: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TSource},{TAccumulate}}}
      description: An accumulator function to invoke on each element.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TResult}}}
      description: A function to transform the final accumulator value into the result value.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TAccumulate
      description: The type of the accumulator value.
    - id: TResult
      description: The type of the resulting value.
    return:
      type: '{TResult}'
      description: The transformed final accumulator value.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>func</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.IQueryable(Of TSource), TAccumulate, System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TSource, TAccumulate)), System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TResult)))
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(IQueryable(Of TSource), TAccumulate, Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate)), Expressions.Expression(Of Func(Of TAccumulate, TResult)))
- uid: System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: All``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: All<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.All<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: All
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 42
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Determines whether all the elements of a sequence satisfy a condition.
  syntax:
    content: public static bool All<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function All(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As Boolean
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence whose elements to test for a condition.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Boolean
      description: true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.All(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: All(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0})
  id: Any``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Any<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Any<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 43
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Determines whether a sequence contains any elements.
  syntax:
    content: public static bool Any<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As IQueryable(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence to check for being empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Boolean
      description: true if the source sequence contains any elements; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Any(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Any(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Any``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Any<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.Any<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 44
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Determines whether any element of a sequence satisfies a condition.
  syntax:
    content: public static bool Any<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As Boolean
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence whose elements to test for a condition.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Boolean
      description: true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Any(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Any(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  id: AsQueryable(System.Collections.IEnumerable)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: AsQueryable(Collections.IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsQueryable
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 45
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Converts an <xref href="System.Collections.IEnumerable" data-throw-if-not-resolved="false"></xref> to an <xref href="System.Linq.IQueryable" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static IQueryable AsQueryable(this Collections.IEnumerable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsQueryable(source As Collections.IEnumerable) As IQueryable
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: A sequence to convert.
    return:
      type: System.Linq.IQueryable
      description: An <xref href="System.Linq.IQueryable" data-throw-if-not-resolved="false"></xref> that represents the input sequence.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>source</em> does not implement <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> for some <em>T</em>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  id: AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: AsQueryable<TElement>(Collections.Generic.IEnumerable<TElement>)
  fullName: System.Linq.Queryable.AsQueryable<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsQueryable
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 46
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Converts a generic <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> to a generic <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static IQueryable<TElement> AsQueryable<TElement>(this Collections.Generic.IEnumerable<TElement> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsQueryable(Of TElement)(source As Collections.Generic.IEnumerable(Of TElement)) As IQueryable(Of TElement)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TElement}}
      description: A sequence to convert.
    typeParameters:
    - id: TElement
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TElement}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that represents the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.AsQueryable(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: AsQueryable(Of TElement)(Collections.Generic.IEnumerable(Of TElement))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Decimal})
  id: Average(System.Linq.IQueryable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Decimal>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 47
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static decimal Average(this IQueryable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Decimal}
      description: A sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Decimal
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Decimal))
  name.vb: Average(IQueryable(Of Decimal))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Double})
  id: Average(System.Linq.IQueryable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Double>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 48
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static double Average(this IQueryable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Double}
      description: A sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Double))
  name.vb: Average(IQueryable(Of Double))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int32})
  id: Average(System.Linq.IQueryable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Int32>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 49
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static double Average(this IQueryable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Integer)) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int32}
      description: A sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Int32))
  name.vb: Average(IQueryable(Of Int32))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Int64})
  id: Average(System.Linq.IQueryable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Int64>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 50
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static double Average(this IQueryable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Long)) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int64}
      description: A sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Int64))
  name.vb: Average(IQueryable(Of Int64))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Nullable<Decimal>>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 51
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<decimal> Average(this IQueryable<Nullable<decimal>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Decimal}}
      description: A sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Decimal}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only null values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Decimal)))
  name.vb: Average(IQueryable(Of Nullable(Of Decimal)))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Double}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Nullable<Double>>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 52
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<double> Average(this IQueryable<Nullable<double>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Double}}
      description: A sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only null values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Double)))
  name.vb: Average(IQueryable(Of Nullable(Of Double)))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int32}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Nullable<Int32>>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 53
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<double> Average(this IQueryable<Nullable<int>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Nullable(Of Integer))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int32}}
      description: A sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only null values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Int32)))
  name.vb: Average(IQueryable(Of Nullable(Of Int32)))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Int64}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Nullable<Int64>>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 54
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<double> Average(this IQueryable<Nullable<long>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Nullable(Of Long))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int64}}
      description: A sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only null values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Int64)))
  name.vb: Average(IQueryable(Of Nullable(Of Int64)))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Nullable{System.Single}})
  id: Average(System.Linq.IQueryable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Nullable<Single>>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 55
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<float> Average(this IQueryable<Nullable<float>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Single}}
      description: A sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Nullable{System.Single}
      description: The average of the sequence of values, or null if the source sequence is empty or contains only null values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Nullable(Of System.Single)))
  name.vb: Average(IQueryable(Of Nullable(Of Single)))
- uid: System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})
  commentId: M:System.Linq.Queryable.Average(System.Linq.IQueryable{System.Single})
  id: Average(System.Linq.IQueryable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average(IQueryable<Single>)
  fullName: System.Linq.Queryable.Average(System.Linq.IQueryable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 56
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static float Average(this IQueryable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As IQueryable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Single}
      description: A sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values to calculate the average of.
    return:
      type: System.Single
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(System.Linq.IQueryable(Of System.Single))
  name.vb: Average(IQueryable(Of Single))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Decimal>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 57
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static decimal Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Decimal))) As Decimal
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values that are used to calculate an average.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Decimal
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Decimal)))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Double>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 58
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static double Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Double))) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Double)))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 59
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static double Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer))) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32)))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int64>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 60
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static double Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Long))) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Double
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int64)))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 61
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static Nullable<decimal> Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, Nullable<decimal>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal)))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Decimal}
      description: The average of the sequence of values, or null if the <em>source</em> sequence is empty or contains only null values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal))))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Double>>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 62
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static Nullable<double> Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, Nullable<double>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Nullable(Of Double)))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or null if the <em>source</em> sequence is empty or contains only null values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Double))))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int32>>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 63
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static Nullable<double> Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, Nullable<int>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Nullable(Of Integer)))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or null if the <em>source</em> sequence is empty or contains only null values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int32))))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int64>>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 64
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static Nullable<double> Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, Nullable<long>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Nullable(Of Long)))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Double}
      description: The average of the sequence of values, or null if the <em>source</em> sequence is empty or contains only null values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int64))))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Single>>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 65
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static Nullable<float> Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, Nullable<float>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Nullable(Of Single)))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Single}
      description: The average of the sequence of values, or null if the <em>source</em> sequence is empty or contains only null values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Single))))
- uid: System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:System.Linq.Queryable.Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  id: Average``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Average<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Single>>)
  fullName: System.Linq.Queryable.Average<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 66
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the average of a sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static float Average<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Single))) As Single
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to calculate the average of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Single
      description: The average of the sequence of values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> contains no elements."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Average(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Average(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Single)))
- uid: System.Linq.Queryable.Cast``1(System.Linq.IQueryable)
  commentId: M:System.Linq.Queryable.Cast``1(System.Linq.IQueryable)
  id: Cast``1(System.Linq.IQueryable)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Cast<TResult>(IQueryable)
  fullName: System.Linq.Queryable.Cast<TResult>(System.Linq.IQueryable)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cast
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 67
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Converts the elements of an <xref href="System.Linq.IQueryable" data-throw-if-not-resolved="false"></xref> to the specified type.
  syntax:
    content: public static IQueryable<TResult> Cast<TResult>(this IQueryable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cast(Of TResult)(source As IQueryable) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable
      description: The <xref href="System.Linq.IQueryable" data-throw-if-not-resolved="false"></xref> that contains the elements to be converted.
    typeParameters:
    - id: TResult
      description: The type to convert the elements of <em>source</em> to.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains each element of the source sequence converted to the specified type.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: An element in the sequence cannot be cast to type <em>TResult</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Cast(Of TResult)(System.Linq.IQueryable)
  name.vb: Cast(Of TResult)(IQueryable)
- uid: System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Queryable.Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Concat<TSource>(IQueryable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Concat<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 68
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Concatenates two sequences.
  syntax:
    content: public static IQueryable<TSource> Concat<TSource>(this IQueryable<TSource> source1, Collections.Generic.IEnumerable<TSource> source2)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Concat(Of TSource)(source1 As IQueryable(Of TSource), source2 As Collections.Generic.IEnumerable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: The first sequence to concatenate.
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: The sequence to concatenate to the first sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains the concatenated elements of the two input sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source1</em> or <em>source2</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Concat(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(IQueryable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)
  commentId: M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0)
  id: Contains``1(System.Linq.IQueryable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(IQueryable<TSource>, TSource)
  fullName: System.Linq.Queryable.Contains<TSource>(System.Linq.IQueryable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 69
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Determines whether a sequence contains a specified element by using the default equality comparer.
  syntax:
    content: public static bool Contains<TSource>(this IQueryable<TSource> source, TSource item)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As IQueryable(Of TSource), item As TSource) As Boolean
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> in which to locate <em>item</em>.
    - id: item
      type: '{TSource}'
      description: The object to locate in the sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Boolean
      description: true if the input sequence contains an element that has the specified value; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Contains(Of TSource)(System.Linq.IQueryable(Of TSource), TSource)
  name.vb: Contains(Of TSource)(IQueryable(Of TSource), TSource)
- uid: System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Queryable.Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(System.Linq.IQueryable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(IQueryable<TSource>, TSource, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Contains<TSource>(System.Linq.IQueryable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 70
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Determines whether a sequence contains a specified element by using a specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static bool Contains<TSource>(this IQueryable<TSource> source, TSource item, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As IQueryable(Of TSource), item As TSource, comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> in which to locate <em>item</em>.
    - id: item
      type: '{TSource}'
      description: The object to locate in the sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Boolean
      description: true if the input sequence contains an element that has the specified value; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Contains(Of TSource)(System.Linq.IQueryable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(IQueryable(Of TSource), TSource, Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0})
  id: Count``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Count<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Count<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 71
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the number of elements in a sequence.
  syntax:
    content: public static int Count<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As IQueryable(Of TSource)) As Integer
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: The <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains the elements to be counted.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int32
      description: The number of elements in the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of elements in <em>source</em> is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Count(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Count(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Count``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Count<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.Count<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 72
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the number of elements in the specified sequence that satisfies a condition.
  syntax:
    content: public static int Count<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As Integer
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains the elements to be counted.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int32
      description: The number of elements in the sequence that satisfies the condition in the predicate function.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of elements in <em>source</em> is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Count(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Count(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0})
  id: DefaultIfEmpty``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 73
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.
  syntax:
    content: public static IQueryable<TSource> DefaultIfEmpty<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As IQueryable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: The <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return a default value for if empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains default(<em>TSource</em>) if <em>source</em> is empty; otherwise, <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.DefaultIfEmpty(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: DefaultIfEmpty(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
  commentId: M:System.Linq.Queryable.DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
  id: DefaultIfEmpty``1(System.Linq.IQueryable{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(IQueryable<TSource>, TSource)
  fullName: System.Linq.Queryable.DefaultIfEmpty<TSource>(System.Linq.IQueryable<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 74
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.
  syntax:
    content: public static IQueryable<TSource> DefaultIfEmpty<TSource>(this IQueryable<TSource> source, TSource defaultValue)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As IQueryable(Of TSource), defaultValue As TSource) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: The <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return the specified value for if empty.
    - id: defaultValue
      type: '{TSource}'
      description: The value to return if the sequence is empty.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains <em>defaultValue</em> if <em>source</em> is empty; otherwise, <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.DefaultIfEmpty(Of TSource)(System.Linq.IQueryable(Of TSource), TSource)
  name.vb: DefaultIfEmpty(Of TSource)(IQueryable(Of TSource), TSource)
- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0})
  id: Distinct``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Distinct<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 75
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns distinct elements from a sequence by using the default equality comparer to compare values.
  syntax:
    content: public static IQueryable<TSource> Distinct<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As IQueryable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: The <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to remove duplicates from.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains distinct elements from <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Distinct(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Distinct(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Queryable.Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(IQueryable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Distinct<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 76
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns distinct elements from a sequence by using a specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
  syntax:
    content: public static IQueryable<TSource> Distinct<TSource>(this IQueryable<TSource> source, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As IQueryable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: The <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to remove duplicates from.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains distinct elements from <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>comparer</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Distinct(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(IQueryable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
  commentId: M:System.Linq.Queryable.ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
  id: ElementAt``1(System.Linq.IQueryable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: ElementAt<TSource>(IQueryable<TSource>, Int32)
  fullName: System.Linq.Queryable.ElementAt<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAt
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 77
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the element at a specified index in a sequence.
  syntax:
    content: public static TSource ElementAt<TSource>(this IQueryable<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAt(Of TSource)(source As IQueryable(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: index
      type: System.Int32
      description: The zero-based index of the element to retrieve.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The element at the specified position in <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than zero."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.ElementAt(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32)
  name.vb: ElementAt(Of TSource)(IQueryable(Of TSource), Int32)
- uid: System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
  commentId: M:System.Linq.Queryable.ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
  id: ElementAtOrDefault``1(System.Linq.IQueryable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: ElementAtOrDefault<TSource>(IQueryable<TSource>, Int32)
  fullName: System.Linq.Queryable.ElementAtOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAtOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 78
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the element at a specified index in a sequence or a default value if the index is out of range.
  syntax:
    content: public static TSource ElementAtOrDefault<TSource>(this IQueryable<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAtOrDefault(Of TSource)(source As IQueryable(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: index
      type: System.Int32
      description: The zero-based index of the element to retrieve.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: default(<em>TSource</em>) if <em>index</em> is outside the bounds of <em>source</em>; otherwise, the element at the specified position in <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.ElementAtOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32)
  name.vb: ElementAtOrDefault(Of TSource)(IQueryable(Of TSource), Int32)
- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Except<TSource>(IQueryable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Except<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 79
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Produces the set difference of two sequences by using the default equality comparer to compare values.
  syntax:
    content: public static IQueryable<TSource> Except<TSource>(this IQueryable<TSource> source1, Collections.Generic.IEnumerable<TSource> source2)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(source1 As IQueryable(Of TSource), source2 As Collections.Generic.IEnumerable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements that are not also in <em>source2</em> will be returned.
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains the set difference of the two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source1</em> or <em>source2</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Except(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(IQueryable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Queryable.Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Except<TSource>(IQueryable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Except<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 80
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Produces the set difference of two sequences by using the specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
  syntax:
    content: public static IQueryable<TSource> Except<TSource>(this IQueryable<TSource> source1, Collections.Generic.IEnumerable<TSource> source2, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(source1 As IQueryable(Of TSource), source2 As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements that are not also in <em>source2</em> will be returned.
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements that also occur in the first sequence will not appear in the returned sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains the set difference of the two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source1</em> or <em>source2</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Except(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(IQueryable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0})
  id: First``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: First<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.First<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 81
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the first element of a sequence.
  syntax:
    content: public static TSource First<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: The <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return the first element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The first element in <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The source sequence is empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.First(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: First(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: First``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: First<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.First<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 82
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the first element of a sequence that satisfies a specified condition.
  syntax:
    content: public static TSource First<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The first element in <em>source</em> that passes the test in <em>predicate</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No element satisfies the condition in <em>predicate</em>.-or-The source sequence is empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.First(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: First(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0})
  id: FirstOrDefault``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 83
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the first element of a sequence, or a default value if the sequence contains no elements.
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: The <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return the first element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: default(<em>TSource</em>) if <em>source</em> is empty; otherwise, the first element in <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.FirstOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: FirstOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.FirstOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 84
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the first element of a sequence that satisfies a specified condition or a default value if no such element is found.
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: default(<em>TSource</em>) if <em>source</em> is empty or if no element passes the test specified by <em>predicate</em>; otherwise, the first element in <em>source</em> that passes the test specified by <em>predicate</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.FirstOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: FirstOrDefault(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 85
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function.
  syntax:
    content: public static IQueryable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IQueryable(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract the key for each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function represented in <em>keySelector</em>.
    return:
      type: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TSource}}}
      description: An IQueryable<IGrouping<TKey, TSource>> in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref> object contains a sequence of objects and a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: GroupBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))
- uid: System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Queryable.GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 86
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.
  syntax:
    content: public static IQueryable<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As IQueryable(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract the key for each element.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function represented in <em>keySelector</em>.
    return:
      type: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TSource}}}
      description: An IQueryable<IGrouping<TKey, TSource>> in C# or IQueryable(Of IGrouping(Of TKey, TSource)) in Visual Basic where each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref> contains a sequence of objects and a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TSource, TElement>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 87
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.
  syntax:
    content: public static IQueryable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TSource, TElement>> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), elementSelector As Expressions.Expression(Of Func(Of TSource, TElement))) As IQueryable(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract the key for each element.
    - id: elementSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}
      description: A function to map each source element to an element in an <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function represented in <em>keySelector</em>.
    - id: TElement
      description: The type of the elements in each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TElement}}}
      description: An IQueryable<IGrouping<TKey, TElement>> in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref> contains a sequence of objects of type <em>TElement</em> and a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement)))
  name.vb: GroupBy(Of TSource, TKey, TElement)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)))
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TSource, TElement>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 88
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Groups the elements of a sequence and projects the elements for each group by using a specified function. Key values are compared by using a specified comparer.
  syntax:
    content: public static IQueryable<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TSource, TElement>> elementSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), elementSelector As Expressions.Expression(Of Func(Of TSource, TElement)), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As IQueryable(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract the key for each element.
    - id: elementSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}
      description: A function to map each source element to an element in an <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function represented in <em>keySelector</em>.
    - id: TElement
      description: The type of the elements in each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TElement}}}
      description: An IQueryable<IGrouping<TKey, TElement>> in C# or IQueryable(Of IGrouping(Of TKey, TElement)) in Visual Basic where each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref> contains a sequence of objects of type <em>TElement</em> and a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> or <em>comparer</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 89
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.
  syntax:
    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), resultSelector As Expressions.Expression(Of Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract the key for each element.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
      description: A function to create a result value from each group.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function represented in <em>keySelector</em>.
    - id: TResult
      description: The type of the result value returned by <em>resultSelector</em>.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult)))
- uid: System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Queryable.GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 90
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer.
  syntax:
    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), resultSelector As Expressions.Expression(Of Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult)), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract the key for each element.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
      description: A function to create a result value from each group.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function represented in <em>keySelector</em>.
    - id: TResult
      description: The type of the result value returned by <em>resultSelector</em>.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>resultSelector</em> or <em>comparer</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult)), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  commentId: M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  id: GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Expressions.Expression<Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TSource, TElement>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 91
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.
  syntax:
    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TSource, TElement>> elementSelector, Expressions.Expression<Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), elementSelector As Expressions.Expression(Of Func(Of TSource, TElement)), resultSelector As Expressions.Expression(Of Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract the key for each element.
    - id: elementSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}
      description: A function to map each source element to an element in an <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}}
      description: A function to create a result value from each group.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function represented in <em>keySelector</em>.
    - id: TElement
      description: The type of the elements in each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    - id: TResult
      description: The type of the result value returned by <em>resultSelector</em>.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)), Expressions.Expression(Of Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult)))
- uid: System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.Queryable.GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``4(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Expressions.Expression<Func<TSource, TElement>>, Expressions.Expression<Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Linq.Expressions.Expression<System.Func<TSource, TElement>>, System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 92
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Keys are compared by using a specified comparer and the elements of each group are projected by using a specified function.
  syntax:
    content: public static IQueryable<TResult> GroupBy<TSource, TKey, TElement, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Expressions.Expression<Func<TSource, TElement>> elementSelector, Expressions.Expression<Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), elementSelector As Expressions.Expression(Of Func(Of TSource, TElement)), resultSelector As Expressions.Expression(Of Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult)), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements to group.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract the key for each element.
    - id: elementSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}
      description: A function to map each source element to an element in an <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}}
      description: A function to create a result value from each group.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function represented in <em>keySelector</em>.
    - id: TElement
      description: The type of the elements in each <xref href="System.Linq.IGrouping`2" data-throw-if-not-resolved="false"></xref>.
    - id: TResult
      description: The type of the result value returned by <em>resultSelector</em>.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An T:System.Linq.IQueryable`1 that has a type argument of <em>TResult</em> and where each element represents a projection over a group and its key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> or <em>resultSelector</em> or <em>comparer</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement)), System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Expressions.Expression(Of Func(Of TSource, TElement)), Expressions.Expression(Of Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult)), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  commentId: M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  id: GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, Collections.Generic.IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>>)
  fullName: System.Linq.Queryable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 93
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Correlates the elements of two sequences based on key equality and groups the results. The default equality comparer is used to compare keys.
  syntax:
    content: public static IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IQueryable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Expressions.Expression<Func<TOuter, TKey>> outerKeySelector, Expressions.Expression<Func<TInner, TKey>> innerKeySelector, Expressions.Expression<Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Expressions.Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expressions.Expression(Of Func(Of TInner, TKey)), resultSelector As Expressions.Expression(Of Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult))) As IQueryable(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.IQueryable{{TOuter}}
      description: The first sequence to join.
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: A function to extract the join key from each element of the first sequence.
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: A function to extract the join key from each element of the second sequence.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
      description: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    typeParameters:
    - id: TOuter
      description: The type of the elements of the first sequence.
    - id: TInner
      description: The type of the elements of the second sequence.
    - id: TKey
      description: The type of the keys returned by the key selector functions.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements of type <em>TResult</em> obtained by performing a grouped join on two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult)))
- uid: System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.Queryable.GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, Collections.Generic.IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 94
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Correlates the elements of two sequences based on key equality and groups the results. A specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> is used to compare keys.
  syntax:
    content: public static IQueryable<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this IQueryable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Expressions.Expression<Func<TOuter, TKey>> outerKeySelector, Expressions.Expression<Func<TInner, TKey>> innerKeySelector, Expressions.Expression<Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Expressions.Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expressions.Expression(Of Func(Of TInner, TKey)), resultSelector As Expressions.Expression(Of Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult)), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As IQueryable(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.IQueryable{{TOuter}}
      description: The first sequence to join.
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: A function to extract the join key from each element of the first sequence.
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: A function to extract the join key from each element of the second sequence.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
      description: A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: A comparer to hash and compare keys.
    typeParameters:
    - id: TOuter
      description: The type of the elements of the first sequence.
    - id: TInner
      description: The type of the elements of the second sequence.
    - id: TKey
      description: The type of the keys returned by the key selector functions.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements of type <em>TResult</em> obtained by performing a grouped join on two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult)), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(IQueryable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Intersect<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 95
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Produces the set intersection of two sequences by using the default equality comparer to compare values.
  syntax:
    content: public static IQueryable<TSource> Intersect<TSource>(this IQueryable<TSource> source1, Collections.Generic.IEnumerable<TSource> source2)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(source1 As IQueryable(Of TSource), source2 As Collections.Generic.IEnumerable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence whose distinct elements that also appear in <em>source2</em> are returned.
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence whose distinct elements that also appear in the first sequence are returned.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence that contains the set intersection of the two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source1</em> or <em>source2</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Intersect(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(IQueryable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Queryable.Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(IQueryable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Intersect<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 96
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Produces the set intersection of two sequences by using the specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
  syntax:
    content: public static IQueryable<TSource> Intersect<TSource>(this IQueryable<TSource> source1, Collections.Generic.IEnumerable<TSource> source2, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(source1 As IQueryable(Of TSource), source2 As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose distinct elements that also appear in <em>source2</em> are returned.
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose distinct elements that also appear in the first sequence are returned.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains the set intersection of the two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source1</em> or <em>source2</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Intersect(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(IQueryable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  commentId: M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  id: Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, Collections.Generic.IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, TInner, TResult>>)
  fullName: System.Linq.Queryable.Join<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 97
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Correlates the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.
  syntax:
    content: public static IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(this IQueryable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Expressions.Expression<Func<TOuter, TKey>> outerKeySelector, Expressions.Expression<Func<TInner, TKey>> innerKeySelector, Expressions.Expression<Func<TOuter, TInner, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Expressions.Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expressions.Expression(Of Func(Of TInner, TKey)), resultSelector As Expressions.Expression(Of Func(Of TOuter, TInner, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.IQueryable{{TOuter}}
      description: The first sequence to join.
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: A function to extract the join key from each element of the first sequence.
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: A function to extract the join key from each element of the second sequence.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}
      description: A function to create a result element from two matching elements.
    typeParameters:
    - id: TOuter
      description: The type of the elements of the first sequence.
    - id: TInner
      description: The type of the elements of the second sequence.
    - id: TKey
      description: The type of the keys returned by the key selector functions.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that has elements of type <em>TResult</em> obtained by performing an inner join on two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, TInner, TResult)))
- uid: System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.Queryable.Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``2}},System.Linq.Expressions.Expression{System.Func{``1,``2}},System.Linq.Expressions.Expression{System.Func{``0,``1,``3}},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(IQueryable<TOuter>, Collections.Generic.IEnumerable<TInner>, Expressions.Expression<Func<TOuter, TKey>>, Expressions.Expression<Func<TInner, TKey>>, Expressions.Expression<Func<TOuter, TInner, TResult>>, Collections.Generic.IEqualityComparer<TKey>)
  fullName: System.Linq.Queryable.Join<TOuter, TInner, TKey, TResult>(System.Linq.IQueryable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>, System.Linq.Expressions.Expression<System.Func<TInner, TKey>>, System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 98
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Correlates the elements of two sequences based on matching keys. A specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> is used to compare keys.
  syntax:
    content: public static IQueryable<TResult> Join<TOuter, TInner, TKey, TResult>(this IQueryable<TOuter> outer, Collections.Generic.IEnumerable<TInner> inner, Expressions.Expression<Func<TOuter, TKey>> outerKeySelector, Expressions.Expression<Func<TInner, TKey>> innerKeySelector, Expressions.Expression<Func<TOuter, TInner, TResult>> resultSelector, Collections.Generic.IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As IQueryable(Of TOuter), inner As Collections.Generic.IEnumerable(Of TInner), outerKeySelector As Expressions.Expression(Of Func(Of TOuter, TKey)), innerKeySelector As Expressions.Expression(Of Func(Of TInner, TKey)), resultSelector As Expressions.Expression(Of Func(Of TOuter, TInner, TResult)), comparer As Collections.Generic.IEqualityComparer(Of TKey)) As IQueryable(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.IQueryable{{TOuter}}
      description: The first sequence to join.
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: The sequence to join to the first sequence.
    - id: outerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
      description: A function to extract the join key from each element of the first sequence.
    - id: innerKeySelector
      type: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
      description: A function to extract the join key from each element of the second sequence.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}
      description: A function to create a result element from two matching elements.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to hash and compare keys.
    typeParameters:
    - id: TOuter
      description: The type of the elements of the first sequence.
    - id: TInner
      description: The type of the elements of the second sequence.
    - id: TKey
      description: The type of the keys returned by the key selector functions.
    - id: TResult
      description: The type of the result elements.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that has elements of type <em>TResult</em> obtained by performing an inner join on two sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>outer</em> or <em>inner</em> or <em>outerKeySelector</em> or <em>innerKeySelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.IQueryable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey)), System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult)), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IQueryable(Of TOuter), Collections.Generic.IEnumerable(Of TInner), Expressions.Expression(Of Func(Of TOuter, TKey)), Expressions.Expression(Of Func(Of TInner, TKey)), Expressions.Expression(Of Func(Of TOuter, TInner, TResult)), Collections.Generic.IEqualityComparer(Of TKey))
- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0})
  id: Last``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Last<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Last<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 99
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the last element in a sequence.
  syntax:
    content: public static TSource Last<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return the last element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The value at the last position in <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The source sequence is empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Last(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Last(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Last``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Last<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.Last<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 100
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the last element of a sequence that satisfies a specified condition.
  syntax:
    content: public static TSource Last<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The last element in <em>source</em> that passes the test specified by <em>predicate</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No element satisfies the condition in <em>predicate</em>.-or-The source sequence is empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Last(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Last(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0})
  id: LastOrDefault``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.LastOrDefault<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 101
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the last element in a sequence, or a default value if the sequence contains no elements.
  syntax:
    content: public static TSource LastOrDefault<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return the last element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: default(<em>TSource</em>) if <em>source</em> is empty; otherwise, the last element in <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.LastOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: LastOrDefault(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: LastOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.LastOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 102
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.
  syntax:
    content: public static TSource LastOrDefault<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return an element from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: default(<em>TSource</em>) if <em>source</em> is empty or if no elements pass the test in the predicate function; otherwise, the last element of <em>source</em> that passes the test in the predicate function.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.LastOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: LastOrDefault(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0})
  id: LongCount``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.LongCount<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 103
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns an <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> that represents the total number of elements in a sequence.
  syntax:
    content: public static long LongCount<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As IQueryable(Of TSource)) As Long
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains the elements to be counted.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int64
      description: The number of elements in <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of elements exceeds <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.LongCount(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: LongCount(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: LongCount``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.LongCount<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 104
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns an <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> that represents the number of elements in a sequence that satisfy a condition.
  syntax:
    content: public static long LongCount<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As Long
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains the elements to be counted.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int64
      description: The number of elements in <em>source</em> that satisfy the condition in the predicate function.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The number of matching elements exceeds <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.LongCount(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: LongCount(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Max``1(System.Linq.IQueryable{``0})
  id: Max``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Max<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Max<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 105
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the maximum value in a generic <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static TSource Max<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to determine the maximum of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Max(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Max(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Max``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)
  fullName: System.Linq.Queryable.Max<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 106
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Invokes a projection function on each element of a generic <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> and returns the maximum resulting value.
  syntax:
    content: public static TResult Max<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, TResult))) As TResult
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to determine the maximum of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TResult
      description: The type of the value returned by the function represented by <em>selector</em>.
    return:
      type: '{TResult}'
      description: The maximum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Max(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Max(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TResult)))
- uid: System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Min``1(System.Linq.IQueryable{``0})
  id: Min``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Min<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Min<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 107
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the minimum value of a generic <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static TSource Min<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to determine the minimum of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Min(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Min(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Min``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)
  fullName: System.Linq.Queryable.Min<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 108
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Invokes a projection function on each element of a generic <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> and returns the minimum resulting value.
  syntax:
    content: public static TResult Min<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, TResult))) As TResult
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to determine the minimum of.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TResult
      description: The type of the value returned by the function represented by <em>selector</em>.
    return:
      type: '{TResult}'
      description: The minimum value in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Min(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Min(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TResult)))
- uid: System.Linq.Queryable.OfType``1(System.Linq.IQueryable)
  commentId: M:System.Linq.Queryable.OfType``1(System.Linq.IQueryable)
  id: OfType``1(System.Linq.IQueryable)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: OfType<TResult>(IQueryable)
  fullName: System.Linq.Queryable.OfType<TResult>(System.Linq.IQueryable)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OfType
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 109
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Filters the elements of an <xref href="System.Linq.IQueryable" data-throw-if-not-resolved="false"></xref> based on a specified type.
  syntax:
    content: public static IQueryable<TResult> OfType<TResult>(this IQueryable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfType(Of TResult)(source As IQueryable) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable
      description: An <xref href="System.Linq.IQueryable" data-throw-if-not-resolved="false"></xref> whose elements to filter.
    typeParameters:
    - id: TResult
      description: The type to filter the elements of the sequence on.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: A collection that contains the elements from <em>source</em> that have type <em>TResult</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.OfType(Of TResult)(System.Linq.IQueryable)
  name.vb: OfType(Of TResult)(IQueryable)
- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.OrderBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 110
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Sorts the elements of a sequence in ascending order according to a key.
  syntax:
    content: public static IOrderedQueryable<TSource> OrderBy<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract a key from an element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function that is represented by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: An <xref href="System.Linq.IOrderedQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.OrderBy(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: OrderBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))
- uid: System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Queryable.OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: OrderBy``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.Queryable.OrderBy<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 111
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Sorts the elements of a sequence in ascending order by using a specified comparer.
  syntax:
    content: public static IOrderedQueryable<TSource> OrderBy<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As Collections.Generic.IComparer(Of TKey)) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract a key from an element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function that is represented by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: An <xref href="System.Linq.IOrderedQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.OrderBy(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.OrderByDescending<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 112
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Sorts the elements of a sequence in descending order according to a key.
  syntax:
    content: public static IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract a key from an element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function that is represented by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: An <xref href="System.Linq.IOrderedQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted in descending order according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.OrderByDescending(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: OrderByDescending(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))
- uid: System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Queryable.OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: OrderByDescending``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.Queryable.OrderByDescending<TSource, TKey>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 113
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Sorts the elements of a sequence in descending order by using a specified comparer.
  syntax:
    content: public static IOrderedQueryable<TSource> OrderByDescending<TSource, TKey>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As IQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As Collections.Generic.IComparer(Of TKey)) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to order.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract a key from an element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function that is represented by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: An <xref href="System.Linq.IOrderedQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted in descending order according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.OrderByDescending(Of TSource, TKey)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Reverse``1(System.Linq.IQueryable{``0})
  id: Reverse``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Reverse<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Reverse<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 114
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Inverts the order of the elements in a sequence.
  syntax:
    content: public static IQueryable<TSource> Reverse<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Reverse(Of TSource)(source As IQueryable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to reverse.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements correspond to those of the input sequence in reverse order.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Reverse(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Reverse(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, TResult>>)
  fullName: System.Linq.Queryable.Select<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 115
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Projects each element of a sequence into a new form.
  syntax:
    content: public static IQueryable<TResult> Select<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to project.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TResult
      description: The type of the value returned by the function represented by <em>selector</em>.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking a projection function on each element of <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Select(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult)))
  name.vb: Select(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TResult)))
- uid: System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
  commentId: M:System.Linq.Queryable.Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
  id: Select``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, TResult>>)
  fullName: System.Linq.Queryable.Select<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 116
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Projects each element of a sequence into a new form by incorporating the element's index.
  syntax:
    content: public static IQueryable<TResult> Select<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to project.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,{TResult}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TResult
      description: The type of the value returned by the function represented by <em>selector</em>.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking a projection function on each element of <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Select(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, TResult)))
  name.vb: Select(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, TResult)))
- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  id: SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Collections.Generic.IEnumerable<TResult>>>)
  fullName: System.Linq.Queryable.SelectMany<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 117
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> and combines the resulting sequences into one sequence.
  syntax:
    content: public static IQueryable<TResult> SelectMany<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, Collections.Generic.IEnumerable<TResult>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Collections.Generic.IEnumerable(Of TResult)))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to project.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TResult
      description: The type of the elements of the sequence returned by the function represented by <em>selector</em>.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Collections.Generic.IEnumerable(Of TResult))))
- uid: System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  commentId: M:System.Linq.Queryable.SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  id: SelectMany``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Collections.Generic.IEnumerable<TResult>>>)
  fullName: System.Linq.Queryable.SelectMany<TSource, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 118
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> and combines the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.
  syntax:
    content: public static IQueryable<TResult> SelectMany<TSource, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, Collections.Generic.IEnumerable<TResult>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer, Collections.Generic.IEnumerable(Of TResult)))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to project.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}}
      description: A projection function to apply to each element; the second parameter of this function represents the index of the source element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TResult
      description: The type of the elements of the sequence returned by the function represented by <em>selector</em>.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking a one-to-many projection function on each element of the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult))))
  name.vb: SelectMany(Of TSource, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TResult))))
- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Collections.Generic.IEnumerable<TCollection>>>, Expressions.Expression<Func<TSource, TCollection, TResult>>)
  fullName: System.Linq.Queryable.SelectMany<TSource, TCollection, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>>, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 119
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> and invokes a result selector function on each element therein. The resulting values from each intermediate sequence are combined into a single, one-dimensional sequence and returned.
  syntax:
    content: public static IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, Collections.Generic.IEnumerable<TCollection>>> collectionSelector, Expressions.Expression<Func<TSource, TCollection, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As IQueryable(Of TSource), collectionSelector As Expressions.Expression(Of Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection))), resultSelector As Expressions.Expression(Of Func(Of TSource, TCollection, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to project.
    - id: collectionSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}}
      description: A projection function to apply to each element of the input sequence.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TCollection},{TResult}}}
      description: A projection function to apply to each element of each intermediate sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TCollection
      description: The type of the intermediate elements collected by the function represented by <em>collectionSelector</em>.
    - id: TResult
      description: The type of the elements of the resulting sequence.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking the one-to-many projection function <em>collectionSelector</em> on each element of <em>source</em> and then mapping each of those sequence elements and their corresponding <em>source</em> element to a result element.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TCollection, TResult)))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection))), Expressions.Expression(Of Func(Of TSource, TCollection, TResult)))
- uid: System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:System.Linq.Queryable.SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: SelectMany``3(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Collections.Generic.IEnumerable<TCollection>>>, Expressions.Expression<Func<TSource, TCollection, TResult>>)
  fullName: System.Linq.Queryable.SelectMany<TSource, TCollection, TResult>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>>, System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 120
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Projects each element of a sequence to an <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> that incorporates the index of the source element that produced it. A result selector function is invoked on each element of each intermediate sequence, and the resulting values are combined into a single, one-dimensional sequence and returned.
  syntax:
    content: public static IQueryable<TResult> SelectMany<TSource, TCollection, TResult>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, Collections.Generic.IEnumerable<TCollection>>> collectionSelector, Expressions.Expression<Func<TSource, TCollection, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As IQueryable(Of TSource), collectionSelector As Expressions.Expression(Of Func(Of TSource, Integer, Collections.Generic.IEnumerable(Of TCollection))), resultSelector As Expressions.Expression(Of Func(Of TSource, TCollection, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values to project.
    - id: collectionSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}}
      description: A projection function to apply to each element of the input sequence; the second parameter of this function represents the index of the source element.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TCollection},{TResult}}}
      description: A projection function to apply to each element of each intermediate sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TCollection
      description: The type of the intermediate elements collected by the function represented by <em>collectionSelector</em>.
    - id: TResult
      description: The type of the elements of the resulting sequence.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are the result of invoking the one-to-many projection function <em>collectionSelector</em> on each element of <em>source</em> and then mapping each of those sequence elements and their corresponding <em>source</em> element to a result element.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>collectionSelector</em> or <em>resultSelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection))), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TCollection, TResult)))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TCollection))), Expressions.Expression(Of Func(Of TSource, TCollection, TResult)))
- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(IQueryable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Queryable.SequenceEqual<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 121
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Determines whether two sequences are equal by using the default equality comparer to compare elements.
  syntax:
    content: public static bool SequenceEqual<TSource>(this IQueryable<TSource> source1, Collections.Generic.IEnumerable<TSource> source2)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(source1 As IQueryable(Of TSource), source2 As Collections.Generic.IEnumerable(Of TSource)) As Boolean
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements to compare to those of <em>source2</em>.
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements to compare to those of the first sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Boolean
      description: true if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source1</em> or <em>source2</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SequenceEqual(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SequenceEqual(Of TSource)(IQueryable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Queryable.SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(IQueryable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.SequenceEqual<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 122
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Determines whether two sequences are equal by using a specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare elements.
  syntax:
    content: public static bool SequenceEqual<TSource>(this IQueryable<TSource> source1, Collections.Generic.IEnumerable<TSource> source2, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(source1 As IQueryable(Of TSource), source2 As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements to compare to those of <em>source2</em>.
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: An <xref href="System.Collections.Generic.IEnumerable`1" data-throw-if-not-resolved="false"></xref> whose elements to compare to those of the first sequence.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to use to compare elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Boolean
      description: true if the two source sequences are of equal length and their corresponding elements compare equal; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source1</em> or <em>source2</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SequenceEqual(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: SequenceEqual(Of TSource)(IQueryable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0})
  id: Single``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Single<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.Single<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 123
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.
  syntax:
    content: public static TSource Single<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return the single element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The single element of the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> has more than one element."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Single(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: Single(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Single``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Single<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.Single<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 124
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.
  syntax:
    content: public static TSource Single<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return a single element from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test an element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The single element of the input sequence that satisfies the condition in <em>predicate</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No element satisfies the condition in <em>predicate</em>.-or-More than one element satisfies the condition in <em>predicate</em>.-or-The source sequence is empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Single(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Single(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})
  commentId: M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0})
  id: SingleOrDefault``1(System.Linq.IQueryable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(IQueryable<TSource>)
  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 125
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this IQueryable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As IQueryable(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return the single element of.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The single element of the input sequence, or default(<em>TSource</em>) if the sequence contains no elements.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>source</em> has more than one element."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SingleOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(IQueryable(Of TSource))
- uid: System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: SingleOrDefault``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.SingleOrDefault<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 126
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As TSource
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return a single element from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test an element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: '{TSource}'
      description: The single element of the input sequence that satisfies the condition in <em>predicate</em>, or default(<em>TSource</em>) if no such element is found.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: More than one element satisfies the condition in <em>predicate</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SingleOrDefault(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: SingleOrDefault(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)
  commentId: M:System.Linq.Queryable.Skip``1(System.Linq.IQueryable{``0},System.Int32)
  id: Skip``1(System.Linq.IQueryable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Skip<TSource>(IQueryable<TSource>, Int32)
  fullName: System.Linq.Queryable.Skip<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Skip
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 127
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Bypasses a specified number of elements in a sequence and then returns the remaining elements.
  syntax:
    content: public static IQueryable<TSource> Skip<TSource>(this IQueryable<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Skip(Of TSource)(source As IQueryable(Of TSource), count As Integer) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return elements from.
    - id: count
      type: System.Int32
      description: The number of elements to skip before returning the remaining elements.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements that occur after the specified index in the input sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Skip(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32)
  name.vb: Skip(Of TSource)(IQueryable(Of TSource), Int32)
- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.SkipWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 128
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.
  syntax:
    content: public static IQueryable<TSource> SkipWhile<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return elements from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements from <em>source</em> starting at the first element in the linear series that does not pass the test specified by <em>predicate</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SkipWhile(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: SkipWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  commentId: M:System.Linq.Queryable.SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: SkipWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)
  fullName: System.Linq.Queryable.SkipWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 129
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.
  syntax:
    content: public static IQueryable<TSource> SkipWhile<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to return elements from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Boolean}}
      description: A function to test each element for a condition; the second parameter of this function represents the index of the source element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements from <em>source</em> starting at the first element in the linear series that does not pass the test specified by <em>predicate</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.SkipWhile(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Boolean)))
  name.vb: SkipWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Boolean)))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Decimal})
  id: Sum(System.Linq.IQueryable{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Decimal>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 130
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static decimal Sum(this IQueryable<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Decimal}
      description: A sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Decimal
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Decimal.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Decimal))
  name.vb: Sum(IQueryable(Of Decimal))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Double})
  id: Sum(System.Linq.IQueryable{System.Double})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Double>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 131
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static double Sum(this IQueryable<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Double}
      description: A sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Double
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Double))
  name.vb: Sum(IQueryable(Of Double))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int32})
  id: Sum(System.Linq.IQueryable{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Int32>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 132
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static int Sum(this IQueryable<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int32}
      description: A sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Int32
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Int32))
  name.vb: Sum(IQueryable(Of Int32))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Int64})
  id: Sum(System.Linq.IQueryable{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Int64>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 133
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static long Sum(this IQueryable<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Long)) As Long
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Int64}
      description: A sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Int64
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Int64))
  name.vb: Sum(IQueryable(Of Int64))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Nullable<Decimal>>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 134
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<decimal> Sum(this IQueryable<Nullable<decimal>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Decimal}}
      description: A sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Decimal.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Decimal)))
  name.vb: Sum(IQueryable(Of Nullable(Of Decimal)))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Double}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Nullable<Double>>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 135
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<double> Sum(this IQueryable<Nullable<double>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Nullable(Of Double))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Double}}
      description: A sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Double}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Double)))
  name.vb: Sum(IQueryable(Of Nullable(Of Double)))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Nullable<Int32>>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 136
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<int> Sum(this IQueryable<Nullable<int>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Nullable(Of Integer))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int32}}
      description: A sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Int32)))
  name.vb: Sum(IQueryable(Of Nullable(Of Int32)))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Nullable<Int64>>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 137
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<long> Sum(this IQueryable<Nullable<long>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Nullable(Of Long))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Int64}}
      description: A sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Int64)))
  name.vb: Sum(IQueryable(Of Nullable(Of Int64)))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Nullable{System.Single}})
  id: Sum(System.Linq.IQueryable{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Nullable<Single>>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 138
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of a sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static Nullable<float> Sum(this IQueryable<Nullable<float>> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Nullable(Of Single))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Nullable{System.Single}}
      description: A sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Nullable{System.Single}
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Nullable(Of System.Single)))
  name.vb: Sum(IQueryable(Of Nullable(Of Single)))
- uid: System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})
  commentId: M:System.Linq.Queryable.Sum(System.Linq.IQueryable{System.Single})
  id: Sum(System.Linq.IQueryable{System.Single})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum(IQueryable<Single>)
  fullName: System.Linq.Queryable.Sum(System.Linq.IQueryable<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 139
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of a sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values.
  syntax:
    content: public static float Sum(this IQueryable<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As IQueryable(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.IQueryable{System.Single}
      description: A sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values to calculate the sum of.
    return:
      type: System.Single
      description: The sum of the values in the sequence.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(System.Linq.IQueryable(Of System.Single))
  name.vb: Sum(IQueryable(Of Single))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Decimal>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 140
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static decimal Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, decimal>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Decimal))) As Decimal
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values of type <em>TSource</em>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Decimal
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Decimal.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal)))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Decimal)))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Double>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 141
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static double Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, double>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Double))) As Double
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values of type <em>TSource</em>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Double
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double)))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Double)))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 142
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static int Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Integer))) As Integer
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values of type <em>TSource</em>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int32
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32)))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32)))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int64>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 143
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static long Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, long>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Long))) As Long
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values of type <em>TSource</em>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Int64
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64)))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int64)))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Decimal>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 144
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static Nullable<decimal> Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, Nullable<decimal>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal)))) As Nullable(Of Decimal)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values of type <em>TSource</em>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Decimal}
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Decimal.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal))))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal))))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Double>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 145
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Double" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static Nullable<double> Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, Nullable<double>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Nullable(Of Double)))) As Nullable(Of Double)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values of type <em>TSource</em>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Double}
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double))))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Double))))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int32>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 146
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static Nullable<int> Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, Nullable<int>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Nullable(Of Integer)))) As Nullable(Of Integer)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values of type <em>TSource</em>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Int32}
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int32.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32))))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int32))))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Int64>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 147
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Int64" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static Nullable<long> Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, Nullable<long>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Nullable(Of Long)))) As Nullable(Of Long)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values of type <em>TSource</em>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Int64}
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: The sum is larger than <xref href="System.Int64.MaxValue" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64))))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Int64))))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Nullable<Single>>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 148
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of the sequence of nullable <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static Nullable<float> Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, Nullable<float>>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Nullable(Of Single)))) As Nullable(Of Single)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values of type <em>TSource</em>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Nullable{System.Single}
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single))))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Nullable(Of Single))))
- uid: System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  commentId: M:System.Linq.Queryable.Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  id: Sum``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Single>>)
  fullName: System.Linq.Queryable.Sum<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 149
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Computes the sum of the sequence of <xref href="System.Single" data-throw-if-not-resolved="false"></xref> values that is obtained by invoking a projection function on each element of the input sequence.
  syntax:
    content: public static float Sum<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, float>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As IQueryable(Of TSource), selector As Expressions.Expression(Of Func(Of TSource, Single))) As Single
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence of values of type <em>TSource</em>.
    - id: selector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
      description: A projection function to apply to each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Single
      description: The sum of the projected values.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>selector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Sum(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single)))
  name.vb: Sum(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Single)))
- uid: System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)
  commentId: M:System.Linq.Queryable.Take``1(System.Linq.IQueryable{``0},System.Int32)
  id: Take``1(System.Linq.IQueryable{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Take<TSource>(IQueryable<TSource>, Int32)
  fullName: System.Linq.Queryable.Take<TSource>(System.Linq.IQueryable<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Take
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 150
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns a specified number of contiguous elements from the start of a sequence.
  syntax:
    content: public static IQueryable<TSource> Take<TSource>(this IQueryable<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Take(Of TSource)(source As IQueryable(Of TSource), count As Integer) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: The sequence to return elements from.
    - id: count
      type: System.Int32
      description: The number of elements to return.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains the specified number of elements from the start of <em>source</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Take(Of TSource)(System.Linq.IQueryable(Of TSource), System.Int32)
  name.vb: Take(Of TSource)(IQueryable(Of TSource), Int32)
- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.TakeWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 151
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns elements from a sequence as long as a specified condition is true.
  syntax:
    content: public static IQueryable<TSource> TakeWhile<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: The sequence to return elements from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <em>predicate</em> no longer passes.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.TakeWhile(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: TakeWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  commentId: M:System.Linq.Queryable.TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: TakeWhile``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)
  fullName: System.Linq.Queryable.TakeWhile<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 152
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Returns elements from a sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.
  syntax:
    content: public static IQueryable<TSource> TakeWhile<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: The sequence to return elements from.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Boolean}}
      description: A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements from the input sequence occurring before the element at which the test specified by <em>predicate</em> no longer passes.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.TakeWhile(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Boolean)))
  name.vb: TakeWhile(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Boolean)))
- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.ThenBy<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 153
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.
  syntax:
    content: public static IOrderedQueryable<TSource> ThenBy<TSource, TKey>(this IOrderedQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: An <xref href="System.Linq.IOrderedQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements to sort.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract a key from each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function represented by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: An <xref href="System.Linq.IOrderedQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ThenBy(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))
- uid: System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Queryable.ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: ThenBy``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.Queryable.ThenBy<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 154
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.
  syntax:
    content: public static IOrderedQueryable<TSource> ThenBy<TSource, TKey>(this IOrderedQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As Collections.Generic.IComparer(Of TKey)) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: An <xref href="System.Linq.IOrderedQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements to sort.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract a key from each element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function represented by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: An <xref href="System.Linq.IOrderedQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.ThenBy(Of TSource, TKey)(System.Linq.IOrderedQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenBy(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  commentId: M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  id: ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>)
  fullName: System.Linq.Queryable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 155
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.
  syntax:
    content: public static IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(this IOrderedQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey))) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: An <xref href="System.Linq.IOrderedQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements to sort.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract a key from each element.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key returned by the function represented by <em>keySelector</em>.
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: An <xref href="System.Linq.IOrderedQueryable`1" data-throw-if-not-resolved="false"></xref> whose elements are sorted in descending order according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)))
  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)))
- uid: System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.Queryable.ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  id: ThenByDescending``2(System.Linq.IOrderedQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(IOrderedQueryable<TSource>, Expressions.Expression<Func<TSource, TKey>>, Collections.Generic.IComparer<TKey>)
  fullName: System.Linq.Queryable.ThenByDescending<TSource, TKey>(System.Linq.IOrderedQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, TKey>>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 156
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.
  syntax:
    content: public static IOrderedQueryable<TSource> ThenByDescending<TSource, TKey>(this IOrderedQueryable<TSource> source, Expressions.Expression<Func<TSource, TKey>> keySelector, Collections.Generic.IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As IOrderedQueryable(Of TSource), keySelector As Expressions.Expression(Of Func(Of TSource, TKey)), comparer As Collections.Generic.IComparer(Of TKey)) As IOrderedQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: An <xref href="System.Linq.IOrderedQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements to sort.
    - id: keySelector
      type: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
      description: A function to extract a key from each element.
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: An <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> to compare keys.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    - id: TKey
      description: The type of the key that is returned by the <em>keySelector</em> function.
    return:
      type: System.Linq.IOrderedQueryable{{TSource}}
      description: A collection whose elements are sorted in descending order according to a key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>keySelector</em> or <em>comparer</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.ThenByDescending(Of TSource, TKey)(System.Linq.IOrderedQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey)), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenByDescending(Of TSource, TKey)(IOrderedQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, TKey)), Collections.Generic.IComparer(Of TKey))
- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  id: Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Union<TSource>(IQueryable<TSource>, Collections.Generic.IEnumerable<TSource>)
  fullName: System.Linq.Queryable.Union<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 157
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Produces the set union of two sequences by using the default equality comparer.
  syntax:
    content: public static IQueryable<TSource> Union<TSource>(this IQueryable<TSource> source1, Collections.Generic.IEnumerable<TSource> source2)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(source1 As IQueryable(Of TSource), source2 As Collections.Generic.IEnumerable(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence whose distinct elements form the first set for the union operation.
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence whose distinct elements form the second set for the union operation.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains the elements from both input sequences, excluding duplicates.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source1</em> or <em>source2</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Union(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(IQueryable(Of TSource), Collections.Generic.IEnumerable(Of TSource))
- uid: System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.Queryable.Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Union<TSource>(IQueryable<TSource>, Collections.Generic.IEnumerable<TSource>, Collections.Generic.IEqualityComparer<TSource>)
  fullName: System.Linq.Queryable.Union<TSource>(System.Linq.IQueryable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 158
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Produces the set union of two sequences by using a specified <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public static IQueryable<TSource> Union<TSource>(this IQueryable<TSource> source1, Collections.Generic.IEnumerable<TSource> source2, Collections.Generic.IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(source1 As IQueryable(Of TSource), source2 As Collections.Generic.IEnumerable(Of TSource), comparer As Collections.Generic.IEqualityComparer(Of TSource)) As IQueryable(Of TSource)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TSource}}
      description: A sequence whose distinct elements form the first set for the union operation.
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: A sequence whose distinct elements form the second set for the union operation.
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: An <xref href="System.Collections.Generic.IEqualityComparer`1" data-throw-if-not-resolved="false"></xref> to compare values.
    typeParameters:
    - id: TSource
      description: The type of the elements of the input sequences.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains the elements from both input sequences, excluding duplicates.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source1</em> or <em>source2</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Union(Of TSource)(System.Linq.IQueryable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(IQueryable(Of TSource), Collections.Generic.IEnumerable(Of TSource), Collections.Generic.IEqualityComparer(Of TSource))
- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  commentId: M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Where<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Boolean>>)
  fullName: System.Linq.Queryable.Where<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 159
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Filters a sequence of values based on a predicate.
  syntax:
    content: public static IQueryable<TSource> Where<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to filter.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
      description: A function to test each element for a condition.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements from the input sequence that satisfy the condition specified by <em>predicate</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Where(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean)))
  name.vb: Where(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Boolean)))
- uid: System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  commentId: M:System.Linq.Queryable.Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  id: Where``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32,System.Boolean}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Where<TSource>(IQueryable<TSource>, Expressions.Expression<Func<TSource, Int32, Boolean>>)
  fullName: System.Linq.Queryable.Where<TSource>(System.Linq.IQueryable<TSource>, System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 160
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Filters a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.
  syntax:
    content: public static IQueryable<TSource> Where<TSource>(this IQueryable<TSource> source, Expressions.Expression<Func<TSource, int, bool>> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As IQueryable(Of TSource), predicate As Expressions.Expression(Of Func(Of TSource, Integer, Boolean))) As IQueryable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> to filter.
    - id: predicate
      type: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Boolean}}
      description: A function to test each element for a condition; the second parameter of the function represents the index of the element in the source sequence.
    typeParameters:
    - id: TSource
      description: The type of the elements of <em>source</em>.
    return:
      type: System.Linq.IQueryable{{TSource}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains elements from the input sequence that satisfy the condition specified by <em>predicate</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source</em> or <em>predicate</em> is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Where(Of TSource)(System.Linq.IQueryable(Of TSource), System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Boolean)))
  name.vb: Where(Of TSource)(IQueryable(Of TSource), Expressions.Expression(Of Func(Of TSource, Int32, Boolean)))
- uid: System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  commentId: M:System.Linq.Queryable.Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  id: Zip``3(System.Linq.IQueryable{``0},System.Collections.Generic.IEnumerable{``1},System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})
  isExtensionMethod: true
  parent: System.Linq.Queryable
  langs:
  - csharp
  - vb
  name: Zip<TFirst, TSecond, TResult>(IQueryable<TFirst>, Collections.Generic.IEnumerable<TSecond>, Expressions.Expression<Func<TFirst, TSecond, TResult>>)
  fullName: System.Linq.Queryable.Zip<TFirst, TSecond, TResult>(System.Linq.IQueryable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Linq.Expressions.Expression<System.Func<TFirst, TSecond, TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zip
    path: src/System.Linq.Queryable/ref/System.Linq.Queryable.cs
    startLine: 161
  assemblies:
  - System.Linq.Queryable
  namespace: System.Linq
  summary: Merges two sequences by using the specified predicate function.
  syntax:
    content: public static IQueryable<TResult> Zip<TFirst, TSecond, TResult>(this IQueryable<TFirst> source1, Collections.Generic.IEnumerable<TSecond> source2, Expressions.Expression<Func<TFirst, TSecond, TResult>> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Zip(Of TFirst, TSecond, TResult)(source1 As IQueryable(Of TFirst), source2 As Collections.Generic.IEnumerable(Of TSecond), resultSelector As Expressions.Expression(Of Func(Of TFirst, TSecond, TResult))) As IQueryable(Of TResult)
    parameters:
    - id: source1
      type: System.Linq.IQueryable{{TFirst}}
      description: The first sequence to merge.
    - id: source2
      type: System.Collections.Generic.IEnumerable{{TSecond}}
      description: The second sequence to merge.
    - id: resultSelector
      type: System.Linq.Expressions.Expression{System.Func{{TFirst},{TSecond},{TResult}}}
      description: A function that specifies how to merge the elements from the two sequences.
    typeParameters:
    - id: TFirst
      description: The type of the elements of the first input sequence.
    - id: TSecond
      description: The type of the elements of the second input sequence.
    - id: TResult
      description: The type of the elements of the result sequence.
    return:
      type: System.Linq.IQueryable{{TResult}}
      description: An <xref href="System.Linq.IQueryable`1" data-throw-if-not-resolved="false"></xref> that contains merged elements of two input sequences.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>source1</em>or <em>source2 </em>is null."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.Queryable.Zip(Of TFirst, TSecond, TResult)(System.Linq.IQueryable(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), System.Linq.Expressions.Expression(Of System.Func(Of TFirst, TSecond, TResult)))
  name.vb: Zip(Of TFirst, TSecond, TResult)(IQueryable(Of TFirst), Collections.Generic.IEnumerable(Of TSecond), Expressions.Expression(Of Func(Of TFirst, TSecond, TResult)))
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Linq.IQueryable{{TSource}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<TSource>
  fullName: System.Linq.IQueryable<TSource>
  fullname.vb: System.Linq.IQueryable(Of TSource)
  name.vb: IQueryable(Of TSource)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TSource},{TSource}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, TSource, TSource>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TSource, TSource>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TSource, TSource))
  name.vb: Expressions.Expression(Of Func(Of TSource, TSource, TSource))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: '{TSource}'
  isExternal: false
  name: TSource
  fullName: TSource
- uid: System.Linq.IQueryable`1
  parent: System.Linq
  isExternal: false
  name: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  fullname.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression`1
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression<TDelegate>
  fullName: System.Linq.Expressions.Expression<TDelegate>
  fullname.vb: System.Linq.Expressions.Expression(Of TDelegate)
  name.vb: Expression(Of TDelegate)
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: <
    fullName: <
  - name: TDelegate
    fullName: TDelegate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expression
    fullName: System.Linq.Expressions.Expression
  - name: '(Of '
    fullName: '(Of '
  - name: TDelegate
    fullName: TDelegate
  - name: )
    fullName: )
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: '{TAccumulate}'
  isExternal: false
  name: TAccumulate
  fullName: TAccumulate
- uid: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TSource},{TAccumulate}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TAccumulate, TSource, TAccumulate>>
  fullName: System.Linq.Expressions.Expression<System.Func<TAccumulate, TSource, TAccumulate>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TSource, TAccumulate))
  name.vb: Expressions.Expression(Of Func(Of TAccumulate, TSource, TAccumulate))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TAccumulate},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TAccumulate, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TAccumulate, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TAccumulate, TResult))
  name.vb: Expressions.Expression(Of Func(Of TAccumulate, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: '{TResult}'
  isExternal: false
  name: TResult
  fullName: TResult
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Boolean}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Boolean>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Boolean))
  name.vb: Expressions.Expression(Of Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Linq.IQueryable
  parent: System.Linq
  isExternal: false
  name: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.IEnumerable{{TElement}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TElement>
  fullName: System.Collections.Generic.IEnumerable<TElement>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TElement)
  name.vb: Collections.Generic.IEnumerable(Of TElement)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{{TElement}}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<TElement>
  fullName: System.Linq.IQueryable<TElement>
  fullname.vb: System.Linq.IQueryable(Of TElement)
  name.vb: IQueryable(Of TElement)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Linq.IQueryable{System.Decimal}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Decimal>
  fullName: System.Linq.IQueryable<System.Decimal>
  fullname.vb: System.Linq.IQueryable(Of System.Decimal)
  name.vb: IQueryable(Of Decimal)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Linq.IQueryable{System.Double}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Double>
  fullName: System.Linq.IQueryable<System.Double>
  fullname.vb: System.Linq.IQueryable(Of System.Double)
  name.vb: IQueryable(Of Double)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Linq.IQueryable{System.Int32}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Int32>
  fullName: System.Linq.IQueryable<System.Int32>
  fullname.vb: System.Linq.IQueryable(Of System.Int32)
  name.vb: IQueryable(Of Int32)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Int64}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Int64>
  fullName: System.Linq.IQueryable<System.Int64>
  fullname.vb: System.Linq.IQueryable(Of System.Int64)
  name.vb: IQueryable(Of Int64)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Decimal}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Decimal>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Decimal>>
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Decimal))
  name.vb: IQueryable(Of Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Decimal}
  definition: System.Nullable`1
  name: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  fullname.vb: System.Nullable(Of System.Decimal)
  name.vb: Nullable(Of Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<>
  fullName: System.Nullable<>
  fullname.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Double}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Double>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Double>>
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Double))
  name.vb: IQueryable(Of Nullable(Of Double))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Double}
  definition: System.Nullable`1
  name: Nullable<Double>
  fullName: System.Nullable<System.Double>
  fullname.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Int32}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Int32>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Int32>>
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Int32))
  name.vb: IQueryable(Of Nullable(Of Int32))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Int64}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Int64>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Int64>>
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Int64))
  name.vb: IQueryable(Of Nullable(Of Int64))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Nullable{System.Single}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Nullable<Single>>
  fullName: System.Linq.IQueryable<System.Nullable<System.Single>>
  fullname.vb: System.Linq.IQueryable(Of System.Nullable(Of System.Single))
  name.vb: IQueryable(Of Nullable(Of Single))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Single}
  definition: System.Nullable`1
  name: Nullable<Single>
  fullName: System.Nullable<System.Single>
  fullname.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Single}
  definition: System.Linq.IQueryable`1
  name: IQueryable<Single>
  fullName: System.Linq.IQueryable<System.Single>
  fullname.vb: System.Linq.IQueryable(Of System.Single)
  name.vb: IQueryable(Of Single)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Decimal}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Decimal>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Decimal>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Decimal))
  name.vb: Expressions.Expression(Of Func(Of TSource, Decimal))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Double}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Double>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Double>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Double))
  name.vb: Expressions.Expression(Of Func(Of TSource, Double))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Int32>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32))
  name.vb: Expressions.Expression(Of Func(Of TSource, Int32))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int64}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Int64>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int64>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int64))
  name.vb: Expressions.Expression(Of Func(Of TSource, Int64))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Decimal}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Nullable<Decimal>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Decimal>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Double}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Nullable<Double>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Double>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int32}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Nullable<Int32>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int32>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Int64}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Nullable<Int64>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Int64>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Nullable{System.Single}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Nullable<Single>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Nullable<System.Single>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Single}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Single>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Single>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Single))
  name.vb: Expressions.Expression(Of Func(Of TSource, Single))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{{TResult}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<TResult>
  fullName: System.Linq.IQueryable<TResult>
  fullname.vb: System.Linq.IQueryable(Of TResult)
  name.vb: IQueryable(Of TResult)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: Generic.IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TSource}}
  definition: System.Collections.Generic.IEqualityComparer`1
  name: Collections.Generic.IEqualityComparer<TSource>
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TSource)
  name.vb: Collections.Generic.IEqualityComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Collections.Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer`1
  isExternal: false
  name: Generic.IEqualityComparer<>
  fullName: System.Collections.Generic.IEqualityComparer<>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of )
  name.vb: Generic.IEqualityComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TKey}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TKey>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TKey))
  name.vb: Expressions.Expression(Of Func(Of TSource, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TSource}}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<IGrouping<TKey, TSource>>
  fullName: System.Linq.IQueryable<System.Linq.IGrouping<TKey, TSource>>
  fullname.vb: System.Linq.IQueryable(Of System.Linq.IGrouping(Of TKey, TSource))
  name.vb: IQueryable(Of IGrouping(Of TKey, TSource))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  definition: System.Collections.Generic.IEqualityComparer`1
  name: Generic.IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: Generic.IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: Generic.IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TElement}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, TElement>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TElement>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TElement))
  name.vb: Expressions.Expression(Of Func(Of TSource, TElement))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{System.Linq.IGrouping{{TKey},{TElement}}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<IGrouping<TKey, TElement>>
  fullName: System.Linq.IQueryable<System.Linq.IGrouping<TKey, TElement>>
  fullname.vb: System.Linq.IQueryable(Of System.Linq.IGrouping(Of TKey, TElement))
  name.vb: IQueryable(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TKey, Collections.Generic.IEnumerable<TSource>, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: Expressions.Expression(Of Func(Of TKey, Collections.Generic.IEnumerable(Of TSource), TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TKey, Collections.Generic.IEnumerable<TElement>, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  name.vb: Expressions.Expression(Of Func(Of TKey, Collections.Generic.IEnumerable(Of TElement), TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{{TOuter}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<TOuter>
  fullName: System.Linq.IQueryable<TOuter>
  fullname.vb: System.Linq.IQueryable(Of TOuter)
  name.vb: IQueryable(Of TOuter)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TInner}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TInner>
  fullName: System.Collections.Generic.IEnumerable<TInner>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TInner)
  name.vb: Collections.Generic.IEnumerable(Of TInner)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},{TKey}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TOuter, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, TKey>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TKey))
  name.vb: Expressions.Expression(Of Func(Of TOuter, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TInner},{TKey}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TInner, TKey>>
  fullName: System.Linq.Expressions.Expression<System.Func<TInner, TKey>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TInner, TKey))
  name.vb: Expressions.Expression(Of Func(Of TInner, TKey))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TOuter, Collections.Generic.IEnumerable<TInner>, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: Expressions.Expression(Of Func(Of TOuter, Collections.Generic.IEnumerable(Of TInner), TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TOuter},{TInner},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TOuter, TInner, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TOuter, TInner, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TOuter, TInner, TResult))
  name.vb: Expressions.Expression(Of Func(Of TOuter, TInner, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TResult))
  name.vb: Expressions.Expression(Of Func(Of TSource, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.IOrderedQueryable{{TSource}}
  definition: System.Linq.IOrderedQueryable`1
  name: IOrderedQueryable<TSource>
  fullName: System.Linq.IOrderedQueryable<TSource>
  fullname.vb: System.Linq.IOrderedQueryable(Of TSource)
  name.vb: IOrderedQueryable(Of TSource)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
- uid: System.Linq.IOrderedQueryable`1
  isExternal: false
  name: IOrderedQueryable<T>
  fullName: System.Linq.IOrderedQueryable<T>
  fullname.vb: System.Linq.IOrderedQueryable(Of T)
  name.vb: IOrderedQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IOrderedQueryable`1
    name: IOrderedQueryable
    fullName: System.Linq.IOrderedQueryable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: Collections.Generic.IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: Collections.Generic.IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Int32, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, TResult))
  name.vb: Expressions.Expression(Of Func(Of TSource, Int32, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Collections.Generic.IEnumerable<TResult>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Collections.Generic.IEnumerable(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Int32, Collections.Generic.IEnumerable<TResult>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Collections.Generic.IEnumerable<TCollection>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Collections.Generic.IEnumerable(Of TCollection)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},{TCollection},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, TCollection, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, TCollection, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, TCollection, TResult))
  name.vb: Expressions.Expression(Of Func(Of TSource, TCollection, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Int32, Collections.Generic.IEnumerable<TCollection>>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)))
  name.vb: Expressions.Expression(Of Func(Of TSource, Int32, Collections.Generic.IEnumerable(Of TCollection)))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TSource},System.Int32,System.Boolean}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TSource, Int32, Boolean>>
  fullName: System.Linq.Expressions.Expression<System.Func<TSource, System.Int32, System.Boolean>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: Expressions.Expression(Of Func(Of TSource, Int32, Boolean))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Nullable{System.Int32}
  definition: System.Nullable`1
  name: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable{System.Int64}
  definition: System.Nullable`1
  name: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Linq.IQueryable{{TFirst}}
  definition: System.Linq.IQueryable`1
  name: IQueryable<TFirst>
  fullName: System.Linq.IQueryable<TFirst>
  fullname.vb: System.Linq.IQueryable(Of TFirst)
  name.vb: IQueryable(Of TFirst)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{TSecond}}
  definition: System.Collections.Generic.IEnumerable`1
  name: Collections.Generic.IEnumerable<TSecond>
  fullName: System.Collections.Generic.IEnumerable<TSecond>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSecond)
  name.vb: Collections.Generic.IEnumerable(Of TSecond)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
- uid: System.Linq.Expressions.Expression{System.Func{{TFirst},{TSecond},{TResult}}}
  definition: System.Linq.Expressions.Expression`1
  name: Expressions.Expression<Func<TFirst, TSecond, TResult>>
  fullName: System.Linq.Expressions.Expression<System.Func<TFirst, TSecond, TResult>>
  fullname.vb: System.Linq.Expressions.Expression(Of System.Func(Of TFirst, TSecond, TResult))
  name.vb: Expressions.Expression(Of Func(Of TFirst, TSecond, TResult))
  spec.csharp:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.Expressions.Expression`1
    name: Expressions.Expression
    fullName: System.Linq.Expressions.Expression
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
