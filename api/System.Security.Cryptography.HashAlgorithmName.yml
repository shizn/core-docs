items:
- uid: System.Security.Cryptography.HashAlgorithmName
  commentId: T:System.Security.Cryptography.HashAlgorithmName
  id: HashAlgorithmName
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)
  - System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)
  - System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.HashAlgorithmName.GetHashCode
  - System.Security.Cryptography.HashAlgorithmName.MD5
  - System.Security.Cryptography.HashAlgorithmName.Name
  - System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.HashAlgorithmName.SHA1
  - System.Security.Cryptography.HashAlgorithmName.SHA256
  - System.Security.Cryptography.HashAlgorithmName.SHA384
  - System.Security.Cryptography.HashAlgorithmName.SHA512
  - System.Security.Cryptography.HashAlgorithmName.ToString
  langs:
  - csharp
  - vb
  name: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
  type: Struct
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashAlgorithmName
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 22
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: 'Specifies the name of a cryptographic hash algorithm. '
  syntax:
    content: 'public struct HashAlgorithmName : IEquatable<HashAlgorithmName>'
    content.vb: >-
      Public Structure HashAlgorithmName
          Implements IEquatable(Of HashAlgorithmName)
  implements:
  - System.IEquatable{System.Security.Cryptography.HashAlgorithmName}
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)
  commentId: M:System.Security.Cryptography.HashAlgorithmName.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: HashAlgorithmName(String)
  fullName: System.Security.Cryptography.HashAlgorithmName.HashAlgorithmName(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 58
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: 'Initializes a new instance of the <xref href="System.Security.Cryptography.HashAlgorithmName" data-throw-if-not-resolved="false"></xref> structure with a custom name. '
  syntax:
    content: public HashAlgorithmName(string name)
    content.vb: Public Sub New(name As String)
    parameters:
    - id: name
      type: System.String
      description: 'The custom hash algorithm name. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.HashAlgorithmName.MD5
  commentId: P:System.Security.Cryptography.HashAlgorithmName.MD5
  id: MD5
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: MD5
  fullName: System.Security.Cryptography.HashAlgorithmName.MD5
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MD5
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 30
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets a hash algorithm name that represents "MD5".
  syntax:
    content: public static HashAlgorithmName MD5 { get; }
    content.vb: Public Shared ReadOnly Property MD5 As HashAlgorithmName
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithmName
      description: 'A hash algorithm name that represents "MD5". '
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithmName.Name
  commentId: P:System.Security.Cryptography.HashAlgorithmName.Name
  id: Name
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Security.Cryptography.HashAlgorithmName.Name
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 70
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: 'Gets the underlying string representation of the algorithm name. '
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: 'The string representation of the algorithm name, or null or <xref href="System.String.Empty" data-throw-if-not-resolved="false"></xref> if no hash algorithm is available. '
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithmName.SHA1
  commentId: P:System.Security.Cryptography.HashAlgorithmName.SHA1
  id: SHA1
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: SHA1
  fullName: System.Security.Cryptography.HashAlgorithmName.SHA1
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SHA1
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 35
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets a hash algorithm name that represents "SHA1".
  syntax:
    content: public static HashAlgorithmName SHA1 { get; }
    content.vb: Public Shared ReadOnly Property SHA1 As HashAlgorithmName
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithmName
      description: 'A hash algorithm name that represents "SHA1". '
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithmName.SHA256
  commentId: P:System.Security.Cryptography.HashAlgorithmName.SHA256
  id: SHA256
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: SHA256
  fullName: System.Security.Cryptography.HashAlgorithmName.SHA256
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SHA256
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 40
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets a hash algorithm name that represents "SHA256".
  syntax:
    content: public static HashAlgorithmName SHA256 { get; }
    content.vb: Public Shared ReadOnly Property SHA256 As HashAlgorithmName
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithmName
      description: 'A hash algorithm name that represents "SHA256". '
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithmName.SHA384
  commentId: P:System.Security.Cryptography.HashAlgorithmName.SHA384
  id: SHA384
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: SHA384
  fullName: System.Security.Cryptography.HashAlgorithmName.SHA384
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SHA384
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 45
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets a hash algorithm name that represents "SHA384".
  syntax:
    content: public static HashAlgorithmName SHA384 { get; }
    content.vb: Public Shared ReadOnly Property SHA384 As HashAlgorithmName
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithmName
      description: 'A hash algorithm name that represents "SHA384". '
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithmName.SHA512
  commentId: P:System.Security.Cryptography.HashAlgorithmName.SHA512
  id: SHA512
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: SHA512
  fullName: System.Security.Cryptography.HashAlgorithmName.SHA512
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SHA512
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 50
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets a hash algorithm name that represents "SHA512".
  syntax:
    content: public static HashAlgorithmName SHA512 { get; }
    content.vb: Public Shared ReadOnly Property SHA512 As HashAlgorithmName
    parameters: []
    return:
      type: System.Security.Cryptography.HashAlgorithmName
      description: 'A hash algorithm name that represents "SHA512". '
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)
  commentId: M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Security.Cryptography.HashAlgorithmName.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 80
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: 'Returns a value that indicates whether the current instance and a specified object are equal. '
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: 'The object to compare with the current instance. '
    return:
      type: System.Boolean
      description: 'true if <em>obj</em> is a <xref href="System.Security.Cryptography.HashAlgorithmName" data-throw-if-not-resolved="false"></xref> object and its <xref href="System.Security.Cryptography.HashAlgorithmName.Name" data-throw-if-not-resolved="false"></xref> property is equal to that of the current instance. The comparison is ordinal and case-sensitive. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)
  id: Equals(System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: Equals(HashAlgorithmName)
  fullName: System.Security.Cryptography.HashAlgorithmName.Equals(System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 85
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: 'Returns a value that indicates whether two <xref href="System.Security.Cryptography.HashAlgorithmName" data-throw-if-not-resolved="false"></xref> instances are equal. '
  syntax:
    content: public bool Equals(HashAlgorithmName other)
    content.vb: Public Function Equals(other As HashAlgorithmName) As Boolean
    parameters:
    - id: other
      type: System.Security.Cryptography.HashAlgorithmName
      description: 'The object to compare with the current instance. '
    return:
      type: System.Boolean
      description: 'true if the <xref href="System.Security.Cryptography.HashAlgorithmName.Name" data-throw-if-not-resolved="false"></xref> property of <em>other</em> is equal to that of the current instance. The comparison is ordinal and case-sensitive. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.HashAlgorithmName.GetHashCode
  commentId: M:System.Security.Cryptography.HashAlgorithmName.GetHashCode
  id: GetHashCode
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Security.Cryptography.HashAlgorithmName.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 91
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: 'Returns the hash code for the current instance. '
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: 'The hash code for the current instance, or 0 if no <em>name</em> value was supplied to the <xref href="System.Security.Cryptography.HashAlgorithmName" data-throw-if-not-resolved="false"></xref> constructor. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.HashAlgorithmName.op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  id: op_Equality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: Equality(HashAlgorithmName, HashAlgorithmName)
  fullName: System.Security.Cryptography.HashAlgorithmName.Equality(System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.HashAlgorithmName)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 96
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: 'Determines whether two specified <xref href="System.Security.Cryptography.HashAlgorithmName" data-throw-if-not-resolved="false"></xref> objects are equal. '
  syntax:
    content: public static bool operator ==(HashAlgorithmName left, HashAlgorithmName right)
    content.vb: Public Shared Operator =(left As HashAlgorithmName, right As HashAlgorithmName) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.HashAlgorithmName
      description: 'The first object to compare. '
    - id: right
      type: System.Security.Cryptography.HashAlgorithmName
      description: 'The second object to compare. '
    return:
      type: System.Boolean
      description: 'true if both <em>left</em> and <em>right</em> have the same <xref href="System.Security.Cryptography.HashAlgorithmName.Name" data-throw-if-not-resolved="false"></xref> value; otherwise, false.  '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.HashAlgorithmName.op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  id: op_Inequality(System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: Inequality(HashAlgorithmName, HashAlgorithmName)
  fullName: System.Security.Cryptography.HashAlgorithmName.Inequality(System.Security.Cryptography.HashAlgorithmName, System.Security.Cryptography.HashAlgorithmName)
  type: Operator
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 101
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: 'Determines whether two specified <xref href="System.Security.Cryptography.HashAlgorithmName" data-throw-if-not-resolved="false"></xref> objects are not equal. '
  syntax:
    content: public static bool operator !=(HashAlgorithmName left, HashAlgorithmName right)
    content.vb: Public Shared Operator <>(left As HashAlgorithmName, right As HashAlgorithmName) As Boolean
    parameters:
    - id: left
      type: System.Security.Cryptography.HashAlgorithmName
      description: 'The first object to compare. '
    - id: right
      type: System.Security.Cryptography.HashAlgorithmName
      description: 'The second object to compare. '
    return:
      type: System.Boolean
      description: 'true if both <em>left</em> and <em>right</em> do not have the same <xref href="System.Security.Cryptography.HashAlgorithmName.Name" data-throw-if-not-resolved="false"></xref> value; otherwise, false.  '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.HashAlgorithmName.ToString
  commentId: M:System.Security.Cryptography.HashAlgorithmName.ToString
  id: ToString
  parent: System.Security.Cryptography.HashAlgorithmName
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Security.Cryptography.HashAlgorithmName.ToString()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/HashAlgorithmName.cs
    startLine: 75
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: 'Returns the string representation of the current <xref href="System.Security.Cryptography.HashAlgorithmName" data-throw-if-not-resolved="false"></xref> instance. '
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: 'The string representation of the current <xref href="System.Security.Cryptography.HashAlgorithmName" data-throw-if-not-resolved="false"></xref> instance. '
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.IEquatable{System.Security.Cryptography.HashAlgorithmName}
  definition: System.IEquatable`1
  name: IEquatable<HashAlgorithmName>
  fullName: System.IEquatable<System.Security.Cryptography.HashAlgorithmName>
  fullname.vb: System.IEquatable(Of System.Security.Cryptography.HashAlgorithmName)
  name.vb: IEquatable(Of HashAlgorithmName)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Cryptography.HashAlgorithmName
    name: HashAlgorithmName
    fullName: System.Security.Cryptography.HashAlgorithmName
  - name: )
    fullName: )
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<>
  fullName: System.IEquatable<>
  fullname.vb: System.IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
