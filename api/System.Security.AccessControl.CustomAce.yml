items:
- uid: System.Security.AccessControl.CustomAce
  commentId: T:System.Security.AccessControl.CustomAce
  id: CustomAce
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.CustomAce.#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])
  - System.Security.AccessControl.CustomAce.BinaryLength
  - System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.CustomAce.GetOpaque
  - System.Security.AccessControl.CustomAce.MaxOpaqueLength
  - System.Security.AccessControl.CustomAce.OpaqueLength
  - System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])
  langs:
  - csharp
  - vb
  name: CustomAce
  fullName: System.Security.AccessControl.CustomAce
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomAce
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 234
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Represents an Access Control Entry (ACE) that is not defined by one of the members of the <xref href="System.Security.AccessControl.AceType" data-throw-if-not-resolved="false"></xref> enumeration.
  syntax:
    content: 'public sealed class CustomAce : GenericAce'
    content.vb: >-
      Public NotInheritable Class CustomAce
          Inherits GenericAce
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericAce
  inheritedMembers:
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.PropagationFlags
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetHashCode
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.CustomAce.MaxOpaqueLength
  commentId: F:System.Security.AccessControl.CustomAce.MaxOpaqueLength
  id: MaxOpaqueLength
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: MaxOpaqueLength
  fullName: System.Security.AccessControl.CustomAce.MaxOpaqueLength
  type: Field
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxOpaqueLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 236
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Returns the maximum allowed length of an opaque data blob for this <xref href="System.Security.AccessControl.CustomAce" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public static readonly int MaxOpaqueLength
    content.vb: Public Shared ReadOnly MaxOpaqueLength As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.AccessControl.CustomAce.#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])
  commentId: M:System.Security.AccessControl.CustomAce.#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])
  id: '#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])'
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: CustomAce(AceType, AceFlags, Byte[])
  fullName: System.Security.AccessControl.CustomAce.CustomAce(System.Security.AccessControl.AceType, System.Security.AccessControl.AceFlags, System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 237
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Initializes a new instance of the <xref href="System.Security.AccessControl.CustomAce" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public CustomAce(AceType type, AceFlags flags, byte[] opaque)
    content.vb: Public Sub New(type As AceType, flags As AceFlags, opaque As Byte())
    parameters:
    - id: type
      type: System.Security.AccessControl.AceType
      description: Type of the new Access Control Entry (ACE). This value must be greater than <xref href="System.Security.AccessControl.AceType.MaxDefinedAceType" data-throw-if-not-resolved="false"></xref>.
    - id: flags
      type: System.Security.AccessControl.AceFlags
      description: Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new ACE.
    - id: opaque
      type: System.Byte[]
      description: An array of byte values that contains the data for the new ACE. This value can be null. The length of this array must not be greater than the value of the <xref href="System.Security.AccessControl.CustomAce.MaxOpaqueLength" data-throw-if-not-resolved="false"></xref> field, and must be a multiple of four.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The value of the <em>type</em> parameter is not greater than <xref href="System.Security.AccessControl.AceType.MaxDefinedAceType" data-throw-if-not-resolved="false"></xref> or the length of the <em>opaque</em> array is either greater than the value of the <xref href="System.Security.AccessControl.CustomAce.MaxOpaqueLength" data-throw-if-not-resolved="false"></xref> field or not a multiple of four.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.CustomAce.CustomAce(System.Security.AccessControl.AceType, System.Security.AccessControl.AceFlags, System.Byte())
  name.vb: CustomAce(AceType, AceFlags, Byte())
- uid: System.Security.AccessControl.CustomAce.BinaryLength
  commentId: P:System.Security.AccessControl.CustomAce.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: BinaryLength
  fullName: System.Security.AccessControl.CustomAce.BinaryLength
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinaryLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 238
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.CustomAce" data-throw-if-not-resolved="false"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href="System.Security.AccessControl.CustomAce.GetBinaryForm" data-throw-if-not-resolved="false"></xref> method.
  syntax:
    content: public override int BinaryLength { get; }
    content.vb: Public Overrides ReadOnly Property BinaryLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: The length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.CustomAce" data-throw-if-not-resolved="false"></xref> object.
  overridden: System.Security.AccessControl.GenericAce.BinaryLength
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.CustomAce.OpaqueLength
  commentId: P:System.Security.AccessControl.CustomAce.OpaqueLength
  id: OpaqueLength
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: OpaqueLength
  fullName: System.Security.AccessControl.CustomAce.OpaqueLength
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpaqueLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 239
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the length of the opaque data associated with this <xref href="System.Security.AccessControl.CustomAce" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public int OpaqueLength { get; }
    content.vb: Public ReadOnly Property OpaqueLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: The length of the opaque callback data.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 240
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Marshals the contents of the <xref href="System.Security.AccessControl.CustomAce" data-throw-if-not-resolved="false"></xref> object into the specified byte array beginning at the specified offset.
  syntax:
    content: public override void GetBinaryForm(byte[] binaryForm, int offset)
    content.vb: Public Overrides Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: The byte array into which the contents of the <xref href="System.Security.AccessControl.CustomAce" data-throw-if-not-resolved="false"></xref> is marshaled.
    - id: offset
      type: System.Int32
      description: The offset at which to start marshaling.
  overridden: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> to be copied into <em>array</em>."
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
- uid: System.Security.AccessControl.CustomAce.GetOpaque
  commentId: M:System.Security.AccessControl.CustomAce.GetOpaque
  id: GetOpaque
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: GetOpaque()
  fullName: System.Security.AccessControl.CustomAce.GetOpaque()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetOpaque
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 241
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: 'Returns the opaque data associated with this <xref href="System.Security.AccessControl.CustomAce" data-throw-if-not-resolved="false"></xref> object. '
  syntax:
    content: public byte[] GetOpaque()
    content.vb: Public Function GetOpaque As Byte()
    return:
      type: System.Byte[]
      description: An array of byte values that represents the opaque data associated with this <xref href="System.Security.AccessControl.CustomAce" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])
  commentId: M:System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])
  id: SetOpaque(System.Byte[])
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: SetOpaque(Byte[])
  fullName: System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetOpaque
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 242
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Sets the opaque callback data associated with this <xref href="System.Security.AccessControl.CustomAce" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public void SetOpaque(byte[] opaque)
    content.vb: Public Sub SetOpaque(opaque As Byte())
    parameters:
    - id: opaque
      type: System.Byte[]
      description: An array of byte values that represents the opaque callback data for this <xref href="System.Security.AccessControl.CustomAce" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.CustomAce.SetOpaque(System.Byte())
  name.vb: SetOpaque(Byte())
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.GenericAce.AceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
- uid: System.Security.AccessControl.GenericAce.Copy
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: Copy
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: Copy
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: CreateFromBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)
  name.vb: CreateFromBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: CreateFromBinaryForm
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: CreateFromBinaryForm
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: Equals
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: Equals
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: GetHashCode
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: GetHashCode
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.AceType
  parent: System.Security.AccessControl
  isExternal: false
  name: AceType
  fullName: System.Security.AccessControl.AceType
- uid: System.Security.AccessControl.AceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AceFlags
  fullName: System.Security.AccessControl.AceFlags
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
