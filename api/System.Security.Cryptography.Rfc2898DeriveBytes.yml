items:
- uid: System.Security.Cryptography.Rfc2898DeriveBytes
  commentId: T:System.Security.Cryptography.Rfc2898DeriveBytes
  id: Rfc2898DeriveBytes
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  - System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  - System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  - System.Security.Cryptography.Rfc2898DeriveBytes.Reset
  - System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  langs:
  - csharp
  - vb
  name: Rfc2898DeriveBytes
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Rfc2898DeriveBytes
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
    startLine: 11
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Implements password-based key derivation functionality, PBKDF2, by using a pseudo-random number generator based on <xref href="System.Security.Cryptography.HMACSHA1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: 'public class Rfc2898DeriveBytes : DeriveBytes'
    content.vb: >-
      Public Class Rfc2898DeriveBytes
          Inherits DeriveBytes
  inheritance:
  - System.Object
  - System.Security.Cryptography.DeriveBytes
  inheritedMembers:
  - System.Security.Cryptography.DeriveBytes.Dispose
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)
  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)
  id: '#ctor(System.Byte[],System.Byte[],System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  - vb
  name: Rfc2898DeriveBytes(Byte[], Byte[], Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.Byte[], System.Byte[], System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
    startLine: 13
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.Rfc2898DeriveBytes" data-throw-if-not-resolved="false"></xref> class using a password, a salt, and number of iterations to derive the key.
  syntax:
    content: public Rfc2898DeriveBytes(byte[] password, byte[] salt, int iterations)
    content.vb: Public Sub New(password As Byte(), salt As Byte(), iterations As Integer)
    parameters:
    - id: password
      type: System.Byte[]
      description: 'The password used to derive the key. '
    - id: salt
      type: System.Byte[]
      description: The key salt used to derive the key.
    - id: iterations
      type: System.Int32
      description: 'The number of iterations for the operation. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The specified salt size is smaller than 8 bytes or the iteration count is less than 1. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The password or salt is null. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.Byte(), System.Byte(), System.Int32)
  name.vb: Rfc2898DeriveBytes(Byte(), Byte(), Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])
  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])
  id: '#ctor(System.String,System.Byte[])'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  - vb
  name: Rfc2898DeriveBytes(String, Byte[])
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.String, System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
    startLine: 32
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.Rfc2898DeriveBytes" data-throw-if-not-resolved="false"></xref> class using a password and salt to derive the key.
  syntax:
    content: public Rfc2898DeriveBytes(string password, byte[] salt)
    content.vb: Public Sub New(password As String, salt As Byte())
    parameters:
    - id: password
      type: System.String
      description: 'The password used to derive the key. '
    - id: salt
      type: System.Byte[]
      description: 'The key salt used to derive the key. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The specified salt size is smaller than 8 bytes or the iteration count is less than 1. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The password or salt is null. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.String, System.Byte())
  name.vb: Rfc2898DeriveBytes(String, Byte())
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)
  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)
  id: '#ctor(System.String,System.Byte[],System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  - vb
  name: Rfc2898DeriveBytes(String, Byte[], Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.String, System.Byte[], System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
    startLine: 37
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.Rfc2898DeriveBytes" data-throw-if-not-resolved="false"></xref> class using a password, a salt, and number of iterations to derive the key.
  syntax:
    content: public Rfc2898DeriveBytes(string password, byte[] salt, int iterations)
    content.vb: Public Sub New(password As String, salt As Byte(), iterations As Integer)
    parameters:
    - id: password
      type: System.String
      description: 'The password used to derive the key. '
    - id: salt
      type: System.Byte[]
      description: 'The key salt used to derive the key. '
    - id: iterations
      type: System.Int32
      description: 'The number of iterations for the operation. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The specified salt size is smaller than 8 bytes or the iteration count is less than 1. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The password or salt is null. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.String, System.Byte(), System.Int32)
  name.vb: Rfc2898DeriveBytes(String, Byte(), Int32)
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)
  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  - vb
  name: Rfc2898DeriveBytes(String, Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.String, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
    startLine: 42
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.Rfc2898DeriveBytes" data-throw-if-not-resolved="false"></xref> class using the password and salt size to derive the key.
  syntax:
    content: public Rfc2898DeriveBytes(string password, int saltSize)
    content.vb: Public Sub New(password As String, saltSize As Integer)
    parameters:
    - id: password
      type: System.String
      description: 'The password used to derive the key. '
    - id: saltSize
      type: System.Int32
      description: 'The size of the random salt that you want the class to generate. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The specified salt size is smaller than 8 bytes. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The password or salt is null. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  - vb
  name: Rfc2898DeriveBytes(String, Int32, Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Rfc2898DeriveBytes(System.String, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
    startLine: 47
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.Rfc2898DeriveBytes" data-throw-if-not-resolved="false"></xref> class using a password, a salt size, and number of iterations to derive the key.
  syntax:
    content: public Rfc2898DeriveBytes(string password, int saltSize, int iterations)
    content.vb: Public Sub New(password As String, saltSize As Integer, iterations As Integer)
    parameters:
    - id: password
      type: System.String
      description: 'The password used to derive the key. '
    - id: saltSize
      type: System.Int32
      description: 'The size of the random salt that you want the class to generate. '
    - id: iterations
      type: System.Int32
      description: 'The number of iterations for the operation. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The specified salt size is smaller than 8 bytes or the iteration count is less than 1. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The password or salt is null. '
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>iterations </em>is out of range. This parameter requires a non-negative number."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  commentId: P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  id: IterationCount
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  - vb
  name: IterationCount
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IterationCount
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
    startLine: 64
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Gets or sets the number of iterations for the operation.
  syntax:
    content: public int IterationCount { get; set; }
    content.vb: Public Property IterationCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of iterations for the operation.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: 'The number of iterations is less than 1. '
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  commentId: P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  id: Salt
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  - vb
  name: Salt
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Salt
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Salt
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
    startLine: 80
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Gets or sets the key salt value for the operation.
  syntax:
    content: public byte[] Salt { get; set; }
    content.vb: Public Property Salt As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: The key salt value for the operation.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The specified salt size is smaller than 8 bytes. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'The salt is null. '
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
    startLine: 98
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Releases the unmanaged resources used by the <xref href="System.Security.Cryptography.Rfc2898DeriveBytes" data-throw-if-not-resolved="false"></xref> class and optionally releases the managed resources.
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: 'true to release both managed and unmanaged resources; false to release only unmanaged resources. '
  overridden: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  id: GetBytes(System.Int32)
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  - vb
  name: GetBytes(Int32)
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
    startLine: 115
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Returns the pseudo-random key for this object.
  syntax:
    content: public override byte[] GetBytes(int cb)
    content.vb: Public Overrides Function GetBytes(cb As Integer) As Byte()
    parameters:
    - id: cb
      type: System.Int32
      description: 'The number of pseudo-random key bytes to generate. '
    return:
      type: System.Byte[]
      description: A byte array filled with pseudo-random key bytes.
  overridden: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>cb </em>is out of range. This parameter requires a non-negative number."
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Cryptography.Rfc2898DeriveBytes.Reset
  commentId: M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset
  id: Reset
  parent: System.Security.Cryptography.Rfc2898DeriveBytes
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Security.Cryptography.Rfc2898DeriveBytes.Reset()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reset
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/Rfc2898DeriveBytes.cs
    startLine: 162
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: Resets the state of the operation.
  syntax:
    content: public override void Reset()
    content.vb: Public Overrides Sub Reset
  overridden: System.Security.Cryptography.DeriveBytes.Reset
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.Cryptography.DeriveBytes
  parent: System.Security.Cryptography
  isExternal: false
  name: DeriveBytes
  fullName: System.Security.Cryptography.DeriveBytes
- uid: System.Security.Cryptography.DeriveBytes.Dispose
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: Dispose()
  fullName: System.Security.Cryptography.DeriveBytes.Dispose()
  spec.csharp:
  - uid: System.Security.Cryptography.DeriveBytes.Dispose
    name: Dispose
    fullName: System.Security.Cryptography.DeriveBytes.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.DeriveBytes.Dispose
    name: Dispose
    fullName: System.Security.Cryptography.DeriveBytes.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Security.Cryptography.DeriveBytes.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Security.Cryptography.DeriveBytes.Dispose
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: true
  name: GetBytes(Int32)
  fullName: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)
  spec.csharp:
  - uid: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)
    name: GetBytes
    fullName: System.Security.Cryptography.DeriveBytes.GetBytes
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)
    name: GetBytes
    fullName: System.Security.Cryptography.DeriveBytes.GetBytes
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.Cryptography.DeriveBytes.Reset
  parent: System.Security.Cryptography.DeriveBytes
  isExternal: false
  name: Reset()
  fullName: System.Security.Cryptography.DeriveBytes.Reset()
  spec.csharp:
  - uid: System.Security.Cryptography.DeriveBytes.Reset
    name: Reset
    fullName: System.Security.Cryptography.DeriveBytes.Reset
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.DeriveBytes.Reset
    name: Reset
    fullName: System.Security.Cryptography.DeriveBytes.Reset
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
