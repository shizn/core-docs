items:
- uid: System.Threading.WaitHandleExtensions
  commentId: T:System.Threading.WaitHandleExtensions
  id: WaitHandleExtensions
  parent: System.Threading
  children:
  - System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  - System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  langs:
  - csharp
  - vb
  name: WaitHandleExtensions
  fullName: System.Threading.WaitHandleExtensions
  type: Class
  source:
    remote:
      path: src/System.Runtime.Handles/src/System/Threading/WaitHandleExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WaitHandleExtensions
    path: src/System.Runtime.Handles/src/System/Threading/WaitHandleExtensions.cs
    startLine: 9
  assemblies:
  - System.Runtime.Handles
  namespace: System.Threading
  summary: 'Provides convenience methods to for working with a safe handle for a wait handle. '
  syntax:
    content: 'public class WaitHandleExtensions : object'
    content.vb: >-
      Public Class WaitHandleExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  commentId: M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  id: GetSafeWaitHandle(System.Threading.WaitHandle)
  isExtensionMethod: true
  parent: System.Threading.WaitHandleExtensions
  langs:
  - csharp
  - vb
  name: GetSafeWaitHandle(WaitHandle)
  fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Handles/ref/System.Runtime.Handles.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSafeWaitHandle
    path: src/System.Runtime.Handles/ref/System.Runtime.Handles.cs
    startLine: 69
  assemblies:
  - System.Runtime.Handles
  namespace: System.Threading
  summary: 'Gets the safe handle for a native operating system wait handle. '
  syntax:
    content: public static SafeWaitHandle GetSafeWaitHandle(this WaitHandle waitHandle)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetSafeWaitHandle(waitHandle As WaitHandle) As SafeWaitHandle
    parameters:
    - id: waitHandle
      type: System.Threading.WaitHandle
      description: 'A native operating system handle. '
    return:
      type: Microsoft.Win32.SafeHandles.SafeWaitHandle
      description: 'The safe wait handle that wraps the native operating system wait handle. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>waitHandle</em> is null. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  commentId: M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  id: SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  isExtensionMethod: true
  parent: System.Threading.WaitHandleExtensions
  langs:
  - csharp
  - vb
  name: SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
  fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Handles/ref/System.Runtime.Handles.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetSafeWaitHandle
    path: src/System.Runtime.Handles/ref/System.Runtime.Handles.cs
    startLine: 71
  assemblies:
  - System.Runtime.Handles
  namespace: System.Threading
  summary: 'Sets a safe handle for a native operating system wait handle. '
  syntax:
    content: public static void SetSafeWaitHandle(this WaitHandle waitHandle, SafeWaitHandle value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetSafeWaitHandle(waitHandle As WaitHandle, value As SafeWaitHandle)
    parameters:
    - id: waitHandle
      type: System.Threading.WaitHandle
      description: 'A wait handle that encapsulates an operating system-specific object that waits for exclusive access to a shared resource. '
    - id: value
      type: Microsoft.Win32.SafeHandles.SafeWaitHandle
      description: 'The safe handle to wrap the operating system handle. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>waitHandle</em> is null. "
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: Microsoft.Win32.SafeHandles.SafeWaitHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeWaitHandle
  fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
