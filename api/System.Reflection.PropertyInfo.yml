items:
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  id: PropertyInfo
  parent: System.Reflection
  children:
  - System.Reflection.PropertyInfo.Attributes
  - System.Reflection.PropertyInfo.CanRead
  - System.Reflection.PropertyInfo.CanWrite
  - System.Reflection.PropertyInfo.Equals(System.Object)
  - System.Reflection.PropertyInfo.GetConstantValue
  - System.Reflection.PropertyInfo.GetHashCode
  - System.Reflection.PropertyInfo.GetIndexParameters
  - System.Reflection.PropertyInfo.GetMethod
  - System.Reflection.PropertyInfo.GetValue(System.Object)
  - System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])
  - System.Reflection.PropertyInfo.IsSpecialName
  - System.Reflection.PropertyInfo.PropertyType
  - System.Reflection.PropertyInfo.SetMethod
  - System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)
  - System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])
  langs:
  - csharp
  - vb
  name: PropertyInfo
  fullName: System.Reflection.PropertyInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PropertyInfo
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 21
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Discovers the attributes of a property and provides access to property metadata.
  syntax:
    content: 'public abstract class PropertyInfo : MemberInfo'
    content.vb: >-
      Public MustInherit Class PropertyInfo
          Inherits MemberInfo
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  inheritedMembers:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.PropertyInfo.Attributes
  commentId: P:System.Reflection.PropertyInfo.Attributes
  id: Attributes
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.PropertyInfo.Attributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Attributes
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 91
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the attributes for this property.
  syntax:
    content: public abstract PropertyAttributes Attributes { get; }
    content.vb: Public MustOverride ReadOnly Property Attributes As PropertyAttributes
    parameters: []
    return:
      type: System.Reflection.PropertyAttributes
      description: Attributes of this property.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.PropertyInfo.CanRead
  commentId: P:System.Reflection.PropertyInfo.CanRead
  id: CanRead
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: CanRead
  fullName: System.Reflection.PropertyInfo.CanRead
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanRead
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 93
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the property can be read.
  syntax:
    content: public abstract bool CanRead { get; }
    content.vb: Public MustOverride ReadOnly Property CanRead As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this property can be read; otherwise, false.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.PropertyInfo.CanWrite
  commentId: P:System.Reflection.PropertyInfo.CanWrite
  id: CanWrite
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: CanWrite
  fullName: System.Reflection.PropertyInfo.CanWrite
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanWrite
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 95
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the property can be written to.
  syntax:
    content: public abstract bool CanWrite { get; }
    content.vb: Public MustOverride ReadOnly Property CanWrite As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this property can be written to; otherwise, false.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.PropertyInfo.GetMethod
  commentId: P:System.Reflection.PropertyInfo.GetMethod
  id: GetMethod
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: GetMethod
  fullName: System.Reflection.PropertyInfo.GetMethod
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMethod
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 135
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the get accessor for this property.
  syntax:
    content: public virtual MethodInfo GetMethod { get; }
    content.vb: Public Overridable ReadOnly Property GetMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: The get accessor for this property.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.PropertyInfo.IsSpecialName
  commentId: P:System.Reflection.PropertyInfo.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: IsSpecialName
  fullName: System.Reflection.PropertyInfo.IsSpecialName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSpecialName
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 155
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the property is the special name.
  syntax:
    content: public bool IsSpecialName { get; }
    content.vb: Public ReadOnly Property IsSpecialName As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this property is the special name; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.PropertyInfo.PropertyType
  commentId: P:System.Reflection.PropertyInfo.PropertyType
  id: PropertyType
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: PropertyType
  fullName: System.Reflection.PropertyInfo.PropertyType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PropertyType
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 79
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the type of this property.
  syntax:
    content: public abstract Type PropertyType { get; }
    content.vb: Public MustOverride ReadOnly Property PropertyType As Type
    parameters: []
    return:
      type: System.Type
      description: The type of this property.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.PropertyInfo.SetMethod
  commentId: P:System.Reflection.PropertyInfo.SetMethod
  id: SetMethod
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: SetMethod
  fullName: System.Reflection.PropertyInfo.SetMethod
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetMethod
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 143
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the set accessor for this property.
  syntax:
    content: public virtual MethodInfo SetMethod { get; }
    content.vb: Public Overridable ReadOnly Property SetMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: The set accessor for this property, or null if the property is read-only.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.PropertyInfo.Equals(System.Object)
  commentId: M:System.Reflection.PropertyInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.PropertyInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 54
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance, or null.
    return:
      type: System.Boolean
      description: true if <em>obj</em> equals the type and value of this instance; otherwise, false.
  overridden: System.Reflection.MemberInfo.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.PropertyInfo.GetConstantValue
  commentId: M:System.Reflection.PropertyInfo.GetConstantValue
  id: GetConstantValue
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: GetConstantValue()
  fullName: System.Reflection.PropertyInfo.GetConstantValue()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetConstantValue
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 69
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: 'Returns a literal value associated with the property by a compiler. '
  syntax:
    content: public virtual object GetConstantValue()
    content.vb: Public Overridable Function GetConstantValue As Object
    return:
      type: System.Object
      description: An <xref href="System.Object" data-throw-if-not-resolved="false"></xref> that contains the literal value associated with the property. If the literal value is a class type with an element value of zero, the return value is null.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The Constant table in unmanaged metadata does not contain a constant value for the current property.
  - type: System.FormatException
    commentId: T:System.FormatException
    description: 'The type of the value is not one of the types permitted by the Common Language Specification (CLS). See the ECMA Partition II specification, Metadata. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.PropertyInfo.GetHashCode
  commentId: M:System.Reflection.PropertyInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.PropertyInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 59
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overridden: System.Reflection.MemberInfo.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.PropertyInfo.GetIndexParameters
  commentId: M:System.Reflection.PropertyInfo.GetIndexParameters
  id: GetIndexParameters
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: GetIndexParameters()
  fullName: System.Reflection.PropertyInfo.GetIndexParameters()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetIndexParameters
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 89
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: When overridden in a derived class, returns an array of all the index parameters for the property.
  syntax:
    content: public abstract ParameterInfo[] GetIndexParameters()
    content.vb: Public MustOverride Function GetIndexParameters As ParameterInfo()
    return:
      type: System.Reflection.ParameterInfo[]
      description: An array of type ParameterInfo containing the parameters for the indexes. If the property is not indexed, the array has 0 (zero) elements.
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.PropertyInfo.GetValue(System.Object)
  commentId: M:System.Reflection.PropertyInfo.GetValue(System.Object)
  id: GetValue(System.Object)
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: GetValue(Object)
  fullName: System.Reflection.PropertyInfo.GetValue(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 97
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the property value of a specified object.
  syntax:
    content: public object GetValue(object obj)
    content.vb: Public Function GetValue(obj As Object) As Object
    parameters:
    - id: obj
      type: System.Object
      description: The object whose property value will be returned.
    return:
      type: System.Object
      description: The property value of the specified object.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])
  commentId: M:System.Reflection.PropertyInfo.GetValue(System.Object,System.Object[])
  id: GetValue(System.Object,System.Object[])
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: GetValue(Object, Object[])
  fullName: System.Reflection.PropertyInfo.GetValue(System.Object, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 104
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the property value of a specified object with optional index values for indexed properties.
  syntax:
    content: public virtual object GetValue(object obj, object[] index)
    content.vb: Public Overridable Function GetValue(obj As Object, index As Object()) As Object
    parameters:
    - id: obj
      type: System.Object
      description: 'The object whose property value will be returned. '
    - id: index
      type: System.Object[]
      description: 'Optional index values for indexed properties. The indexes of indexed properties are zero-based. This value should be null for non-indexed properties. '
    return:
      type: System.Object
      description: The property value of the specified object.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The <em>index</em> array does not contain the type of arguments needed.-or- The property''s get accessor is not found. '
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> instead.The object does not match the target type, or a property is an instance property but <em>obj</em> is null. '
  - type: System.Reflection.TargetParameterCountException
    commentId: T:System.Reflection.TargetParameterCountException
    description: 'The number of parameters in <em>index</em> does not match the number of parameters the indexed property takes. '
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.MemberAccessException" data-throw-if-not-resolved="false"></xref>, instead.There was an illegal attempt to access a private or protected method inside a class. '
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: An error occurred while retrieving the property value. For example, an index value specified for an indexed property is out of range. The <xref href="System.Exception.InnerException" data-throw-if-not-resolved="false"></xref> property indicates the reason for the error.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.PropertyInfo.GetValue(System.Object, System.Object())
  name.vb: GetValue(Object, Object())
- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)
  commentId: M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object)
  id: SetValue(System.Object,System.Object)
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: SetValue(Object, Object)
  fullName: System.Reflection.PropertyInfo.SetValue(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetValue
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 113
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Sets the property value of a specified object.
  syntax:
    content: public void SetValue(object obj, object value)
    content.vb: Public Sub SetValue(obj As Object, value As Object)
    parameters:
    - id: obj
      type: System.Object
      description: The object whose property value will be set.
    - id: value
      type: System.Object
      description: The new property value.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The property''s set accessor is not found. -or-<em>value</em> cannot be converted to the type of <xref href="System.Reflection.PropertyInfo.PropertyType" data-throw-if-not-resolved="false"></xref>. '
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> instead.The type of <em>obj</em> does not match the target type, or a property is an instance property but <em>obj</em> is null. '
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.MemberAccessException" data-throw-if-not-resolved="false"></xref>, instead. There was an illegal attempt to access a private or protected method inside a class. '
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: An error occurred while setting the property value. The <xref href="System.Exception.InnerException" data-throw-if-not-resolved="false"></xref> property indicates the reason for the error.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])
  commentId: M:System.Reflection.PropertyInfo.SetValue(System.Object,System.Object,System.Object[])
  id: SetValue(System.Object,System.Object,System.Object[])
  parent: System.Reflection.PropertyInfo
  langs:
  - csharp
  - vb
  name: SetValue(Object, Object, Object[])
  fullName: System.Reflection.PropertyInfo.SetValue(System.Object, System.Object, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetValue
    path: src/mscorlib/src/System/Reflection/PropertyInfo.cs
    startLine: 120
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Sets the property value of a specified object with optional index values for index properties.
  syntax:
    content: public virtual void SetValue(object obj, object value, object[] index)
    content.vb: Public Overridable Sub SetValue(obj As Object, value As Object, index As Object())
    parameters:
    - id: obj
      type: System.Object
      description: 'The object whose property value will be set. '
    - id: value
      type: System.Object
      description: 'The new property value. '
    - id: index
      type: System.Object[]
      description: 'Optional index values for indexed properties. This value should be null for non-indexed properties. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>index</em> array does not contain the type of arguments needed.-or- The property's set accessor is not found. -or-<em>value</em> cannot be converted to the type of <xref href="System.Reflection.PropertyInfo.PropertyType" data-throw-if-not-resolved="false"></xref>.
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> instead.The object does not match the target type, or a property is an instance property but <em>obj</em> is null. '
  - type: System.Reflection.TargetParameterCountException
    commentId: T:System.Reflection.TargetParameterCountException
    description: 'The number of parameters in <em>index</em> does not match the number of parameters the indexed property takes. '
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.MemberAccessException" data-throw-if-not-resolved="false"></xref>, instead.There was an illegal attempt to access a private or protected method inside a class. '
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: An error occurred while setting the property value. For example, an index value specified for an indexed property is out of range. The <xref href="System.Exception.InnerException" data-throw-if-not-resolved="false"></xref> property indicates the reason for the error.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.PropertyInfo.SetValue(System.Object, System.Object, System.Object())
  name.vb: SetValue(Object, Object, Object())
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.PropertyAttributes
  parent: System.Reflection
  isExternal: false
  name: PropertyAttributes
  fullName: System.Reflection.PropertyAttributes
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Reflection.ParameterInfo[]
  isExternal: false
  name: ParameterInfo[]
  fullName: System.Reflection.ParameterInfo[]
  fullname.vb: System.Reflection.ParameterInfo()
  name.vb: ParameterInfo()
  spec.csharp:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: ()
    fullName: ()
- uid: System.Object[]
  isExternal: false
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
  - name: ()
    fullName: ()
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.TargetException
  isExternal: false
  name: TargetException
  fullName: System.Reflection.TargetException
- uid: System.Reflection.TargetParameterCountException
  isExternal: false
  name: TargetParameterCountException
  fullName: System.Reflection.TargetParameterCountException
- uid: System.MethodAccessException
  isExternal: false
  name: MethodAccessException
  fullName: System.MethodAccessException
- uid: System.Reflection.TargetInvocationException
  isExternal: false
  name: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
