items:
- uid: System.Security.AccessControl.CommonAce
  commentId: T:System.Security.AccessControl.CommonAce
  id: CommonAce
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])
  - System.Security.AccessControl.CommonAce.BinaryLength
  - System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)
  langs:
  - csharp
  - vb
  name: CommonAce
  fullName: System.Security.AccessControl.CommonAce
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CommonAce
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 140
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Represents an access control entry (ACE).
  syntax:
    content: 'public sealed class CommonAce : QualifiedAce'
    content.vb: >-
      Public NotInheritable Class CommonAce
          Inherits QualifiedAce
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericAce
  - System.Security.AccessControl.KnownAce
  - System.Security.AccessControl.QualifiedAce
  inheritedMembers:
  - System.Security.AccessControl.QualifiedAce.AceQualifier
  - System.Security.AccessControl.QualifiedAce.IsCallback
  - System.Security.AccessControl.QualifiedAce.OpaqueLength
  - System.Security.AccessControl.QualifiedAce.GetOpaque
  - System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  - System.Security.AccessControl.KnownAce.AccessMask
  - System.Security.AccessControl.KnownAce.SecurityIdentifier
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.PropagationFlags
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetHashCode
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])
  commentId: M:System.Security.AccessControl.CommonAce.#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])
  id: '#ctor(System.Security.AccessControl.AceFlags,System.Security.AccessControl.AceQualifier,System.Int32,System.Security.Principal.SecurityIdentifier,System.Boolean,System.Byte[])'
  parent: System.Security.AccessControl.CommonAce
  langs:
  - csharp
  - vb
  name: CommonAce(AceFlags, AceQualifier, Int32, Principal.SecurityIdentifier, Boolean, Byte[])
  fullName: System.Security.AccessControl.CommonAce.CommonAce(System.Security.AccessControl.AceFlags, System.Security.AccessControl.AceQualifier, System.Int32, System.Security.Principal.SecurityIdentifier, System.Boolean, System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 142
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Initializes a new instance of the <xref href="System.Security.AccessControl.CommonAce" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public CommonAce(AceFlags flags, AceQualifier qualifier, int accessMask, Principal.SecurityIdentifier sid, bool isCallback, byte[] opaque)
    content.vb: Public Sub New(flags As AceFlags, qualifier As AceQualifier, accessMask As Integer, sid As Principal.SecurityIdentifier, isCallback As Boolean, opaque As Byte())
    parameters:
    - id: flags
      type: System.Security.AccessControl.AceFlags
      description: Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new access control entry (ACE).
    - id: qualifier
      type: System.Security.AccessControl.AceQualifier
      description: The use of the new ACE.
    - id: accessMask
      type: System.Int32
      description: The access mask for the ACE.
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: The <xref href="System.Security.Principal.SecurityIdentifier" data-throw-if-not-resolved="false"></xref> associated with the new ACE.
    - id: isCallback
      type: System.Boolean
      description: true to specify that the new ACE is a callback type ACE.
    - id: opaque
      type: System.Byte[]
      description: Opaque data associated with the new ACE. Opaque data is allowed only for callback ACE types. The length of this array must not be greater than the return value of the <xref href="System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)" data-throw-if-not-resolved="false"></xref> method.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.CommonAce.CommonAce(System.Security.AccessControl.AceFlags, System.Security.AccessControl.AceQualifier, System.Int32, System.Security.Principal.SecurityIdentifier, System.Boolean, System.Byte())
  name.vb: CommonAce(AceFlags, AceQualifier, Int32, Principal.SecurityIdentifier, Boolean, Byte())
- uid: System.Security.AccessControl.CommonAce.BinaryLength
  commentId: P:System.Security.AccessControl.CommonAce.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.CommonAce
  langs:
  - csharp
  - vb
  name: BinaryLength
  fullName: System.Security.AccessControl.CommonAce.BinaryLength
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinaryLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 143
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.CommonAce" data-throw-if-not-resolved="false"></xref> object. Use this length with the <xref href="System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)" data-throw-if-not-resolved="false"></xref> method before marshaling the ACL into a binary array.
  syntax:
    content: public override int BinaryLength { get; }
    content.vb: Public Overrides ReadOnly Property BinaryLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: The length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.CommonAce" data-throw-if-not-resolved="false"></xref> object.
  overridden: System.Security.AccessControl.GenericAce.BinaryLength
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.CommonAce
  langs:
  - csharp
  - vb
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 144
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Marshals the contents of the <xref href="System.Security.AccessControl.CommonAce" data-throw-if-not-resolved="false"></xref> object into the specified byte array beginning at the specified offset.
  syntax:
    content: public override void GetBinaryForm(byte[] binaryForm, int offset)
    content.vb: Public Overrides Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: The byte array into which the contents of the <xref href="System.Security.AccessControl.CommonAce" data-throw-if-not-resolved="false"></xref> object is marshaled.
    - id: offset
      type: System.Int32
      description: The offset at which to start marshaling.
  overridden: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.CommonAce\" data-throw-if-not-resolved=\"false\"></xref> to be copied into the <em>binaryForm</em> array."
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.AccessControl.CommonAce.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
- uid: System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)
  commentId: M:System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)
  id: MaxOpaqueLength(System.Boolean)
  parent: System.Security.AccessControl.CommonAce
  langs:
  - csharp
  - vb
  name: MaxOpaqueLength(Boolean)
  fullName: System.Security.AccessControl.CommonAce.MaxOpaqueLength(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxOpaqueLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 145
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the maximum allowed length of an opaque data BLOB for callback access control entries (ACEs).
  syntax:
    content: public static int MaxOpaqueLength(bool isCallback)
    content.vb: Public Shared Function MaxOpaqueLength(isCallback As Boolean) As Integer
    parameters:
    - id: isCallback
      type: System.Boolean
      description: true to specify that the <xref href="System.Security.AccessControl.CommonAce" data-throw-if-not-resolved="false"></xref> object is a callback ACE type.
    return:
      type: System.Int32
      description: The allowed length of an opaque data BLOB.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.KnownAce
  parent: System.Security.AccessControl
  isExternal: false
  name: KnownAce
  fullName: System.Security.AccessControl.KnownAce
- uid: System.Security.AccessControl.QualifiedAce
  parent: System.Security.AccessControl
  isExternal: false
  name: QualifiedAce
  fullName: System.Security.AccessControl.QualifiedAce
- uid: System.Security.AccessControl.QualifiedAce.AceQualifier
  parent: System.Security.AccessControl.QualifiedAce
  isExternal: false
  name: AceQualifier
  fullName: System.Security.AccessControl.QualifiedAce.AceQualifier
- uid: System.Security.AccessControl.QualifiedAce.IsCallback
  parent: System.Security.AccessControl.QualifiedAce
  isExternal: false
  name: IsCallback
  fullName: System.Security.AccessControl.QualifiedAce.IsCallback
- uid: System.Security.AccessControl.QualifiedAce.OpaqueLength
  parent: System.Security.AccessControl.QualifiedAce
  isExternal: false
  name: OpaqueLength
  fullName: System.Security.AccessControl.QualifiedAce.OpaqueLength
- uid: System.Security.AccessControl.QualifiedAce.GetOpaque
  parent: System.Security.AccessControl.QualifiedAce
  isExternal: false
  name: GetOpaque()
  fullName: System.Security.AccessControl.QualifiedAce.GetOpaque()
  spec.csharp:
  - uid: System.Security.AccessControl.QualifiedAce.GetOpaque
    name: GetOpaque
    fullName: System.Security.AccessControl.QualifiedAce.GetOpaque
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.QualifiedAce.GetOpaque
    name: GetOpaque
    fullName: System.Security.AccessControl.QualifiedAce.GetOpaque
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  parent: System.Security.AccessControl.QualifiedAce
  isExternal: true
  name: SetOpaque(Byte[])
  fullName: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
  fullname.vb: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte())
  name.vb: SetOpaque(Byte())
  spec.csharp:
  - uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
    name: SetOpaque
    fullName: System.Security.AccessControl.QualifiedAce.SetOpaque
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.QualifiedAce.SetOpaque(System.Byte[])
    name: SetOpaque
    fullName: System.Security.AccessControl.QualifiedAce.SetOpaque
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Security.AccessControl.KnownAce.AccessMask
  parent: System.Security.AccessControl.KnownAce
  isExternal: false
  name: AccessMask
  fullName: System.Security.AccessControl.KnownAce.AccessMask
- uid: System.Security.AccessControl.KnownAce.SecurityIdentifier
  parent: System.Security.AccessControl.KnownAce
  isExternal: false
  name: SecurityIdentifier
  fullName: System.Security.AccessControl.KnownAce.SecurityIdentifier
- uid: System.Security.AccessControl.GenericAce.AceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
- uid: System.Security.AccessControl.GenericAce.Copy
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: Copy
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: Copy
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: CreateFromBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)
  name.vb: CreateFromBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: CreateFromBinaryForm
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: CreateFromBinaryForm
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: Equals
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: Equals
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: GetHashCode
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: GetHashCode
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.AccessControl.AceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AceFlags
  fullName: System.Security.AccessControl.AceFlags
- uid: System.Security.AccessControl.AceQualifier
  parent: System.Security.AccessControl
  isExternal: false
  name: AceQualifier
  fullName: System.Security.AccessControl.AceQualifier
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: Principal.SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
