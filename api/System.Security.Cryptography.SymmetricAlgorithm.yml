items:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  commentId: T:System.Security.Cryptography.SymmetricAlgorithm
  id: SymmetricAlgorithm
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.SymmetricAlgorithm.#ctor
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.Key
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  langs:
  - csharp
  - vb
  name: SymmetricAlgorithm
  fullName: System.Security.Cryptography.SymmetricAlgorithm
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SymmetricAlgorithm
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 9
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Represents the abstract base class from which all implementations of symmetric algorithms must inherit.
  syntax:
    content: 'public abstract class SymmetricAlgorithm : IDisposable'
    content.vb: >-
      Public MustInherit Class SymmetricAlgorithm
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.Cryptography.SymmetricAlgorithm.#ctor
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: SymmetricAlgorithm()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.SymmetricAlgorithm()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 11
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Initializes a new instance of the <xref href="System.Security.Cryptography.SymmetricAlgorithm" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: protected SymmetricAlgorithm()
    content.vb: Protected Sub New
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The implementation of the class derived from the symmetric algorithm is not valid.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  id: BlockSize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: BlockSize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BlockSize
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 17
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets or sets the block size, in bits, of the cryptographic operation.
  syntax:
    content: public virtual int BlockSize { get; set; }
    content.vb: Public Overridable Property BlockSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: The block size, in bits.
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: 'The block size is invalid. '
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.IV
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.IV
  id: IV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: IV
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IV
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IV
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 39
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets or sets the initialization vector (<xref href="System.Security.Cryptography.SymmetricAlgorithm.IV" data-throw-if-not-resolved="false"></xref>) for the symmetric algorithm.
  syntax:
    content: public virtual byte[] IV { get; set; }
    content.vb: Public Overridable Property IV As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: The initialization vector.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'An attempt was made to set the initialization vector to null. '
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: 'An attempt was made to set the initialization vector to an invalid size. '
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.Key
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Key
  id: Key
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Key
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Key
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Key
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 59
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets or sets the secret key for the symmetric algorithm.
  syntax:
    content: public virtual byte[] Key { get; set; }
    content.vb: Public Overridable Property Key As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: The secret key to use for the symmetric algorithm.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: 'An attempt was made to set the key to null. '
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: The key size is invalid.
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.KeySize
  id: KeySize
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: KeySize
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeySize
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 83
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets or sets the size, in bits, of the secret key used by the symmetric algorithm.
  syntax:
    content: public virtual int KeySize { get; set; }
    content.vb: Public Overridable Property KeySize As Integer
    parameters: []
    return:
      type: System.Int32
      description: The size, in bits, of the secret key used by the symmetric algorithm.
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: 'The key size is not valid. '
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  id: LegalBlockSizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: LegalBlockSizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalBlockSizes
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 100
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets the block sizes, in bits, that are supported by the symmetric algorithm.
  syntax:
    content: public virtual KeySizes[] LegalBlockSizes { get; }
    content.vb: Public Overridable ReadOnly Property LegalBlockSizes As KeySizes()
    parameters: []
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: An array that contains the block sizes supported by the algorithm.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  id: LegalKeySizes
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: LegalKeySizes
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalKeySizes
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 109
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets the key sizes, in bits, that are supported by the symmetric algorithm.
  syntax:
    content: public virtual KeySizes[] LegalKeySizes { get; }
    content.vb: Public Overridable ReadOnly Property LegalKeySizes As KeySizes()
    parameters: []
    return:
      type: System.Security.Cryptography.KeySizes[]
      description: An array that contains the key sizes supported by the algorithm.
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Cryptography.SymmetricAlgorithm.Mode
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Mode
  id: Mode
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Mode
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Mode
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Mode
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 118
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets or sets the mode for operation of the symmetric algorithm.
  syntax:
    content: public virtual CipherMode Mode { get; set; }
    content.vb: Public Overridable Property Mode As CipherMode
    parameters: []
    return:
      type: System.Security.Cryptography.CipherMode
      description: The mode for operation of the symmetric algorithm. The default is <xref href="System.Security.Cryptography.CipherMode.CBC" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: 'The cipher mode is not one of the <xref href="System.Security.Cryptography.CipherMode" data-throw-if-not-resolved="false"></xref> values. '
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.Padding
  commentId: P:System.Security.Cryptography.SymmetricAlgorithm.Padding
  id: Padding
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Padding
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Padding
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Padding
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 134
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Gets or sets the padding mode used in the symmetric algorithm.
  syntax:
    content: public virtual PaddingMode Padding { get; set; }
    content.vb: Public Overridable Property Padding As PaddingMode
    parameters: []
    return:
      type: System.Security.Cryptography.PaddingMode
      description: The padding mode used in the symmetric algorithm. The default is <xref href="System.Security.Cryptography.PaddingMode.PKCS7" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: 'The padding mode is not one of the <xref href="System.Security.Cryptography.PaddingMode" data-throw-if-not-resolved="false"></xref> values. '
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  id: CreateDecryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: CreateDecryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateDecryptor
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 149
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Creates a symmetric decryptor object with the current <xref href="System.Security.Cryptography.SymmetricAlgorithm.Key" data-throw-if-not-resolved="false"></xref> property and initialization vector (<xref href="System.Security.Cryptography.SymmetricAlgorithm.IV" data-throw-if-not-resolved="false"></xref>).
  syntax:
    content: public virtual ICryptoTransform CreateDecryptor()
    content.vb: Public Overridable Function CreateDecryptor As ICryptoTransform
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: A symmetric decryptor object.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  id: CreateDecryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: CreateDecryptor(Byte[], Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateDecryptor
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 154
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, creates a symmetric decryptor object with the specified <xref href="System.Security.Cryptography.SymmetricAlgorithm.Key" data-throw-if-not-resolved="false"></xref> property and initialization vector (<xref href="System.Security.Cryptography.SymmetricAlgorithm.IV" data-throw-if-not-resolved="false"></xref>).
  syntax:
    content: public abstract ICryptoTransform CreateDecryptor(byte[] rgbKey, byte[] rgbIV)
    content.vb: Public MustOverride Function CreateDecryptor(rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: 'The secret key to use for the symmetric algorithm. '
    - id: rgbIV
      type: System.Byte[]
      description: 'The initialization vector to use for the symmetric algorithm. '
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: A symmetric decryptor object.
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte(), System.Byte())
  name.vb: CreateDecryptor(Byte(), Byte())
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  id: CreateEncryptor
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: CreateEncryptor()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateEncryptor
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 156
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Creates a symmetric encryptor object with the current <xref href="System.Security.Cryptography.SymmetricAlgorithm.Key" data-throw-if-not-resolved="false"></xref> property and initialization vector (<xref href="System.Security.Cryptography.SymmetricAlgorithm.IV" data-throw-if-not-resolved="false"></xref>).
  syntax:
    content: public virtual ICryptoTransform CreateEncryptor()
    content.vb: Public Overridable Function CreateEncryptor As ICryptoTransform
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: A symmetric encryptor object.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  id: CreateEncryptor(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: CreateEncryptor(Byte[], Byte[])
  fullName: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateEncryptor
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 161
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, creates a symmetric encryptor object with the specified <xref href="System.Security.Cryptography.SymmetricAlgorithm.Key" data-throw-if-not-resolved="false"></xref> property and initialization vector (<xref href="System.Security.Cryptography.SymmetricAlgorithm.IV" data-throw-if-not-resolved="false"></xref>).
  syntax:
    content: public abstract ICryptoTransform CreateEncryptor(byte[] rgbKey, byte[] rgbIV)
    content.vb: Public MustOverride Function CreateEncryptor(rgbKey As Byte(), rgbIV As Byte()) As ICryptoTransform
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: 'The secret key to use for the symmetric algorithm. '
    - id: rgbIV
      type: System.Byte[]
      description: 'The initialization vector to use for the symmetric algorithm. '
    return:
      type: System.Security.Cryptography.ICryptoTransform
      description: A symmetric encryptor object.
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte(), System.Byte())
  name.vb: CreateEncryptor(Byte(), Byte())
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose
  id: Dispose
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 163
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Releases all resources used by the current instance of the <xref href="System.Security.Cryptography.SymmetricAlgorithm" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 169
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Releases the unmanaged resources used by the <xref href="System.Security.Cryptography.SymmetricAlgorithm" data-throw-if-not-resolved="false"></xref> and optionally releases the managed resources.
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: 'true to release both managed and unmanaged resources; false to release only unmanaged resources. '
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  id: GenerateIV
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: GenerateIV()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateIV()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenerateIV
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 186
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: When overridden in a derived class, generates a random initialization vector (<xref href="System.Security.Cryptography.SymmetricAlgorithm.IV" data-throw-if-not-resolved="false"></xref>) to use for the algorithm.
  syntax:
    content: public abstract void GenerateIV()
    content.vb: Public MustOverride Sub GenerateIV
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  commentId: M:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  id: GenerateKey
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: GenerateKey()
  fullName: System.Security.Cryptography.SymmetricAlgorithm.GenerateKey()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenerateKey
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 188
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: 'When overridden in a derived class, generates a random key (<xref href="System.Security.Cryptography.SymmetricAlgorithm.Key" data-throw-if-not-resolved="false"></xref>) to use for the algorithm. '
  syntax:
    content: public abstract void GenerateKey()
    content.vb: Public MustOverride Sub GenerateKey
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  id: ModeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: ModeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModeValue
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 198
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Represents the cipher mode used in the symmetric algorithm.
  syntax:
    content: protected CipherMode ModeValue
    content.vb: Protected ModeValue As CipherMode
    return:
      type: System.Security.Cryptography.CipherMode
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  id: PaddingValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: PaddingValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PaddingValue
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 199
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Represents the padding mode used in the symmetric algorithm.
  syntax:
    content: protected PaddingMode PaddingValue
    content.vb: Protected PaddingValue As PaddingMode
    return:
      type: System.Security.Cryptography.PaddingMode
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  id: KeyValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: KeyValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeyValue
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 200
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Represents the secret key for the symmetric algorithm.
  syntax:
    content: protected byte[] KeyValue
    content.vb: Protected KeyValue As Byte()
    return:
      type: System.Byte[]
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.IVValue
  id: IVValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: IVValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.IVValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IVValue
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 201
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Represents the initialization vector (<xref href="System.Security.Cryptography.SymmetricAlgorithm.IV" data-throw-if-not-resolved="false"></xref>) for the symmetric algorithm.
  syntax:
    content: protected byte[] IVValue
    content.vb: Protected IVValue As Byte()
    return:
      type: System.Byte[]
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: BlockSizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BlockSizeValue
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 202
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Represents the block size, in bits, of the cryptographic operation.
  syntax:
    content: protected int BlockSizeValue
    content.vb: Protected BlockSizeValue As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  id: KeySizeValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: KeySizeValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KeySizeValue
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 203
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Represents the size, in bits, of the secret key used by the symmetric algorithm.
  syntax:
    content: protected int KeySizeValue
    content.vb: Protected KeySizeValue As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  id: LegalBlockSizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: LegalBlockSizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalBlockSizesValue
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 204
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Specifies the block sizes, in bits, that are supported by the symmetric algorithm.
  syntax:
    content: protected KeySizes[] LegalBlockSizesValue
    content.vb: Protected LegalBlockSizesValue As KeySizes()
    return:
      type: System.Security.Cryptography.KeySizes[]
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  commentId: F:System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  id: LegalKeySizesValue
  parent: System.Security.Cryptography.SymmetricAlgorithm
  langs:
  - csharp
  - vb
  name: LegalKeySizesValue
  fullName: System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  type: Field
  source:
    remote:
      path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LegalKeySizesValue
    path: src/System.Security.Cryptography.Primitives/src/System/Security/Cryptography/SymmetricAlgorithm.cs
    startLine: 205
  assemblies:
  - System.Security.Cryptography.Primitives
  namespace: System.Security.Cryptography
  summary: Specifies the key sizes, in bits, that are supported by the symmetric algorithm.
  syntax:
    content: protected KeySizes[] LegalKeySizesValue
    content.vb: Protected LegalKeySizesValue As KeySizes()
    return:
      type: System.Security.Cryptography.KeySizes[]
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.Security.Cryptography.KeySizes[]
  isExternal: false
  name: KeySizes[]
  fullName: System.Security.Cryptography.KeySizes[]
  fullname.vb: System.Security.Cryptography.KeySizes()
  name.vb: KeySizes()
  spec.csharp:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Security.Cryptography.KeySizes
    name: KeySizes
    fullName: System.Security.Cryptography.KeySizes
  - name: ()
    fullName: ()
- uid: System.Security.Cryptography.CipherMode
  parent: System.Security.Cryptography
  isExternal: false
  name: CipherMode
  fullName: System.Security.Cryptography.CipherMode
- uid: System.Security.Cryptography.PaddingMode
  parent: System.Security.Cryptography
  isExternal: false
  name: PaddingMode
  fullName: System.Security.Cryptography.PaddingMode
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
