items:
- uid: System.Numerics.Complex
  commentId: T:System.Numerics.Complex
  id: Complex
  parent: System.Numerics
  children:
  - System.Numerics.Complex.#ctor(System.Double,System.Double)
  - System.Numerics.Complex.Abs(System.Numerics.Complex)
  - System.Numerics.Complex.Acos(System.Numerics.Complex)
  - System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Asin(System.Numerics.Complex)
  - System.Numerics.Complex.Atan(System.Numerics.Complex)
  - System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  - System.Numerics.Complex.Cos(System.Numerics.Complex)
  - System.Numerics.Complex.Cosh(System.Numerics.Complex)
  - System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Equals(System.Numerics.Complex)
  - System.Numerics.Complex.Equals(System.Object)
  - System.Numerics.Complex.Exp(System.Numerics.Complex)
  - System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  - System.Numerics.Complex.GetHashCode
  - System.Numerics.Complex.Imaginary
  - System.Numerics.Complex.ImaginaryOne
  - System.Numerics.Complex.Log(System.Numerics.Complex)
  - System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  - System.Numerics.Complex.Log10(System.Numerics.Complex)
  - System.Numerics.Complex.Magnitude
  - System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Negate(System.Numerics.Complex)
  - System.Numerics.Complex.One
  - System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex
  - System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex
  - System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex
  - System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  - System.Numerics.Complex.Phase
  - System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  - System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Real
  - System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  - System.Numerics.Complex.Sin(System.Numerics.Complex)
  - System.Numerics.Complex.Sinh(System.Numerics.Complex)
  - System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  - System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  - System.Numerics.Complex.Tan(System.Numerics.Complex)
  - System.Numerics.Complex.Tanh(System.Numerics.Complex)
  - System.Numerics.Complex.ToString
  - System.Numerics.Complex.ToString(System.IFormatProvider)
  - System.Numerics.Complex.ToString(System.String)
  - System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  - System.Numerics.Complex.Zero
  langs:
  - csharp
  - vb
  name: Complex
  fullName: System.Numerics.Complex
  type: Struct
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Complex
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 13
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Represents a complex number.
  syntax:
    content: 'public struct Complex : IEquatable<Complex>, IFormattable'
    content.vb: >-
      Public Structure Complex
          Implements IEquatable(Of Complex), IFormattable
  implements:
  - System.IEquatable{System.Numerics.Complex}
  - System.IFormattable
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Numerics.Complex.ImaginaryOne
  commentId: F:System.Numerics.Complex.ImaginaryOne
  id: ImaginaryOne
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: ImaginaryOne
  fullName: System.Numerics.Complex.ImaginaryOne
  type: Field
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ImaginaryOne
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 17
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a new <xref href="System.Numerics.Complex" data-throw-if-not-resolved="false"></xref> instance with a real number equal to zero and an imaginary number equal to one.
  syntax:
    content: public static readonly Complex ImaginaryOne
    content.vb: Public Shared ReadOnly ImaginaryOne As Complex
    return:
      type: System.Numerics.Complex
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Numerics.Complex.One
  commentId: F:System.Numerics.Complex.One
  id: One
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: One
  fullName: System.Numerics.Complex.One
  type: Field
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: One
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 16
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a new <xref href="System.Numerics.Complex" data-throw-if-not-resolved="false"></xref> instance with a real number equal to one and an imaginary number equal to zero.
  syntax:
    content: public static readonly Complex One
    content.vb: Public Shared ReadOnly One As Complex
    return:
      type: System.Numerics.Complex
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Numerics.Complex.Zero
  commentId: F:System.Numerics.Complex.Zero
  id: Zero
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Zero
  fullName: System.Numerics.Complex.Zero
  type: Field
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zero
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 15
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a new <xref href="System.Numerics.Complex" data-throw-if-not-resolved="false"></xref> instance with a real number equal to zero and an imaginary number equal to zero.
  syntax:
    content: public static readonly Complex Zero
    content.vb: Public Shared ReadOnly Zero As Complex
    return:
      type: System.Numerics.Complex
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Numerics.Complex.#ctor(System.Double,System.Double)
  commentId: M:System.Numerics.Complex.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Complex(Double, Double)
  fullName: System.Numerics.Complex.Complex(System.Double, System.Double)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 24
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Initializes a new instance of the <xref href="System.Numerics.Complex" data-throw-if-not-resolved="false"></xref> structure using the specified real and imaginary values.
  syntax:
    content: public Complex(double real, double imaginary)
    content.vb: Public Sub New(real As Double, imaginary As Double)
    parameters:
    - id: real
      type: System.Double
      description: The real part of the complex number.
    - id: imaginary
      type: System.Double
      description: The imaginary part of the complex number.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Complex.Imaginary
  commentId: P:System.Numerics.Complex.Imaginary
  id: Imaginary
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Imaginary
  fullName: System.Numerics.Complex.Imaginary
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Imaginary
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 31
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Gets the imaginary component of the current <xref href="System.Numerics.Complex" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public double Imaginary { get; }
    content.vb: Public ReadOnly Property Imaginary As Double
    parameters: []
    return:
      type: System.Double
      description: The imaginary component of a complex number.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.Complex.Magnitude
  commentId: P:System.Numerics.Complex.Magnitude
  id: Magnitude
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Magnitude
  fullName: System.Numerics.Complex.Magnitude
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Magnitude
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 33
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Gets the magnitude (or absolute value) of a complex number.
  syntax:
    content: public double Magnitude { get; }
    content.vb: Public ReadOnly Property Magnitude As Double
    parameters: []
    return:
      type: System.Double
      description: The magnitude of the current instance.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.Complex.Phase
  commentId: P:System.Numerics.Complex.Phase
  id: Phase
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Phase
  fullName: System.Numerics.Complex.Phase
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Phase
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 34
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Gets the phase of a complex number.
  syntax:
    content: public double Phase { get; }
    content.vb: Public ReadOnly Property Phase As Double
    parameters: []
    return:
      type: System.Double
      description: The phase of a complex number, in radians.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.Complex.Real
  commentId: P:System.Numerics.Complex.Real
  id: Real
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Real
  fullName: System.Numerics.Complex.Real
  type: Property
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Real
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 30
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Gets the real component of the current <xref href="System.Numerics.Complex" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public double Real { get; }
    content.vb: Public ReadOnly Property Real As Double
    parameters: []
    return:
      type: System.Double
      description: The real component of a complex number.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Numerics.Complex.Abs(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Abs(System.Numerics.Complex)
  id: Abs(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Abs(Complex)
  fullName: System.Numerics.Complex.Abs(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Abs
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 109
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Gets the absolute value (or magnitude) of a complex number.
  syntax:
    content: public static double Abs(Complex value)
    content.vb: Public Shared Function Abs(value As Complex) As Double
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Double
      description: The absolute value of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Acos(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Acos(System.Numerics.Complex)
  id: Acos(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Acos(Complex)
  fullName: System.Numerics.Complex.Acos(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Acos
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 243
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the angle that is the arc cosine of the specified complex number.
  syntax:
    content: public static Complex Acos(Complex value)
    content.vb: Public Shared Function Acos(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number that represents a cosine.
    return:
      type: System.Numerics.Complex
      description: The angle, measured in radians, which is the arc cosine of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Add(System.Numerics.Complex,System.Numerics.Complex)
  id: Add(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Add(Complex, Complex)
  fullName: System.Numerics.Complex.Add(System.Numerics.Complex, System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 46
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Adds two complex numbers and returns the result.
  syntax:
    content: public static Complex Add(Complex left, Complex right)
    content.vb: Public Shared Function Add(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The first complex number to add.
    - id: right
      type: System.Numerics.Complex
      description: The second complex number to add.
    return:
      type: System.Numerics.Complex
      description: The sum of <em>left</em> and <em>right</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Asin(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Asin(System.Numerics.Complex)
  id: Asin(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Asin(Complex)
  fullName: System.Numerics.Complex.Asin(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Asin
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 219
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the angle that is the arc sine of the specified complex number.
  syntax:
    content: public static Complex Asin(Complex value)
    content.vb: Public Shared Function Asin(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The angle which is the arc sine of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Atan(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Atan(System.Numerics.Complex)
  id: Atan(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Atan(Complex)
  fullName: System.Numerics.Complex.Atan(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Atan
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 263
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the angle that is the arc tangent of the specified complex number.
  syntax:
    content: public static Complex Atan(Complex value)
    content.vb: Public Shared Function Atan(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The angle that is the arc tangent of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  id: Conjugate(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Conjugate(Complex)
  fullName: System.Numerics.Complex.Conjugate(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Conjugate
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 138
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Computes the conjugate of a complex number and returns the result.
  syntax:
    content: public static Complex Conjugate(Complex value)
    content.vb: Public Shared Function Conjugate(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The conjugate of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Cos(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Cos(System.Numerics.Complex)
  id: Cos(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Cos(Complex)
  fullName: System.Numerics.Complex.Cos(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cos
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 228
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the cosine of the specified complex number.
  syntax:
    content: public static Complex Cos(Complex value)
    content.vb: Public Shared Function Cos(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The cosine of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Cosh(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Cosh(System.Numerics.Complex)
  id: Cosh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Cosh(Complex)
  fullName: System.Numerics.Complex.Cosh(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cosh
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 235
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the hyperbolic cosine of the specified complex number.
  syntax:
    content: public static Complex Cosh(Complex value)
    content.vb: Public Shared Function Cosh(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The hyperbolic cosine of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Divide(System.Numerics.Complex,System.Numerics.Complex)
  id: Divide(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Divide(Complex, Complex)
  fullName: System.Numerics.Complex.Divide(System.Numerics.Complex, System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Divide
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 61
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Divides one complex number by another and returns the result.
  syntax:
    content: public static Complex Divide(Complex dividend, Complex divisor)
    content.vb: Public Shared Function Divide(dividend As Complex, divisor As Complex) As Complex
    parameters:
    - id: dividend
      type: System.Numerics.Complex
      description: The complex number to be divided.
    - id: divisor
      type: System.Numerics.Complex
      description: The complex number to divide by.
    return:
      type: System.Numerics.Complex
      description: The quotient of the division.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Equals(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Equals(System.Numerics.Complex)
  id: Equals(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Equals(Complex)
  fullName: System.Numerics.Complex.Equals(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 170
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether the current instance and a specified complex number have the same value.
  syntax:
    content: public bool Equals(Complex value)
    content.vb: Public Function Equals(value As Complex) As Boolean
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: The complex number to compare.
    return:
      type: System.Boolean
      description: true if this complex number and <em>value</em> have the same value; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Complex.Equals(System.Object)
  commentId: M:System.Numerics.Complex.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Numerics.Complex.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 164
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: 'Returns a value that indicates whether the current instance and a specified object have the same value. '
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare.
    return:
      type: System.Boolean
      description: true if the <em>obj</em> parameter is a <xref href="System.Numerics.Complex" data-throw-if-not-resolved="false"></xref> object or a type capable of implicit conversion to a <xref href="System.Numerics.Complex" data-throw-if-not-resolved="false"></xref> object, and its value is equal to the current <xref href="System.Numerics.Complex" data-throw-if-not-resolved="false"></xref> object; otherwise, false.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.Complex.Exp(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Exp(System.Numerics.Complex)
  id: Exp(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Exp(Complex)
  fullName: System.Numerics.Complex.Exp(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exp
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 285
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns e raised to the power specified by a complex number.
  syntax:
    content: public static Complex Exp(Complex value)
    content.vb: Public Shared Function Exp(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number that specifies a power.
    return:
      type: System.Numerics.Complex
      description: The number e raised to the power <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  commentId: M:System.Numerics.Complex.FromPolarCoordinates(System.Double,System.Double)
  id: FromPolarCoordinates(System.Double,System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: FromPolarCoordinates(Double, Double)
  fullName: System.Numerics.Complex.FromPolarCoordinates(System.Double, System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromPolarCoordinates
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 36
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Creates a complex number from a point's polar coordinates.
  syntax:
    content: public static Complex FromPolarCoordinates(double magnitude, double phase)
    content.vb: Public Shared Function FromPolarCoordinates(magnitude As Double, phase As Double) As Complex
    parameters:
    - id: magnitude
      type: System.Double
      description: The magnitude, which is the distance from the origin (the intersection of the x-axis and the y-axis) to the number.
    - id: phase
      type: System.Double
      description: The phase, which is the angle from the line to the horizontal axis, measured in radians.
    return:
      type: System.Numerics.Complex
      description: A complex number.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.GetHashCode
  commentId: M:System.Numerics.Complex.GetHashCode
  id: GetHashCode
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Numerics.Complex.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 175
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the hash code for the current <xref href="System.Numerics.Complex" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.Complex.Log(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Log(System.Numerics.Complex)
  id: Log(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Log(Complex)
  fullName: System.Numerics.Complex.Log(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Log
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 269
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the natural (base e) logarithm of a specified complex number.
  syntax:
    content: public static Complex Log(Complex value)
    content.vb: Public Shared Function Log(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The natural (base e) logarithm of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  commentId: M:System.Numerics.Complex.Log(System.Numerics.Complex,System.Double)
  id: Log(System.Numerics.Complex,System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Log(Complex, Double)
  fullName: System.Numerics.Complex.Log(System.Numerics.Complex, System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Log
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 274
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the logarithm of a specified complex number in a specified base.
  syntax:
    content: public static Complex Log(Complex value, double baseValue)
    content.vb: Public Shared Function Log(value As Complex, baseValue As Double) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    - id: baseValue
      type: System.Double
      description: The base of the logarithm.
    return:
      type: System.Numerics.Complex
      description: The logarithm of <em>value</em> in base <em>baseValue</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Log10(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Log10(System.Numerics.Complex)
  id: Log10(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Log10(Complex)
  fullName: System.Numerics.Complex.Log10(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Log10
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 279
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the base-10 logarithm of a specified complex number.
  syntax:
    content: public static Complex Log10(Complex value)
    content.vb: Public Shared Function Log10(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The base-10 logarithm of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Multiply(System.Numerics.Complex,System.Numerics.Complex)
  id: Multiply(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Multiply(Complex, Complex)
  fullName: System.Numerics.Complex.Multiply(System.Numerics.Complex, System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiply
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 56
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the product of two complex numbers.
  syntax:
    content: public static Complex Multiply(Complex left, Complex right)
    content.vb: Public Shared Function Multiply(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The first complex number to multiply.
    - id: right
      type: System.Numerics.Complex
      description: The second complex number to multiply.
    return:
      type: System.Numerics.Complex
      description: The product of the <em>left</em> and <em>right</em> parameters.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Negate(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Negate(System.Numerics.Complex)
  id: Negate(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Negate(Complex)
  fullName: System.Numerics.Complex.Negate(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Negate
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 41
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the additive inverse of a specified complex number.
  syntax:
    content: public static Complex Negate(Complex value)
    content.vb: Public Shared Function Negate(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The result of the <xref href="System.Numerics.Complex.Real" data-throw-if-not-resolved="false"></xref> and <xref href="System.Numerics.Complex.Imaginary" data-throw-if-not-resolved="false"></xref> components of the <em>value</em> parameter multiplied by -1.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Addition(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Addition(Complex, Complex)
  fullName: System.Numerics.Complex.Addition(System.Numerics.Complex, System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Addition
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 71
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Adds two complex numbers.
  syntax:
    content: public static Complex operator +(Complex left, Complex right)
    content.vb: Public Shared Operator +(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The first value to add.
    - id: right
      type: System.Numerics.Complex
      description: The second value to add.
    return:
      type: System.Numerics.Complex
      description: The sum of <em>left</em> and <em>right</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Division(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Division(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Division(Complex, Complex)
  fullName: System.Numerics.Complex.Division(System.Numerics.Complex, System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Division
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 89
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Divides a specified complex number by another specified complex number.
  syntax:
    content: public static Complex operator /(Complex left, Complex right)
    content.vb: Public Shared Operator /(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The value to be divided.
    - id: right
      type: System.Numerics.Complex
      description: The value to divide by.
    return:
      type: System.Numerics.Complex
      description: The result of dividing <em>left</em> by <em>right</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Equality(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Equality(Complex, Complex)
  fullName: System.Numerics.Complex.Equality(System.Numerics.Complex, System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 154
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether two complex numbers are equal.
  syntax:
    content: public static bool operator ==(Complex left, Complex right)
    content.vb: Public Shared Operator =(left As Complex, right As Complex) As Boolean
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The first complex number to compare.
    - id: right
      type: System.Numerics.Complex
      description: The second complex number to compare.
    return:
      type: System.Boolean
      description: true if the <em>left</em> and <em>right</em> parameters have the same value; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Explicit(System.Decimal)~System.Numerics.Complex
  id: op_Explicit(System.Decimal)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Explicit(Decimal to Complex)
  fullName: System.Numerics.Complex.Explicit(System.Decimal to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 396
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an explicit conversion of a <xref href="System.Decimal" data-throw-if-not-resolved="false"></xref> value to a complex number.
  syntax:
    content: public static explicit operator Complex(decimal value)
    content.vb: Public Shared Narrowing Operator CType(value As Decimal) As Complex
    parameters:
    - id: value
      type: System.Decimal
      description: The value to convert to a complex number.
    return:
      type: System.Numerics.Complex
      description: 'A complex number that has a real component equal to <em>value</em> and an imaginary component equal to zero. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Narrowing(System.Decimal to System.Numerics.Complex)
  name.vb: Narrowing(Decimal to Complex)
- uid: System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex
  id: op_Explicit(System.Numerics.BigInteger)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Explicit(BigInteger to Complex)
  fullName: System.Numerics.Complex.Explicit(System.Numerics.BigInteger to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 391
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: 'Defines an explicit conversion of a <xref href="System.Numerics.BigInteger" data-throw-if-not-resolved="false"></xref> value to a complex number. '
  syntax:
    content: public static explicit operator Complex(BigInteger value)
    content.vb: Public Shared Narrowing Operator CType(value As BigInteger) As Complex
    parameters:
    - id: value
      type: System.Numerics.BigInteger
      description: The value to convert to a complex number.
    return:
      type: System.Numerics.Complex
      description: 'A complex number that has a real component equal to <em>value</em> and an imaginary component equal to zero. '
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Narrowing(System.Numerics.BigInteger to System.Numerics.Complex)
  name.vb: Narrowing(BigInteger to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.Byte)~System.Numerics.Complex
  id: op_Implicit(System.Byte)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Byte to Complex)
  fullName: System.Numerics.Complex.Implicit(System.Byte to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 376
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of an unsigned byte to a complex number.
  syntax:
    content: public static implicit operator Complex(byte value)
    content.vb: Public Shared Widening Operator CType(value As Byte) As Complex
    parameters:
    - id: value
      type: System.Byte
      description: The value to convert to a complex number.
    return:
      type: System.Numerics.Complex
      description: An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.Byte to System.Numerics.Complex)
  name.vb: Widening(Byte to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.Double)~System.Numerics.Complex
  id: op_Implicit(System.Double)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Double to Complex)
  fullName: System.Numerics.Complex.Implicit(System.Double to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 386
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a double-precision floating-point number to a complex number.
  syntax:
    content: public static implicit operator Complex(double value)
    content.vb: Public Shared Widening Operator CType(value As Double) As Complex
    parameters:
    - id: value
      type: System.Double
      description: The value to convert to a complex number.
    return:
      type: System.Numerics.Complex
      description: An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.Double to System.Numerics.Complex)
  name.vb: Widening(Double to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.Int16)~System.Numerics.Complex
  id: op_Implicit(System.Int16)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Int16 to Complex)
  fullName: System.Numerics.Complex.Implicit(System.Int16 to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 337
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a 16-bit signed integer to a complex number.
  syntax:
    content: public static implicit operator Complex(short value)
    content.vb: Public Shared Widening Operator CType(value As Short) As Complex
    parameters:
    - id: value
      type: System.Int16
      description: The value to convert to a complex number.
    return:
      type: System.Numerics.Complex
      description: An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.Int16 to System.Numerics.Complex)
  name.vb: Widening(Int16 to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.Int32)~System.Numerics.Complex
  id: op_Implicit(System.Int32)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Int32 to Complex)
  fullName: System.Numerics.Complex.Implicit(System.Int32 to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 342
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a 32-bit signed integer to a complex number.
  syntax:
    content: public static implicit operator Complex(int value)
    content.vb: Public Shared Widening Operator CType(value As Integer) As Complex
    parameters:
    - id: value
      type: System.Int32
      description: The value to convert to a complex number.
    return:
      type: System.Numerics.Complex
      description: An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.Int32 to System.Numerics.Complex)
  name.vb: Widening(Int32 to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.Int64)~System.Numerics.Complex
  id: op_Implicit(System.Int64)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Int64 to Complex)
  fullName: System.Numerics.Complex.Implicit(System.Int64 to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 347
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a 64-bit signed integer to a complex number.
  syntax:
    content: public static implicit operator Complex(long value)
    content.vb: Public Shared Widening Operator CType(value As Long) As Complex
    parameters:
    - id: value
      type: System.Int64
      description: The value to convert to a complex number.
    return:
      type: System.Numerics.Complex
      description: An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.Int64 to System.Numerics.Complex)
  name.vb: Widening(Int64 to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.SByte)~System.Numerics.Complex
  id: op_Implicit(System.SByte)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(SByte to Complex)
  fullName: System.Numerics.Complex.Implicit(System.SByte to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 370
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a signed byte to a complex number.
  syntax:
    content: public static implicit operator Complex(sbyte value)
    content.vb: Public Shared Widening Operator CType(value As SByte) As Complex
    parameters:
    - id: value
      type: System.SByte
      description: The value to convert to a complex number.
    return:
      type: System.Numerics.Complex
      description: An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.SByte to System.Numerics.Complex)
  name.vb: Widening(SByte to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.Single)~System.Numerics.Complex
  id: op_Implicit(System.Single)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(Single to Complex)
  fullName: System.Numerics.Complex.Implicit(System.Single to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 381
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a single-precision floating-point number to a complex number.
  syntax:
    content: public static implicit operator Complex(float value)
    content.vb: Public Shared Widening Operator CType(value As Single) As Complex
    parameters:
    - id: value
      type: System.Single
      description: The value to convert to a complex number.
    return:
      type: System.Numerics.Complex
      description: An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.Single to System.Numerics.Complex)
  name.vb: Widening(Single to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.UInt16)~System.Numerics.Complex
  id: op_Implicit(System.UInt16)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(UInt16 to Complex)
  fullName: System.Numerics.Complex.Implicit(System.UInt16 to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 352
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a 16-bit unsigned integer to a complex number.
  syntax:
    content: public static implicit operator Complex(ushort value)
    content.vb: Public Shared Widening Operator CType(value As UShort) As Complex
    parameters:
    - id: value
      type: System.UInt16
      description: The value to convert to a complex number.
    return:
      type: System.Numerics.Complex
      description: An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.UInt16 to System.Numerics.Complex)
  name.vb: Widening(UInt16 to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.UInt32)~System.Numerics.Complex
  id: op_Implicit(System.UInt32)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(UInt32 to Complex)
  fullName: System.Numerics.Complex.Implicit(System.UInt32 to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 358
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a 32-bit unsigned integer to a complex number.
  syntax:
    content: public static implicit operator Complex(uint value)
    content.vb: Public Shared Widening Operator CType(value As UInteger) As Complex
    parameters:
    - id: value
      type: System.UInt32
      description: The value to convert to a complex number.
    return:
      type: System.Numerics.Complex
      description: An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.UInt32 to System.Numerics.Complex)
  name.vb: Widening(UInt32 to Complex)
- uid: System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex
  commentId: M:System.Numerics.Complex.op_Implicit(System.UInt64)~System.Numerics.Complex
  id: op_Implicit(System.UInt64)~System.Numerics.Complex
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Implicit(UInt64 to Complex)
  fullName: System.Numerics.Complex.Implicit(System.UInt64 to System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 364
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Defines an implicit conversion of a 64-bit unsigned integer to a complex number.
  syntax:
    content: public static implicit operator Complex(ulong value)
    content.vb: Public Shared Widening Operator CType(value As ULong) As Complex
    parameters:
    - id: value
      type: System.UInt64
      description: The value to convert to a complex number.
    return:
      type: System.Numerics.Complex
      description: An object that contains the value of the <em>value</em> parameter as its real part and zero as its imaginary part.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Numerics.Complex.Widening(System.UInt64 to System.Numerics.Complex)
  name.vb: Widening(UInt64 to Complex)
- uid: System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Inequality(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Inequality(Complex, Complex)
  fullName: System.Numerics.Complex.Inequality(System.Numerics.Complex, System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 159
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a value that indicates whether two complex numbers are not equal.
  syntax:
    content: public static bool operator !=(Complex left, Complex right)
    content.vb: Public Shared Operator <>(left As Complex, right As Complex) As Boolean
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The first value to compare.
    - id: right
      type: System.Numerics.Complex
      description: The second value to compare.
    return:
      type: System.Boolean
      description: true if <em>left</em> and <em>right</em> are not equal; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Multiply(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Multiply(Complex, Complex)
  fullName: System.Numerics.Complex.Multiply(System.Numerics.Complex, System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Multiply
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 81
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Multiplies two specified complex numbers.
  syntax:
    content: public static Complex operator *(Complex left, Complex right)
    content.vb: Public Shared Operator *(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The first value to multiply.
    - id: right
      type: System.Numerics.Complex
      description: The second value to multiply.
    return:
      type: System.Numerics.Complex
      description: The product of <em>left</em> and <em>right</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  id: op_Subtraction(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Subtraction(Complex, Complex)
  fullName: System.Numerics.Complex.Subtraction(System.Numerics.Complex, System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Subtraction
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 76
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Subtracts a complex number from another complex number.
  syntax:
    content: public static Complex operator -(Complex left, Complex right)
    content.vb: Public Shared Operator -(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The value to subtract from (the minuend).
    - id: right
      type: System.Numerics.Complex
      description: The value to subtract (the subtrahend).
    return:
      type: System.Numerics.Complex
      description: The result of subtracting <em>right</em> from <em>left</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.op_UnaryNegation(System.Numerics.Complex)
  id: op_UnaryNegation(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: UnaryNegation(Complex)
  fullName: System.Numerics.Complex.UnaryNegation(System.Numerics.Complex)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_UnaryNegation
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 66
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the additive inverse of a specified complex number.
  syntax:
    content: public static Complex operator -(Complex value)
    content.vb: Public Shared Operator -(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: The value to negate.
    return:
      type: System.Numerics.Complex
      description: The result of the <xref href="System.Numerics.Complex.Real" data-throw-if-not-resolved="false"></xref> and <xref href="System.Numerics.Complex.Imaginary" data-throw-if-not-resolved="false"></xref> components of the <em>value</em> parameter multiplied by -1.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  commentId: M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Double)
  id: Pow(System.Numerics.Complex,System.Double)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Pow(Complex, Double)
  fullName: System.Numerics.Complex.Pow(System.Numerics.Complex, System.Double)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pow
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 325
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a specified complex number raised to a power specified by a double-precision floating-point number.
  syntax:
    content: public static Complex Pow(Complex value, double power)
    content.vb: Public Shared Function Pow(value As Complex, power As Double) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number to be raised to a power.
    - id: power
      type: System.Double
      description: A double-precision floating-point number that specifies a power.
    return:
      type: System.Numerics.Complex
      description: The complex number <em>value</em> raised to the power <em>power</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Pow(System.Numerics.Complex,System.Numerics.Complex)
  id: Pow(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Pow(Complex, Complex)
  fullName: System.Numerics.Complex.Pow(System.Numerics.Complex, System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pow
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 299
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns a specified complex number raised to a power specified by a complex number.
  syntax:
    content: public static Complex Pow(Complex value, Complex power)
    content.vb: Public Shared Function Pow(value As Complex, power As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number to be raised to a power.
    - id: power
      type: System.Numerics.Complex
      description: A complex number that specifies a power.
    return:
      type: System.Numerics.Complex
      description: The complex number <em>value</em> raised to the power <em>power</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  id: Reciprocal(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Reciprocal(Complex)
  fullName: System.Numerics.Complex.Reciprocal(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reciprocal
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 144
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the multiplicative inverse of a complex number.
  syntax:
    content: public static Complex Reciprocal(Complex value)
    content.vb: Public Shared Function Reciprocal(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The reciprocal of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Sin(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Sin(System.Numerics.Complex)
  id: Sin(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Sin(Complex)
  fullName: System.Numerics.Complex.Sin(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sin
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 204
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the sine of the specified complex number.
  syntax:
    content: public static Complex Sin(Complex value)
    content.vb: Public Shared Function Sin(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The sine of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Sinh(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Sinh(System.Numerics.Complex)
  id: Sinh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Sinh(Complex)
  fullName: System.Numerics.Complex.Sinh(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sinh
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 211
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the hyperbolic sine of the specified complex number.
  syntax:
    content: public static Complex Sinh(Complex value)
    content.vb: Public Shared Function Sinh(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The hyperbolic sine of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  id: Sqrt(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Sqrt(Complex)
  fullName: System.Numerics.Complex.Sqrt(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sqrt
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 293
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the square root of a specified complex number.
  syntax:
    content: public static Complex Sqrt(Complex value)
    content.vb: Public Shared Function Sqrt(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The square root of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Subtract(System.Numerics.Complex,System.Numerics.Complex)
  id: Subtract(System.Numerics.Complex,System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Subtract(Complex, Complex)
  fullName: System.Numerics.Complex.Subtract(System.Numerics.Complex, System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subtract
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 51
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Subtracts one complex number from another and returns the result.
  syntax:
    content: public static Complex Subtract(Complex left, Complex right)
    content.vb: Public Shared Function Subtract(left As Complex, right As Complex) As Complex
    parameters:
    - id: left
      type: System.Numerics.Complex
      description: The value to subtract from (the minuend).
    - id: right
      type: System.Numerics.Complex
      description: The value to subtract (the subtrahend).
    return:
      type: System.Numerics.Complex
      description: The result of subtracting <em>right</em> from <em>left</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Tan(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Tan(System.Numerics.Complex)
  id: Tan(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Tan(Complex)
  fullName: System.Numerics.Complex.Tan(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Tan
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 252
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the tangent of the specified complex number.
  syntax:
    content: public static Complex Tan(Complex value)
    content.vb: Public Shared Function Tan(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The tangent of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.Tanh(System.Numerics.Complex)
  commentId: M:System.Numerics.Complex.Tanh(System.Numerics.Complex)
  id: Tanh(System.Numerics.Complex)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: Tanh(Complex)
  fullName: System.Numerics.Complex.Tanh(System.Numerics.Complex)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Tanh
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 257
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Returns the hyperbolic tangent of the specified complex number.
  syntax:
    content: public static Complex Tanh(Complex value)
    content.vb: Public Shared Function Tanh(value As Complex) As Complex
    parameters:
    - id: value
      type: System.Numerics.Complex
      description: A complex number.
    return:
      type: System.Numerics.Complex
      description: The hyperbolic tangent of <em>value</em>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Numerics.Complex.ToString
  commentId: M:System.Numerics.Complex.ToString
  id: ToString
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Numerics.Complex.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 184
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts the value of the current complex number to its equivalent string representation in Cartesian form.
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: The string representation of the current instance in Cartesian form.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Numerics.Complex.ToString(System.IFormatProvider)
  commentId: M:System.Numerics.Complex.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  fullName: System.Numerics.Complex.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 222
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified culture-specific formatting information.
  syntax:
    content: public string ToString(IFormatProvider provider)
    content.vb: Public Function ToString(provider As IFormatProvider) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the current instance in Cartesian form, as specified by <em>provider</em>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Complex.ToString(System.String)
  commentId: M:System.Numerics.Complex.ToString(System.String)
  id: ToString(System.String)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: ToString(String)
  fullName: System.Numerics.Complex.ToString(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/src/System/Numerics/Complex.cs
    startLine: 189
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format for its real and imaginary parts.
  syntax:
    content: public string ToString(string format)
    content.vb: Public Function ToString(format As String) As String
    parameters:
    - id: format
      type: System.String
      description: A standard or custom numeric format string.
    return:
      type: System.String
      description: The string representation of the current instance in Cartesian form.
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<em>format</em> is not a valid format string."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  commentId: M:System.Numerics.Complex.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.Complex
  langs:
  - csharp
  - vb
  name: ToString(String, IFormatProvider)
  fullName: System.Numerics.Complex.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Numerics/ref/System.Runtime.Numerics.cs
    startLine: 224
  assemblies:
  - System.Runtime.Numerics
  namespace: System.Numerics
  summary: Converts the value of the current complex number to its equivalent string representation in Cartesian form by using the specified format and culture-specific format information for its real and imaginary parts.
  syntax:
    content: public string ToString(string format, IFormatProvider provider)
    content.vb: Public Function ToString(format As String, provider As IFormatProvider) As String
    parameters:
    - id: format
      type: System.String
      description: A standard or custom numeric format string.
    - id: provider
      type: System.IFormatProvider
      description: An object that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the current instance in Cartesian form, as specified by <em>format</em> and <em>provider</em>.
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<em>format</em> is not a valid format string."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Numerics
  isExternal: false
  name: System.Numerics
  fullName: System.Numerics
- uid: System.IEquatable{System.Numerics.Complex}
  definition: System.IEquatable`1
  name: IEquatable<Complex>
  fullName: System.IEquatable<System.Numerics.Complex>
  fullname.vb: System.IEquatable(Of System.Numerics.Complex)
  name.vb: IEquatable(Of Complex)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Numerics.Complex
    name: Complex
    fullName: System.Numerics.Complex
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Numerics.Complex
    name: Complex
    fullName: System.Numerics.Complex
  - name: )
    fullName: )
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  fullName: System.IFormattable
- uid: System.IEquatable`1
  parent: System
  isExternal: false
  name: IEquatable<>
  fullName: System.IEquatable<>
  fullname.vb: System.IEquatable(Of )
  name.vb: IEquatable(Of )
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Numerics.Complex
  parent: System.Numerics
  isExternal: false
  name: Complex
  fullName: System.Numerics.Complex
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
- uid: System.Numerics.BigInteger
  parent: System.Numerics
  isExternal: false
  name: BigInteger
  fullName: System.Numerics.BigInteger
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
