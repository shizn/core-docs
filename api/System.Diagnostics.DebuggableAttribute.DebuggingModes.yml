items:
- uid: System.Diagnostics.DebuggableAttribute.DebuggingModes
  commentId: T:System.Diagnostics.DebuggableAttribute.DebuggingModes
  id: DebuggableAttribute.DebuggingModes
  parent: System.Diagnostics
  children:
  - System.Diagnostics.DebuggableAttribute.DebuggingModes.Default
  - System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations
  - System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue
  - System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints
  - System.Diagnostics.DebuggableAttribute.DebuggingModes.None
  langs:
  - csharp
  - vb
  name: DebuggableAttribute.DebuggingModes
  fullName: System.Diagnostics.DebuggableAttribute.DebuggingModes
  type: Enum
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DebuggingModes
    path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
    startLine: 63
  assemblies:
  - System.Runtime
  namespace: System.Diagnostics
  summary: Specifies the debugging mode for the just-in-time (JIT) compiler.
  syntax:
    content: >-
      [Flags]

      public enum DebuggingModes
    content.vb: >-
      <Flags>

      Public Enum DebuggingModes
  attributes:
  - type: System.FlagsAttribute
    ctor: System.FlagsAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Diagnostics.DebuggableAttribute.DebuggingModes.Default
  commentId: F:System.Diagnostics.DebuggableAttribute.DebuggingModes.Default
  id: Default
  parent: System.Diagnostics.DebuggableAttribute.DebuggingModes
  langs:
  - csharp
  - vb
  name: Default
  fullName: System.Diagnostics.DebuggableAttribute.DebuggingModes.Default
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Default
    path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
    startLine: 68
  assemblies:
  - System.Runtime
  namespace: System.Diagnostics
  summary: Instructs the just-in-time (JIT) compiler to use its default behavior, which includes enabling optimizations, disabling Edit and Continue support, and using symbol store sequence points if present. Starting with the .NET Framework version 2.0, JIT tracking information, the Microsoft intermediate language (MSIL) offset to the native-code offset within a method, is always generated.
  syntax:
    content: Default = 1
    return:
      type: System.Diagnostics.DebuggableAttribute.DebuggingModes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations
  commentId: F:System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations
  id: DisableOptimizations
  parent: System.Diagnostics.DebuggableAttribute.DebuggingModes
  langs:
  - csharp
  - vb
  name: DisableOptimizations
  fullName: System.Diagnostics.DebuggableAttribute.DebuggingModes.DisableOptimizations
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DisableOptimizations
    path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
    startLine: 69
  assemblies:
  - System.Runtime
  namespace: System.Diagnostics
  summary: Disable optimizations performed by the compiler to make your output file smaller, faster, and more efficient. Optimizations result in code rearrangement in the output file, which can make debugging difficult. Typically optimization should be disabled while debugging. In versions 2.0 or later, combine this value with Default (Default | DisableOptimizations) to enable JIT tracking and disable optimizations.
  syntax:
    content: DisableOptimizations = 256
    return:
      type: System.Diagnostics.DebuggableAttribute.DebuggingModes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue
  commentId: F:System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue
  id: EnableEditAndContinue
  parent: System.Diagnostics.DebuggableAttribute.DebuggingModes
  langs:
  - csharp
  - vb
  name: EnableEditAndContinue
  fullName: System.Diagnostics.DebuggableAttribute.DebuggingModes.EnableEditAndContinue
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnableEditAndContinue
    path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
    startLine: 71
  assemblies:
  - System.Runtime
  namespace: System.Diagnostics
  summary: 'Enable edit and continue. Edit and continue enables you to make changes to your source code while your program is in break mode. The ability to edit and continue is compiler dependent. '
  syntax:
    content: EnableEditAndContinue = 4
    return:
      type: System.Diagnostics.DebuggableAttribute.DebuggingModes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints
  commentId: F:System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints
  id: IgnoreSymbolStoreSequencePoints
  parent: System.Diagnostics.DebuggableAttribute.DebuggingModes
  langs:
  - csharp
  - vb
  name: IgnoreSymbolStoreSequencePoints
  fullName: System.Diagnostics.DebuggableAttribute.DebuggingModes.IgnoreSymbolStoreSequencePoints
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IgnoreSymbolStoreSequencePoints
    path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
    startLine: 70
  assemblies:
  - System.Runtime
  namespace: System.Diagnostics
  summary: Use the implicit MSIL sequence points, not the program database (PDB) sequence points. The symbolic information normally includes at least one Microsoft intermediate language (MSIL) offset for each source line. When the just-in-time (JIT) compiler is about to compile a method, it asks the profiling services for a list of MSIL offsets that should be preserved. These MSIL offsets are called sequence points.
  syntax:
    content: IgnoreSymbolStoreSequencePoints = 2
    return:
      type: System.Diagnostics.DebuggableAttribute.DebuggingModes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Diagnostics.DebuggableAttribute.DebuggingModes.None
  commentId: F:System.Diagnostics.DebuggableAttribute.DebuggingModes.None
  id: None
  parent: System.Diagnostics.DebuggableAttribute.DebuggingModes
  langs:
  - csharp
  - vb
  name: None
  fullName: System.Diagnostics.DebuggableAttribute.DebuggingModes.None
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: None
    path: src/mscorlib/src/System/Diagnostics/DebuggerAttributes.cs
    startLine: 67
  assemblies:
  - System.Runtime
  namespace: System.Diagnostics
  summary: 'Starting with the .NET Framework version 2.0, JIT tracking information is always generated, and this flag has the same effect as <xref href="System.Diagnostics.DebuggableAttribute.DebuggingModes.Default" data-throw-if-not-resolved="false"></xref>, except that it sets the <xref href="System.Diagnostics.DebuggableAttribute.IsJITTrackingEnabled" data-throw-if-not-resolved="false"></xref> property to false. However, because JIT tracking is always enabled, the property value is ignored in version 2.0 or later. Note that, unlike the <xref href="System.Diagnostics.DebuggableAttribute.DebuggingModes.None" data-throw-if-not-resolved="false"></xref> flag, the <xref href="System.Diagnostics.DebuggableAttribute.DebuggingModes.None" data-throw-if-not-resolved="false"></xref> flag cannot be used to disable JIT optimizations. '
  syntax:
    content: None = 0
    return:
      type: System.Diagnostics.DebuggableAttribute.DebuggingModes
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Diagnostics.DebuggableAttribute.DebuggingModes
  parent: System.Diagnostics
  isExternal: false
  name: DebuggableAttribute.DebuggingModes
  fullName: System.Diagnostics.DebuggableAttribute.DebuggingModes
