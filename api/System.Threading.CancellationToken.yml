items:
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  id: CancellationToken
  parent: System.Threading
  children:
  - System.Threading.CancellationToken.#ctor(System.Boolean)
  - System.Threading.CancellationToken.CanBeCanceled
  - System.Threading.CancellationToken.Equals(System.Object)
  - System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)
  - System.Threading.CancellationToken.GetHashCode
  - System.Threading.CancellationToken.IsCancellationRequested
  - System.Threading.CancellationToken.None
  - System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  - System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  - System.Threading.CancellationToken.Register(System.Action)
  - System.Threading.CancellationToken.Register(System.Action,System.Boolean)
  - System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)
  - System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)
  - System.Threading.CancellationToken.ThrowIfCancellationRequested
  - System.Threading.CancellationToken.WaitHandle
  langs:
  - csharp
  - vb
  name: CancellationToken
  fullName: System.Threading.CancellationToken
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CancellationToken
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 40
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Propagates notification that operations should be canceled.
  syntax:
    content: public struct CancellationToken
    content.vb: Public Structure CancellationToken
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Threading.CancellationToken.#ctor(System.Boolean)
  commentId: M:System.Threading.CancellationToken.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: CancellationToken(Boolean)
  fullName: System.Threading.CancellationToken.CancellationToken(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 155
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Initializes the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public CancellationToken(bool canceled)
    content.vb: Public Sub New(canceled As Boolean)
    parameters:
    - id: canceled
      type: System.Boolean
      description: The canceled state for the token.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationToken.CanBeCanceled
  commentId: P:System.Threading.CancellationToken.CanBeCanceled
  id: CanBeCanceled
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: CanBeCanceled
  fullName: System.Threading.CancellationToken.CanBeCanceled
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanBeCanceled
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 99
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: 'Gets whether this token is capable of being in the canceled state. '
  syntax:
    content: public bool CanBeCanceled { get; }
    content.vb: Public ReadOnly Property CanBeCanceled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this token is capable of being in the canceled state; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.CancellationToken.IsCancellationRequested
  commentId: P:System.Threading.CancellationToken.IsCancellationRequested
  id: IsCancellationRequested
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: IsCancellationRequested
  fullName: System.Threading.CancellationToken.IsCancellationRequested
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsCancellationRequested
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 83
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Gets whether cancellation has been requested for this token.
  syntax:
    content: public bool IsCancellationRequested { get; }
    content.vb: Public ReadOnly Property IsCancellationRequested As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if cancellation has been requested for this token; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.CancellationToken.None
  commentId: P:System.Threading.CancellationToken.None
  id: None
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: None
  fullName: System.Threading.CancellationToken.None
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: None
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 59
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Returns an empty <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> value.
  syntax:
    content: public static CancellationToken None { get; }
    content.vb: Public Shared ReadOnly Property None As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
      description: 'An empty cancellation token. '
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Threading.CancellationToken.WaitHandle
  commentId: P:System.Threading.CancellationToken.WaitHandle
  id: WaitHandle
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: WaitHandle
  fullName: System.Threading.CancellationToken.WaitHandle
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitHandle
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 117
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Gets a <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> that is signaled when the token is canceled.
  syntax:
    content: public WaitHandle WaitHandle { get; }
    content.vb: Public ReadOnly Property WaitHandle As WaitHandle
    parameters: []
    return:
      type: System.Threading.WaitHandle
      description: A <xref href="System.Threading.WaitHandle" data-throw-if-not-resolved="false"></xref> that is signaled when the token is canceled.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The associated <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> has been disposed.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.CancellationToken.Equals(System.Object)
  commentId: M:System.Threading.CancellationToken.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Threading.CancellationToken.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 398
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Determines whether the current <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> instance is equal to the specified <xref href="System.Object" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public override bool Equals(object other)
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
    parameters:
    - id: other
      type: System.Object
      description: The other object to which to compare this instance.
    return:
      type: System.Boolean
      description: true if <em>other</em> is a <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> and if the two instances are equal; otherwise, false. Two tokens are equal if they are associated with the same <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> or if they were both constructed from public <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> constructors and their <xref href="System.Threading.CancellationToken.IsCancellationRequested" data-throw-if-not-resolved="false"></xref> values are equal.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: An associated <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> has been disposed.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)
  commentId: M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)
  id: Equals(System.Threading.CancellationToken)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Equals(CancellationToken)
  fullName: System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 362
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Determines whether the current <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> instance is equal to the specified token.
  syntax:
    content: public bool Equals(CancellationToken other)
    content.vb: Public Function Equals(other As CancellationToken) As Boolean
    parameters:
    - id: other
      type: System.Threading.CancellationToken
      description: The other <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> to which to compare this instance.
    return:
      type: System.Boolean
      description: true if the instances are equal; otherwise, false. Two tokens are equal if they are associated with the same <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> or if they were both constructed from public <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> constructors and their <xref href="System.Threading.CancellationToken.IsCancellationRequested" data-throw-if-not-resolved="false"></xref> values are equal.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationToken.GetHashCode
  commentId: M:System.Threading.CancellationToken.GetHashCode
  id: GetHashCode
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Threading.CancellationToken.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 412
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Serves as a hash function for a <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A hash code for the current <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> instance.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  commentId: M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  id: op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Equality(CancellationToken, CancellationToken)
  fullName: System.Threading.CancellationToken.Equality(System.Threading.CancellationToken, System.Threading.CancellationToken)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 431
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Determines whether two <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> instances are equal.
  syntax:
    content: public static bool operator ==(CancellationToken left, CancellationToken right)
    content.vb: Public Shared Operator =(left As CancellationToken, right As CancellationToken) As Boolean
    parameters:
    - id: left
      type: System.Threading.CancellationToken
      description: The first instance.
    - id: right
      type: System.Threading.CancellationToken
      description: The second instance.
    return:
      type: System.Boolean
      description: 'true if the instances are equal; otherwise, false. '
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: An associated <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  commentId: M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  id: op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Inequality(CancellationToken, CancellationToken)
  fullName: System.Threading.CancellationToken.Inequality(System.Threading.CancellationToken, System.Threading.CancellationToken)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 444
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Determines whether two <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> instances are not equal.
  syntax:
    content: public static bool operator !=(CancellationToken left, CancellationToken right)
    content.vb: Public Shared Operator <>(left As CancellationToken, right As CancellationToken) As Boolean
    parameters:
    - id: left
      type: System.Threading.CancellationToken
      description: The first instance.
    - id: right
      type: System.Threading.CancellationToken
      description: The second instance.
    return:
      type: System.Boolean
      description: 'true if the instances are not equal; otherwise, false. '
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: An associated <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> has been disposed.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.CancellationToken.Register(System.Action)
  commentId: M:System.Threading.CancellationToken.Register(System.Action)
  id: Register(System.Action)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Register(Action)
  fullName: System.Threading.CancellationToken.Register(System.Action)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Register
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 191
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Registers a delegate that will be called when this <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> is canceled.
  syntax:
    content: public CancellationTokenRegistration Register(Action callback)
    content.vb: Public Function Register(callback As Action) As CancellationTokenRegistration
    parameters:
    - id: callback
      type: System.Action
      description: The delegate to be executed when the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> is canceled.
    return:
      type: System.Threading.CancellationTokenRegistration
      description: The <xref href="System.Threading.CancellationTokenRegistration" data-throw-if-not-resolved="false"></xref> instance that can be used to deregister the callback.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The associated <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>callback</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationToken.Register(System.Action,System.Boolean)
  commentId: M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)
  id: Register(System.Action,System.Boolean)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Register(Action, Boolean)
  fullName: System.Threading.CancellationToken.Register(System.Action, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Register
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 226
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Registers a delegate that will be called when this <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> is canceled.
  syntax:
    content: public CancellationTokenRegistration Register(Action callback, bool useSynchronizationContext)
    content.vb: Public Function Register(callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration
    parameters:
    - id: callback
      type: System.Action
      description: The delegate to be executed when the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> is canceled.
    - id: useSynchronizationContext
      type: System.Boolean
      description: A Boolean value that indicates whether to capture the current <xref href="System.Threading.SynchronizationContext" data-throw-if-not-resolved="false"></xref> and use it when invoking the <em>callback</em>.
    return:
      type: System.Threading.CancellationTokenRegistration
      description: The <xref href="System.Threading.CancellationTokenRegistration" data-throw-if-not-resolved="false"></xref> instance that can be used to deregister the callback.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The associated <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>callback</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)
  commentId: M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)
  id: Register(System.Action{System.Object},System.Object)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Register(Action<Object>, Object)
  fullName: System.Threading.CancellationToken.Register(System.Action<System.Object>, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Register
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 259
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Registers a delegate that will be called when this <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> is canceled.
  syntax:
    content: public CancellationTokenRegistration Register(Action<object> callback, object state)
    content.vb: Public Function Register(callback As Action(Of Object), state As Object) As CancellationTokenRegistration
    parameters:
    - id: callback
      type: System.Action{System.Object}
      description: The delegate to be executed when the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> is canceled.
    - id: state
      type: System.Object
      description: The state to pass to the <em>callback</em> when the delegate is invoked. This may be null.
    return:
      type: System.Threading.CancellationTokenRegistration
      description: The <xref href="System.Threading.CancellationTokenRegistration" data-throw-if-not-resolved="false"></xref> instance that can be used to deregister the callback.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The associated <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>callback</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.CancellationToken.Register(System.Action(Of System.Object), System.Object)
  name.vb: Register(Action(Of Object), Object)
- uid: System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)
  commentId: M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)
  id: Register(System.Action{System.Object},System.Object,System.Boolean)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Register(Action<Object>, Object, Boolean)
  fullName: System.Threading.CancellationToken.Register(System.Action<System.Object>, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Register
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 297
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Registers a delegate that will be called when this <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> is canceled.
  syntax:
    content: public CancellationTokenRegistration Register(Action<object> callback, object state, bool useSynchronizationContext)
    content.vb: Public Function Register(callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration
    parameters:
    - id: callback
      type: System.Action{System.Object}
      description: The delegate to be executed when the <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> is canceled.
    - id: state
      type: System.Object
      description: The state to pass to the <em>callback</em> when the delegate is invoked. This may be null.
    - id: useSynchronizationContext
      type: System.Boolean
      description: A Boolean value that indicates whether to capture the current <xref href="System.Threading.SynchronizationContext" data-throw-if-not-resolved="false"></xref> and use it when invoking the <em>callback</em>.
    return:
      type: System.Threading.CancellationTokenRegistration
      description: The <xref href="System.Threading.CancellationTokenRegistration" data-throw-if-not-resolved="false"></xref> instance that can be used to deregister the callback.
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The associated <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> has been disposed.
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>callback</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.CancellationToken.Register(System.Action(Of System.Object), System.Object, System.Boolean)
  name.vb: Register(Action(Of Object), Object, Boolean)
- uid: System.Threading.CancellationToken.ThrowIfCancellationRequested
  commentId: M:System.Threading.CancellationToken.ThrowIfCancellationRequested
  id: ThrowIfCancellationRequested
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: ThrowIfCancellationRequested()
  fullName: System.Threading.CancellationToken.ThrowIfCancellationRequested()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ThrowIfCancellationRequested
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 463
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: Throws a <xref href="System.OperationCanceledException" data-throw-if-not-resolved="false"></xref> if this token has had cancellation requested.
  syntax:
    content: public void ThrowIfCancellationRequested()
    content.vb: Public Sub ThrowIfCancellationRequested
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The token has had cancellation requested.
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: The associated <xref href="System.Threading.CancellationTokenSource" data-throw-if-not-resolved="false"></xref> has been disposed.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Action
  isExternal: false
  name: Action
  fullName: System.Action
- uid: System.Threading.CancellationTokenRegistration
  parent: System.Threading
  isExternal: false
  name: CancellationTokenRegistration
  fullName: System.Threading.CancellationTokenRegistration
- uid: System.Action{System.Object}
  definition: System.Action`1
  name: Action<Object>
  fullName: System.Action<System.Object>
  fullname.vb: System.Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Action`1
  isExternal: false
  name: Action<>
  fullName: System.Action<>
  fullname.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  fullName: System.OperationCanceledException
