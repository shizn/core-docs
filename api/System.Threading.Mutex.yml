items:
- uid: System.Threading.Mutex
  commentId: T:System.Threading.Mutex
  id: Mutex
  parent: System.Threading
  children:
  - System.Threading.Mutex.#ctor
  - System.Threading.Mutex.#ctor(System.Boolean)
  - System.Threading.Mutex.#ctor(System.Boolean,System.String)
  - System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)
  - System.Threading.Mutex.OpenExisting(System.String)
  - System.Threading.Mutex.ReleaseMutex
  - System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)
  langs:
  - csharp
  - vb
  name: Mutex
  fullName: System.Threading.Mutex
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Mutex
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 32
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: 'A synchronization primitive that can also be used for interprocess synchronization. '
  syntax:
    content: 'public sealed class Mutex : WaitHandle'
    content.vb: >-
      Public NotInheritable Class Mutex
          Inherits WaitHandle
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Threading.Mutex.#ctor
  commentId: M:System.Threading.Mutex.#ctor
  id: '#ctor'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: Mutex()
  fullName: System.Threading.Mutex.Mutex()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 251
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref> class with default properties.
  syntax:
    content: public Mutex()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Mutex.#ctor(System.Boolean)
  commentId: M:System.Threading.Mutex.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: Mutex(Boolean)
  fullName: System.Threading.Mutex.Mutex(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 245
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.
  syntax:
    content: public Mutex(bool initiallyOwned)
    content.vb: Public Sub New(initiallyOwned As Boolean)
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: 'true to give the calling thread initial ownership of the mutex; otherwise, false. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String)
  commentId: M:System.Threading.Mutex.#ctor(System.Boolean,System.String)
  id: '#ctor(System.Boolean,System.String)'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: Mutex(Boolean, String)
  fullName: System.Threading.Mutex.Mutex(System.Boolean, System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 240
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.
  syntax:
    content: public Mutex(bool initiallyOwned, string name)
    content.vb: Public Sub New(initiallyOwned As Boolean, name As String)
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: 'true to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, false. '
    - id: name
      type: System.String
      description: 'The name of the <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref>. If the value is null, the <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref> is unnamed. '
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The named mutex exists and has access control security, but the user does not have <xref href="System.Security.AccessControl.MutexRights.FullControl" data-throw-if-not-resolved="false"></xref>.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: A Win32 error occurred.
  - type: System.Threading.WaitHandleCannotBeOpenedException
    commentId: T:System.Threading.WaitHandleCannotBeOpenedException
    description: The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>name</em> is longer than 260 characters."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)
  commentId: M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)
  id: '#ctor(System.Boolean,System.String,System.Boolean@)'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: Mutex(Boolean, String, out Boolean)
  fullName: System.Threading.Mutex.Mutex(System.Boolean, System.String, out System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 43
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Initializes a new instance of the <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.
  syntax:
    content: public Mutex(bool initiallyOwned, string name, out bool createdNew)
    content.vb: Public Sub New(initiallyOwned As Boolean, name As String, ByRef createdNew As Boolean)
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: 'true to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, false. '
    - id: name
      type: System.String
      description: 'The name of the <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref>. If the value is null, the <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref> is unnamed. '
    - id: createdNew
      type: System.Boolean
      description: 'When this method returns, contains a Boolean that is true if a local mutex was created (that is, if <em>name</em> is null or an empty string) or if the specified named system mutex was created; false if the specified named system mutex already existed. This parameter is passed uninitialized. '
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The named mutex exists and has access control security, but the user does not have <xref href="System.Security.AccessControl.MutexRights.FullControl" data-throw-if-not-resolved="false"></xref>.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: A Win32 error occurred.
  - type: System.Threading.WaitHandleCannotBeOpenedException
    commentId: T:System.Threading.WaitHandleCannotBeOpenedException
    description: The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>name</em> is longer than 260 characters."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Mutex.Mutex(System.Boolean, System.String, ByRef System.Boolean)
  name.vb: Mutex(Boolean, String, ByRef Boolean)
- uid: System.Threading.Mutex.OpenExisting(System.String)
  commentId: M:System.Threading.Mutex.OpenExisting(System.String)
  id: OpenExisting(System.String)
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: OpenExisting(String)
  fullName: System.Threading.Mutex.OpenExisting(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OpenExisting
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 265
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Opens the specified named mutex, if it already exists.
  syntax:
    content: public static Mutex OpenExisting(string name)
    content.vb: Public Shared Function OpenExisting(name As String) As Mutex
    parameters:
    - id: name
      type: System.String
      description: The name of the system mutex to open.
    return:
      type: System.Threading.Mutex
      description: An object that represents the named system mutex.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>name</em> is an empty string.-or-<em>name</em> is longer than 260 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null."
  - type: System.Threading.WaitHandleCannotBeOpenedException
    commentId: T:System.Threading.WaitHandleCannotBeOpenedException
    description: The named mutex does not exist.
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: A Win32 error occurred.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The named mutex exists, but the user does not have the security access required to use it.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Mutex.ReleaseMutex
  commentId: M:System.Threading.Mutex.ReleaseMutex
  id: ReleaseMutex
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: ReleaseMutex()
  fullName: System.Threading.Mutex.ReleaseMutex()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReleaseMutex
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 381
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Releases the <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref> once.
  syntax:
    content: public void ReleaseMutex()
    content.vb: Public Sub ReleaseMutex
  exceptions:
  - type: System.ApplicationException
    commentId: T:System.ApplicationException
    description: 'The calling thread does not own the mutex. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)
  commentId: M:System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)
  id: TryOpenExisting(System.String,System.Threading.Mutex@)
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: TryOpenExisting(String, out Mutex)
  fullName: System.Threading.Mutex.TryOpenExisting(System.String, out System.Threading.Mutex)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryOpenExisting
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 302
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.
  syntax:
    content: public static bool TryOpenExisting(string name, out Mutex result)
    content.vb: Public Shared Function TryOpenExisting(name As String, ByRef result As Mutex) As Boolean
    parameters:
    - id: name
      type: System.String
      description: The name of the system mutex to open.
    - id: result
      type: System.Threading.Mutex
      description: When this method returns, contains a <xref href="System.Threading.Mutex" data-throw-if-not-resolved="false"></xref> object that represents the named mutex if the call succeeded, or null if the call failed. This parameter is treated as uninitialized.
    return:
      type: System.Boolean
      description: true if the named mutex was opened successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>name</em> is an empty string.-or-<em>name</em> is longer than 260 characters."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>name</em> is null."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: A Win32 error occurred.
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: The named mutex exists, but the user does not have the security access required to use it.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Mutex.TryOpenExisting(System.String, ByRef System.Threading.Mutex)
  name.vb: TryOpenExisting(String, ByRef Mutex)
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Threading.Mutex
  parent: System.Threading
  isExternal: false
  name: Mutex
  fullName: System.Threading.Mutex
- uid: System.UnauthorizedAccessException
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
- uid: System.Threading.WaitHandleCannotBeOpenedException
  isExternal: false
  name: WaitHandleCannotBeOpenedException
  fullName: System.Threading.WaitHandleCannotBeOpenedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ApplicationException
