items:
- uid: System.Collections.Specialized.HybridDictionary
  commentId: T:System.Collections.Specialized.HybridDictionary
  id: HybridDictionary
  parent: System.Collections.Specialized
  children:
  - System.Collections.Specialized.HybridDictionary.#ctor
  - System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
  - System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
  - System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
  - System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  - System.Collections.Specialized.HybridDictionary.Clear
  - System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  - System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.HybridDictionary.Count
  - System.Collections.Specialized.HybridDictionary.GetEnumerator
  - System.Collections.Specialized.HybridDictionary.IsFixedSize
  - System.Collections.Specialized.HybridDictionary.IsReadOnly
  - System.Collections.Specialized.HybridDictionary.IsSynchronized
  - System.Collections.Specialized.HybridDictionary.Item(System.Object)
  - System.Collections.Specialized.HybridDictionary.Keys
  - System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  - System.Collections.Specialized.HybridDictionary.SyncRoot
  - System.Collections.Specialized.HybridDictionary.Values
  langs:
  - csharp
  - vb
  name: HybridDictionary
  fullName: System.Collections.Specialized.HybridDictionary
  type: Class
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HybridDictionary
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 16
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Implements IDictionary by using a <xref href="System.Collections.Specialized.ListDictionary" data-throw-if-not-resolved="false"></xref> while the collection is small, and then switching to a <xref href="System.Collections.Hashtable" data-throw-if-not-resolved="false"></xref> when the collection gets large.
  syntax:
    content: 'public class HybridDictionary : ICollection, IDictionary, IEnumerable'
    content.vb: >-
      Public Class HybridDictionary
          Inherits ICollection
          Implements IDictionary, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.Collections.IEnumerable
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.Specialized.HybridDictionary.#ctor
  commentId: M:System.Collections.Specialized.HybridDictionary.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: HybridDictionary()
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 29
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Creates an empty case-sensitive <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public HybridDictionary()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
  commentId: M:System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: HybridDictionary(Boolean)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 37
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Creates an empty <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> with the specified case sensitivity.
  syntax:
    content: public HybridDictionary(bool caseInsensitive)
    content.vb: Public Sub New(caseInsensitive As Boolean)
    parameters:
    - id: caseInsensitive
      type: System.Boolean
      description: 'A Boolean that denotes whether the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> is case-insensitive. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
  commentId: M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: HybridDictionary(Int32)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 33
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Creates a case-sensitive <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> with the specified initial size.
  syntax:
    content: public HybridDictionary(int initialSize)
    content.vb: Public Sub New(initialSize As Integer)
    parameters:
    - id: initialSize
      type: System.Int32
      description: 'The approximate number of entries that the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> can initially contain. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
  commentId: M:System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: HybridDictionary(Int32, Boolean)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 42
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Creates a <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> with the specified initial size and case sensitivity.
  syntax:
    content: public HybridDictionary(int initialSize, bool caseInsensitive)
    content.vb: Public Sub New(initialSize As Integer, caseInsensitive As Boolean)
    parameters:
    - id: initialSize
      type: System.Int32
      description: 'The approximate number of entries that the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> can initially contain. '
    - id: caseInsensitive
      type: System.Boolean
      description: 'A Boolean that denotes whether the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> is case-insensitive. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.HybridDictionary.Count
  commentId: P:System.Collections.Specialized.HybridDictionary.Count
  id: Count
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Specialized.HybridDictionary.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 148
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Gets the number of key/value pairs contained in the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of key/value pairs contained in the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.Retrieving the value of this property is an O(1) operation.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.HybridDictionary.IsFixedSize
  commentId: P:System.Collections.Specialized.HybridDictionary.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: IsFixedSize
  fullName: System.Collections.Specialized.HybridDictionary.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFixedSize
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 191
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Gets a value indicating whether the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> has a fixed size.
  syntax:
    content: public bool IsFixedSize { get; }
    content.vb: Public ReadOnly Property IsFixedSize As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: This property always returns false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.HybridDictionary.IsReadOnly
  commentId: P:System.Collections.Specialized.HybridDictionary.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Collections.Specialized.HybridDictionary.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 183
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Gets a value indicating whether the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> is read-only.
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: This property always returns false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.HybridDictionary.IsSynchronized
  commentId: P:System.Collections.Specialized.HybridDictionary.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: IsSynchronized
  fullName: System.Collections.Specialized.HybridDictionary.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSynchronized
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 199
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Gets a value indicating whether the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> is synchronized (thread safe).
  syntax:
    content: public bool IsSynchronized { get; }
    content.vb: Public ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: This property always returns false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.HybridDictionary.Item(System.Object)
  commentId: P:System.Collections.Specialized.HybridDictionary.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: Item[Object]
  fullName: System.Collections.Specialized.HybridDictionary.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 58
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Gets or sets the value associated with the specified key.
  syntax:
    content: public object this[object key] { get; set; }
    content.vb: Public Property Item(key As Object) As Object
    parameters:
    - id: key
      type: System.Object
      description: 'The key whose value to get or set. '
    return:
      type: System.Object
      description: The value associated with the specified key. If the specified key is not found, attempting to get it returns null, and attempting to set it creates a new entry using the specified key.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>key</em> is null. "
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Specialized.HybridDictionary.Item(System.Object)
  name.vb: Item(Object)
- uid: System.Collections.Specialized.HybridDictionary.Keys
  commentId: P:System.Collections.Specialized.HybridDictionary.Keys
  id: Keys
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: Keys
  fullName: System.Collections.Specialized.HybridDictionary.Keys
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Keys
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 168
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Gets an <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref> containing the keys in the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public ICollection Keys { get; }
    content.vb: Public ReadOnly Property Keys As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: An <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref> containing the keys in the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.HybridDictionary.SyncRoot
  commentId: P:System.Collections.Specialized.HybridDictionary.SyncRoot
  id: SyncRoot
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: SyncRoot
  fullName: System.Collections.Specialized.HybridDictionary.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SyncRoot
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 207
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Gets an object that can be used to synchronize access to the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public object SyncRoot { get; }
    content.vb: Public ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: System.Object
      description: An object that can be used to synchronize access to the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.HybridDictionary.Values
  commentId: P:System.Collections.Specialized.HybridDictionary.Values
  id: Values
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: Values
  fullName: System.Collections.Specialized.HybridDictionary.Values
  type: Property
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Values
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 215
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Gets an <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref> containing the values in the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public ICollection Values { get; }
    content.vb: Public ReadOnly Property Values As ICollection
    parameters: []
    return:
      type: System.Collections.ICollection
      description: An <xref href="System.Collections.ICollection" data-throw-if-not-resolved="false"></xref> containing the values in the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  commentId: M:System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: Add(Object, Object)
  fullName: System.Collections.Specialized.HybridDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 230
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Adds an entry with the specified key and value into the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Add(object key, object value)
    content.vb: Public Sub Add(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
      description: 'The key of the entry to add. '
    - id: value
      type: System.Object
      description: 'The value of the entry to add. The value can be null. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>key</em> is null. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'An entry with the same key already exists in the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.HybridDictionary.Clear
  commentId: M:System.Collections.Specialized.HybridDictionary.Clear
  id: Clear
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Specialized.HybridDictionary.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 255
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Removes all entries from the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  commentId: M:System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: Contains(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 272
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Determines whether the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> contains a specific key.
  syntax:
    content: public bool Contains(object key)
    content.vb: Public Function Contains(key As Object) As Boolean
    parameters:
    - id: key
      type: System.Object
      description: 'The key to locate in the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>. '
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> contains an entry with the specified key; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>key</em> is null. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Collections.Specialized.HybridDictionary.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/ref/System.Collections.Specialized.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.Specialized/ref/System.Collections.Specialized.cs
    startLine: 57
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Copies the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> entries to a one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> instance at the specified index.
  syntax:
    content: public void CopyTo(Array array, int index)
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
      description: 'The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that is the destination of the <xref href="System.Collections.DictionaryEntry" data-throw-if-not-resolved="false"></xref> objects copied from <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>. The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> must have zero-based indexing. '
    - id: index
      type: System.Int32
      description: 'The zero-based index in <em>array</em> at which copying begins. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null. "
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than zero. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>array</em> is multidimensional.-or- The number of elements in the source <xref href=\"System.Collections.Specialized.HybridDictionary\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. "
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: 'The type of the source <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref> cannot be cast automatically to the type of the destination <em>array</em>. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.HybridDictionary.GetEnumerator
  commentId: M:System.Collections.Specialized.HybridDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Specialized.HybridDictionary.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 302
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Returns an <xref href="System.Collections.IDictionaryEnumerator" data-throw-if-not-resolved="false"></xref> that iterates through the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public IDictionaryEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IDictionaryEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
      description: An <xref href="System.Collections.IDictionaryEnumerator" data-throw-if-not-resolved="false"></xref> for the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  commentId: M:System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  - vb
  name: Remove(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Collections.Specialized/src/System/Collections/Specialized/HybridDictionary.cs
    startLine: 328
  assemblies:
  - System.Collections.Specialized
  namespace: System.Collections.Specialized
  summary: Removes the entry with the specified key from the <xref href="System.Collections.Specialized.HybridDictionary" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Remove(object key)
    content.vb: Public Sub Remove(key As Object)
    parameters:
    - id: key
      type: System.Object
      description: 'The key of the entry to remove. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>key</em> is null. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Collections.Specialized
  isExternal: false
  name: System.Collections.Specialized
  fullName: System.Collections.Specialized
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
