items:
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  id: FieldInfo
  parent: System.Reflection
  children:
  - System.Reflection.FieldInfo.Attributes
  - System.Reflection.FieldInfo.Equals(System.Object)
  - System.Reflection.FieldInfo.FieldType
  - System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  - System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.FieldInfo.GetHashCode
  - System.Reflection.FieldInfo.GetValue(System.Object)
  - System.Reflection.FieldInfo.IsAssembly
  - System.Reflection.FieldInfo.IsFamily
  - System.Reflection.FieldInfo.IsFamilyAndAssembly
  - System.Reflection.FieldInfo.IsFamilyOrAssembly
  - System.Reflection.FieldInfo.IsInitOnly
  - System.Reflection.FieldInfo.IsLiteral
  - System.Reflection.FieldInfo.IsPrivate
  - System.Reflection.FieldInfo.IsPublic
  - System.Reflection.FieldInfo.IsSpecialName
  - System.Reflection.FieldInfo.IsStatic
  - System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  langs:
  - csharp
  - vb
  name: FieldInfo
  fullName: System.Reflection.FieldInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FieldInfo
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 25
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: 'Discovers the attributes of a field and provides access to field metadata. '
  syntax:
    content: 'public abstract class FieldInfo : MemberInfo'
    content.vb: >-
      Public MustInherit Class FieldInfo
          Inherits MemberInfo
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  inheritedMembers:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.FieldInfo.Attributes
  commentId: P:System.Reflection.FieldInfo.Attributes
  id: Attributes
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: Attributes
  fullName: System.Reflection.FieldInfo.Attributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Attributes
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 133
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the attributes associated with this field.
  syntax:
    content: public abstract FieldAttributes Attributes { get; }
    content.vb: Public MustOverride ReadOnly Property Attributes As FieldAttributes
    parameters: []
    return:
      type: System.Reflection.FieldAttributes
      description: The FieldAttributes for this field.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.FieldInfo.FieldType
  commentId: P:System.Reflection.FieldInfo.FieldType
  id: FieldType
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: FieldType
  fullName: System.Reflection.FieldInfo.FieldType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FieldType
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 125
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets the type of this field object.
  syntax:
    content: public abstract Type FieldType { get; }
    content.vb: Public MustOverride ReadOnly Property FieldType As Type
    parameters: []
    return:
      type: System.Type
      description: The type of this field object.
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsAssembly
  commentId: P:System.Reflection.FieldInfo.IsAssembly
  id: IsAssembly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsAssembly
  fullName: System.Reflection.FieldInfo.IsAssembly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsAssembly
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 156
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the potential visibility of this field is described by <xref href="System.Reflection.FieldAttributes.Assembly" data-throw-if-not-resolved="false"></xref>; that is, the field is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.
  syntax:
    content: public bool IsAssembly { get; }
    content.vb: Public ReadOnly Property IsAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the visibility of this field is exactly described by <xref href="System.Reflection.FieldAttributes.Assembly" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsFamily
  commentId: P:System.Reflection.FieldInfo.IsFamily
  id: IsFamily
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsFamily
  fullName: System.Reflection.FieldInfo.IsFamily
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFamily
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 154
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the visibility of this field is described by <xref href="System.Reflection.FieldAttributes.Family" data-throw-if-not-resolved="false"></xref>; that is, the field is visible only within its class and derived classes.
  syntax:
    content: public bool IsFamily { get; }
    content.vb: Public ReadOnly Property IsFamily As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if access to this field is exactly described by <xref href="System.Reflection.FieldAttributes.Family" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsFamilyAndAssembly
  commentId: P:System.Reflection.FieldInfo.IsFamilyAndAssembly
  id: IsFamilyAndAssembly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsFamilyAndAssembly
  fullName: System.Reflection.FieldInfo.IsFamilyAndAssembly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFamilyAndAssembly
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 158
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the visibility of this field is described by <xref href="System.Reflection.FieldAttributes.FamANDAssem" data-throw-if-not-resolved="false"></xref>; that is, the field can be accessed from derived classes, but only if they are in the same assembly.
  syntax:
    content: public bool IsFamilyAndAssembly { get; }
    content.vb: Public ReadOnly Property IsFamilyAndAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if access to this field is exactly described by <xref href="System.Reflection.FieldAttributes.FamANDAssem" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsFamilyOrAssembly
  commentId: P:System.Reflection.FieldInfo.IsFamilyOrAssembly
  id: IsFamilyOrAssembly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsFamilyOrAssembly
  fullName: System.Reflection.FieldInfo.IsFamilyOrAssembly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFamilyOrAssembly
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 160
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the potential visibility of this field is described by <xref href="System.Reflection.FieldAttributes.FamORAssem" data-throw-if-not-resolved="false"></xref>; that is, the field can be accessed by derived classes wherever they are, and by classes in the same assembly.
  syntax:
    content: public bool IsFamilyOrAssembly { get; }
    content.vb: Public ReadOnly Property IsFamilyOrAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if access to this field is exactly described by <xref href="System.Reflection.FieldAttributes.FamORAssem" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsInitOnly
  commentId: P:System.Reflection.FieldInfo.IsInitOnly
  id: IsInitOnly
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsInitOnly
  fullName: System.Reflection.FieldInfo.IsInitOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsInitOnly
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 164
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the field can only be set in the body of the constructor.
  syntax:
    content: public bool IsInitOnly { get; }
    content.vb: Public ReadOnly Property IsInitOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the field has the InitOnly attribute set; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsLiteral
  commentId: P:System.Reflection.FieldInfo.IsLiteral
  id: IsLiteral
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsLiteral
  fullName: System.Reflection.FieldInfo.IsLiteral
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsLiteral
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 166
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the value is written at compile time and cannot be changed.
  syntax:
    content: public bool IsLiteral { get; }
    content.vb: Public ReadOnly Property IsLiteral As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the field has the Literal attribute set; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsPrivate
  commentId: P:System.Reflection.FieldInfo.IsPrivate
  id: IsPrivate
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsPrivate
  fullName: System.Reflection.FieldInfo.IsPrivate
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsPrivate
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 152
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the field is private.
  syntax:
    content: public bool IsPrivate { get; }
    content.vb: Public ReadOnly Property IsPrivate As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the field is private; otherwise; false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsPublic
  commentId: P:System.Reflection.FieldInfo.IsPublic
  id: IsPublic
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsPublic
  fullName: System.Reflection.FieldInfo.IsPublic
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsPublic
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 150
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the field is public.
  syntax:
    content: public bool IsPublic { get; }
    content.vb: Public ReadOnly Property IsPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this field is public; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsSpecialName
  commentId: P:System.Reflection.FieldInfo.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsSpecialName
  fullName: System.Reflection.FieldInfo.IsSpecialName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSpecialName
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 170
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the corresponding SpecialName attribute is set in the <xref href="System.Reflection.FieldAttributes" data-throw-if-not-resolved="false"></xref> enumerator.
  syntax:
    content: public bool IsSpecialName { get; }
    content.vb: Public ReadOnly Property IsSpecialName As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the SpecialName attribute is set in <xref href="System.Reflection.FieldAttributes" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.IsStatic
  commentId: P:System.Reflection.FieldInfo.IsStatic
  id: IsStatic
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: IsStatic
  fullName: System.Reflection.FieldInfo.IsStatic
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsStatic
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 162
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a value indicating whether the field is static.
  syntax:
    content: public bool IsStatic { get; }
    content.vb: Public ReadOnly Property IsStatic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if this field is static; otherwise, false.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.FieldInfo.Equals(System.Object)
  commentId: M:System.Reflection.FieldInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Reflection.FieldInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 85
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: An object to compare with this instance, or null.
    return:
      type: System.Boolean
      description: true if <em>obj</em> equals the type and value of this instance; otherwise, false.
  overridden: System.Reflection.MemberInfo.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  commentId: M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  id: GetFieldFromHandle(System.RuntimeFieldHandle)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetFieldFromHandle(RuntimeFieldHandle)
  fullName: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetFieldFromHandle
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 35
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a <xref href="System.Reflection.FieldInfo" data-throw-if-not-resolved="false"></xref> for the field represented by the specified handle.
  syntax:
    content: public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle)
    content.vb: Public Shared Function GetFieldFromHandle(handle As RuntimeFieldHandle) As FieldInfo
    parameters:
    - id: handle
      type: System.RuntimeFieldHandle
      description: 'A <xref href="System.RuntimeFieldHandle" data-throw-if-not-resolved="false"></xref> structure that contains the handle to the internal metadata representation of a field. '
    return:
      type: System.Reflection.FieldInfo
      description: A <xref href="System.Reflection.FieldInfo" data-throw-if-not-resolved="false"></xref> object representing the field specified by <em>handle</em>.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>handle</em> is invalid."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  commentId: M:System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetFieldFromHandle(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetFieldFromHandle(RuntimeFieldHandle, RuntimeTypeHandle)
  fullName: System.Reflection.FieldInfo.GetFieldFromHandle(System.RuntimeFieldHandle, System.RuntimeTypeHandle)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetFieldFromHandle
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 51
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Gets a <xref href="System.Reflection.FieldInfo" data-throw-if-not-resolved="false"></xref> for the field represented by the specified handle, for the specified generic type.
  syntax:
    content: public static FieldInfo GetFieldFromHandle(RuntimeFieldHandle handle, RuntimeTypeHandle declaringType)
    content.vb: Public Shared Function GetFieldFromHandle(handle As RuntimeFieldHandle, declaringType As RuntimeTypeHandle) As FieldInfo
    parameters:
    - id: handle
      type: System.RuntimeFieldHandle
      description: A <xref href="System.RuntimeFieldHandle" data-throw-if-not-resolved="false"></xref> structure that contains the handle to the internal metadata representation of a field.
    - id: declaringType
      type: System.RuntimeTypeHandle
      description: A <xref href="System.RuntimeTypeHandle" data-throw-if-not-resolved="false"></xref> structure that contains the handle to the generic type that defines the field.
    return:
      type: System.Reflection.FieldInfo
      description: A <xref href="System.Reflection.FieldInfo" data-throw-if-not-resolved="false"></xref> object representing the field specified by <em>handle</em>, in the generic type specified by <em>declaringType</em>.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>handle</em> is invalid.-or-<em>declaringType</em> is not compatible with <em>handle</em>. For example, <em>declaringType</em> is the runtime type handle of the generic type definition, and <em>handle</em> comes from a constructed type. See Remarks."
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.FieldInfo.GetHashCode
  commentId: M:System.Reflection.FieldInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Reflection.FieldInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 90
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overridden: System.Reflection.MemberInfo.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.FieldInfo.GetValue(System.Object)
  commentId: M:System.Reflection.FieldInfo.GetValue(System.Object)
  id: GetValue(System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: GetValue(Object)
  fullName: System.Reflection.FieldInfo.GetValue(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 127
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: When overridden in a derived class, returns the value of a field supported by a given object.
  syntax:
    content: public abstract object GetValue(object obj)
    content.vb: Public MustOverride Function GetValue(obj As Object) As Object
    parameters:
    - id: obj
      type: System.Object
      description: 'The object whose field value will be returned. '
    return:
      type: System.Object
      description: An object containing the value of the field reflected by this instance.
  exceptions:
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> instead.The field is non-static and <em>obj</em> is null. '
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'A field is marked literal, but the field does not have one of the accepted literal types. '
  - type: System.FieldAccessException
    commentId: T:System.FieldAccessException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.MemberAccessException" data-throw-if-not-resolved="false"></xref>, instead.The caller does not have permission to access this field. '
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The method is neither declared nor inherited by the class of <em>obj</em>. '
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  commentId: M:System.Reflection.FieldInfo.SetValue(System.Object,System.Object)
  id: SetValue(System.Object,System.Object)
  parent: System.Reflection.FieldInfo
  langs:
  - csharp
  - vb
  name: SetValue(Object, Object)
  fullName: System.Reflection.FieldInfo.SetValue(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/FieldInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetValue
    path: src/mscorlib/src/System/Reflection/FieldInfo.cs
    startLine: 137
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: Sets the value of the field supported by the given object.
  syntax:
    content: public virtual void SetValue(object obj, object value)
    content.vb: Public Overridable Sub SetValue(obj As Object, value As Object)
    parameters:
    - id: obj
      type: System.Object
      description: 'The object whose field value will be set. '
    - id: value
      type: System.Object
      description: 'The value to assign to the field. '
  exceptions:
  - type: System.FieldAccessException
    commentId: T:System.FieldAccessException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch the base class exception, <xref href="System.MemberAccessException" data-throw-if-not-resolved="false"></xref>, instead.The caller does not have permission to access this field. '
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: 'In the .NET for Windows Store apps or the Portable Class Library, catch <xref href="System.Exception" data-throw-if-not-resolved="false"></xref> instead.The <em>obj</em> parameter is null and the field is an instance field. '
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The field does not exist on the object.-or- The <em>value</em> parameter cannot be converted and stored in the field. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: false
  name: FieldAttributes
  fullName: System.Reflection.FieldAttributes
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: false
  name: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.TargetException
  isExternal: false
  name: TargetException
  fullName: System.Reflection.TargetException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.FieldAccessException
  isExternal: false
  name: FieldAccessException
  fullName: System.FieldAccessException
