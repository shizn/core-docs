items:
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  id: List`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.List`1.#ctor
  - System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.List`1.#ctor(System.Int32)
  - System.Collections.Generic.List`1.Add(`0)
  - System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.List`1.AsReadOnly
  - System.Collections.Generic.List`1.BinarySearch(`0)
  - System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.Capacity
  - System.Collections.Generic.List`1.Clear
  - System.Collections.Generic.List`1.Contains(`0)
  - System.Collections.Generic.List`1.CopyTo(`0[])
  - System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Count
  - System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  - System.Collections.Generic.List`1.Find(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  - System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  - System.Collections.Generic.List`1.ForEach(System.Action{`0})
  - System.Collections.Generic.List`1.GetEnumerator
  - System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.IndexOf(`0)
  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  - System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Insert(System.Int32,`0)
  - System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  - System.Collections.Generic.List`1.Item(System.Int32)
  - System.Collections.Generic.List`1.LastIndexOf(`0)
  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  - System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Remove(`0)
  - System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  - System.Collections.Generic.List`1.RemoveAt(System.Int32)
  - System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Reverse
  - System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  - System.Collections.Generic.List`1.Sort
  - System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  - System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  - System.Collections.Generic.List`1.ToArray
  - System.Collections.Generic.List`1.TrimExcess
  - System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  langs:
  - csharp
  - vb
  name: List<T>
  fullName: System.Collections.Generic.List<T>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: List
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 30
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.To browse the .NET Framework source code for this type, see the Reference Source.
  syntax:
    content: 'public class List<T> : ICollection<T>, IEnumerable<T>, IList<T>, IReadOnlyCollection<T>, IReadOnlyList<T>, ICollection, IEnumerable, IList'
    content.vb: >-
      Public Class List(Of T)
          Inherits ICollection(Of T)
          Implements IEnumerable(Of T), IList(Of T), IReadOnlyCollection(Of T), IReadOnlyList(Of T), ICollection, IEnumerable, IList
    typeParameters:
    - id: T
      description: The type of elements in the list.
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.Generic.IList{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IReadOnlyList{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.Collections.IList
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
- uid: System.Collections.Generic.List`1.#ctor
  commentId: M:System.Collections.Generic.List`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: List()
  fullName: System.Collections.Generic.List<T>.List()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 50
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> class that is empty and has the default initial capacity.
  syntax:
    content: public List()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).List()
- uid: System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: List(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.List(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 72
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.
  syntax:
    content: public List(IEnumerable<T> collection)
    content.vb: Public Sub New(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection whose elements are copied to the new list.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>collection</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).List(System.Collections.Generic.IEnumerable(Of T))
  name.vb: List(IEnumerable(Of T))
- uid: System.Collections.Generic.List`1.#ctor(System.Int32)
  commentId: M:System.Collections.Generic.List`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: List(Int32)
  fullName: System.Collections.Generic.List<T>.List(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 58
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Initializes a new instance of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> class that is empty and has the specified initial capacity.
  syntax:
    content: public List(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: The number of elements that the new list can initially store.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>capacity</em> is less than 0. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).List(System.Int32)
- uid: System.Collections.Generic.List`1.Capacity
  commentId: P:System.Collections.Generic.List`1.Capacity
  id: Capacity
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Capacity
  fullName: System.Collections.Generic.List<T>.Capacity
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Capacity
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 108
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets or sets the total number of elements the internal data structure can hold without resizing.
  syntax:
    content: public int Capacity { get; set; }
    content.vb: Public Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of elements that the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> can contain before resizing is required.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<xref href=\"System.Collections.Generic.List`1.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set to a value that is less than <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>. "
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: There is not enough memory available on the system.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Capacity
- uid: System.Collections.Generic.List`1.Count
  commentId: P:System.Collections.Generic.List`1.Count
  id: Count
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.List<T>.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 135
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets the number of elements contained in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Generic.List(Of T).Count
- uid: System.Collections.Generic.List`1.Item(System.Int32)
  commentId: P:System.Collections.Generic.List`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: System.Collections.Generic.List<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: this[]
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 172
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Gets or sets the element at the specified index.
  syntax:
    content: public T this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As T
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to get or set.
    return:
      type: '{T}'
      description: The element at the specified index.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than 0.-or-<em>index</em> is equal to or greater than <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.Generic.List`1.Add(`0)
  commentId: M:System.Collections.Generic.List`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Add(T)
  fullName: System.Collections.Generic.List<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Add
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 218
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Adds an object to the end of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Add(T item)
    content.vb: Public Sub Add(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: The object to be added to the end of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Add(T)
- uid: System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})
  id: AddRange(System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: AddRange(IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.AddRange(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddRange
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 243
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Adds the elements of the specified collection to the end of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void AddRange(IEnumerable<T> collection)
    content.vb: Public Sub AddRange(collection As IEnumerable(Of T))
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection whose elements should be added to the end of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The collection itself cannot be null, but it can contain elements that are null, if type <em>T</em> is a reference type.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>collection</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).AddRange(System.Collections.Generic.IEnumerable(Of T))
  name.vb: AddRange(IEnumerable(Of T))
- uid: System.Collections.Generic.List`1.AsReadOnly
  commentId: M:System.Collections.Generic.List`1.AsReadOnly
  id: AsReadOnly
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: AsReadOnly()
  fullName: System.Collections.Generic.List<T>.AsReadOnly()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AsReadOnly
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 249
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Returns a read-only <xref href="System.Collections.Generic.IList`1" data-throw-if-not-resolved="false"></xref> wrapper for the current collection.
  syntax:
    content: public ObjectModel.ReadOnlyCollection<T> AsReadOnly()
    content.vb: Public Function AsReadOnly As ObjectModel.ReadOnlyCollection(Of T)
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{{T}}
      description: A <xref href="System.Collections.ObjectModel.ReadOnlyCollection`1" data-throw-if-not-resolved="false"></xref> that acts as a read-only wrapper around the current <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).AsReadOnly()
- uid: System.Collections.Generic.List`1.BinarySearch(`0)
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0)
  id: BinarySearch(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: BinarySearch(T)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 287
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches the entire sorted <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> for an element using the default comparer and returns the zero-based index of the element.
  syntax:
    content: public int BinarySearch(T item)
    content.vb: Public Function BinarySearch(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate. The value can be null for reference types.
    return:
      type: System.Int32
      description: The zero-based index of <em>item</em> in the sorted <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>, if <em>item</em> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <em>item</em> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.List`1.Count" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The default comparer <xref href="System.Collections.Generic.Comparer`1.Default" data-throw-if-not-resolved="false"></xref> cannot find an implementation of the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface or the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> interface for type <em>T</em>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T)
- uid: System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  id: BinarySearch(`0,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: BinarySearch(T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 293
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches the entire sorted <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> for an element using the specified comparer and returns the zero-based index of the element.
  syntax:
    content: public int BinarySearch(T item, IComparer<T> comparer)
    content.vb: Public Function BinarySearch(item As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate. The value can be null for reference types.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements.-or-null to use the default comparer <xref href="System.Collections.Generic.Comparer`1.Default" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Int32
      description: The zero-based index of <em>item</em> in the sorted <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>, if <em>item</em> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <em>item</em> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.List`1.Count" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface for type <em>T</em>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(T, IComparer(Of T))
- uid: System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  id: BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: BinarySearch(Int32, Int32, T, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 274
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches a range of elements in the sorted <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> for an element using the specified comparer and returns the zero-based index of the element.
  syntax:
    content: public int BinarySearch(int index, int count, T item, IComparer<T> comparer)
    content.vb: Public Function BinarySearch(index As Integer, count As Integer, item As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based starting index of the range to search.
    - id: count
      type: System.Int32
      description: The length of the range to search.
    - id: item
      type: '{T}'
      description: The object to locate. The value can be null for reference types.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements, or null to use the default comparer <xref href="System.Collections.Generic.Comparer`1.Default" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Int32
      description: The zero-based index of <em>item</em> in the sorted <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>, if <em>item</em> is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <em>item</em> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.List`1.Count" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than 0.-or-<em>count</em> is less than 0. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>count</em> do not denote a valid range in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> cannot find an implementation of the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface for type <em>T</em>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).BinarySearch(System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Int32, Int32, T, IComparer(Of T))
- uid: System.Collections.Generic.List`1.Clear
  commentId: M:System.Collections.Generic.List`1.Clear
  id: Clear
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Generic.List<T>.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clear
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 301
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes all elements from the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Clear()
- uid: System.Collections.Generic.List`1.Contains(`0)
  commentId: M:System.Collections.Generic.List`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  fullName: System.Collections.Generic.List<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Contains
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 314
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether an element is in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool Contains(T item)
    content.vb: Public Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
    return:
      type: System.Boolean
      description: true if <em>item</em> is found in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Contains(T)
- uid: System.Collections.Generic.List`1.CopyTo(`0[])
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[])
  fullName: System.Collections.Generic.List<T>.CopyTo(T[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 356
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copies the entire <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> to a compatible one-dimensional array, starting at the beginning of the target array.
  syntax:
    content: public void CopyTo(T[] array)
    content.vb: Public Sub CopyTo(array As T())
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that is the destination of the elements copied from <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> must have zero-based indexing.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> is greater than the number of elements that the destination <em>array</em> can contain.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T())
  name.vb: CopyTo(T())
- uid: System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 392
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copies the entire <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> to a compatible one-dimensional array, starting at the specified index of the target array.
  syntax:
    content: public void CopyTo(T[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that is the destination of the elements copied from <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <em>array</em> at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>arrayIndex</em> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,`0[],System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: CopyTo(Int32, T[], Int32, Int32)
  fullName: System.Collections.Generic.List<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 382
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copies a range of elements from the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> to a compatible one-dimensional array, starting at the specified index of the target array.
  syntax:
    content: public void CopyTo(int index, T[] array, int arrayIndex, int count)
    content.vb: Public Sub CopyTo(index As Integer, array As T(), arrayIndex As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index in the source <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> at which copying begins.
    - id: array
      type: '{T}[]'
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that is the destination of the elements copied from <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <em>array</em> at which copying begins.
    - id: count
      type: System.Int32
      description: The number of elements to copy.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null. "
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than 0.-or-<em>arrayIndex</em> is less than 0.-or-<em>count</em> is less than 0. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> is equal to or greater than the <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref> of the source <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.-or-The number of elements from <em>index</em> to the end of the source <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, T(), Int32, Int32)
- uid: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  id: Exists(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Exists(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Exists(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exists
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 412
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> contains elements that match the conditions defined by the specified predicate.
  syntax:
    content: public bool Exists(Predicate<T> match)
    content.vb: Public Function Exists(match As Predicate(Of T)) As Boolean
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the elements to search for.
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> contains one or more elements that match the conditions defined by the specified predicate; otherwise, false.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>match</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Exists(System.Predicate(Of T))
  name.vb: Exists(Predicate(Of T))
- uid: System.Collections.Generic.List`1.Find(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.Find(System.Predicate{`0})
  id: Find(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Find(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.Find(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Find
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 416
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public T Find(Predicate<T> match)
    content.vb: Public Function Find(match As Predicate(Of T)) As T
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: '{T}'
      description: The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <em>T</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>match</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Find(System.Predicate(Of T))
  name.vb: Find(Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})
  id: FindAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindAll(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindAll
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 430
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Retrieves all the elements that match the conditions defined by the specified predicate.
  syntax:
    content: public List<T> FindAll(Predicate<T> match)
    content.vb: Public Function FindAll(match As Predicate(Of T)) As List(Of T)
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the elements to search for.
    return:
      type: System.Collections.Generic.List`1
      description: A <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>match</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindAll(System.Predicate(Of T))
  name.vb: FindAll(Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  id: FindIndex(System.Int32,System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindIndex
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 457
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> that starts at the specified index and contains the specified number of elements.
  syntax:
    content: public int FindIndex(int startIndex, int count, Predicate<T> match)
    content.vb: Public Function FindIndex(startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>match</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>count</em> is less than 0.-or-<em>startIndex</em> and <em>count</em> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Int32, Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})
  id: FindIndex(System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindIndex
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 451
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> that extends from the specified index to the last element.
  syntax:
    content: public int FindIndex(int startIndex, Predicate<T> match)
    content.vb: Public Function FindIndex(startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>match</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Int32, Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})
  id: FindIndex(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindIndex(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindIndex
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 445
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int FindIndex(Predicate<T> match)
    content.vb: Public Function FindIndex(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>match</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindIndex(System.Predicate(Of T))
  name.vb: FindIndex(Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})
  id: FindLast(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindLast(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLast(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindLast
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 480
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public T FindLast(Predicate<T> match)
    content.vb: Public Function FindLast(match As Predicate(Of T)) As T
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: '{T}'
      description: The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <em>T</em>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>match</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindLast(System.Predicate(Of T))
  name.vb: FindLast(Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  id: FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindLastIndex(Int32, Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindLastIndex
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 506
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> that contains the specified number of elements and ends at the specified index.
  syntax:
    content: public int FindLastIndex(int startIndex, int count, Predicate<T> match)
    content.vb: Public Function FindLastIndex(startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: "The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>match</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>count</em> is less than 0.-or-<em>startIndex</em> and <em>count</em> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Int32, Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})
  id: FindLastIndex(System.Int32,System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindLastIndex(Int32, Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindLastIndex
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 500
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> that extends from the first element to the specified index.
  syntax:
    content: public int FindLastIndex(int startIndex, Predicate<T> match)
    content.vb: Public Function FindLastIndex(startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: "The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>match</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Int32, Predicate(Of T))
- uid: System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})
  id: FindLastIndex(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: FindLastIndex(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.FindLastIndex(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindLastIndex
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 494
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int FindLastIndex(Predicate<T> match)
    content.vb: Public Function FindLastIndex(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the element to search for.
    return:
      type: System.Int32
      description: "The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>match</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).FindLastIndex(System.Predicate(Of T))
  name.vb: FindLastIndex(Predicate(Of T))
- uid: System.Collections.Generic.List`1.ForEach(System.Action{`0})
  commentId: M:System.Collections.Generic.List`1.ForEach(System.Action{`0})
  id: ForEach(System.Action{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: ForEach(Action<T>)
  fullName: System.Collections.Generic.List<T>.ForEach(System.Action<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForEach
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 541
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Performs the specified action on each element of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void ForEach(Action<T> action)
    content.vb: Public Sub ForEach(action As Action(Of T))
    parameters:
    - id: action
      type: System.Action{{T}}
      description: The <xref href="System.Action`1" data-throw-if-not-resolved="false"></xref> delegate to perform on each element of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>action</em> is null."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'An element in the collection has been modified. CautionThis exception is thrown starting with the .NET Framework 4.5. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).ForEach(System.Action(Of T))
  name.vb: ForEach(Action(Of T))
- uid: System.Collections.Generic.List`1.GetEnumerator
  commentId: M:System.Collections.Generic.List`1.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Collections.Generic.List<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 565
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Returns an enumerator that iterates through the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public List<T>.Enumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As List(Of T).Enumerator
    return:
      type: System.Collections.Generic.List`1.Enumerator
      description: A <xref href="System.Collections.Generic.List`1.Enumerator" data-throw-if-not-resolved="false"></xref> for the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).GetEnumerator()
- uid: System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: GetRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.GetRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRange
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 578
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Creates a shallow copy of a range of elements in the source <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public List<T> GetRange(int index, int count)
    content.vb: Public Function GetRange(index As Integer, count As Integer) As List(Of T)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> index at which the range starts.
    - id: count
      type: System.Int32
      description: The number of elements in the range.
    return:
      type: System.Collections.Generic.List`1
      description: A shallow copy of a range of elements in the source <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than 0.-or-<em>count</em> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).GetRange(System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.IndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0)
  id: IndexOf(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: IndexOf(T)
  fullName: System.Collections.Generic.List<T>.IndexOf(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 608
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the entire <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int IndexOf(T item)
    content.vb: Public Function IndexOf(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of <em>item</em> within the entire <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, if found; otherwise, –1."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T)
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)
  id: IndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: IndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 631
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> that extends from the specified index to the last element.
  syntax:
    content: public int IndexOf(T item, int index)
    content.vb: Public Function IndexOf(item As T, index As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
    - id: index
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of <em>item</em> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that extends from <em>index</em> to the last element, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32)
- uid: System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)
  id: IndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: IndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.IndexOf(T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 649
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> that starts at the specified index and contains the specified number of elements.
  syntax:
    content: public int IndexOf(T item, int index, int count)
    content.vb: Public Function IndexOf(item As T, index As Integer, count As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
    - id: index
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    return:
      type: System.Int32
      description: "The zero-based index of the first occurrence of <em>item</em> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that starts at <em>index</em> and contains <em>count</em> number of elements, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>count</em> is less than 0.-or-<em>index</em> and <em>count</em> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).IndexOf(T, System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.Insert(System.Int32,`0)
  commentId: M:System.Collections.Generic.List`1.Insert(System.Int32,`0)
  id: Insert(System.Int32,`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Insert(Int32, T)
  fullName: System.Collections.Generic.List<T>.Insert(System.Int32, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 665
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Inserts an element into the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> at the specified index.
  syntax:
    content: public void Insert(int index, T item)
    content.vb: Public Sub Insert(index As Integer, item As T)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which <em>item</em> should be inserted.
    - id: item
      type: '{T}'
      description: The object to insert. The value can be null for reference types.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than 0.-or-<em>index</em> is greater than <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Insert(System.Int32, T)
- uid: System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  commentId: M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  id: InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: InsertRange(Int32, IEnumerable<T>)
  fullName: System.Collections.Generic.List<T>.InsertRange(System.Int32, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InsertRange
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 697
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Inserts the elements of a collection into the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> at the specified index.
  syntax:
    content: public void InsertRange(int index, IEnumerable<T> collection)
    content.vb: Public Sub InsertRange(index As Integer, collection As IEnumerable(Of T))
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index at which the new elements should be inserted.
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: The collection whose elements should be inserted into the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The collection itself cannot be null, but it can contain elements that are null, if type <em>T</em> is a reference type.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>collection</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than 0.-or-<em>index</em> is greater than <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).InsertRange(System.Int32, System.Collections.Generic.IEnumerable(Of T))
  name.vb: InsertRange(Int32, IEnumerable(Of T))
- uid: System.Collections.Generic.List`1.LastIndexOf(`0)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0)
  id: LastIndexOf(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: LastIndexOf(T)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 749
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the entire <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int LastIndexOf(T item)
    content.vb: Public Function LastIndexOf(item As T) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
    return:
      type: System.Int32
      description: "The zero-based index of the last occurrence of <em>item</em> within the entire the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>, if found; otherwise, –1."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T)
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)
  id: LastIndexOf(`0,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: LastIndexOf(T, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 770
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> that extends from the first element to the specified index.
  syntax:
    content: public int LastIndexOf(T item, int index)
    content.vb: Public Function LastIndexOf(item As T, index As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
    - id: index
      type: System.Int32
      description: The zero-based starting index of the backward search.
    return:
      type: System.Int32
      description: "The zero-based index of the last occurrence of <em>item</em> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that extends from the first element to <em>index</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32)
- uid: System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)
  id: LastIndexOf(`0,System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: LastIndexOf(T, Int32, Int32)
  fullName: System.Collections.Generic.List<T>.LastIndexOf(T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 789
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> that contains the specified number of elements and ends at the specified index.
  syntax:
    content: public int LastIndexOf(T item, int index, int count)
    content.vb: Public Function LastIndexOf(item As T, index As Integer, count As Integer) As Integer
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
    - id: index
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    return:
      type: System.Int32
      description: "The zero-based index of the last occurrence of <em>item</em> within the range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> that contains <em>count</em> number of elements and ends at <em>index</em>, if found; otherwise, –1."
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is outside the range of valid indexes for the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.-or-<em>count</em> is less than 0.-or-<em>index</em> and <em>count</em> do not specify a valid section in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).LastIndexOf(T, System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.Remove(`0)
  commentId: M:System.Collections.Generic.List`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  fullName: System.Collections.Generic.List<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remove
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 819
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes the first occurrence of a specific object from the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public bool Remove(T item)
    content.vb: Public Function Remove(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The object to remove from the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>. The value can be null for reference types.
    return:
      type: System.Boolean
      description: true if <em>item</em> is successfully removed; otherwise, false.  This method also returns false if <em>item</em> was not found in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Remove(T)
- uid: System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})
  id: RemoveAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: RemoveAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.RemoveAll(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RemoveAll
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 838
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes all the elements that match the conditions defined by the specified predicate.
  syntax:
    content: public int RemoveAll(Predicate<T> match)
    content.vb: Public Function RemoveAll(match As Predicate(Of T)) As Integer
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions of the elements to remove.
    return:
      type: System.Int32
      description: The number of elements removed from the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> .
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>match</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAll(System.Predicate(Of T))
  name.vb: RemoveAll(Predicate(Of T))
- uid: System.Collections.Generic.List`1.RemoveAt(System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  fullName: System.Collections.Generic.List<T>.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RemoveAt
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 873
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes the element at the specified index of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based index of the element to remove.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than 0.-or-<em>index</em> is equal to or greater than <xref href=\"System.Collections.Generic.List`1.Count\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).RemoveAt(System.Int32)
- uid: System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: RemoveRange(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.RemoveRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RemoveRange
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 888
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Removes a range of elements from the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void RemoveRange(int index, int count)
    content.vb: Public Sub RemoveRange(index As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based starting index of the range of elements to remove.
    - id: count
      type: System.Int32
      description: The number of elements to remove.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than 0.-or-<em>count</em> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).RemoveRange(System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.Reverse
  commentId: M:System.Collections.Generic.List`1.Reverse
  id: Reverse
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Reverse()
  fullName: System.Collections.Generic.List<T>.Reverse()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reverse
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 913
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Reverses the order of the elements in the entire <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Reverse()
    content.vb: Public Sub Reverse
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Reverse()
- uid: System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Reverse(Int32, Int32)
  fullName: System.Collections.Generic.List<T>.Reverse(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reverse
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 922
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Reverses the order of the elements in the specified range.
  syntax:
    content: public void Reverse(int index, int count)
    content.vb: Public Sub Reverse(index As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based starting index of the range to reverse.
    - id: count
      type: System.Int32
      description: The number of elements in the range to reverse.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than 0.-or-<em>count</em> is less than 0. "
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>. "
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Reverse(System.Int32, System.Int32)
- uid: System.Collections.Generic.List`1.Sort
  commentId: M:System.Collections.Generic.List`1.Sort
  id: Sort
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Sort()
  fullName: System.Collections.Generic.List<T>.Sort()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 956
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Sorts the elements in the entire <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> using the default comparer.
  syntax:
    content: public void Sort()
    content.vb: Public Sub Sort
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The default comparer <xref href="System.Collections.Generic.Comparer`1.Default" data-throw-if-not-resolved="false"></xref> cannot find an implementation of the <xref href="System.IComparable`1" data-throw-if-not-resolved="false"></xref> generic interface or the <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref> interface for type <em>T</em>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Sort()
- uid: System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})
  id: Sort(System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Sort(IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 963
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Sorts the elements in the entire <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> using the specified comparer.
  syntax:
    content: public void Sort(IComparer<T> comparer)
    content.vb: Public Sub Sort(comparer As IComparer(Of T))
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements, or null to use the default comparer <xref href="System.Collections.Generic.Comparer`1.Default" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> cannot find implementation of the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface for type <em>T</em>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(IComparer(Of T))
- uid: System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})
  id: Sort(System.Comparison{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Sort(Comparison<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Comparison<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 993
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Sorts the elements in the entire <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> using the specified <xref href="System.Comparison`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public void Sort(Comparison<T> comparison)
    content.vb: Public Sub Sort(comparison As Comparison(Of T))
    parameters:
    - id: comparison
      type: System.Comparison{{T}}
      description: The <xref href="System.Comparison`1" data-throw-if-not-resolved="false"></xref> to use when comparing elements.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>comparison</em> is null."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The implementation of <em>comparison</em> caused an error during the sort. For example, <em>comparison</em> might not return 0 when comparing an item with itself.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Comparison(Of T))
  name.vb: Sort(Comparison(Of T))
- uid: System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  commentId: M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  id: Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: Sort(Int32, Int32, IComparer<T>)
  fullName: System.Collections.Generic.List<T>.Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 976
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Sorts the elements in a range of elements in <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> using the specified comparer.
  syntax:
    content: public void Sort(int index, int count, IComparer<T> comparer)
    content.vb: Public Sub Sort(index As Integer, count As Integer, comparer As IComparer(Of T))
    parameters:
    - id: index
      type: System.Int32
      description: The zero-based starting index of the range to sort.
    - id: count
      type: System.Int32
      description: The length of the range to sort.
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: The <xref href="System.Collections.Generic.IComparer`1" data-throw-if-not-resolved="false"></xref> implementation to use when comparing elements, or null to use the default comparer <xref href="System.Collections.Generic.Comparer`1.Default" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than 0.-or-<em>count</em> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> and <em>count</em> do not specify a valid range in the <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>.-or-The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>comparer</em> is null, and the default comparer <xref href=\"System.Collections.Generic.Comparer`1.Default\" data-throw-if-not-resolved=\"false\"></xref> cannot find implementation of the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface for type <em>T</em>."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).Sort(System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Int32, Int32, IComparer(Of T))
- uid: System.Collections.Generic.List`1.ToArray
  commentId: M:System.Collections.Generic.List`1.ToArray
  id: ToArray
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.Collections.Generic.List<T>.ToArray()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToArray
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 1007
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Copies the elements of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> to a new array.
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
      description: An array containing copies of the elements of the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).ToArray()
- uid: System.Collections.Generic.List`1.TrimExcess
  commentId: M:System.Collections.Generic.List`1.TrimExcess
  id: TrimExcess
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: TrimExcess()
  fullName: System.Collections.Generic.List<T>.TrimExcess()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TrimExcess
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 1032
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Sets the capacity to the actual number of elements in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref>, if that number is less than a threshold value.
  syntax:
    content: public void TrimExcess()
    content.vb: Public Sub TrimExcess
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).TrimExcess()
- uid: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  id: TrueForAll(System.Predicate{`0})
  parent: System.Collections.Generic.List`1
  langs:
  - csharp
  - vb
  name: TrueForAll(Predicate<T>)
  fullName: System.Collections.Generic.List<T>.TrueForAll(System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/List.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TrueForAll
    path: src/mscorlib/src/System/Collections/Generic/List.cs
    startLine: 1039
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: Determines whether every element in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> matches the conditions defined by the specified predicate.
  syntax:
    content: public bool TrueForAll(Predicate<T> match)
    content.vb: Public Function TrueForAll(match As Predicate(Of T)) As Boolean
    parameters:
    - id: match
      type: System.Predicate{{T}}
      description: The <xref href="System.Predicate`1" data-throw-if-not-resolved="false"></xref> delegate that defines the conditions to check against the elements.
    return:
      type: System.Boolean
      description: true if every element in the <xref href="System.Collections.Generic.List`1" data-throw-if-not-resolved="false"></xref> matches the conditions defined by the specified predicate; otherwise, false. If the list has no elements, the return value is true.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>match</em> is null."
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Generic.List(Of T).TrueForAll(System.Predicate(Of T))
  name.vb: TrueForAll(Predicate(Of T))
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: Generic.IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: Generic.IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IList<>
  fullName: System.Collections.Generic.IList<>
  fullname.vb: System.Collections.Generic.IList(Of )
  name.vb: Generic.IList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: Generic.IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: false
  name: Generic.IReadOnlyCollection<>
  fullName: System.Collections.Generic.IReadOnlyCollection<>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of )
  name.vb: Generic.IReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: Generic.IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  parent: System.Collections.Generic
  isExternal: false
  name: IReadOnlyList<>
  fullName: System.Collections.Generic.IReadOnlyList<>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of )
  name.vb: IReadOnlyList(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.ObjectModel.ReadOnlyCollection{{T}}
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: Collections.ObjectModel.ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  parent: System.Collections.ObjectModel
  isExternal: false
  name: Collections.ObjectModel.ReadOnlyCollection<>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<>
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of )
  name.vb: Collections.ObjectModel.ReadOnlyCollection(Of )
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: Collections.ObjectModel.ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Collections.Generic.IComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IComparer<>
  fullName: System.Collections.Generic.IComparer<>
  fullname.vb: System.Collections.Generic.IComparer(Of )
  name.vb: Collections.Generic.IComparer(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: Collections.Generic.IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Predicate{{T}}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  fullName: System.Predicate<T>
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Predicate`1
  parent: System
  isExternal: false
  name: Predicate<>
  fullName: System.Predicate<>
  fullname.vb: System.Predicate(Of )
  name.vb: Predicate(Of )
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.List<>
  fullName: System.Collections.Generic.List<>
  fullname.vb: System.Collections.Generic.List(Of )
  name.vb: Collections.Generic.List(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    fullName: System.Collections.Generic.List
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: Collections.Generic.List
    fullName: System.Collections.Generic.List
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Action{{T}}
  definition: System.Action`1
  name: Action<T>
  fullName: System.Action<T>
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Action`1
  isExternal: false
  name: Action<>
  fullName: System.Action<>
  fullname.vb: System.Action(Of )
  name.vb: Action(Of )
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Collections.Generic.List`1.Enumerator
  parent: System.Collections.Generic
  isExternal: false
  name: List.Enumerator<>
  fullName: System.Collections.Generic.List.Enumerator<>
  fullname.vb: System.Collections.Generic.List.Enumerator(Of )
  name.vb: List.Enumerator(Of )
  spec.csharp:
  - uid: System.Collections.Generic.List`1.Enumerator
    name: List.Enumerator
    fullName: System.Collections.Generic.List.Enumerator
  - name: <
    fullName: <
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1.Enumerator
    name: List.Enumerator
    fullName: System.Collections.Generic.List.Enumerator
  - name: '(Of '
    fullName: '(Of '
  - name: )
    fullName: )
- uid: System.Comparison{{T}}
  parent: System
  definition: System.Comparison`1
  name: Comparison<T>
  fullName: System.Comparison<T>
  fullname.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Comparison`1
  parent: System
  isExternal: false
  name: Comparison<>
  fullName: System.Comparison<>
  fullname.vb: System.Comparison(Of )
  name.vb: Comparison(Of )
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
