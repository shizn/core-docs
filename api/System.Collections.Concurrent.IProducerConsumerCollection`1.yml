items:
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1
  commentId: T:System.Collections.Concurrent.IProducerConsumerCollection`1
  id: IProducerConsumerCollection`1
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  - System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  - System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  langs:
  - csharp
  - vb
  name: IProducerConsumerCollection<T>
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
  type: Interface
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/IProducerConsumerCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IProducerConsumerCollection
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/IProducerConsumerCollection.cs
    startLine: 27
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Defines methods to manipulate thread-safe collections intended for producer/consumer usage. This interface provides a unified representation for producer/consumer collections so that higher level abstractions such as <xref href="System.Collections.Concurrent.BlockingCollection`1" data-throw-if-not-resolved="false"></xref> can use the collection as the underlying storage mechanism.
  syntax:
    content: 'public interface IProducerConsumerCollection<T> : Generic.IEnumerable<T>, ICollection, IEnumerable'
    content.vb: >-
      Public Interface IProducerConsumerCollection(Of T)
          Inherits Generic.IEnumerable(Of T), ICollection, IEnumerable
    typeParameters:
    - id: T
      description: Specifies the type of elements in the collection.
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T)
  name.vb: IProducerConsumerCollection(Of T)
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/IProducerConsumerCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/IProducerConsumerCollection.cs
    startLine: 49
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Copies the elements of the <xref href="System.Collections.Concurrent.IProducerConsumerCollection`1" data-throw-if-not-resolved="false"></xref> to an <xref href="System.Array" data-throw-if-not-resolved="false"></xref>, starting at a specified index.
  syntax:
    content: void CopyTo(T[] array, int index)
    content.vb: Sub CopyTo(array As T(), index As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that is the destination of the elements copied from the <xref href="System.Collections.Concurrent.IProducerConsumerCollection`1" data-throw-if-not-resolved="false"></xref>. The array must have zero-based indexing.
    - id: index
      type: System.Int32
      description: The zero-based index in <em>array</em> at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is a null reference (Nothing in Visual Basic)."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>index</em> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>index</em> is equal to or greater than the length of the <em>array</em> -or- The number of elements in the collection is greater than the available space from <em>index</em> to the end of the destination <em>array</em>. "
  fullName.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  commentId: M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/IProducerConsumerCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/IProducerConsumerCollection.cs
    startLine: 76
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Copies the elements contained in the <xref href="System.Collections.Concurrent.IProducerConsumerCollection`1" data-throw-if-not-resolved="false"></xref> to a new array.
  syntax:
    content: T[] ToArray()
    content.vb: Function ToArray As T()
    return:
      type: '{T}[]'
      description: A new array containing the elements copied from the <xref href="System.Collections.Concurrent.IProducerConsumerCollection`1" data-throw-if-not-resolved="false"></xref>.
  fullName.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).ToArray()
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  commentId: M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)
  id: TryAdd(`0)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  - vb
  name: TryAdd(T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryAdd(T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/IProducerConsumerCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAdd
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/IProducerConsumerCollection.cs
    startLine: 59
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to add an object to the <xref href="System.Collections.Concurrent.IProducerConsumerCollection`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: bool TryAdd(T item)
    content.vb: Function TryAdd(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The object to add to the <xref href="System.Collections.Concurrent.IProducerConsumerCollection`1" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: true if the object was added successfully; otherwise, false.
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>item</em> was invalid for this collection.
  fullName.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).TryAdd(T)
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  commentId: M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)
  id: TryTake(`0@)
  parent: System.Collections.Concurrent.IProducerConsumerCollection`1
  langs:
  - csharp
  - vb
  name: TryTake(out T)
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>.TryTake(out T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/IProducerConsumerCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTake
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/IProducerConsumerCollection.cs
    startLine: 70
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: Attempts to remove and return an object from the <xref href="System.Collections.Concurrent.IProducerConsumerCollection`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: bool TryTake(out T item)
    content.vb: Function TryTake(ByRef item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: When this method returns, if the object was removed and returned successfully, <em>item</em> contains the removed object. If no object was available to be removed, the value is unspecified.
    return:
      type: System.Boolean
      description: true if an object was removed and returned successfully; otherwise, false.
  fullName.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T).TryTake(ByRef T)
  name.vb: TryTake(ByRef T)
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
