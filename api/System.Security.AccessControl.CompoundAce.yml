items:
- uid: System.Security.AccessControl.CompoundAce
  commentId: T:System.Security.AccessControl.CompoundAce
  id: CompoundAce
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)
  - System.Security.AccessControl.CompoundAce.BinaryLength
  - System.Security.AccessControl.CompoundAce.CompoundAceType
  - System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)
  langs:
  - csharp
  - vb
  name: CompoundAce
  fullName: System.Security.AccessControl.CompoundAce
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompoundAce
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 202
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Represents a compound Access Control Entry (ACE).
  syntax:
    content: 'public sealed class CompoundAce : KnownAce'
    content.vb: >-
      Public NotInheritable Class CompoundAce
          Inherits KnownAce
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericAce
  - System.Security.AccessControl.KnownAce
  inheritedMembers:
  - System.Security.AccessControl.KnownAce.AccessMask
  - System.Security.AccessControl.KnownAce.SecurityIdentifier
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.PropagationFlags
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetHashCode
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)
  commentId: M:System.Security.AccessControl.CompoundAce.#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)
  id: '#ctor(System.Security.AccessControl.AceFlags,System.Int32,System.Security.AccessControl.CompoundAceType,System.Security.Principal.SecurityIdentifier)'
  parent: System.Security.AccessControl.CompoundAce
  langs:
  - csharp
  - vb
  name: CompoundAce(AceFlags, Int32, CompoundAceType, Principal.SecurityIdentifier)
  fullName: System.Security.AccessControl.CompoundAce.CompoundAce(System.Security.AccessControl.AceFlags, System.Int32, System.Security.AccessControl.CompoundAceType, System.Security.Principal.SecurityIdentifier)
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 204
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Initializes a new instance of the <xref href="System.Security.AccessControl.CompoundAce" data-throw-if-not-resolved="false"></xref> class.
  syntax:
    content: public CompoundAce(AceFlags flags, int accessMask, CompoundAceType compoundAceType, Principal.SecurityIdentifier sid)
    content.vb: Public Sub New(flags As AceFlags, accessMask As Integer, compoundAceType As CompoundAceType, sid As Principal.SecurityIdentifier)
    parameters:
    - id: flags
      type: System.Security.AccessControl.AceFlags
      description: Contains flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new Access Control Entry (ACE).
    - id: accessMask
      type: System.Int32
      description: The access mask for the ACE.
    - id: compoundAceType
      type: System.Security.AccessControl.CompoundAceType
      description: A value from the <xref href="System.Security.AccessControl.CompoundAceType" data-throw-if-not-resolved="false"></xref> enumeration.
    - id: sid
      type: System.Security.Principal.SecurityIdentifier
      description: The <xref href="System.Security.Principal.SecurityIdentifier" data-throw-if-not-resolved="false"></xref> associated with the new ACE.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CompoundAce.BinaryLength
  commentId: P:System.Security.AccessControl.CompoundAce.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.CompoundAce
  langs:
  - csharp
  - vb
  name: BinaryLength
  fullName: System.Security.AccessControl.CompoundAce.BinaryLength
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinaryLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 205
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets the length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.CompoundAce" data-throw-if-not-resolved="false"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href="System.Security.AccessControl.CompoundAce.GetBinaryForm" data-throw-if-not-resolved="false"></xref> method.
  syntax:
    content: public override int BinaryLength { get; }
    content.vb: Public Overrides ReadOnly Property BinaryLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: The length, in bytes, of the binary representation of the current <xref href="System.Security.AccessControl.CompoundAce" data-throw-if-not-resolved="false"></xref> object.
  overridden: System.Security.AccessControl.GenericAce.BinaryLength
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.CompoundAce.CompoundAceType
  commentId: P:System.Security.AccessControl.CompoundAce.CompoundAceType
  id: CompoundAceType
  parent: System.Security.AccessControl.CompoundAce
  langs:
  - csharp
  - vb
  name: CompoundAceType
  fullName: System.Security.AccessControl.CompoundAce.CompoundAceType
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompoundAceType
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 206
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Gets or sets the type of this <xref href="System.Security.AccessControl.CompoundAce" data-throw-if-not-resolved="false"></xref> object.
  syntax:
    content: public CompoundAceType CompoundAceType { get; set; }
    content.vb: Public Property CompoundAceType As CompoundAceType
    parameters: []
    return:
      type: System.Security.AccessControl.CompoundAceType
      description: The type of this <xref href="System.Security.AccessControl.CompoundAce" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.CompoundAce
  langs:
  - csharp
  - vb
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 207
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: Marshals the contents of the <xref href="System.Security.AccessControl.CompoundAce" data-throw-if-not-resolved="false"></xref> object into the specified byte array beginning at the specified offset.
  syntax:
    content: public override void GetBinaryForm(byte[] binaryForm, int offset)
    content.vb: Public Overrides Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: The byte array into which the contents of the <xref href="System.Security.AccessControl.CompoundAce" data-throw-if-not-resolved="false"></xref> is marshaled.
    - id: offset
      type: System.Int32
      description: The offset at which to start marshaling.
  overridden: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>offset</em> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.CompoundAce\" data-throw-if-not-resolved=\"false\"></xref> to be copied into <em>array</em>."
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.AccessControl.CompoundAce.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
references:
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.KnownAce
  parent: System.Security.AccessControl
  isExternal: false
  name: KnownAce
  fullName: System.Security.AccessControl.KnownAce
- uid: System.Security.AccessControl.KnownAce.AccessMask
  parent: System.Security.AccessControl.KnownAce
  isExternal: false
  name: AccessMask
  fullName: System.Security.AccessControl.KnownAce.AccessMask
- uid: System.Security.AccessControl.KnownAce.SecurityIdentifier
  parent: System.Security.AccessControl.KnownAce
  isExternal: false
  name: SecurityIdentifier
  fullName: System.Security.AccessControl.KnownAce.SecurityIdentifier
- uid: System.Security.AccessControl.GenericAce.AceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
- uid: System.Security.AccessControl.GenericAce.Copy
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: Copy
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: Copy
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: CreateFromBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)
  name.vb: CreateFromBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: CreateFromBinaryForm
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: CreateFromBinaryForm
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: Equals
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: Equals
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: GetHashCode
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: GetHashCode
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Security.AccessControl.AceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AceFlags
  fullName: System.Security.AccessControl.AceFlags
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.CompoundAceType
  parent: System.Security.AccessControl
  isExternal: false
  name: CompoundAceType
  fullName: System.Security.AccessControl.CompoundAceType
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: Principal.SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)
  fullname.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Byte[]
  isExternal: false
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
  - name: ()
    fullName: ()
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
