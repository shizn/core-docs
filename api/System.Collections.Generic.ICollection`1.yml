items:
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  id: ICollection`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.ICollection`1.Add(`0)
  - System.Collections.Generic.ICollection`1.Clear
  - System.Collections.Generic.ICollection`1.Contains(`0)
  - System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Generic.ICollection`1.Count
  - System.Collections.Generic.ICollection`1.IsReadOnly
  - System.Collections.Generic.ICollection`1.Remove(`0)
  langs:
  - csharp
  - vb
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ICollection
    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
    startLine: 28
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: Defines methods to manipulate generic collections.
  syntax:
    content: 'public interface ICollection<T> : IEnumerable<T>, IEnumerable'
    content.vb: >-
      Public Interface ICollection(Of T)
          Inherits IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
      description: The type of the elements in the collection.
  inheritedMembers:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
- uid: System.Collections.Generic.ICollection`1.Count
  commentId: P:System.Collections.Generic.ICollection`1.Count
  id: Count
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Generic.ICollection<T>.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
    startLine: 32
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: Gets the number of elements contained in the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: int Count { get; }
    content.vb: ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of elements contained in the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).Count
- uid: System.Collections.Generic.ICollection`1.IsReadOnly
  commentId: P:System.Collections.Generic.ICollection`1.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Collections.Generic.ICollection<T>.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsReadOnly
    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
    startLine: 34
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: Gets a value indicating whether the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref> is read-only.
  syntax:
    content: bool IsReadOnly { get; }
    content.vb: ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref> is read-only; otherwise, false.
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Generic.ICollection(Of T).IsReadOnly
- uid: System.Collections.Generic.ICollection`1.Add(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: Add(T)
  fullName: System.Collections.Generic.ICollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Add
    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
    startLine: 36
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: Adds an item to the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: void Add(T item)
    content.vb: Sub Add(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: The object to add to the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref> is read-only.
  fullName.vb: System.Collections.Generic.ICollection(Of T).Add(T)
- uid: System.Collections.Generic.ICollection`1.Clear
  commentId: M:System.Collections.Generic.ICollection`1.Clear
  id: Clear
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Collections.Generic.ICollection<T>.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clear
    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
    startLine: 38
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: Removes all items from the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: void Clear()
    content.vb: Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref> is read-only. '
  fullName.vb: System.Collections.Generic.ICollection(Of T).Clear()
- uid: System.Collections.Generic.ICollection`1.Contains(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Contains(`0)
  id: Contains(`0)
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: Contains(T)
  fullName: System.Collections.Generic.ICollection<T>.Contains(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Contains
    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
    startLine: 40
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: Determines whether the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref> contains a specific value.
  syntax:
    content: bool Contains(T item)
    content.vb: Function Contains(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The object to locate in the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: true if <em>item</em> is found in the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>; otherwise, false.
  fullName.vb: System.Collections.Generic.ICollection(Of T).Contains(T)
- uid: System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Generic.ICollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
    startLine: 45
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: Copies the elements of the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref> to an <xref href="System.Array" data-throw-if-not-resolved="false"></xref>, starting at a particular <xref href="System.Array" data-throw-if-not-resolved="false"></xref> index.
  syntax:
    content: void CopyTo(T[] array, int arrayIndex)
    content.vb: Sub CopyTo(array As T(), arrayIndex As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: The one-dimensional <xref href="System.Array" data-throw-if-not-resolved="false"></xref> that is the destination of the elements copied from <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>. The <xref href="System.Array" data-throw-if-not-resolved="false"></xref> must have zero-based indexing.
    - id: arrayIndex
      type: System.Int32
      description: The zero-based index in <em>array</em> at which copying begins.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>array</em> is null."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<em>arrayIndex</em> is less than 0."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the source <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>.
  fullName.vb: System.Collections.Generic.ICollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
- uid: System.Collections.Generic.ICollection`1.Remove(`0)
  commentId: M:System.Collections.Generic.ICollection`1.Remove(`0)
  id: Remove(`0)
  parent: System.Collections.Generic.ICollection`1
  langs:
  - csharp
  - vb
  name: Remove(T)
  fullName: System.Collections.Generic.ICollection<T>.Remove(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remove
    path: src/mscorlib/src/System/Collections/Generic/ICollection.cs
    startLine: 49
  assemblies:
  - System.Runtime
  namespace: System.Collections.Generic
  summary: Removes the first occurrence of a specific object from the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: bool Remove(T item)
    content.vb: Function Remove(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: The object to remove from the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Boolean
      description: true if <em>item</em> was successfully removed from the <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>; otherwise, false. This method also returns false if <em>item</em> is not found in the original <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref>.
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The <xref href="System.Collections.Generic.ICollection`1" data-throw-if-not-resolved="false"></xref> is read-only.
  fullName.vb: System.Collections.Generic.ICollection(Of T).Remove(T)
references:
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: Generic.IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: Generic.IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: Collections.Generic.IEnumerable<>
  fullName: System.Collections.Generic.IEnumerable<>
  fullname.vb: System.Collections.Generic.IEnumerable(Of )
  name.vb: Collections.Generic.IEnumerable(Of )
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: Collections.Generic.IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: '{T}[]'
  isExternal: false
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
