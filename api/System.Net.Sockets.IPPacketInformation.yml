items:
- uid: System.Net.Sockets.IPPacketInformation
  commentId: T:System.Net.Sockets.IPPacketInformation
  id: IPPacketInformation
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.IPPacketInformation.Address
  - System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  - System.Net.Sockets.IPPacketInformation.GetHashCode
  - System.Net.Sockets.IPPacketInformation.Interface
  - System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  - System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  langs:
  - csharp
  - vb
  name: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
  type: Struct
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPPacketInformation
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 8
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Presents the packet information from a call to <xref href="System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" data-throw-if-not-resolved="false"></xref> or <xref href="System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public struct IPPacketInformation
    content.vb: Public Structure IPPacketInformation
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Net.Sockets.IPPacketInformation.Address
  commentId: P:System.Net.Sockets.IPPacketInformation.Address
  id: Address
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  - vb
  name: Address
  fullName: System.Net.Sockets.IPPacketInformation.Address
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Address
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 19
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the origin information of the packet that was received as a result of calling the <xref href="System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" data-throw-if-not-resolved="false"></xref> method or <xref href="System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" data-throw-if-not-resolved="false"></xref> method.
  syntax:
    content: public IPAddress Address { get; }
    content.vb: Public ReadOnly Property Address As IPAddress
    parameters: []
    return:
      type: System.Net.IPAddress
      description: An <xref href="System.Net.IPAddress" data-throw-if-not-resolved="false"></xref> that indicates the origin information of the packet that was received as a result of calling the <xref href="System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" data-throw-if-not-resolved="false"></xref> method or <xref href="System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" data-throw-if-not-resolved="false"></xref> method. For packets that were sent from a unicast address, the <xref href="System.Net.Sockets.IPPacketInformation.Address" data-throw-if-not-resolved="false"></xref> property will return the <xref href="System.Net.IPAddress" data-throw-if-not-resolved="false"></xref> of the sender; for multicast or broadcast packets, the <xref href="System.Net.Sockets.IPPacketInformation.Address" data-throw-if-not-resolved="false"></xref> property will return the multicast or broadcast <xref href="System.Net.IPAddress" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.IPPacketInformation.Interface
  commentId: P:System.Net.Sockets.IPPacketInformation.Interface
  id: Interface
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  - vb
  name: Interface
  fullName: System.Net.Sockets.IPPacketInformation.Interface
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Interface
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 27
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Gets the network interface information that is associated with a call to <xref href="System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" data-throw-if-not-resolved="false"></xref> or <xref href="System.Net.Sockets.Socket.EndReceiveMessageFrom(System.IAsyncResult,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public int Interface { get; }
    content.vb: Public ReadOnly Property Interface As Integer
    parameters: []
    return:
      type: System.Int32
      description: An <xref href="System.Int32" data-throw-if-not-resolved="false"></xref> value, which represents the index of the network interface. You can use this index with <xref href="System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces" data-throw-if-not-resolved="false"></xref> to get more information about the relevant interface.
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  commentId: M:System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Net.Sockets.IPPacketInformation.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 46
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  syntax:
    content: public override bool Equals(object comparand)
    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean
    parameters:
    - id: comparand
      type: System.Object
      description: The object to compare with this instance.
    return:
      type: System.Boolean
      description: true if <em>comparand</em> is an instance of <xref href="System.Net.Sockets.IPPacketInformation" data-throw-if-not-resolved="false"></xref> and equals the value of the instance; otherwise, false.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.IPPacketInformation.GetHashCode
  commentId: M:System.Net.Sockets.IPPacketInformation.GetHashCode
  id: GetHashCode
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Net.Sockets.IPPacketInformation.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 51
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: An Int32 hash code.
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  commentId: M:System.Net.Sockets.IPPacketInformation.op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  id: op_Equality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  - vb
  name: Equality(IPPacketInformation, IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.Equality(System.Net.Sockets.IPPacketInformation, System.Net.Sockets.IPPacketInformation)
  type: Operator
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 35
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Tests whether two specified <xref href="System.Net.Sockets.IPPacketInformation" data-throw-if-not-resolved="false"></xref> instances are equivalent.
  syntax:
    content: public static bool operator ==(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2)
    content.vb: Public Shared Operator =(packetInformation1 As IPPacketInformation, packetInformation2 As IPPacketInformation) As Boolean
    parameters:
    - id: packetInformation1
      type: System.Net.Sockets.IPPacketInformation
      description: The <xref href="System.Net.Sockets.IPPacketInformation" data-throw-if-not-resolved="false"></xref> instance that is to the left of the equality operator.
    - id: packetInformation2
      type: System.Net.Sockets.IPPacketInformation
      description: The <xref href="System.Net.Sockets.IPPacketInformation" data-throw-if-not-resolved="false"></xref> instance that is to the right of the equality operator.
    return:
      type: System.Boolean
      description: true if <em>packetInformation1</em> and <em>packetInformation2</em> are equal; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  commentId: M:System.Net.Sockets.IPPacketInformation.op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  id: op_Inequality(System.Net.Sockets.IPPacketInformation,System.Net.Sockets.IPPacketInformation)
  parent: System.Net.Sockets.IPPacketInformation
  langs:
  - csharp
  - vb
  name: Inequality(IPPacketInformation, IPPacketInformation)
  fullName: System.Net.Sockets.IPPacketInformation.Inequality(System.Net.Sockets.IPPacketInformation, System.Net.Sockets.IPPacketInformation)
  type: Operator
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Net.Sockets/src/System/Net/Sockets/IPPacketInformation.cs
    startLine: 41
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: Tests whether two specified <xref href="System.Net.Sockets.IPPacketInformation" data-throw-if-not-resolved="false"></xref> instances are not equal.
  syntax:
    content: public static bool operator !=(IPPacketInformation packetInformation1, IPPacketInformation packetInformation2)
    content.vb: Public Shared Operator <>(packetInformation1 As IPPacketInformation, packetInformation2 As IPPacketInformation) As Boolean
    parameters:
    - id: packetInformation1
      type: System.Net.Sockets.IPPacketInformation
      description: The <xref href="System.Net.Sockets.IPPacketInformation" data-throw-if-not-resolved="false"></xref> instance that is to the left of the inequality operator.
    - id: packetInformation2
      type: System.Net.Sockets.IPPacketInformation
      description: The <xref href="System.Net.Sockets.IPPacketInformation" data-throw-if-not-resolved="false"></xref> instance that is to the right of the inequality operator.
    return:
      type: System.Boolean
      description: true if <em>packetInformation1</em> and <em>packetInformation2</em> are unequal; otherwise, false.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.IPPacketInformation
  parent: System.Net.Sockets
  isExternal: false
  name: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
