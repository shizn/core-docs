items:
- uid: System.Diagnostics.ProcessStartInfo
  commentId: T:System.Diagnostics.ProcessStartInfo
  id: ProcessStartInfo
  parent: System.Diagnostics
  children:
  - System.Diagnostics.ProcessStartInfo.#ctor
  - System.Diagnostics.ProcessStartInfo.#ctor(System.String)
  - System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
  - System.Diagnostics.ProcessStartInfo.Arguments
  - System.Diagnostics.ProcessStartInfo.CreateNoWindow
  - System.Diagnostics.ProcessStartInfo.Domain
  - System.Diagnostics.ProcessStartInfo.Environment
  - System.Diagnostics.ProcessStartInfo.FileName
  - System.Diagnostics.ProcessStartInfo.LoadUserProfile
  - System.Diagnostics.ProcessStartInfo.PasswordInClearText
  - System.Diagnostics.ProcessStartInfo.RedirectStandardError
  - System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  - System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  - System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  - System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  - System.Diagnostics.ProcessStartInfo.UserName
  - System.Diagnostics.ProcessStartInfo.UseShellExecute
  - System.Diagnostics.ProcessStartInfo.WorkingDirectory
  langs:
  - csharp
  - vb
  name: ProcessStartInfo
  fullName: System.Diagnostics.ProcessStartInfo
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProcessStartInfo
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs
    startLine: 8
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Specifies a set of values that are used when you start a process.
  syntax:
    content: 'public sealed class ProcessStartInfo : object'
    content.vb: >-
      Public NotInheritable Class ProcessStartInfo
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Diagnostics.ProcessStartInfo.#ctor
  commentId: M:System.Diagnostics.ProcessStartInfo.#ctor
  id: '#ctor'
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: ProcessStartInfo()
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo()
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 34
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Initializes a new instance of the <xref href="System.Diagnostics.ProcessStartInfo" data-throw-if-not-resolved="false"></xref> class without specifying a file name with which to start the process.
  syntax:
    content: public ProcessStartInfo()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String)
  commentId: M:System.Diagnostics.ProcessStartInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: ProcessStartInfo(String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 41
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Initializes a new instance of the <xref href="System.Diagnostics.ProcessStartInfo" data-throw-if-not-resolved="false"></xref> class and specifies a file name such as an application or document with which to start the process.
  syntax:
    content: public ProcessStartInfo(string fileName)
    content.vb: Public Sub New(fileName As String)
    parameters:
    - id: fileName
      type: System.String
      description: 'An application or document with which to start a process. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
  commentId: M:System.Diagnostics.ProcessStartInfo.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: ProcessStartInfo(String, String)
  fullName: System.Diagnostics.ProcessStartInfo.ProcessStartInfo(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 50
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Initializes a new instance of the <xref href="System.Diagnostics.ProcessStartInfo" data-throw-if-not-resolved="false"></xref> class, specifies an application file name with which to start the process, and specifies a set of command-line arguments to pass to the application.
  syntax:
    content: public ProcessStartInfo(string fileName, string arguments)
    content.vb: Public Sub New(fileName As String, arguments As String)
    parameters:
    - id: fileName
      type: System.String
      description: 'An application with which to start a process. '
    - id: arguments
      type: System.String
      description: 'Command-line arguments to pass to the application when the process starts. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.Arguments
  commentId: P:System.Diagnostics.ProcessStartInfo.Arguments
  id: Arguments
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: Arguments
  fullName: System.Diagnostics.ProcessStartInfo.Arguments
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Arguments
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 59
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Gets or sets the set of command-line arguments to use when starting the application.
  syntax:
    content: public string Arguments { get; set; }
    content.vb: Public Property Arguments As String
    parameters: []
    return:
      type: System.String
      description: A single string containing the arguments to pass to the target application specified in the <xref href="System.Diagnostics.ProcessStartInfo.FileName" data-throw-if-not-resolved="false"></xref> property. The default is an empty string (""). On Windows Vista and earlier versions of the Windows operating system, the length of the arguments added to the length of the full path to the process must be less than 2080. On Windows 7 and later versions, the length must be less than 32699.Arguments are parsed and interpreted by the target application, so must align with the expectations of that application. For.NET applications as demonstrated in the Examples below, spaces are interpreted as a separator between multiple arguments. A single argument that includes spaces must be surrounded by quotation marks, but those quotation marks are not carried through to the target application. In include quotation marks in the final parsed argument, triple-escape each mark.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.CreateNoWindow
  commentId: P:System.Diagnostics.ProcessStartInfo.CreateNoWindow
  id: CreateNoWindow
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: CreateNoWindow
  fullName: System.Diagnostics.ProcessStartInfo.CreateNoWindow
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateNoWindow
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 75
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Gets or sets a value indicating whether to start the process in a new window.
  syntax:
    content: public bool CreateNoWindow { get; set; }
    content.vb: Public Property CreateNoWindow As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the process should be started without creating a new window to contain it; otherwise, false. The default is false.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.Domain
  commentId: P:System.Diagnostics.ProcessStartInfo.Domain
  id: Domain
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: Domain
  fullName: System.Diagnostics.ProcessStartInfo.Domain
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Domain
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs
    startLine: 29
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: 'Gets or sets a value that identifies the domain to use when starting the process. '
  syntax:
    content: public string Domain { get; set; }
    content.vb: Public Property Domain As String
    parameters: []
    return:
      type: System.String
      description: The Active Directory domain to use when starting the process. The domain property is primarily of interest to users within enterprise environments that use Active Directory.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.Environment
  commentId: P:System.Diagnostics.ProcessStartInfo.Environment
  id: Environment
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: Environment
  fullName: System.Diagnostics.ProcessStartInfo.Environment
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Environment
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 81
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  syntax:
    content: public Collections.Generic.IDictionary<string, string> Environment { get; }
    content.vb: Public ReadOnly Property Environment As Collections.Generic.IDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessStartInfo.FileName
  commentId: P:System.Diagnostics.ProcessStartInfo.FileName
  id: FileName
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: FileName
  fullName: System.Diagnostics.ProcessStartInfo.FileName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileName
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 159
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Gets or sets the application or document to start.
  syntax:
    content: public string FileName { get; set; }
    content.vb: Public Property FileName As String
    parameters: []
    return:
      type: System.String
      description: The name of the application to start, or the name of a document of a file type that is associated with an application and that has a default open action available to it. The default is an empty string ("").
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.LoadUserProfile
  commentId: P:System.Diagnostics.ProcessStartInfo.LoadUserProfile
  id: LoadUserProfile
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: LoadUserProfile
  fullName: System.Diagnostics.ProcessStartInfo.LoadUserProfile
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LoadUserProfile
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs
    startLine: 35
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: 'Gets or sets a value that indicates whether the Windows user profile is to be loaded from the registry. '
  syntax:
    content: public bool LoadUserProfile { get; set; }
    content.vb: Public Property LoadUserProfile As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the Windows user profile should be loaded; otherwise, false. The default is false.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardError
  commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardError
  id: RedirectStandardError
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: RedirectStandardError
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardError
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RedirectStandardError
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 135
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Gets or sets a value that indicates whether the error output of an application is written to the <xref href="System.Diagnostics.Process.StandardError" data-throw-if-not-resolved="false"></xref> stream.
  syntax:
    content: public bool RedirectStandardError { get; set; }
    content.vb: Public Property RedirectStandardError As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if error output should be written to <xref href="System.Diagnostics.Process.StandardError" data-throw-if-not-resolved="false"></xref>; otherwise, false. The default is false.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  id: RedirectStandardInput
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: RedirectStandardInput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RedirectStandardInput
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 117
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Gets or sets a value indicating whether the input for an application is read from the <xref href="System.Diagnostics.Process.StandardInput" data-throw-if-not-resolved="false"></xref> stream.
  syntax:
    content: public bool RedirectStandardInput { get; set; }
    content.vb: Public Property RedirectStandardInput As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if input should be read from <xref href="System.Diagnostics.Process.StandardInput" data-throw-if-not-resolved="false"></xref>; otherwise, false. The default is false.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  id: RedirectStandardOutput
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: RedirectStandardOutput
  fullName: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RedirectStandardOutput
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 126
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Gets or sets a value that indicates whether the textual output of an application is written to the <xref href="System.Diagnostics.Process.StandardOutput" data-throw-if-not-resolved="false"></xref> stream.
  syntax:
    content: public bool RedirectStandardOutput { get; set; }
    content.vb: Public Property RedirectStandardOutput As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if output should be written to <xref href="System.Diagnostics.Process.StandardOutput" data-throw-if-not-resolved="false"></xref>; otherwise, false. The default is false.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  commentId: P:System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  id: StandardErrorEncoding
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: StandardErrorEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardErrorEncoding
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StandardErrorEncoding
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 142
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Gets or sets the preferred encoding for error output.
  syntax:
    content: public Text.Encoding StandardErrorEncoding { get; set; }
    content.vb: Public Property StandardErrorEncoding As Text.Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: An object that represents the preferred encoding for error output. The default is null.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  commentId: P:System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  id: StandardOutputEncoding
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: StandardOutputEncoding
  fullName: System.Diagnostics.ProcessStartInfo.StandardOutputEncoding
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StandardOutputEncoding
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 148
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Gets or sets the preferred encoding for standard output.
  syntax:
    content: public Text.Encoding StandardOutputEncoding { get; set; }
    content.vb: Public Property StandardOutputEncoding As Text.Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: An object that represents the preferred encoding for standard output. The default is null.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.UserName
  commentId: P:System.Diagnostics.ProcessStartInfo.UserName
  id: UserName
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: UserName
  fullName: System.Diagnostics.ProcessStartInfo.UserName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserName
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs
    startLine: 17
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Gets or sets the user name to be used when starting the process.
  syntax:
    content: public string UserName { get; set; }
    content.vb: Public Property UserName As String
    parameters: []
    return:
      type: System.String
      description: The user name to use when starting the process.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.UseShellExecute
  commentId: P:System.Diagnostics.ProcessStartInfo.UseShellExecute
  id: UseShellExecute
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: UseShellExecute
  fullName: System.Diagnostics.ProcessStartInfo.UseShellExecute
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UseShellExecute
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs
    startLine: 49
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: Gets or sets a value indicating whether to use the operating system shell to start the process.
  syntax:
    content: public bool UseShellExecute { get; set; }
    content.vb: Public Property UseShellExecute As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: true if the shell should be used when starting the process; false if the process should be created directly from the executable file. The default is true.
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.WorkingDirectory
  commentId: P:System.Diagnostics.ProcessStartInfo.WorkingDirectory
  id: WorkingDirectory
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: WorkingDirectory
  fullName: System.Diagnostics.ProcessStartInfo.WorkingDirectory
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WorkingDirectory
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.cs
    startLine: 169
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: When the <xref href="System.Diagnostics.ProcessStartInfo.UseShellExecute" data-throw-if-not-resolved="false"></xref> property is false, gets or sets the working directory for the process to be started. When <xref href="System.Diagnostics.ProcessStartInfo.UseShellExecute" data-throw-if-not-resolved="false"></xref> is true, gets or sets the directory that contains the process to be started.
  syntax:
    content: public string WorkingDirectory { get; set; }
    content.vb: Public Property WorkingDirectory As String
    parameters: []
    return:
      type: System.String
      description: When <xref href="System.Diagnostics.ProcessStartInfo.UseShellExecute" data-throw-if-not-resolved="false"></xref> is true, the fully qualified name of the directory that contains the process to be started. When the <xref href="System.Diagnostics.ProcessStartInfo.UseShellExecute" data-throw-if-not-resolved="false"></xref> property is false, the working directory for the process to be started. The default is an empty string ("").
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessStartInfo.PasswordInClearText
  commentId: P:System.Diagnostics.ProcessStartInfo.PasswordInClearText
  id: PasswordInClearText
  parent: System.Diagnostics.ProcessStartInfo
  langs:
  - csharp
  - vb
  name: PasswordInClearText
  fullName: System.Diagnostics.ProcessStartInfo.PasswordInClearText
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PasswordInClearText
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessStartInfo.Windows.cs
    startLine: 23
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  syntax:
    content: public string PasswordInClearText { get; set; }
    content.vb: Public Property PasswordInClearText As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  definition: System.Collections.Generic.IDictionary`2
  name: Collections.Generic.IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: Collections.Generic.IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Collections.Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: Generic.IDictionary<, >
  fullName: System.Collections.Generic.IDictionary<, >
  fullname.vb: System.Collections.Generic.IDictionary(Of , )
  name.vb: Generic.IDictionary(Of , )
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: Generic.IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Text.Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
