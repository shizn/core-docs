items:
- uid: System.Reflection.Emit.ILGenerator
  commentId: T:System.Reflection.Emit.ILGenerator
  id: ILGenerator
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  - System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  - System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  - System.Reflection.Emit.ILGenerator.BeginFaultBlock
  - System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  - System.Reflection.Emit.ILGenerator.BeginScope
  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  - System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  - System.Reflection.Emit.ILGenerator.DefineLabel
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  - System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  - System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  - System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  - System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  - System.Reflection.Emit.ILGenerator.EndExceptionBlock
  - System.Reflection.Emit.ILGenerator.EndScope
  - System.Reflection.Emit.ILGenerator.ILOffset
  - System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  - System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  - System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  langs:
  - csharp
  - vb
  name: ILGenerator
  fullName: System.Reflection.Emit.ILGenerator
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ILGenerator
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 17
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Generates Microsoft intermediate language (MSIL) instructions.
  syntax:
    content: 'public class ILGenerator : object'
    content.vb: >-
      Public Class ILGenerator
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.Emit.ILGenerator.ILOffset
  commentId: P:System.Reflection.Emit.ILGenerator.ILOffset
  id: ILOffset
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: ILOffset
  fullName: System.Reflection.Emit.ILGenerator.ILOffset
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ILOffset
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1353
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Gets the current offset, in bytes, in the Microsoft intermediate language (MSIL) stream that is being emitted by the <xref href="System.Reflection.Emit.ILGenerator" data-throw-if-not-resolved="false"></xref>.
  syntax:
    content: public virtual int ILOffset { get; }
    content.vb: Public Overridable ReadOnly Property ILOffset As Integer
    parameters: []
    return:
      type: System.Int32
      description: 'The offset in the MSIL stream at which the next instruction will be emitted. '
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  id: BeginCatchBlock(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginCatchBlock(Type)
  fullName: System.Reflection.Emit.ILGenerator.BeginCatchBlock(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BeginCatchBlock
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1035
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Begins a catch block.
  syntax:
    content: public virtual void BeginCatchBlock(Type exceptionType)
    content.vb: Public Overridable Sub BeginCatchBlock(exceptionType As Type)
    parameters:
    - id: exceptionType
      type: System.Type
      description: 'The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents the exception. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The catch block is within a filtered exception. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>exceptionType</em> is null, and the exception filter block has not returned a value that indicates that finally blocks should be run until this catch block is located. "
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  commentId: M:System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock
  id: BeginExceptFilterBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginExceptFilterBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptFilterBlock()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BeginExceptFilterBlock
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1020
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Begins an exception block for a filtered exception.
  syntax:
    content: public virtual void BeginExceptFilterBlock()
    content.vb: Public Overridable Sub BeginExceptFilterBlock
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. -or-This <xref href="System.Reflection.Emit.ILGenerator" data-throw-if-not-resolved="false"></xref> belongs to a <xref href="System.Reflection.Emit.DynamicMethod" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  commentId: M:System.Reflection.Emit.ILGenerator.BeginExceptionBlock
  id: BeginExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginExceptionBlock()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BeginExceptionBlock
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 938
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Begins an exception block for a non-filtered exception.
  syntax:
    content: public virtual Label BeginExceptionBlock()
    content.vb: Public Overridable Function BeginExceptionBlock As Label
    return:
      type: System.Reflection.Emit.Label
      description: The label for the end of the block. This will leave you in the correct place to execute finally blocks or to finish the try.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginFaultBlock
  commentId: M:System.Reflection.Emit.ILGenerator.BeginFaultBlock
  id: BeginFaultBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginFaultBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFaultBlock()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BeginFaultBlock
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1064
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Begins an exception fault block in the Microsoft intermediate language (MSIL) stream.
  syntax:
    content: public virtual void BeginFaultBlock()
    content.vb: Public Overridable Sub BeginFaultBlock
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The MSIL being generated is not currently in an exception block. -or-This <xref href="System.Reflection.Emit.ILGenerator" data-throw-if-not-resolved="false"></xref> belongs to a <xref href="System.Reflection.Emit.DynamicMethod" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  commentId: M:System.Reflection.Emit.ILGenerator.BeginFinallyBlock
  id: BeginFinallyBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginFinallyBlock()
  fullName: System.Reflection.Emit.ILGenerator.BeginFinallyBlock()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BeginFinallyBlock
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1078
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Begins a finally block in the Microsoft intermediate language (MSIL) instruction stream.
  syntax:
    content: public virtual void BeginFinallyBlock()
    content.vb: Public Overridable Sub BeginFinallyBlock
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The MSIL being generated is not currently in an exception block. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.BeginScope
  commentId: M:System.Reflection.Emit.ILGenerator.BeginScope
  id: BeginScope
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: BeginScope()
  fullName: System.Reflection.Emit.ILGenerator.BeginScope()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BeginScope
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1343
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Begins a lexical scope.
  syntax:
    content: public virtual void BeginScope()
    content.vb: Public Overridable Sub BeginScope
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This <xref href="System.Reflection.Emit.ILGenerator" data-throw-if-not-resolved="false"></xref> belongs to a <xref href="System.Reflection.Emit.DynamicMethod" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  id: DeclareLocal(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: DeclareLocal(Type)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclareLocal
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1262
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Declares a local variable of the specified type.
  syntax:
    content: public virtual LocalBuilder DeclareLocal(Type localType)
    content.vb: Public Overridable Function DeclareLocal(localType As Type) As LocalBuilder
    parameters:
    - id: localType
      type: System.Type
      description: 'A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents the type of the local variable. '
    return:
      type: System.Reflection.Emit.LocalBuilder
      description: The declared local variable.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>localType</em> is null. "
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The containing type has been created by the <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref> method. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  commentId: M:System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type,System.Boolean)
  id: DeclareLocal(System.Type,System.Boolean)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: DeclareLocal(Type, Boolean)
  fullName: System.Reflection.Emit.ILGenerator.DeclareLocal(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclareLocal
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1267
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Declares a local variable of the specified type, optionally pinning the object referred to by the variable.
  syntax:
    content: public virtual LocalBuilder DeclareLocal(Type localType, bool pinned)
    content.vb: Public Overridable Function DeclareLocal(localType As Type, pinned As Boolean) As LocalBuilder
    parameters:
    - id: localType
      type: System.Type
      description: A <xref href="System.Type" data-throw-if-not-resolved="false"></xref> object that represents the type of the local variable.
    - id: pinned
      type: System.Boolean
      description: true to pin the object in memory; otherwise, false.
    return:
      type: System.Reflection.Emit.LocalBuilder
      description: A <xref href="System.Reflection.Emit.LocalBuilder" data-throw-if-not-resolved="false"></xref> object that represents the local variable.
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>localType</em> is null. "
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The containing type has been created by the <xref href="System.Reflection.Emit.TypeBuilder.CreateType" data-throw-if-not-resolved="false"></xref> method.-or-The method body of the enclosing method has been created by the <xref href="System.Reflection.Emit.MethodBuilder.CreateMethodBody(System.Byte[],System.Int32)" data-throw-if-not-resolved="false"></xref> method. '
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: The method with which this <xref href="System.Reflection.Emit.ILGenerator" data-throw-if-not-resolved="false"></xref> is associated is not represented by a <xref href="System.Reflection.Emit.MethodBuilder" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.DefineLabel
  commentId: M:System.Reflection.Emit.ILGenerator.DefineLabel
  id: DefineLabel
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: DefineLabel()
  fullName: System.Reflection.Emit.ILGenerator.DefineLabel()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineLabel
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1110
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Declares a new label.
  syntax:
    content: public virtual Label DefineLabel()
    content.vb: Public Overridable Function DefineLabel As Label
    return:
      type: System.Reflection.Emit.Label
      description: Returns a new label that can be used as a token for branching.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  id: Emit(System.Reflection.Emit.OpCode)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 429
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the stream of instructions.
  syntax:
    content: public virtual void Emit(OpCode opcode)
    content.vb: Public Overridable Sub Emit(opcode As OpCode)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The Microsoft Intermediate Language (MSIL) instruction to be put onto the stream. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Byte)
  id: Emit(System.Reflection.Emit.OpCode,System.Byte)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Byte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 436
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  syntax:
    content: public virtual void Emit(OpCode opcode, byte arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Byte)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be put onto the stream. '
    - id: arg
      type: System.Byte
      description: 'The character argument pushed onto the stream immediately after the instruction. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Double)
  id: Emit(System.Reflection.Emit.OpCode,System.Double)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Double)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 763
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  syntax:
    content: public virtual void Emit(OpCode opcode, double arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Double)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be put onto the stream. Defined in the OpCodes enumeration. '
    - id: arg
      type: System.Double
      description: 'The numerical argument pushed onto the stream immediately after the instruction. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int16)
  id: Emit(System.Reflection.Emit.OpCode,System.Int16)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Int16)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 457
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  syntax:
    content: public virtual void Emit(OpCode opcode, short arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Short)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be emitted onto the stream. '
    - id: arg
      type: System.Int16
      description: 'The Int argument pushed onto the stream immediately after the instruction. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int32)
  id: Emit(System.Reflection.Emit.OpCode,System.Int32)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Int32)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 466
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  syntax:
    content: public virtual void Emit(OpCode opcode, int arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Integer)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be put onto the stream. '
    - id: arg
      type: System.Int32
      description: 'The numerical argument pushed onto the stream immediately after the instruction. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Int64)
  id: Emit(System.Reflection.Emit.OpCode,System.Int64)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Int64)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 739
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  syntax:
    content: public virtual void Emit(OpCode opcode, long arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Long)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be put onto the stream. '
    - id: arg
      type: System.Int64
      description: 'The numerical argument pushed onto the stream immediately after the instruction. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.ConstructorInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, ConstructorInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.ConstructorInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 668
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and metadata token for the specified constructor onto the Microsoft intermediate language (MSIL) stream of instructions.
  syntax:
    content: public virtual void Emit(OpCode opcode, ConstructorInfo con)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, con As ConstructorInfo)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be emitted onto the stream. '
    - id: con
      type: System.Reflection.ConstructorInfo
      description: 'A ConstructorInfo representing a constructor. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>con</em> is null. This exception is new in the .NET Framework 4."
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Label)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 778
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.
  syntax:
    content: public virtual void Emit(OpCode opcode, Label label)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, label As Label)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be emitted onto the stream. '
    - id: label
      type: System.Reflection.Emit.Label
      description: 'The label to which to branch from this location. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.Label[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Label[])
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 804
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream and leaves space to include a label when fixes are done.
  syntax:
    content: public virtual void Emit(OpCode opcode, Label[] labels)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, labels As Label())
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be emitted onto the stream. '
    - id: labels
      type: System.Reflection.Emit.Label[]
      description: 'The array of label objects to which to branch from this location. All of the labels will be used. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>con</em> is null. This exception is new in the .NET Framework 4."
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.Label())
  name.vb: Emit(OpCode, Label())
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.LocalBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 850
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the index of the given local variable.
  syntax:
    content: public virtual void Emit(OpCode opcode, LocalBuilder local)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, local As LocalBuilder)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be emitted onto the stream. '
    - id: local
      type: System.Reflection.Emit.LocalBuilder
      description: 'A local variable. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The parent method of the <em>local</em> parameter does not match the method associated with this <xref href="System.Reflection.Emit.ILGenerator" data-throw-if-not-resolved="false"></xref>. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>local</em> is null. "
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>opcode</em> is a single-byte instruction, and <em>local</em> represents a local variable with an index greater than Byte.MaxValue. "
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.Emit.SignatureHelper)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, SignatureHelper)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.Emit.SignatureHelper)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 633
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and a signature token onto the Microsoft intermediate language (MSIL) stream of instructions.
  syntax:
    content: public virtual void Emit(OpCode opcode, SignatureHelper signature)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, signature As SignatureHelper)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be emitted onto the stream. '
    - id: signature
      type: System.Reflection.Emit.SignatureHelper
      description: 'A helper for constructing a signature token. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>signature</em> is null. "
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.FieldInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 827
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and metadata token for the specified field onto the Microsoft intermediate language (MSIL) stream of instructions.
  syntax:
    content: public virtual void Emit(OpCode opcode, FieldInfo field)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, field As FieldInfo)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be emitted onto the stream. '
    - id: field
      type: System.Reflection.FieldInfo
      description: 'A FieldInfo representing a field. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  id: Emit(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, MethodInfo)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 474
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given method.
  syntax:
    content: public virtual void Emit(OpCode opcode, MethodInfo meth)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, meth As MethodInfo)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be emitted onto the stream. '
    - id: meth
      type: System.Reflection.MethodInfo
      description: 'A MethodInfo representing a method. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>meth</em> is null. "
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<em>meth</em> is a generic method for which the <xref href=\"System.Reflection.MethodInfo.IsGenericMethodDefinition\" data-throw-if-not-resolved=\"false\"></xref> property is false."
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.SByte)
  id: Emit(System.Reflection.Emit.OpCode,System.SByte)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, SByte)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 443
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and character argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  syntax:
    content: public void Emit(OpCode opcode, sbyte arg)
    content.vb: Public Sub Emit(opcode As OpCode, arg As SByte)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be put onto the stream. '
    - id: arg
      type: System.SByte
      description: 'The character argument pushed onto the stream immediately after the instruction. '
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Single)
  id: Emit(System.Reflection.Emit.OpCode,System.Single)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Single)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 752
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction and numerical argument onto the Microsoft intermediate language (MSIL) stream of instructions.
  syntax:
    content: public virtual void Emit(OpCode opcode, float arg)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, arg As Single)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be put onto the stream. '
    - id: arg
      type: System.Single
      description: 'The Single argument pushed onto the stream immediately after the instruction. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.String)
  id: Emit(System.Reflection.Emit.OpCode,System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, String)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 837
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given string.
  syntax:
    content: public virtual void Emit(OpCode opcode, string str)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, str As String)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be emitted onto the stream. '
    - id: str
      type: System.String
      description: 'The String to be emitted. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode,System.Type)
  id: Emit(System.Reflection.Emit.OpCode,System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: Emit(OpCode, Type)
  fullName: System.Reflection.Emit.ILGenerator.Emit(System.Reflection.Emit.OpCode, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Emit
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 712
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts the specified instruction onto the Microsoft intermediate language (MSIL) stream followed by the metadata token for the given type.
  syntax:
    content: public virtual void Emit(OpCode opcode, Type cls)
    content.vb: Public Overridable Sub Emit(opcode As OpCode, cls As Type)
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be put onto the stream. '
    - id: cls
      type: System.Type
      description: 'A Type. '
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>cls</em> is null. "
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  commentId: M:System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  id: EmitCall(System.Reflection.Emit.OpCode,System.Reflection.MethodInfo,System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitCall(OpCode, MethodInfo, Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EmitCall
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 595
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts a call or callvirt instruction onto the Microsoft intermediate language (MSIL) stream to call a varargs method.
  syntax:
    content: public virtual void EmitCall(OpCode opcode, MethodInfo methodInfo, Type[] optionalParameterTypes)
    content.vb: Public Overridable Sub EmitCall(opcode As OpCode, methodInfo As MethodInfo, optionalParameterTypes As Type())
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: The MSIL instruction to be emitted onto the stream. Must be <xref href="System.Reflection.Emit.OpCodes.Call" data-throw-if-not-resolved="false"></xref>, <xref href="System.Reflection.Emit.OpCodes.Callvirt" data-throw-if-not-resolved="false"></xref>, or <xref href="System.Reflection.Emit.OpCodes.Newobj" data-throw-if-not-resolved="false"></xref>.
    - id: methodInfo
      type: System.Reflection.MethodInfo
      description: 'The varargs method to be called. '
    - id: optionalParameterTypes
      type: System.Type[]
      description: 'The types of the optional arguments if the method is a varargs method; otherwise, null. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>opcode</em> does not specify a method call."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>methodInfo</em> is null. "
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: The calling convention for the method is not varargs, but optional parameter types are supplied. This exception is thrown in the .NET Framework versions 1.0 and 1.1, In subsequent versions, no exception is thrown.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.Emit.ILGenerator.EmitCall(System.Reflection.Emit.OpCode, System.Reflection.MethodInfo, System.Type())
  name.vb: EmitCall(OpCode, MethodInfo, Type())
- uid: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  commentId: M:System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  id: EmitCalli(System.Reflection.Emit.OpCode,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[])
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitCalli(OpCode, CallingConventions, Type, Type[], Type[])
  fullName: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EmitCalli
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 506
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Puts a <xref href="System.Reflection.Emit.OpCodes.Calli" data-throw-if-not-resolved="false"></xref> instruction onto the Microsoft intermediate language (MSIL) stream, specifying a managed calling convention for the indirect call.
  syntax:
    content: public virtual void EmitCalli(OpCode opcode, CallingConventions callingConvention, Type returnType, Type[] parameterTypes, Type[] optionalParameterTypes)
    content.vb: Public Overridable Sub EmitCalli(opcode As OpCode, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type(), optionalParameterTypes As Type())
    parameters:
    - id: opcode
      type: System.Reflection.Emit.OpCode
      description: 'The MSIL instruction to be emitted onto the stream. Must be <xref href="System.Reflection.Emit.OpCodes.Calli" data-throw-if-not-resolved="false"></xref>. '
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: 'The managed calling convention to be used. '
    - id: returnType
      type: System.Type
      description: 'The <xref href="System.Type" data-throw-if-not-resolved="false"></xref> of the result. '
    - id: parameterTypes
      type: System.Type[]
      description: 'The types of the required arguments to the instruction. '
    - id: optionalParameterTypes
      type: System.Type[]
      description: 'The types of the optional arguments for varargs calls. '
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<em>optionalParameterTypes</em> is not null, but <em>callingConvention</em> does not include the <xref href=\"System.Reflection.CallingConventions.VarArgs\" data-throw-if-not-resolved=\"false\"></xref> flag."
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.Emit.ILGenerator.EmitCalli(System.Reflection.Emit.OpCode, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type())
  name.vb: EmitCalli(OpCode, CallingConventions, Type, Type(), Type())
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  id: EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitWriteLine(LocalBuilder)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.Emit.LocalBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EmitWriteLine
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1192
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Emits the Microsoft intermediate language (MSIL) necessary to call <see cref="Overload:System.Console.WriteLine"></see> with the given local variable.
  syntax:
    content: public virtual void EmitWriteLine(LocalBuilder localBuilder)
    content.vb: Public Overridable Sub EmitWriteLine(localBuilder As LocalBuilder)
    parameters:
    - id: localBuilder
      type: System.Reflection.Emit.LocalBuilder
      description: 'The local variable whose value is to be written to the console. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'The type of <em>localBuilder</em> is <xref href="System.Reflection.Emit.TypeBuilder" data-throw-if-not-resolved="false"></xref> or <xref href="System.Reflection.Emit.EnumBuilder" data-throw-if-not-resolved="false"></xref>, which are not supported. -or-There is no overload of <see cref="Overload:System.Console.WriteLine"></see> that accepts the type of <em>localBuilder</em>. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>localBuilder</em> is null. "
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  id: EmitWriteLine(System.Reflection.FieldInfo)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitWriteLine(FieldInfo)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.Reflection.FieldInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EmitWriteLine
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1222
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Emits the Microsoft intermediate language (MSIL) necessary to call <see cref="Overload:System.Console.WriteLine"></see> with the given field.
  syntax:
    content: public virtual void EmitWriteLine(FieldInfo fld)
    content.vb: Public Overridable Sub EmitWriteLine(fld As FieldInfo)
    parameters:
    - id: fld
      type: System.Reflection.FieldInfo
      description: 'The field whose value is to be written to the console. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'There is no overload of the <see cref="Overload:System.Console.WriteLine"></see> method that accepts the type of the specified field. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>fld</em> is null. "
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The type of the field is <xref href="System.Reflection.Emit.TypeBuilder" data-throw-if-not-resolved="false"></xref> or <xref href="System.Reflection.Emit.EnumBuilder" data-throw-if-not-resolved="false"></xref>, which are not supported. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  commentId: M:System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  id: EmitWriteLine(System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EmitWriteLine(String)
  fullName: System.Reflection.Emit.ILGenerator.EmitWriteLine(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EmitWriteLine
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1181
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Emits the Microsoft intermediate language (MSIL) to call <see cref="Overload:System.Console.WriteLine"></see> with a string.
  syntax:
    content: public virtual void EmitWriteLine(string value)
    content.vb: Public Overridable Sub EmitWriteLine(value As String)
    parameters:
    - id: value
      type: System.String
      description: 'The string to be printed. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EndExceptionBlock
  commentId: M:System.Reflection.Emit.ILGenerator.EndExceptionBlock
  id: EndExceptionBlock
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EndExceptionBlock()
  fullName: System.Reflection.Emit.ILGenerator.EndExceptionBlock()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EndExceptionBlock
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 982
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Ends an exception block.
  syntax:
    content: public virtual void EndExceptionBlock()
    content.vb: Public Overridable Sub
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: 'The end exception block occurs in an unexpected place in the code stream. '
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: 'The Microsoft intermediate language (MSIL) being generated is not currently in an exception block. '
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.EndScope
  commentId: M:System.Reflection.Emit.ILGenerator.EndScope
  id: EndScope
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: EndScope()
  fullName: System.Reflection.Emit.ILGenerator.EndScope()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EndScope
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1348
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Ends a lexical scope.
  syntax:
    content: public virtual void EndScope()
    content.vb: Public Overridable Sub
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This <xref href="System.Reflection.Emit.ILGenerator" data-throw-if-not-resolved="false"></xref> belongs to a <xref href="System.Reflection.Emit.DynamicMethod" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  commentId: M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  id: MarkLabel(System.Reflection.Emit.Label)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: MarkLabel(Label)
  fullName: System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MarkLabel
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1128
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Marks the Microsoft intermediate language (MSIL) stream's current position with the given label.
  syntax:
    content: public virtual void MarkLabel(Label loc)
    content.vb: Public Overridable Sub MarkLabel(loc As Label)
    parameters:
    - id: loc
      type: System.Reflection.Emit.Label
      description: 'The label for which to set an index. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>loc</em> represents an invalid index into the label array.-or- An index for <em>loc</em> has already been defined. "
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  commentId: M:System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  id: ThrowException(System.Type)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: ThrowException(Type)
  fullName: System.Reflection.Emit.ILGenerator.ThrowException(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ThrowException
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1150
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Emits an instruction to throw an exception.
  syntax:
    content: public virtual void ThrowException(Type excType)
    content.vb: Public Overridable Sub ThrowException(excType As Type)
    parameters:
    - id: excType
      type: System.Type
      description: 'The class of the type of exception to throw. '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<em>excType</em> is not the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> class or a derived class of <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref>.-or- The type does not have a default constructor. "
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>excType</em> is null. "
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  commentId: M:System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  id: UsingNamespace(System.String)
  parent: System.Reflection.Emit.ILGenerator
  langs:
  - csharp
  - vb
  name: UsingNamespace(String)
  fullName: System.Reflection.Emit.ILGenerator.UsingNamespace(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UsingNamespace
    path: src/mscorlib/src/System/Reflection/Emit/ILGenerator.cs
    startLine: 1300
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: Specifies the namespace to be used in evaluating locals and watches for the current active lexical scope.
  syntax:
    content: public virtual void UsingNamespace(string usingNamespace)
    content.vb: Public Overridable Sub UsingNamespace(usingNamespace As String)
    parameters:
    - id: usingNamespace
      type: System.String
      description: 'The namespace to be used in evaluating locals and watches for the current active lexical scope '
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: 'Length of <em>usingNamespace</em> is zero. '
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<em>usingNamespace</em> is null. "
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: This <xref href="System.Reflection.Emit.ILGenerator" data-throw-if-not-resolved="false"></xref> belongs to a <xref href="System.Reflection.Emit.DynamicMethod" data-throw-if-not-resolved="false"></xref>.
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
- uid: System.Reflection.Emit.Label
  parent: System.Reflection.Emit
  isExternal: false
  name: Label
  fullName: System.Reflection.Emit.Label
- uid: System.Reflection.Emit.LocalBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: LocalBuilder
  fullName: System.Reflection.Emit.LocalBuilder
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Emit.OpCode
  parent: System.Reflection.Emit
  isExternal: false
  name: OpCode
  fullName: System.Reflection.Emit.OpCode
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
- uid: System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.Emit.Label[]
  isExternal: false
  name: Label[]
  fullName: System.Reflection.Emit.Label[]
  fullname.vb: System.Reflection.Emit.Label()
  name.vb: Label()
  spec.csharp:
  - uid: System.Reflection.Emit.Label
    name: Label
    fullName: System.Reflection.Emit.Label
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.Emit.Label
    name: Label
    fullName: System.Reflection.Emit.Label
  - name: ()
    fullName: ()
- uid: System.Reflection.Emit.SignatureHelper
  parent: System.Reflection.Emit
  isExternal: false
  name: SignatureHelper
  fullName: System.Reflection.Emit.SignatureHelper
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: Reflection.MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
- uid: System.Type[]
  isExternal: false
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
- uid: System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
